import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as h,e as a,n as s,g as i,d as l,f as e,r as c,o as g}from"./app-BgNevrm5.js";const m={},k={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=e(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>Updated in iOS 15</strong></p><p>On iOS, an image drawn inside a <code>NavigationLink</code> or a <code>Button</code> will almost certainly not behave as you expect: the whole image will be be covered with an opaque blue color, or whatever accent color you have in your view.</p><p>There are two ways you can fix this; which you choose depends on the behavior you want.</p><p>First, you can use the <code>renderingMode()</code> mode modifier to achieve a slightly different result:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Detail view here&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;logo&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),y={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink-1.zip",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>As an alternative, you can use the <code>buttonStyle()</code> modifier with <code>.plain</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Detail view here&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;logo&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink-2.zip",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>Or like this for plain buttons:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// your action here</span></span>
<span class="line"><span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;logo&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),N={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink-3.zip",target:"_blank",rel:"noopener noreferrer"},H=e('<div class="hint-container important"><p class="hint-container-title">Important</p><p>If you&#39;re using Xcode 12 you need to use <code>PlainButtonStyle()</code> rather than <code>.plain</code>.</p></div><p>The difference is subtle, but important: if you use a <code>Button</code> inside a <code>List</code>, using <code>buttonStyle(.plain)</code> will mean that only the space directly around the button&#39;s content can be tapped, whereas if you use <code>.renderingMode(.original)</code> then the whole cell remains tappable.</p>',2),B={class:"hint-container details"},q=n("summary",null,"Similar solutions…",-1);function L(p,I){const t=c("VPCard"),o=c("FontIcon"),r=c("VidStack");return g(),u("div",null,[n("h1",k,[n("a",w,[n("span",null,h(p.$frontmatter.title)+" 관련",1)])]),a(t,s(i({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,v,a(t,s(i({title:"How to disable the overlay color for images inside Button and NavigationLink | SwiftUI by Example",desc:"How to disable the overlay color for images inside Button and NavigationLink",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",y,[a(o,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),a(r,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink-1~dark.mp4 "}),_,n("blockquote",null,[n("p",null,[n("a",x,[a(o,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),S,n("blockquote",null,[n("p",null,[n("a",N,[a(o,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),H,n("details",B,[q,a(t,s(i({title:"Displaying a detail screen with NavigationLink | SwiftUI by Example",desc:"Displaying a detail screen with NavigationLink",link:"/hackingwithswift.com/swiftui/displaying-a-detail-screen-with-navigationlink.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(i({title:"How to fix a Form Picker or a NavigationLink that isn't tappable | SwiftUI by Example",desc:"How to fix a Form Picker or a NavigationLink that isn't tappable",link:"/hackingwithswift.com/swiftui/how-to-fix-a-form-picker-or-a-navigationlink-that-isnt-tappable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(i({title:"How to disable autocorrect in a TextField | SwiftUI by Example",desc:"How to disable autocorrect in a TextField",link:"/hackingwithswift.com/swiftui/how-to-disable-autocorrect-in-a-textfield.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(i({title:"How to disable ScrollView clipping so contents overflow | SwiftUI by Example",desc:"How to disable ScrollView clipping so contents overflow",link:"/hackingwithswift.com/swiftui/how-to-disable-scrollview-clipping-so-contents-overflow",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(i({title:"How to disable taps for a view using allowsHitTesting() | SwiftUI by Example",desc:"How to disable taps for a view using allowsHitTesting()",link:"/hackingwithswift.com/swiftui/how-to-disable-taps-for-a-view-using-allowshittesting.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const D=d(m,[["render",L],["__file","how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink.html","title":"How to disable the overlay color for images inside Button and NavigationLink","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to disable the overlay color for images inside Button and NavigationLink","description":"Article(s) > How to disable the overlay color for images inside Button and NavigationLink","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to disable the overlay color for images inside Button and NavigationLink"},{"property":"og:description","content":"How to disable the overlay color for images inside Button and NavigationLink"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to disable the overlay color for images inside Button and NavigationLink"}],["meta",{"property":"og:description","content":"Article(s) > How to disable the overlay color for images inside Button and NavigationLink"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to disable the overlay color for images inside Button and NavigationLink\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.28,"words":684},"filePathRelative":"hackingwithswift.com/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink.md","excerpt":"\\n"}');export{D as comp,E as data};
