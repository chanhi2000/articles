import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as a,n as t,g as o,d as s,w as m,a as g,f as p,r as c,o as h}from"./app-BgNevrm5.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),_=n("blockquote",null,[n("p",null,"Available from Swift 6.0")],-1),S=p(`<p>As a reminder, noncopyable types allow us to create types that have unique ownership, which we can pass around using borrowing or consuming as needed.</p><p>One example of noncopyable types I previously used were the secret messages used in the Mission Impossible movies – they famously self-destruct after being read, which we can model with a noncopyable type that is consumed (i.e. destroyed) upon reading:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token punctuation">:</span> <span class="token operator">~</span><span class="token class-name">Copyable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> agent<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>agent<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>agent <span class="token operator">=</span> agent</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    consuming <span class="token keyword">func</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">agent</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">message</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>agent<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Ethan Hunt&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;You need to abseil down a skyscraper for some reason.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code, the compiler enforces that <code>message.read()</code> can only ever be called once, because it consumes the object.</p>`,4),C={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0427-noncopyable-generics.md",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"apple/swift-evolution",-1),x=n("code",null,"Copyable",-1),I=n("code",null,"~Copyable",-1),A=p("<p>This impacts on the other changes introduced with this proposal. For example, noncopyable types can now be used with generics, allowing things like <em>optional</em> noncopyable instances because Swift&#39;s <code>Optional</code> is implemented as a generic enum. However, because generic type parameters automatically conform to <code>Copyable</code> we must explicitly opt out using <code>~Copyable</code>.</p><p>Similarly, this change means noncopyable types can now conform to protocols, but only when those protocols are also marked <code>~Copyable</code> because otherwise they get automatically opted into <code>Copyable</code> as mentioned above. (In case you were curious, <code>Copyable</code> types can conform to noncopyable protocols just fine.)</p>",2),E={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0429-partial-consumption.md",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"apple/swift-evolution",-1),P={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0429-partial-consumption.md",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"apple/swift-evolution",-1),T=p(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Package</span><span class="token punctuation">:</span> <span class="token operator">~</span><span class="token class-name">Copyable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> from<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;IMF&quot;</span></span></span>
<span class="line">    <span class="token keyword">var</span> message<span class="token punctuation">:</span> <span class="token class-name">Message</span></span>
<span class="line"></span>
<span class="line">    consuming <span class="token keyword">func</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code is now valid Swift, as long as the types in question don&#39;t have deinitializers.</p>`,2),N={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0432-noncopyable-switch.md",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"apple/swift-evolution",-1),j=n("code",null,"where",-1),R=p(`<p>Continuing our Mission Impossible example, we could say that one set of orders might be signed or anonymous, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">ImpossibleOrder</span><span class="token punctuation">:</span> <span class="token operator">~</span><span class="token class-name">Copyable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">signed</span><span class="token punctuation">(</span><span class="token class-name">Package</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because that enum has associated values that are noncopyable, it must itself be noncopyable. However, the associated values being noncopyable also means that pattern matching with <code>where</code> was tricky – if you wanted to perform one set of actions for one <code>Message</code> type, and a different set for another <code>Message</code> type, you were out of luck.</p>`,3),V={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0432-noncopyable-switch.md",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"apple/swift-evolution",-1),H=p(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">issueOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>agent<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Ethan Hunt&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;You need to abseil down a skyscraper for some reason.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token class-name">ImpossibleOrder</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span> consume order <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">signed</span><span class="token punctuation">(</span><span class="token keyword">let</span> package<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        package<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token keyword">let</span> message<span class="token punctuation">)</span> <span class="token keyword">where</span> message<span class="token punctuation">.</span>agent <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Ethan Hunt&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Play dramatic music&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token keyword">let</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Put together, this collection of changes helps make noncopyable types work much more naturally in Swift.</p>`,2),F={class:"hint-container details"},z=n("summary",null,"Other Changes in Swift 6.0",-1),K={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-10-to-6-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function W(l,D){const e=c("VPCard"),r=c("RouteLink"),i=c("FontIcon");return h(),d("div",null,[n("h1",w,[n("a",b,[n("span",null,k(l.$frontmatter.title)+" 관련",1)])]),a(e,t(o({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,y,a(e,t(o({title:"Upgrades for noncopyable types | Changes in Swift 6.0",desc:"Upgrades for noncopyable types",link:"https://hackingwithswift.com/swift/6.0/noncopyable-upgrades",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,n("p",null,[s("Noncopyable types were "),a(r,{to:"/hackingwithswift.com/swift/5.9/noncopyable-structs-and-enums.html"},{default:m(()=>[s("introduced in Swift 5.9")]),_:1}),s(", but are getting several upgrades in Swift 6.")]),S,n("p",null,[s("The first major improvement is "),n("a",C,[s("SE-0427 ("),a(i,{icon:"iconfont icon-github"}),q,s(")")]),s(", which introduces a batch of improvements at once. The biggest of those is that every struct, class, enum, generic type parameter, and protocol in Swift 6 automatically conforms to a new "),x,s(" protocol unless you explicitly opt out using "),I,s(".")]),A,n("p",null,[n("a",E,[s("SE-0429 ("),a(i,{icon:"iconfont icon-github"}),M,s(")")]),s(" improves things further by adding partial consumption of noncopyable values.")]),n("p",null,[s("Previously it could be a problem when one noncopyable type incorporated another. For example, even fairly trivial code like the below was a problem before "),n("a",P,[s("SE-0429 ("),a(i,{icon:"iconfont icon-github"}),U,s(")")]),s(":")]),T,n("p",null,[s("A third major noncopyable improvement is "),n("a",N,[s("SE-0432 ("),a(i,{icon:"iconfont icon-github"}),O,s(")")]),s(", which allows us to borrow noncopyable types while switching over them. Previously it was impossible to do pattern matching with "),j,s(" clauses that depended on noncopyable values, whereas thanks to SE-0432 this is now possible in Swift 6.")]),R,n("p",null,[s("With "),n("a",V,[s("SE-0432 ("),a(i,{icon:"iconfont icon-github"}),B,s(")")]),s(" this is now resolved, meaning code like the below is now allowed:")]),H,n("details",F,[z,a(e,t(o({title:"Complete concurrency enabled by default | Changes in Swift 6.0",desc:"Complete concurrency enabled by default",link:"/hackingwithswift.com/swift/6.0/concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"count(where:) | Changes in Swift 6.0",desc:"count(where:)",link:"/hackingwithswift.com/swift/6.0/count-where.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Typed throws | Changes in Swift 6.0",desc:"Typed throws",link:"/hackingwithswift.com/swift/6.0/typed-throws.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Pack iteration | Changes in Swift 6.0",desc:"Pack iteration",link:"/hackingwithswift.com/swift/6.0/pack-iteration.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Add Collection Operations on Noncontiguous Elements | Changes in Swift 6.0",desc:"Add Collection Operations on Noncontiguous Elements",link:"/hackingwithswift.com/swift/6.0/rangeset.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Access-level modifiers on import declarations | Changes in Swift 6.0",desc:"Access-level modifiers on import declarations",link:"/hackingwithswift.com/swift/6.0/access-level-import.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g(` 
\`\`\`component VPCard
{
  "title": "Upgrades for noncopyable types | Changes in Swift 6.0",
  "desc": "Upgrades for noncopyable types",
  "link": "/hackingwithswift.com/swift/6.0/noncopyable-upgrades.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
 `),a(e,t(o({title:"128-bit Integer Types | Changes in Swift 6.0",desc:"128-bit Integer Types",link:"/hackingwithswift.com/swift/6.0/int128.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"BitwiseCopyable | Changes in Swift 6.0",desc:"BitwiseCopyable",link:"/hackingwithswift.com/swift/6.0/bitwisecopyable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",K,[a(i,{icon:"fas fa-file-zipper"}),s("Download Swift 6.0 playground")])])])])}const G=u(f,[["render",W],["__file","noncopyable-upgrades.html.vue"]]),J=JSON.parse('{"path":"/hackingwithswift.com/swift/6.0/noncopyable-upgrades.html","title":"Upgrades for noncopyable types","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Upgrades for noncopyable types","description":"Article(s) > Upgrades for noncopyable types","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-6.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Upgrades for noncopyable types"},{"property":"og:description","content":"Upgrades for noncopyable types"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/6.0/noncopyable-upgrades.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/6.0/noncopyable-upgrades.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Upgrades for noncopyable types"}],["meta",{"property":"og:description","content":"Article(s) > Upgrades for noncopyable types"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-6.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Upgrades for noncopyable types\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.41,"words":1022},"filePathRelative":"hackingwithswift.com/swift/6.0/noncopyable-upgrades.md","excerpt":"\\n"}');export{G as comp,J as data};
