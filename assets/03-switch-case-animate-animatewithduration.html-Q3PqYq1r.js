import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as r,e as a,n as t,g as s,f as d,r as i,o as u}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),b=d(`<p>The <code>currentAnimation</code> property can have a value between 0 and 7, each one triggering a different animation. We&#39;re going to create a big <code>switch/case</code> block inside <code>tapped()</code>, but we&#39;re going to start small and work our way up ‚Äì the <code>default</code> case will handle any values we don&#39;t explicitly catch.</p><p>This switch/case statement is going to go inside a new method of the <code>UIView</code> class called <code>animate(withDuration:)</code>, which is a kind of method you haven&#39;t seen before because it actually accepts two closures. The parameters we&#39;ll be using are how long to animate for, how long to pause before the animation starts, any options you want to provide, what animations to execute, and finally a closure that will execute when the animation finishes.</p><p>Update your <code>tapped()</code> method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function-definition function">tapped</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> sender<span class="token punctuation">:</span> <span class="token class-name">UIButton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sender<span class="token punctuation">.</span>isHidden <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> delay<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">       animations<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token keyword">self</span><span class="token punctuation">.</span>currentAnimation <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token label important"></span>
<span class="line"></span>
<span class="line">        default</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> finished <span class="token keyword">in</span></span>
<span class="line">        sender<span class="token punctuation">.</span>isHidden <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    currentAnimation <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> currentAnimation <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token punctuation">{</span></span>
<span class="line">        currentAnimation <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Because we want to show and hide the ‚ÄúTap‚Äù button, we need to make the <code>sender</code> parameter to that method be a <code>UIButton</code> rather than <code>Any</code>.</p></div><p>All that code won&#39;t do anything yet, which is remarkable given that it&#39;s quite a lot! However, it has put us in a position where we can start dabbling with animations. But first, here&#39;s a breakdown of the code:</p><ul><li>When the method begins, we hide the <code>sender</code> button so that our animations don&#39;t collide; it gets unhidden in the completion closure of the animation.</li><li>We call <code>animate(withDuration:)</code> with a duration of 1 second, no delay, and no interesting options.</li><li>For the <code>animations</code> closure we <em>don‚Äôt</em> need to use <code>[weak self]</code> because there‚Äôs no risk of strong reference cycles here ‚Äì the closures passed to <code>animate(withDuration:)</code> method will be used once then thrown away.</li><li>We switch using the value of <code>self.currentAnimation</code>. We need to use <code>self</code> to make the closure capture clear, remember. This <code>switch/case</code> does nothing yet, because both possible cases just call <code>break</code>.</li><li>We use trailing closure syntax to provide our completion closure. This will be called when the animation completes, and its <code>finished</code> value will be true if the animations completed fully.</li><li>As I said, the completion closure unhides the <code>sender</code> button so it can be tapped again.</li><li>After the <code>animate(withDuration:)</code> call, we have the old code to modify and wrap <code>currentAnimation</code>.</li></ul><p>If you run the app now and tap the button, you&#39;ll notice it doesn&#39;t actually hide and show as you might expect. This is because UIKit detects that no animation has taken place, so it calls the completion closure straight away.</p>`,8);function f(o,v){const e=i("VPCard"),c=i("VidStack");return u(),p("div",null,[n("h1",m,[n("a",w,[n("span",null,r(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(e,t(s({title:"Hacking with iOS ‚Äì learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,g,a(e,t(s({title:"Switch, case, animate: animate(withDuration:) | Hacking with iOS",desc:"Switch, case, animate: animate(withDuration:)",link:"https://hackingwithswift.com/read/15/3/switch-case-animate-animatewithduration",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),a(c,{src:"youtube/nrp6SZWbRlY"}),b])}const S=l(h,[["render",f],["__file","03-switch-case-animate-animatewithduration.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/read/15/03-switch-case-animate-animatewithduration.html","title":"Switch, case, animate: animate(withDuration:)","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Switch, case, animate: animate(withDuration:)","description":"Article(s) > Switch, case, animate: animate(withDuration:)","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Switch, case, animate: animate(withDuration:)"},{"property":"og:description","content":"Switch, case, animate: animate(withDuration:)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/15/03-switch-case-animate-animatewithduration.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/15/03-switch-case-animate-animatewithduration.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Switch, case, animate: animate(withDuration:)"}],["meta",{"property":"og:description","content":"Article(s) > Switch, case, animate: animate(withDuration:)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Switch, case, animate: animate(withDuration:)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2,"words":599},"filePathRelative":"hackingwithswift.com/read/15/03-switch-case-animate-animatewithduration.md","excerpt":"\\n"}');export{S as comp,A as data};
