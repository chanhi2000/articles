import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as l,e as s,n as e,g as t,f as c,r,o as u}from"./app-BgNevrm5.js";const d={},h={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),w=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>One-to-one relationships mean that every X object has exactly one Y object attached to it, for example saying that every person has exactly one passport, or each pet has exactly one owner.</p><p>Although one-to-one relationships are possible with SwiftData, they are fairly rare, mostly because they are rare in real life – both of the two examples I just gave might seem reasonable at first, but if you think them through they fall apart pretty fast:</p><ul><li>Many people have more than one passport because they are citizens of more than one country, or have no passport because they don’t travel.</li><li>While it’s true that most pets have exactly one owner, a true one-to-one relationship means that each owner must have exactly one pet, which is clearly nonsense.</li></ul><p>In practice, we mostly use one-to-one relationships in two places:</p><ol><li>We’re splitting up our data to reduce redundancy or keep or code better organized, because writing <code>country.capitalCity.name</code> is simpler and easier than having one giant <code>Country</code> model that duplicates all the properties of a separate <code>City</code> model.</li><li>We’re really trying to model an <em>optional</em> one-to-one relationship, i.e. zero-to-one: there might be exactly one piece of matching piece of data, but there also might be nothing at all. For example, a Mastodon user might have an <code>image</code> property set as their profile page header image, but it’s not required.</li></ol><p>From a coding perspective, Swift requires that we declare one-to-one relationships as zero-to-one, even if they will never actually be zero-to-one. This is a simple fact of coding: if we try to make both properties non-optional, then we have a tortoise-and-hare problem where we can’t create one without creating the other first.</p><p>For example, if we had <code>Country</code> and <code>City</code> models with a true one-to-one relationship between them, then to create a <code>City</code> we’d need to specify which <code>Country</code> it belongs to, but to create a <code>Country</code> we’d need to specify its <code>capitalCity</code> property.</p><p>So, to be able to create your objects and have SwiftData infer the relationship correctly, you should always make both sides of the relationship optional like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> capitalCity<span class="token punctuation">:</span> <span class="token class-name">City</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> capitalCity<span class="token punctuation">:</span> <span class="token class-name">City</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>capitalCity <span class="token operator">=</span> capitalCity</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> latitude<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line">    <span class="token keyword">var</span> longitude<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line">    <span class="token keyword">var</span> country<span class="token punctuation">:</span> <span class="token class-name">Country</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> latitude<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">,</span> longitude<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">,</span> country<span class="token punctuation">:</span> <span class="token class-name">Country</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>latitude <span class="token operator">=</span> latitude</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>longitude <span class="token operator">=</span> longitude</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With this approach our code becomes possible:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> country <span class="token operator">=</span> <span class="token class-name">Country</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;England&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> city <span class="token operator">=</span> <span class="token class-name">City</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;London&quot;</span></span><span class="token punctuation">,</span> latitude<span class="token punctuation">:</span> <span class="token number">51.507222</span><span class="token punctuation">,</span> longitude<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">0.1275</span><span class="token punctuation">,</span> country<span class="token punctuation">:</span> country<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Don’t try to insert both the <code>city</code> <em>and</em> <code>country</code> objects – inserting one automatically inserts the other because the two have a relationship, and in fact trying to insert them both is likely to throw up a fatal error with the message, “Duplicate registration attempt for object”.</p></div>`,13);function g(o,v){const a=r("VPCard");return u(),p("div",null,[n("h1",h,[n("a",m,[n("span",null,l(o.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,y,s(a,e(t({title:"How to create one-to-one relationships | SwiftData by Example",desc:"How to create one-to-one relationships",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-create-one-to-one-relationships",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const C=i(d,[["render",g],["__file","how-to-create-one-to-one-relationships.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-create-one-to-one-relationships.html","title":"How to create one-to-one relationships","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create one-to-one relationships","description":"Article(s) > How to create one-to-one relationships","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create one-to-one relationships"},{"property":"og:description","content":"How to create one-to-one relationships"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-one-to-one-relationships.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-one-to-one-relationships.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create one-to-one relationships"}],["meta",{"property":"og:description","content":"Article(s) > How to create one-to-one relationships"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create one-to-one relationships\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.17,"words":650},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-create-one-to-one-relationships.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{C as comp,_ as data};
