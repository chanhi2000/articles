import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as r,e as a,n as e,g as p,d as s,f as d,r as o,o as k}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),g=d(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData and SwiftUI combine to make document-based apps work with almost no extra work from us. Behind the scenes, SwiftData silently creates separate storage for each new document along with any associated files used in your data models, and SwiftUI takes care of presenting the document browser then opening files the user selects.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Unlike regular SwiftUI document-based apps, SwiftData-backed apps don&#39;t use the concept of a single document object. Instead, you use <code>@Query</code> and similar to read collections of data, so</p></div><p>unless you write some code to load a document singleton manually you&#39;ll need to use collection-based data.</p><p>A simple example of this might be an app to track feedback reports for iOS apps you&#39;ve built in the past. Each app would be its own document, and inside there would be a collection of bugs, suggestions, ideas, and more for that app.</p><p>To create this in SwiftData we&#39;d start by defining a model such as this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">FeedbackReport</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> priority<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> priority<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next you&#39;d build one SwiftUI view to edit your data, and another to show your data.</p><p>To follow our <code>FeedbackReport</code> example, an editing view might look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">EditReportView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Bindable</span> <span class="token keyword">var</span> report<span class="token punctuation">:</span> <span class="token class-name">FeedbackReport</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Issue title&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $report<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Issue description&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $report<span class="token punctuation">.</span>content<span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Priority&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $report<span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Low&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Medium&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;High&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Edit Report&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And a view to list all reports might look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">FeedbackReport</span><span class="token punctuation">.</span>priority<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span> <span class="token keyword">var</span> reports<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">FeedbackReport</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext</span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> navigationPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">FeedbackReport</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> $navigationPath<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>reports<span class="token punctuation">)</span> <span class="token punctuation">{</span> report <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> report<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span>report<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span>report<span class="token punctuation">.</span>content<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">lineLimit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Feedback Assistant&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">FeedbackReport</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token class-name">EditReportView</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New report&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;plus&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> createNew<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">createNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> report <span class="token operator">=</span> <span class="token class-name">FeedbackReport</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> priority<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>report<span class="token punctuation">)</span></span>
<span class="line">        navigationPath <span class="token operator">=</span> <span class="token punctuation">[</span>report<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So far this is a regular SwiftData app, and if you only wanted to have a single store for all your feedback reports then you&#39;d be done.</p><p>However, with a few small changes we can make this into a document-based app.</p><p>First, you need to go to the Info tab for your target and add an entry under Exported Type Identifiers. For this project I would use the following values:</p><ul><li><strong>Description</strong>: Feedback report</li><li><strong>Identifier</strong>: <code>com.yoursite.feedbackreport</code></li><li><strong>Conforms To</strong>: <code>com.apple.package</code></li><li><strong>Extension</strong>: feedback</li></ul><div class="hint-container important"><p class="hint-container-title">Important</p><p>All of those are customizable to fit your app&#39;s needs, apart from the &quot;Conforms To&quot; value, which must always be &quot;com.apple.package&quot;.</p></div><p>Second, you need to add an entry to the list of custom target properties. This means right-clicking on an existing row and selecting Add Row, then using that new row to see Supports Document Browser to YES.</p><p>Third, you need to create a custom <code>UTType</code> object using the same identifier you just declared for your target. Something like this is enough:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">UniformTypeIdentifiers</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">UTType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> feedbackReport <span class="token operator">=</span> <span class="token class-name">UTType</span><span class="token punctuation">(</span>exportedAs<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;com.yoursite.feedbackreport&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And finally, you need to edit your <code>App</code> struct to replace this line of code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With a <code>DocumentGroup</code> like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">DocumentGroup</span><span class="token punctuation">(</span>editing<span class="token punctuation">:</span> <span class="token class-name">FeedbackReport</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> contentType<span class="token punctuation">:</span> <span class="token punctuation">.</span>feedbackReport<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>You must <em>not</em> use the <code>modelContainer()</code> modifier when working with a SwiftData document-based app.</p></div>`,25),f=n("code",null,"[+]",-1),y=n("p",null,[s("As I said earlier, SwiftData silently creates separate storage for each new document along with any associated files used in your data models, meaning that if you use "),n("code",null,"@Attribute(.externalStorage)"),s(` on any of your model properties those external files will be stored in your document. This is why it's so important to conform to "com.apple.package" – your "document" is really a directory of data containing the underlying SQLite database and all its external files.`)],-1);function S(i,x){const t=o("VPCard"),c=o("FontIcon");return k(),u("div",null,[n("h1",v,[n("a",h,[n("span",null,r(i.$frontmatter.title)+" 관련",1)])]),a(t,e(p({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,b,a(t,e(p({title:"How to create a document-based app with SwiftData | SwiftData by Example",desc:"How to create a document-based app with SwiftData",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-create-a-document-based-app-with-swiftdata",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("p",null,[s("With those four changes done the app is fully upgraded to work with documents. Next time you run it you'll see the app launches straight to the standard document browser interface, where you can press "),a(c,{icon:"iconfont icon-select"}),f,s(" to create a new document, then create reports inside there.")]),y])}const _=l(m,[["render",S],["__file","how-to-create-a-document-based-app-with-swiftdata.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-create-a-document-based-app-with-swiftdata.html","title":"How to create a document-based app with SwiftData","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create a document-based app with SwiftData","description":"Article(s) > How to create a document-based app with SwiftData","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create a document-based app with SwiftData"},{"property":"og:description","content":"How to create a document-based app with SwiftData"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-a-document-based-app-with-swiftdata.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-a-document-based-app-with-swiftdata.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create a document-based app with SwiftData"}],["meta",{"property":"og:description","content":"Article(s) > How to create a document-based app with SwiftData"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create a document-based app with SwiftData\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.87,"words":860},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-create-a-document-based-app-with-swiftdata.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{_ as comp,D as data};
