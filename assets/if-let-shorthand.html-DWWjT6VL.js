import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as u,e as n,n as a,g as i,d as e,a as d,f as h,r as l,o as g}from"./app-BgNevrm5.js";const f={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},w=s("nav",{class:"table-of-contents"},[s("ul")],-1),v=s("hr",null,null,-1),b=s("blockquote",null,[s("p",null,"Available from Swift 5.7")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0345-if-let-shorthand.md",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"apple/swift-evolution",-1),S=s("code",null,"if let",-1),C=s("code",null,"guard let",-1),x=h(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Linda&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> name <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Whereas previously we would have written code more like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> name <span class="token operator">=</span> name <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> unwrappedName <span class="token operator">=</span> name <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">unwrappedName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This change <em>doesn’t</em> extend to properties inside objects, which means code like this will <em>not</em> work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Linda&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> user<span class="token punctuation">.</span>name <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q={class:"hint-container details"},I=s("summary",null,"Other Changes in Swift 5.7",-1),N={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-6-to-5-7.playground.zip",target:"_blank",rel:"noopener noreferrer"};function A(c,P){const t=l("VPCard"),o=l("FontIcon");return g(),r("div",null,[s("h1",m,[s("a",k,[s("span",null,u(c.$frontmatter.title)+" 관련",1)])]),n(t,a(i({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,v,n(t,a(i({title:"if let shorthand for unwrapping optionals | Changes in Swift 5.7",desc:"if let shorthand for unwrapping optionals",link:"https://hackingwithswift.com/swift/5.7/if-let-shorthand",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,s("p",null,[s("a",y,[e("SE-0345 "),n(o,{icon:"iconfont icon-github"}),_]),e(" introduces new shorthand syntax for unwrapping optionals into shadowed variables of the same name using "),S,e(" and "),C,e(". This means we can now write code like this:")]),x,s("details",q,[I,d(` 
\`\`\`component VPCard
{
  "title": "if let shorthand for unwrapping optionals | Changes in Swift 5.7",
  "desc": "if let shorthand for unwrapping optionals",
  "link": "/hackingwithswift.com/swift/5.7/if-let-shorthand.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(t,a(i({title:"Multi-statement closure type inference | Changes in Swift 5.7",desc:"Multi-statement closure type inference",link:"/hackingwithswift.com/swift/5.7/multi-statement-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Clock, Instant, and Duration | Changes in Swift 5.7",desc:"Clock, Instant, and Duration",link:"/hackingwithswift.com/swift/5.7/clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Regular expressions | Changes in Swift 5.7",desc:"Regular expressions",link:"/hackingwithswift.com/swift/5.7/regexes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Type inference from default expressions | Changes in Swift 5.7",desc:"Type inference from default expressions",link:"/hackingwithswift.com/swift/5.7/default-type-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Concurrency in top-level code | Changes in Swift 5.7",desc:"Concurrency in top-level code",link:"/hackingwithswift.com/swift/5.7/top-level-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Opaque parameter declarations | Changes in Swift 5.7",desc:"Opaque parameter declarations",link:"/hackingwithswift.com/swift/5.7/opaque-parameter-declarations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Structural opaque result types | Changes in Swift 5.7",desc:"Structural opaque result types",link:"/hackingwithswift.com/swift/5.7/structural-opaque-result-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Unlock existentials for all protocols | Changes in Swift 5.7",desc:"Unlock existentials for all protocols",link:"/hackingwithswift.com/swift/5.7/unlock-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Lightweight same-type requirements for primary associated types | Changes in Swift 5.7",desc:"Lightweight same-type requirements for primary associated types",link:"/hackingwithswift.com/swift/5.7/primary-associated-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Constrained existential types | Changes in Swift 5.7",desc:"Constrained existential types",link:"/hackingwithswift.com/swift/5.7/constrained-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Distributed actor isolation | Changes in Swift 5.7",desc:"Distributed actor isolation",link:"/hackingwithswift.com/swift/5.7/distributed-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"buildPartialBlock for result builders | Changes in Swift 5.7",desc:"buildPartialBlock for result builders",link:"/hackingwithswift.com/swift/5.7/buildpartialblock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Implicitly opened existentials | Changes in Swift 5.7",desc:"Implicitly opened existentials",link:"/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(i({title:"Unavailable from async attribute | Changes in Swift 5.7",desc:"Unavailable from async attribute",link:"/hackingwithswift.com/swift/5.7/noasync.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s("p",null,[s("a",N,[n(o,{icon:"fas fa-file-zipper"}),e("Download Swift 5.7 playground")])])])])}const V=p(f,[["render",A],["__file","if-let-shorthand.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swift/5.7/if-let-shorthand.html","title":"if let shorthand for unwrapping optionals","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"if let shorthand for unwrapping optionals","description":"Article(s) > if let shorthand for unwrapping optionals","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.7"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > if let shorthand for unwrapping optionals"},{"property":"og:description","content":"if let shorthand for unwrapping optionals"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/if-let-shorthand.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/if-let-shorthand.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"if let shorthand for unwrapping optionals"}],["meta",{"property":"og:description","content":"Article(s) > if let shorthand for unwrapping optionals"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.7"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"if let shorthand for unwrapping optionals\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swift/5.8/collection-downcasts.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.34,"words":703},"filePathRelative":"hackingwithswift.com/swift/5.7/if-let-shorthand.md","excerpt":"\\n"}');export{V as comp,D as data};
