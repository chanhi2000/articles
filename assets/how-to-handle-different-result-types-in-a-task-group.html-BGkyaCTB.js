import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as s,t as r,e as n,n as e,g as t,d as p,f as k,r as o,o as d}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},g=s("nav",{class:"table-of-contents"},[s("ul")],-1),w=s("hr",null,null,-1),f=k(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Each task in a Swift task group must return the same type of data as all the other tasks in the group, which is often problematic – what if you need one task group to handle several different types of data?</p><p>In this situation you should consider using <code>async let</code> for your concurrency if you can, because every <code>async let</code> expression can return its own unique data type. So, the first might result in an array of strings, the second in an integer, and so on, and once you’ve awaited them all you can use them however you please.</p><p>However, if you <em>need</em> to use task groups – for example if you need to create your tasks in a loop – then there is a solution: create an enum with associated values that wrap the underlying data you want to return. Using this approach, each of the tasks in your group still return a single data type – one of the cases from your enum – but <em>inside</em> those cases you can place the unique data types you’re actually using.</p><p>This is best demonstrated with some example code, but because it’s quite a lot I’m going to add inline comments so you can see what’s going on:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// A struct we can decode from JSON, storing one message from a contact.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> from<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A user, containing their name, favorites list, and messages array.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> favorites<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token keyword">let</span> messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Message</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A single enum we&#39;ll be using for our tasks, each containing a different associated value.</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">FetchResult</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">username</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">favorites</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">messages</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Message</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">loadUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Each of our tasks will return one FetchResult, and the whole group will send back a User.</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">withThrowingTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">FetchResult</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token operator">-&gt;</span> <span class="token class-name">User</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token comment">// Fetch our username string</span></span>
<span class="line">        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/username.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Send back FetchResult.username, placing the string inside.</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Fetch our favorites set</span></span>
<span class="line">        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/user-favorites.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Send back FetchResult.favorites, placing the set inside.</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">favorites</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Fetch our messages array</span></span>
<span class="line">        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/user-messages.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Message</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Send back FetchResult.messages, placing the message array inside</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// At this point we&#39;ve started all our tasks,</span></span>
<span class="line">        <span class="token comment">// so now we need to stitch them together into</span></span>
<span class="line">        <span class="token comment">// a single User instance. First, we set</span></span>
<span class="line">        <span class="token comment">// up some default values:</span></span>
<span class="line">        <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line">        <span class="token keyword">var</span> favorites <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">var</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Message</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Now we read out each value, figure out </span></span>
<span class="line">        <span class="token comment">// which case it represents, and copy its</span></span>
<span class="line">        <span class="token comment">// associated value into the right variable.</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> value <span class="token keyword">in</span> group <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">switch</span> value <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token keyword">let</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                    username <span class="token operator">=</span> value</span>
<span class="line">                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">favorites</span><span class="token punctuation">(</span><span class="token keyword">let</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                    favorites <span class="token operator">=</span> value</span>
<span class="line">                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token keyword">let</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                    messages <span class="token operator">=</span> value</span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// If any of the fetches went wrong, we might</span></span>
<span class="line">            <span class="token comment">// at least have partial data we can send back.</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fetch at least partially failed; sending back what we have so far. </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Send back our user, either filled with</span></span>
<span class="line">        <span class="token comment">// default values or using the data we</span></span>
<span class="line">        <span class="token comment">// fetched from the server.</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> username<span class="token punctuation">,</span> favorites<span class="token punctuation">:</span> favorites<span class="token punctuation">,</span> messages<span class="token punctuation">:</span> messages<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Now do something with the finished user data.</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> has </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> messages and </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>favorites<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> favorites.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">loadUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),y={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-handle-different-result-types-in-a-task-group-1.zip",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"I know it’s a lot of code, but really it boils down to two things:",-1),_=s("ol",null,[s("li",null,"Creating an enum with one case for each type of data you’re expecting, with each case having an associated value of that type."),s("li",null,[p("Reading the results from your group’s tasks using a "),s("code",null,"switch"),p(" block that reads each case from your enum, extracts the associated value inside, and acts on it appropriately.")])],-1),S=s("p",null,"So, it’s not impossible to handle heterogeneous results in a task group, it just requires a little extra thinking.",-1),x={class:"hint-container details"},R=s("summary",null,"Similar solutions…",-1);function H(c,q){const a=o("VPCard"),l=o("FontIcon");return d(),u("div",null,[s("h1",v,[s("a",h,[s("span",null,r(c.$frontmatter.title)+" 관련",1)])]),n(a,e(t({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,w,n(a,e(t({title:"How to handle different result types in a task group | Swift Concurrency by Example",desc:"How to handle different result types in a task group",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-handle-different-result-types-in-a-task-group",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,s("blockquote",null,[s("p",null,[s("a",y,[n(l,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),b,_,S,s("details",x,[R,n(a,e(t({title:"How to cancel a task group | Swift Concurrency by Example",desc:"How to cancel a task group",link:"/hackingwithswift.com/concurrency/how-to-cancel-a-task-group.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"How to create a task group and add tasks to it | Swift Concurrency by Example",desc:"How to create a task group and add tasks to it",link:"/hackingwithswift.com/concurrency/how-to-create-a-task-group-and-add-tasks-to-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"How to get a Result from a task | Swift Concurrency by Example",desc:"How to get a Result from a task",link:"/hackingwithswift.com/concurrency/how-to-get-a-result-from-a-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"What’s the difference between a task and a detached task? | Swift Concurrency by Example",desc:"What’s the difference between a task and a detached task?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-a-task-and-a-detached-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"How to create and use task local values | Swift Concurrency by Example",desc:"How to create and use task local values",link:"/hackingwithswift.com/concurrency/how-to-create-and-use-task-local-values.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const F=i(m,[["render",H],["__file","how-to-handle-different-result-types-in-a-task-group.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-handle-different-result-types-in-a-task-group.html","title":"How to handle different result types in a task group","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to handle different result types in a task group","description":"Article(s) > How to handle different result types in a task group","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to handle different result types in a task group"},{"property":"og:description","content":"How to handle different result types in a task group"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-handle-different-result-types-in-a-task-group.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-handle-different-result-types-in-a-task-group.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to handle different result types in a task group"}],["meta",{"property":"og:description","content":"Article(s) > How to handle different result types in a task group"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to handle different result types in a task group\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.75,"words":1125},"filePathRelative":"hackingwithswift.com/concurrency/how-to-handle-different-result-types-in-a-task-group.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{F as comp,A as data};
