import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as t,g as i,w as d,f as h,r as a,o as k,d as m}from"./app-BgNevrm5.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},b=n("hr",null,null,-1),y=h(`<p>Enumerations – usually just called “enum” and pronounced “ee-num” - are a way for you to define your own kind of value in Swift. In some programming languages they are simple little things, but Swift adds a huge amount of power to them if you want to go beyond the basics.</p><p>Let&#39;s start with a simple example from earlier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> weather <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;sunny&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hate&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That function accepts a string that defines the current weather. The problem is, a string is a poor choice for that kind of data – is it “rain”, “rainy” or “raining”? Or perhaps “showering”, “drizzly” or “stormy”? Worse, what if one person writes “Rain” with an uppercase R and someone else writes “Ran” because they weren&#39;t looking at what they typed?</p><p>Enums solve this problem by letting you define a new data type, then define the possible values it can hold. For example, we might say there are five kinds of weather: sun, cloud, rain, wind and snow. If we make this an enum, it means Swift will accept only those five values – anything else will trigger an error. And behind the scenes enums are usually just simple numbers, which are a lot faster than strings for computers to work with.</p><p>Let&#39;s put that into code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">WeatherType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> sun<span class="token punctuation">,</span> cloud<span class="token punctuation">,</span> rain<span class="token punctuation">,</span> wind<span class="token punctuation">,</span> snow</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token class-name">WeatherType</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> weather <span class="token operator">==</span> <span class="token class-name">WeatherType</span><span class="token punctuation">.</span>sun <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hate&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token class-name">WeatherType</span><span class="token punctuation">.</span>cloud<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Take a look at the first three lines: line 1 gives our type a name, <code>WeatherType</code>. This is what you&#39;ll use in place of <code>String</code> or <code>Int</code> in your code. Line 2 defines the five possible cases our enum can be, as I already outlined. Convention has these start with a lowercase letter, so “sun”, “cloud”, etc. And line 3 is just a closing brace, ending the enum.</p><p>Now take a look at how it&#39;s used: I modified the <code>getHaterStatus()</code> so that it takes a <code>WeatherType</code> value. The conditional statement is also rewritten to compare against <code>WeatherType.sun</code>, which is our value. Remember, this check is just a number behind the scenes, which is lightning fast.</p><figure><img src="https://hackingwithswift.com/img/books/hws/enumerations-1@2x.png" alt=" still returns “Hate”." tabindex="0" loading="lazy"><figcaption><code>getHaterStatus</code> still returns “Hate”.</figcaption></figure><p>Now, go back and read that code again, because I&#39;m about to rewrite it with two changes that are important. All set?</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">WeatherType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> sun</span>
<span class="line">    <span class="token keyword">case</span> cloud</span>
<span class="line">    <span class="token keyword">case</span> rain</span>
<span class="line">    <span class="token keyword">case</span> wind</span>
<span class="line">    <span class="token keyword">case</span> snow</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token class-name">WeatherType</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> weather <span class="token operator">==</span> <span class="token punctuation">.</span>sun <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hate&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token punctuation">.</span>cloud<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I made two changes there. First, each of the weather types are now on their own line. This might seem like a small change, and indeed in this example it is, but it becomes important soon. The second change was that I wrote <code>if weather == .sun</code> – I didn&#39;t need to spell out that I meant <code>WeatherType.sun</code> because Swift knows I am comparing against a <code>WeatherType</code> variable, so it&#39;s using type inference.</p><p>Enums are particularly useful inside <code>switch/case</code> blocks, particularly because Swift knows all the values your enum can have so it can ensure you cover them all. For example, we might try to rewrite the <code>getHaterStatus()</code> method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token class-name">WeatherType</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> weather <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>sun<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>cloud<span class="token punctuation">,</span> <span class="token punctuation">.</span>wind<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;dislike&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>rain<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;hate&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/enumerations-2@2x.png" alt="Xcode highlights a missing “WeatherType.snow” case." tabindex="0" loading="lazy"><figcaption>Xcode highlights a missing “WeatherType.snow” case.</figcaption></figure><p>Yes, I realize &quot;haters gonna dislike&quot; is hardly a great lyric, but it&#39;s academic anyway because this code won&#39;t build: it doesn&#39;t handle the <code>.snow</code> case, and Swift wants all cases to be covered. You either have to add a case for it or add a default case.</p><hr><h2 id="enums-with-additional-values" tabindex="-1"><a class="header-anchor" href="#enums-with-additional-values"><span>Enums with additional values</span></a></h2><p>One of the most powerful features of Swift is that enumerations can have values attached to them that you define. To extend our increasingly dubious example a bit further, I&#39;m going to add a value to the <code>.wind</code> case so that we can say how fast the wind is. Modify your code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">WeatherType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> sun</span>
<span class="line">    <span class="token keyword">case</span> cloud</span>
<span class="line">    <span class="token keyword">case</span> rain</span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">wind</span><span class="token punctuation">(</span>speed<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> snow</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the other cases don&#39;t need a speed value – I put that just into <code>wind</code>. Now for the real magic: Swift lets us add extra conditions to the <code>switch/case</code> block so that a case will match only if those conditions are true. This uses the <code>let</code> keyword to access the value inside a case, then the <code>where</code> keyword for pattern matching.</p><p>Here&#39;s the new function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token class-name">WeatherType</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> weather <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>sun<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">wind</span><span class="token punctuation">(</span><span class="token keyword">let</span> speed<span class="token punctuation">)</span> <span class="token keyword">where</span> speed <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;meh&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>cloud<span class="token punctuation">,</span> <span class="token punctuation">.</span>wind<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;dislike&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>rain<span class="token punctuation">,</span> <span class="token punctuation">.</span>snow<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;hate&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getHaterStatus</span><span class="token punctuation">(</span>weather<span class="token punctuation">:</span> <span class="token class-name">WeatherType</span><span class="token punctuation">.</span><span class="token function">wind</span><span class="token punctuation">(</span>speed<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/enumerations-3@2x.png" alt="Calling  with wind speed 5 returns “meh”." tabindex="0" loading="lazy"><figcaption>Calling <code>getHaterStatus</code> with wind speed 5 returns “meh”.</figcaption></figure><p>You can see <code>.wind</code> appears in there twice, but the first time is true only if the wind is slower than 10 kilometers per hour. If the wind is 10 or above, that won&#39;t match. The key is that you use <code>let</code> to get hold of the value inside the enum (i.e. to declare a constant name you can reference) then use a <code>where</code> condition to check.</p><p>Swift evaluates <code>switch/case</code> from top to bottom, and stops as soon as it finds a match. This means that if <code>case .cloud, .wind:</code> appears before <code>case .wind(let speed) where speed &lt; 10:</code> then it will be executed instead – and the output changes.</p><p>So, think carefully about how you order cases!</p><p>::: tips</p><p>Swift’s optionals are actually implemented using enums with associated values. There are two cases: <code>none</code>, and <code>some</code>, with <code>some</code> having whatever value is inside the optional.</p><p>:::</p><figure><img src="https://hackingwithswift.com/img/books/hws/enumerations-4@2x.png" alt="Using  on an Optional String with  and  cases." tabindex="0" loading="lazy"><figcaption>Using <code>switch</code> on an Optional String with <code>.some</code> and <code>.none</code> cases.</figcaption></figure>`,32);function S(o,x){const e=a("VPCard"),p=a("router-link"),c=a("VidStack");return k(),r("div",null,[n("h1",g,[n("a",v,[n("span",null,u(o.$frontmatter.title)+" 관련",1)])]),s(e,t(i({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[s(p,{to:"#enums-with-additional-values"},{default:d(()=>[m("Enums with additional values")]),_:1})])])]),b,s(e,t(i({title:"Enumerations | Hacking with iOS",desc:"Enumerations",link:"https://hackingwithswift.com/read/0/14/enumerations",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(c,{src:"youtube/1Deixr4KQ3Q"}),y])}const q=l(w,[["render",S],["__file","14-enumerations.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/read/00/14-enumerations.html","title":"Enumerations","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Enumerations","description":"Article(s) > Enumerations","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Enumerations"},{"property":"og:description","content":"Enumerations"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/14-enumerations.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/14-enumerations.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Enumerations"}],["meta",{"property":"og:description","content":"Article(s) > Enumerations"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/enumerations-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Enumerations\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/enumerations-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/enumerations-2@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/enumerations-3@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/enumerations-4@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[{"level":2,"title":"Enums with additional values","slug":"enums-with-additional-values","link":"#enums-with-additional-values","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.61,"words":1083},"filePathRelative":"hackingwithswift.com/read/00/14-enumerations.md","excerpt":"\\n"}');export{q as comp,E as data};
