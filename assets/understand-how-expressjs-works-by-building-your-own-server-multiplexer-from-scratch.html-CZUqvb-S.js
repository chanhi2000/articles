import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as v,e as a,n as l,g as r,w as t,d as s,f as o,r as i,o as m}from"./app-BgNevrm5.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},y=n("hr",null,null,-1),j=n("p",null,"Kata Machines have become the go-to method for mastering tough concepts, and it's hard to find a better tool for deliberate practice.",-1),x=n("p",null,"If you haven’t come across a kata yet, trust me—you will soon enough.",-1),q=n("p",null,"There’s a reason why developers love katas, whether they use them to sharpen their skills for personal projects or prepare for interviews.",-1),T=n("strong",null,"deliberate",-1),_={href:"https://en.wikipedia.org/wiki/Kata",target:"_blank",rel:"noopener noreferrer"},S=o(`<p>Kata Machines come from this idea: learning through drills and deliberate, conscious (choreographed) practice.</p><p>I realized just how perfect katas are when I was learning Haskell back in the day. If you know, you know. Haskell was a beast to learn for me back then!</p><p>So, I thought, why not do the same for the backend? Just pick one high-level concept, and drill down on it repeatedly and deliberately to its core and first principles.</p><p>In this article, I picked server-side frameworks. We&#39;re going to pick apart the idea of a &quot;framework&quot; using Express as an example.</p><p>We’re going to take high-level Express:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server listening on port:&quot;</span><span class="token punctuation">,</span> <span class="token constant">PORT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And drill all the way down, repeatedly, until we touch Node.js native code:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token literal-property property">TCPWrap</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">&gt;</span><span class="token operator">&amp;</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">CHECK</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">IsConstructCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token constant">CHECK</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">IsInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Environment<span class="token operator">*</span> env <span class="token operator">=</span> Environment<span class="token operator">:</span><span class="token operator">:</span><span class="token function">GetCurrent</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  int type_value <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>As<span class="token operator">&lt;</span>Int32<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token literal-property property">TCPWrap</span><span class="token operator">:</span><span class="token operator">:</span>SocketType type <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>TCPWrap<span class="token operator">:</span><span class="token operator">:</span>SocketType<span class="token operator">&gt;</span><span class="token punctuation">(</span>type_value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ProviderType provider<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">SOCKET</span><span class="token operator">:</span></span>
<span class="line">      provider <span class="token operator">=</span> <span class="token constant">PROVIDER_TCPWRAP</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">SERVER</span><span class="token operator">:</span></span>
<span class="line">      provider <span class="token operator">=</span> <span class="token constant">PROVIDER_TCPSERVERWRAP</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      <span class="token constant">UNREACHABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">TCPWrap</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And having gained this new intuition, we’ll build back up with a custom &quot;Express&quot; implementation:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">serverMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// To be implemented</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    hook</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">serverMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  app<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It’s going to be quite the journey – and a rewarding one at that!</p><p>I&#39;m assuming you have some backend knowledge and classify yourself as an advanced beginner who’s looking to level up.</p><p>If that sounds like you, we’re ready to proceed.</p><hr><h2 id="form-1-server-side-frameworks" tabindex="-1"><a class="header-anchor" href="#form-1-server-side-frameworks"><span>Form 1: Server-Side Frameworks</span></a></h2>`,15),C=n("code",null,"mysql2",-1),E=n("code",null,"sharp.js",-1),W=o(`<p>But the question is, what type of framework is Express.js?</p><p>Express is a multiplexer—specifically, a server multiplexer (server mux). I promise, the term isn’t as complex as it sounds. The implementation, though—that’s a whole different story.</p><p>In simple terms, a server mux is a router. Of course, Express and other server muxes handle more than just routing, but that’s the core idea.</p><p>Express takes in <code>request</code> and <code>response</code> objects from the server and routes them. Don’t worry, we’ll dive into routing soon.</p><p>Here’s an interesting point: if Express isn’t the server, then what exactly is the server?</p><p>To answer that, we need to look at the Express.js source code, which you can clone from GitHub:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/expressjs/express.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Once you’re set, we can dive right in with our first deep dive.</p><h3 id="first-drill-unpacking-express-js" tabindex="-1"><a class="header-anchor" href="#first-drill-unpacking-express-js"><span>First Drill: Unpacking Express.js</span></a></h3>`,9),P=n("code",null,"express.js",-1),I=n("code",null,"lib",-1),H=o(`<p>You can skim the file, but we’re going to focus on lines 42 and 43—the heart of it all:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> proto<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>What you’re looking at is object composition: a design pattern where an object is created by combining the properties and methods of other objects.</p>`,3),R=n("code",null,"proto",-1),U=n("code",null,"application.js",-1),A=o(`<p>Let’s open that file. There’s a lot of code, but remember, our goal is to figure out where the server is within Express.</p><p>If there’s one function in Express that everyone likely knows, it’s <code>listen</code>. The essence of a server is to &quot;listen&quot; over a network. So, do a quick <kbd>Ctrl</kbd>+<kbd>F</kbd> for &quot;listen,&quot; and you’ll find the definition on line 633:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There it is, the famous <code>listen</code> function. Did we just find the server?</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We’ve already seen a version of this in the intro:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  app<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This confirms that Express is indeed a server mux, and the actual server is returned by the Node.js <code>createServer</code> function from the <code>http</code> package.</p><p>That’s some solid progress!</p><p>We’ve peeled back a layer, but we can go deeper. What exactly does <code>createServer</code> do, and what is this <code>server</code> object?</p><h3 id="the-server" tabindex="-1"><a class="header-anchor" href="#the-server"><span>The Server</span></a></h3><p>A server is the basic unit of the backend. At its core, the concept is simple: how can two or more processes communicate over a network?</p><p>This is the fundamental idea behind network programming. We have devices equipped with IP addresses for identification and ports for data exchange over a network.</p><p>The communication itself is complex, which is where protocols come in to facilitate the process.</p><p>The most common protocols are UDP and TCP:</p>`,15),O=n("strong",null,"UDP",-1),N={href:"https://en.wikipedia.org/wiki/User_Datagram_Protocol",target:"_blank",rel:"noopener noreferrer"},M=n("strong",null,"TCP",-1),B={href:"https://en.wikipedia.org/wiki/Transmission_Control_Protocol",target:"_blank",rel:"noopener noreferrer"},F=o(`<p>TCP is the most widely used protocol due to its reliability, and most server-side applications you’ll work with, including Express, are TCP-based.</p><p>Although I love the quirks and power of UDP, we’ll focus on TCP, tracing its roots in Node.js.</p><p>We’ve already seen a glimpse of this:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">TCPWrap</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">&gt;</span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// some code</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token function">TCPWrap</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before we dig into that, we need to answer a key question: What does it really mean to be a server process?</p><p>Without getting too deep into file descriptors, sockets, or network layers, a server is an OS-level object responsible for handling communication between nodes. When you call:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;node:http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> something <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’re creating an OS-level object, commonly known as a <strong>socket</strong>. This socket facilitates network communication between devices, along with handling data encoding and decoding.</p><p>In short, <code>createServer</code> abstracts and returns this socket object.</p><p>And, yes, we can implement this socket in Node.js. Remember, Node.js has native access to the OS, allowing JavaScript to function at the system level.</p><h3 id="the-socket-in-node-js" tabindex="-1"><a class="header-anchor" href="#the-socket-in-node-js"><span>The Socket in Node.js</span></a></h3><p>Here’s some code that creates a server socket:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Using Node v20</span></span>
<span class="line"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node:net&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;client connected&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  c<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello; world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  c<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;client disconnected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> err<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server bound&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While <code>net.createServer((c)</code> is still a high-level abstraction like <code>http.createServer</code>, it returns the raw socket.</p><p>The <code>c</code> object represents the client that made the connection (dial). Beyond writing to it, we can do much more.</p><p>For instance, here’s a simple write operation:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">c<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Our socket is running on <code>localhost:3000</code>. If you make a request (or use <code>curl</code>):</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">curl</span> localhost:3000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The OS-level network stack encodes not only your data but also information about who you are and where to find you—in the form of a response, among other things.</p><p>This is what the server receives, and it’s important to know where to send the response (like IP, and so on).</p><p>So, the <code>c</code> object represents all of that!</p><p>We’ve covered a lot of the surface-level concepts, but before we wrap up this part, here’s a bonus challenge:</p><p>Try writing a class on the server to manage multiple connections. You could store these connections in a data structure and periodically send data to them while the connection remains open.</p><p>We’re about three layers deep now, but the journey isn’t over. Remember the goal?</p><p>Now it’s time to clone the Node.js source code. Don’t worry, we’ll only focus on the relevant parts.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/nodejs/node.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="the-socket-in-node-js-source-code" tabindex="-1"><a class="header-anchor" href="#the-socket-in-node-js-source-code"><span>The Socket in Node.js Source Code</span></a></h3><p>Let the tracing begin! Node.js is a massive codebase – it’s an entire engine that does way more than just handle sockets. But we only care about the networking part today.</p><p>First, navigate to the <code>lib</code> folder, and inside you’ll find a file called <code>net.js</code>. This is where most of the work happens for network applications. If you scroll down to line 210, you’ll see a familiar sight:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">function</span> createServer<span class="token punctuation">(</span>options, connectionListener<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin class-name">return</span> new Server<span class="token punctuation">(</span>options, connectionListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s it! Every time we create a server, it calls this function and returns a <code>Server</code> object. Anytime you see <code>new</code> in JavaScript, you should have a lightbulb moment—it means a new object or class (blueprint) is being created.</p><p>So we can trace and find the <code>Server</code> definition:</p><p>On line 1737</p><p>At first glance, it might seem like nothing special is happening. But JavaScript has a sneaky way of hiding complexity.</p><p>Here’s the thing: JavaScript is a prototype-based language. This means that objects can inherit features from other objects through prototypes. On line 1791, we see this in action:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">ObjectSetPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Server</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In plain English: our <code>Server</code> object is inheriting all the behavior from other objects like <code>EventEmitter</code>, for example. This is a common pattern in JavaScript libraries – remember the mixin in Express?</p>`,38),D={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"},L=o(`<p>Now, what’s one thing we know for sure about a Node.js server? It has a <code>listen</code> function. We use it all the time in server-side code (even in frameworks like Express). So, let’s check if our <code>Server</code> object has a <code>listen</code> function.</p><p>Scroll down a bit more, and there it is on line 2006:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token class-name">Server</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This function handles a lot of stuff—like validating the port number—but the key part starts around line 2016, where the comment clearly tells us:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// start TCP server listening on host:port</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We know what TCP is!</p><p>The important functions here are <code>lookupAndListen</code> and <code>listenInCluster</code>. They are responsible for starting the actual TCP server:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// start TCP server listening on host:port</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>host<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">lookupAndListen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>port <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>host<span class="token punctuation">,</span> backlog<span class="token punctuation">,</span> options<span class="token punctuation">.</span>exclusive<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">listenInCluster</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>port <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> backlog<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>exclusive<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Digging into <code>lookupAndListen</code> (line 2156), we find that it calls <code>listenInCluster</code>, which leads us to another function: <code>server._listen2</code> (yep, more tracing!):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">server<span class="token punctuation">.</span><span class="token function">_listen2</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> port<span class="token punctuation">,</span> addressType<span class="token punctuation">,</span> backlog<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As the comments explain, this is all about backward compatibility:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// _listen2 sets up the listened handle, it is still named like this</span></span>
<span class="line"><span class="token comment">// to avoid breaking code that wraps this method</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>I know this might feel like a wild goose chase, but trust me, tracing through a large codebase like Node.js requires patience. We’re getting close.</p><p>So, <code>._listen2</code> is defined in our <code>Server</code> object’s prototype and points to a function called <code>setupListenHandle</code> (line 1856). This function is the real hub where everything comes together.</p><p>Around line 1870 and 1883, you’ll find the function <code>createServerHandle</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createServerHandle</span><span class="token punctuation">(</span><span class="token parameter">address<span class="token punctuation">,</span> port<span class="token punctuation">,</span> addressType<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> flags</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    handle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TCP</span><span class="token punctuation">(</span>TCPConstants<span class="token punctuation">.</span><span class="token constant">SERVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    isTCP <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> handle<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally! We’ve hit the core: the <code>TCP</code> object. This is where the actual TCP server is created, the core. We could stop here, satisfied that we’ve found the TCP server, but why not dig deeper?</p><p>Remember that <code>new TCP</code> is creating an object, so we need to figure out what <code>TCP</code> actually represents.</p><p>Go back up to line 68, where you’ll see the following import:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">TCP</span><span class="token punctuation">,</span></span>
<span class="line">  TCPConnectWrap<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">constants</span><span class="token operator">:</span> TCPConstants<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">internalBinding</span><span class="token punctuation">(</span><span class="token string">&#39;tcp_wrap&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is where things get interesting. You might wonder: “What kind of import is that? It’s not your regular <code>require</code> or <code>import</code> statement.” That’s because JavaScript alone can’t handle TCP servers—it needs help from C++.</p><p>Node.js, which is built on the V8 engine, relies on C++ bindings to do the heavy lifting. These bindings are like a bridge, allowing JavaScript to communicate with low-level system functions (like creating a TCP server). <code>internalBinding(&#39;tcp_wrap&#39;)</code> is one of these bridges.</p><p>To truly trace things to their source, we need to dive into the Node.js C++ code. You’ll find <code>tcp_wrap.cc</code> in the <code>src</code> folder (among others like <code>crypto</code>, <code>streams</code>, <code>async</code>, <code>fs</code>). Open it, and you’ll find this function:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">TCPWrap</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">&gt;</span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">CHECK</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">IsConstructCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">CHECK</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">IsInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Environment<span class="token operator">*</span> env <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token double-colon punctuation">::</span><span class="token function">GetCurrent</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> type_value <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Int32<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  TCPWrap<span class="token double-colon punctuation">::</span>SocketType type <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>TCPWrap<span class="token double-colon punctuation">::</span>SocketType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type_value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ProviderType provider<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> SOCKET<span class="token operator">:</span></span>
<span class="line">      provider <span class="token operator">=</span> PROVIDER_TCPWRAP<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SERVER<span class="token operator">:</span></span>
<span class="line">      provider <span class="token operator">=</span> PROVIDER_TCPSERVERWRAP<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">UNREACHABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token function">TCPWrap</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is where the TCP server is <em>actually</em> created. You can see more familiar functions like <code>bind</code>, and everything JavaScript does is just a mirror of these lower-level operations.</p><p>We’ve traced our way from high-level JavaScript all the way down to C++—the true beginning of a TCP server in Node.js.</p><p>We&#39;ve completed the first part of the introduction: &quot;And drill all the way down repeatedly until we touch Node.js native code&quot; and now it&#39;s time to build up.</p><hr><h2 id="form-2-implementing-a-custom-server-mux" tabindex="-1"><a class="header-anchor" href="#form-2-implementing-a-custom-server-mux"><span>Form 2: Implementing a Custom Server Mux</span></a></h2><p>Before diving into the code, the goal isn’t to focus on the complexity of mux (multiplexer) development (because that can get complicated). Instead, it’s to show how the <strong>server</strong> and <strong>mux</strong> fit together.</p><p>If anything, this is the key takeaway: the flow from the server to the router, and ultimately to the caller (the client that made the request).</p><p>Remember, we&#39;ve already seen a similar concept in Express:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Express app inherits from Node&#39;s EventEmitter</span></span>
<span class="line"><span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Implements the server mux with functions like listen, handle, middleware</span></span>
<span class="line"><span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> proto<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Behind the scenes, a lot of complex code is abstracted away. This helps simplify things and makes the code cleaner, but for teaching purposes, we’ll take a more verbose approach. This way, you can see how everything connects.</p><h3 id="creating-our-custom-router" tabindex="-1"><a class="header-anchor" href="#creating-our-custom-router"><span>Creating Our Custom Router</span></a></h3><p>Let&#39;s start simple and build a basic server. You probably already know how to create a native server in Node.js:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  app<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we’re introducing an object <code>app</code> with a <code>hook</code> function (which we’ll implement shortly). This is where the server redirects the <code>req</code> and <code>res</code> to our custom router. This <strong>hook</strong> is the meeting point—the interaction between the server and the router (mux).</p><h3 id="basic-mux-skeleton" tabindex="-1"><a class="header-anchor" href="#basic-mux-skeleton"><span>Basic Mux Skeleton</span></a></h3><p>Let&#39;s start by creating the structure of our mux:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">serverMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// To be implemented</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    hook</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">serverMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  app<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-hook-function" tabindex="-1"><a class="header-anchor" href="#the-hook-function"><span>The Hook Function</span></a></h3><p>The <code>hook</code> function is our middleman between the server and the mux. It receives the request (<code>req</code>) and response (<code>res</code>) objects from the server and passes them to our mux:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  requestsQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">requestWrapper</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;new request!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">processRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we introduced a few new things:</p><ul><li><code>requestWrapper</code>: A function to wrap the <code>req</code> and <code>res</code>.</li><li><code>processRequests</code>: A function to handle the request processing.</li><li><code>requestsQueue</code>: A basic JavaScript array that will act as our queue for handling requests.</li></ul><p>Let&#39;s update <code>serverMux</code> to reflect this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">serverMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> requestsQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// To be implemented</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    requestsQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">requestWrapper</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;new request!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">processRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    hook</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="why-use-a-queue" tabindex="-1"><a class="header-anchor" href="#why-use-a-queue"><span>Why Use a Queue?</span></a></h3><p>You might be wondering why we’re using a queue instead of handling requests immediately like Express does with <code>app.handle</code>. Well, storing requests in a queue helps simulate an event loop. This will give us better visibility into how requests are processed, one at a time.</p><h4 id="queue-operations" tabindex="-1"><a class="header-anchor" href="#queue-operations"><span>Queue Operations</span></a></h4><p>A queue is a first-in, first-out (FIFO) data structure. Just like a line at the store, the request that arrives first gets processed first.</p><p>In our case, the <code>requestsQueue</code> is an array. Here’s how we’ll handle enqueueing and dequeueing:</p><ul><li><strong>Enqueue (push)</strong>: We push requests into the queue with <code>requestsQueue.push(requestWrapper(req, res));</code></li><li><strong>Dequeue (shift)</strong>: We pull the next request out of the queue with <code>const c = requestsQueue.shift();</code></li></ul><h3 id="request-wrapper" tabindex="-1"><a class="header-anchor" href="#request-wrapper"><span>Request Wrapper</span></a></h3><p>The <code>requestWrapper</code> function is a simple utility that wraps the incoming <code>req</code> and <code>res</code> objects, and extracts some useful information:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">requestWrapper</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">url</span><span class="token operator">:</span> req<span class="token punctuation">.</span>url<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">method</span><span class="token operator">:</span> req<span class="token punctuation">.</span>method<span class="token punctuation">,</span></span>
<span class="line">    req<span class="token punctuation">,</span></span>
<span class="line">    res</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),Y={href:"https://hono.dev/",target:"_blank",rel:"noopener noreferrer"},V=o(`<h3 id="testing-the-queue" tabindex="-1"><a class="header-anchor" href="#testing-the-queue"><span>Testing the Queue</span></a></h3><p>Let’s test this out by logging the request queue on every new request. Update your <code>hook</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  requestsQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">requestWrapper</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;New request queued!&quot;</span><span class="token punctuation">,</span> requestsQueue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">processRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Start the server with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">node</span> index.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, open another terminal and make a request to the server:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">curl</span> http://localhost:3000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You should see the queue logged in the console. The terminal might look like it&#39;s hanging because we haven’t responded to the request yet. You can exit the process manually for now.</p><h3 id="processing-requests" tabindex="-1"><a class="header-anchor" href="#processing-requests"><span>Processing Requests</span></a></h3><p>Here’s the full <code>processRequests</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>requestsQueue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> c <span class="token operator">=</span> requestsQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> handler <span class="token operator">=</span> lookupTable<span class="token punctuation">[</span>c<span class="token punctuation">.</span>url<span class="token punctuation">]</span> <span class="token operator">||</span> lookupTable<span class="token punctuation">[</span><span class="token string">&quot;/notfound&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">handler</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>req<span class="token punctuation">,</span> c<span class="token punctuation">.</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Missing not found handler!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s break it down:</p><ol><li><strong>Queue processing</strong>: We loop through the queue, dequeueing each request one by one.</li><li><strong>Handler lookup</strong>: For each request, we check if a handler exists in the <code>lookupTable</code> for the URL. If it doesn’t, we fall back to a <code>/notfound</code> handler.</li><li><strong>Handler execution</strong>: We execute the handler, passing the request and response objects.</li></ol><h3 id="lookup-table-and-handlers" tabindex="-1"><a class="header-anchor" href="#lookup-table-and-handlers"><span>Lookup Table and Handlers</span></a></h3><p>We need a way to map URLs to their respective handlers. This is where the <code>lookupTable</code> comes in:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> lookupTable <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;/notfound&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;404 Not Found\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When a request comes in, we check if the URL matches an entry in the table. If it does, we call the corresponding handler function.</p><p>For example, calling <code>curl http://localhost:3000</code> will hit the <code>/</code> route and return &quot;Hello, World!&quot;. If you hit a non-existent route like <code>/random</code>, it will trigger the 404 handler.</p><h3 id="registering-handlers" tabindex="-1"><a class="header-anchor" href="#registering-handlers"><span>Registering Handlers</span></a></h3><p>Finally, let’s add a method to register new handlers dynamically:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">serverMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> lookupTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Path must be a non-empty string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Handler must be a function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    lookupTable<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    hook<span class="token punctuation">,</span></span>
<span class="line">    registerHandler</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, we can dynamically register new routes with their handlers:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Home Page\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;About Us\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s a full example of <code>registerHandler</code> in action:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span>  <span class="token function">serverMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;About Us&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/contact&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;Contact Us&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/api/data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Some data from the API&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/notfound&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;404 Not Found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span></span>
<span class="line">  app<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how similar it is to Express?</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just a bit more verbose!</p><p>Now, run the server and put it to the test by pasting this into your terminal:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">for</span> /l %i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1,1</span>,100<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token function">curl</span> <span class="token parameter variable">-X</span> GET http://localhost:3000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will send 100 requests. Try opening two or more terminals and running the same command concurrently to see how your server handles the load.</p><p>Congratulations! You’ve built a basic server multiplexer (mux). It may not revolutionize the world, but it&#39;s a solid starting point to understand how routing works in web frameworks.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>In this article, we took a deep dive into the concept of server-side frameworks, using Express as our primary example. We traced it from its high-level abstractions all the way down to the native TCP server built in C++. Then, to cement these ideas, we built our own simple server mux.</p><p>It’s a powerful learning exercise, because we stripped away the magic and dug into the core of how things work. While this example is just the tip of the iceberg, it gives you the tools to explore even deeper. For a challenge, look into how Express handles pattern matching and registering routes—try improving our simple mux!</p><p>I left out more advanced topics like updating our queue with a linked list and simulating concurrent requests, so this is something you can explore.</p>`,37),J={href:"https://x.com/codelit09",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"codelit09",-1),K=n("p",null,"And of course, enjoy your timezone!",-1);function z(u,G){const c=i("VPCard"),e=i("router-link"),d=i("SiteInfo"),p=i("FontIcon");return m(),h("div",null,[n("h1",b,[n("a",f,[n("span",null,v(u.$frontmatter.title)+" 관련",1)])]),a(c,l(r({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(c,l(r({title:"C++ > Article(s)",desc:"Article(s)",link:"/programming/cpp/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[a(e,{to:"#form-1-server-side-frameworks"},{default:t(()=>[s("Form 1: Server-Side Frameworks")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#first-drill-unpacking-express-js"},{default:t(()=>[s("First Drill: Unpacking Express.js")]),_:1})]),n("li",null,[a(e,{to:"#the-server"},{default:t(()=>[s("The Server")]),_:1})]),n("li",null,[a(e,{to:"#the-socket-in-node-js"},{default:t(()=>[s("The Socket in Node.js")]),_:1})]),n("li",null,[a(e,{to:"#the-socket-in-node-js-source-code"},{default:t(()=>[s("The Socket in Node.js Source Code")]),_:1})])])]),n("li",null,[a(e,{to:"#form-2-implementing-a-custom-server-mux"},{default:t(()=>[s("Form 2: Implementing a Custom Server Mux")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#creating-our-custom-router"},{default:t(()=>[s("Creating Our Custom Router")]),_:1})]),n("li",null,[a(e,{to:"#basic-mux-skeleton"},{default:t(()=>[s("Basic Mux Skeleton")]),_:1})]),n("li",null,[a(e,{to:"#the-hook-function"},{default:t(()=>[s("The Hook Function")]),_:1})]),n("li",null,[a(e,{to:"#why-use-a-queue"},{default:t(()=>[s("Why Use a Queue?")]),_:1})]),n("li",null,[a(e,{to:"#request-wrapper"},{default:t(()=>[s("Request Wrapper")]),_:1})]),n("li",null,[a(e,{to:"#testing-the-queue"},{default:t(()=>[s("Testing the Queue")]),_:1})]),n("li",null,[a(e,{to:"#processing-requests"},{default:t(()=>[s("Processing Requests")]),_:1})]),n("li",null,[a(e,{to:"#lookup-table-and-handlers"},{default:t(()=>[s("Lookup Table and Handlers")]),_:1})]),n("li",null,[a(e,{to:"#registering-handlers"},{default:t(()=>[s("Registering Handlers")]),_:1})])])]),n("li",null,[a(e,{to:"#wrapping-up"},{default:t(()=>[s("Wrapping Up")]),_:1})])])]),y,a(d,{name:"Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch",desc:"Kata Machines have become the go-to method for mastering tough concepts, and it's hard to find a better tool for deliberate practice. If you haven’t come across a kata yet, trust me—you will soon enough. There’s a reason why developers love katas, wh...",url:"https://freecodecamp.org/news/understand-how-expressjs-works-by-building-your-own-server-multiplexer-from-scratch",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/urBiLDuUhMU/upload/65f541a7f0d11691008b4e93d89f2d29.jpeg"}),j,x,q,n("p",null,[s("A kata is all about "),T,s(" practice. It comes from martial arts like Karate and Judo, and, according to Wikipedia, it’s defined as a pre-determined sequence of movements, techniques, and patterns that follow a specific order (source: "),n("a",_,[a(p,{icon:"fa-brands fa-wikipedia-w"}),s("wikipedia")]),s(").")]),S,n("p",null,[s('The term "server-side framework" is broad. Think about it: '),C,s(" could be considered a framework depending on how you classify frameworks and libraries. Even "),a(p,{icon:"fa-brands fa-js"}),E,s(" for image editing could fit under the umbrella of server-side frameworks, right?")]),W,n("p",null,[s("Open your Express source code in an editor. You’ll find the entry file "),a(p,{icon:"fa-brands fa-js"}),P,s(" in the "),a(p,{icon:"fas fa-folder-open"}),I,s(" folder.")]),H,n("p",null,[s("Our target object here is "),R,s(", which is imported from "),a(p,{icon:"fa-brands fa-js"}),U,s(", the core of Express.")]),A,n("ul",null,[n("li",null,[O,s(" is a connectionless protocol and does not guarantee reliable communication, but allows for low-latency and efficient data transfer. This is ideal for time-sensitive applications such as video conferencing, online gaming, and voice over IP (VoIP) (source "),n("a",N,[a(p,{icon:"fa-brands fa-wikipedia-w"}),s("Wikipedia")]),s(").")]),n("li",null,[M,s(" is a connection-oriented protocol with reliable, ordered, and error-checked data transmission between applications on networked devices. It’s a major part of internet applications (source "),n("a",B,[a(p,{icon:"fa-brands fa-wikipedia-w"}),s("Wikipedia")]),s(").")])]),F,n("p",null,[s("At this point, if you’ve never worked with prototypes or Object-Oriented JavaScript (OOJS), this might feel like advanced territory. But don’t worry – the good folks at "),n("a",D,[a(p,{icon:"fa-brands fa-wikipedia-w"}),s("MDN")]),s(" have an excellent guide on prototypes to get you up to speed.")]),L,n("p",null,[s("In more advanced frameworks like "),n("a",Y,[a(p,{icon:"fas fa-globe"}),s("Hono.js")]),s(", the request wrapper might add additional functionality, such as helper methods for setting headers or parsing body content. For now, we’re keeping things simple and just returning the request and response with the URL and method.")]),V,n("p",null,[s("Thanks for reading! I hope you enjoyed this exploration as much as I did writing it. If you have any thoughts, questions, or just want to connect I am on "),n("a",J,[s("x ("),a(p,{icon:"fa-brands fa-x-twitter"}),Q,s(")")]),s(", feel free to reach out.")]),K])}const $=k(g,[["render",z],["__file","understand-how-expressjs-works-by-building-your-own-server-multiplexer-from-scratch.html.vue"]]),nn=JSON.parse('{"path":"/freecodecamp.org/understand-how-expressjs-works-by-building-your-own-server-multiplexer-from-scratch.html","title":"Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch","lang":"en-US","frontmatter":{"lang":"en-US","title":"Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch","description":"Article(s) > Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch","icon":"fa-brands fa-node","category":["Node.js","C++","Article(s)"],"tag":["blog","freecodecamp.org","node","nodejs","node-js","c++","cpp"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch"},{"property":"og:description","content":"Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/understand-how-expressjs-works-by-building-your-own-server-multiplexer-from-scratch.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/understand-how-expressjs-works-by-building-your-own-server-multiplexer-from-scratch.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch"}],["meta",{"property":"og:description","content":"Article(s) > Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/urBiLDuUhMU/upload/65f541a7f0d11691008b4e93d89f2d29.jpeg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/urBiLDuUhMU/upload/65f541a7f0d11691008b4e93d89f2d29.jpeg"}],["meta",{"name":"twitter:image:alt","content":"Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch"}],["meta",{"property":"article:author","content":"Sifundo"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:published_time","content":"2024-10-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Understand How Express.js Works by Building Your Own Server Multiplexer from Scratch\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/urBiLDuUhMU/upload/65f541a7f0d11691008b4e93d89f2d29.jpeg\\"],\\"datePublished\\":\\"2024-10-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sifundo\\"}]}"]],"prev":"/programming/js-node/articles/README.md","date":"2024-10-03T00:00:00.000Z","isOriginal":false,"author":"Sifundo","cover":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/urBiLDuUhMU/upload/65f541a7f0d11691008b4e93d89f2d29.jpeg"},"headers":[{"level":2,"title":"Form 1: Server-Side Frameworks","slug":"form-1-server-side-frameworks","link":"#form-1-server-side-frameworks","children":[{"level":3,"title":"First Drill: Unpacking Express.js","slug":"first-drill-unpacking-express-js","link":"#first-drill-unpacking-express-js","children":[]},{"level":3,"title":"The Server","slug":"the-server","link":"#the-server","children":[]},{"level":3,"title":"The Socket in Node.js","slug":"the-socket-in-node-js","link":"#the-socket-in-node-js","children":[]},{"level":3,"title":"The Socket in Node.js Source Code","slug":"the-socket-in-node-js-source-code","link":"#the-socket-in-node-js-source-code","children":[]}]},{"level":2,"title":"Form 2: Implementing a Custom Server Mux","slug":"form-2-implementing-a-custom-server-mux","link":"#form-2-implementing-a-custom-server-mux","children":[{"level":3,"title":"Creating Our Custom Router","slug":"creating-our-custom-router","link":"#creating-our-custom-router","children":[]},{"level":3,"title":"Basic Mux Skeleton","slug":"basic-mux-skeleton","link":"#basic-mux-skeleton","children":[]},{"level":3,"title":"The Hook Function","slug":"the-hook-function","link":"#the-hook-function","children":[]},{"level":3,"title":"Why Use a Queue?","slug":"why-use-a-queue","link":"#why-use-a-queue","children":[]},{"level":3,"title":"Request Wrapper","slug":"request-wrapper","link":"#request-wrapper","children":[]},{"level":3,"title":"Testing the Queue","slug":"testing-the-queue","link":"#testing-the-queue","children":[]},{"level":3,"title":"Processing Requests","slug":"processing-requests","link":"#processing-requests","children":[]},{"level":3,"title":"Lookup Table and Handlers","slug":"lookup-table-and-handlers","link":"#lookup-table-and-handlers","children":[]},{"level":3,"title":"Registering Handlers","slug":"registering-handlers","link":"#registering-handlers","children":[]}]},{"level":2,"title":"Wrapping Up","slug":"wrapping-up","link":"#wrapping-up","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":13.46,"words":4038},"filePathRelative":"freecodecamp.org/understand-how-expressjs-works-by-building-your-own-server-multiplexer-from-scratch.md","localizedDate":"October 3, 2024","excerpt":"\\n","copyright":{"author":"Sifundo"}}');export{$ as comp,nn as data};
