import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as e,t as l,e as a,n,g as i,a as t,r as h,o as p}from"./app-BgNevrm5.js";const u={},f={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},d={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},m=e("nav",{class:"table-of-contents"},[e("ul")],-1),g=e("hr",null,null,-1),y=e("blockquote",null,[e("p",null,"Available from iOS 8.0")],-1),w=e("details",{class:"hint-container details"},[e("summary",null,"Similar solutions‚Ä¶"),t(`
/quick-start/swiftui/how-to-fix-protocol-view-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements">How to fix ‚ÄúProtocol 'View' can only be used as a generic constraint because it has Self or associated type requirements‚Äù 
/example-code/xcode/how-to-fix-the-error-view-controller-is-unreachable-because-it-has-no-entry-points-and-no-identifier-for-runtime-access">How to fix the error ‚ÄúView controller is unreachable because it has no entry points and no identifier for runtime access‚Äù 
/example-code/language/what-is-a-protocol-associated-type">What is a protocol associated type? 
/example-code/language/self-vs-self-whats-the-difference">Self vs self - what's the difference? 
/example-code/language/how-to-constrain-a-protocol-associated-type">How to constrain a protocol associated type</a>
`)],-1);function b(s,x){const o=h("VPCard");return p(),c("div",null,[e("h1",f,[e("a",d,[e("span",null,l(s.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(o,n(i({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,g,a(o,n(i({title:"How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù | Language - free Swift example code",desc:"How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù",link:"https://hackingwithswift.com/example-code/language/how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),y,t(" TODO: ÏûëÏÑ± "),t(" \nProtocols with associated types are a powerful, if somewhat treacherous, feature of Swift. Sometimes it‚Äôs fair to say that the only winning move is not to play ‚Äì i.e., to avoid them entirely ‚Äì but if that isn‚Äôt the case you are sometimes likely to find yourself facing a difficult error: ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements.‚Äù\n\nAs an example, here‚Äôs a protocol with an associated type:\n\n```swift\nprotocol Identifiable {\n    associatedtype ID\n    var id: ID { get set }\n}\n```\n\nSo, whatever type wants to conform to `Identifiable` must state which type they use to identify themselves. We could create two instances of such types like this:\n\n```swift\nstruct Person: Identifiable {\n    var id: String\n}\n\nstruct Website: Identifiable {\n    var id: URL\n}\n```\n\nThat is, people identify themselves using a `String`, and websites use a `URL`. So far, so easy. However, if you want to write a function using `Identifiable` as parameters you‚Äôll hit a problem. For example, you might try to write a function that compares two instances of `Identifiable` like this:\n\n```swift\nfunc compareThing1(_ thing1: Identifiable, against thing2: Identifiable) -> Bool {\n    return true\n}\n```\n\nThat will issue the error ‚Äúprotocol 'Identifiable' can only be used as a generic constraint because it has Self or associated type requirements.‚Äù\n\nThe reason for the error is simple enough: although `thing1` and `thing2` being passed into the function both conform to `Identifiable` that doesn‚Äôt make them usable in the same way ‚Äì the `id` of a person and the `id` of a website are completely different types, so there‚Äôs no meaningful way you can use them together.\n\nAs the error says, this protocol can be used only as a generic constraint. That‚Äôs actually pointing us to the solution here: if we use `Identifiable` as a generic constraint then we can tell Swift not only that `thing1` and `thing2` conform to the protocol but also that they are actually the same type.\n\n```swift\nfunc compareThing1<T: Identifiable>(_ thing1: T, against thing2: T) -> Bool {\n    return true\n}\n```\n\nThat code fixes the problem, because Swift has enough information to know how you plan to use `thing1` and `thing2`.\n\n"),w])}const _=r(u,[["render",b],["__file","how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements.html.vue"]]),v=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements.html","title":"How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù","description":"Article(s) > How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-8.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù"},{"property":"og:description","content":"How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù"}],["meta",{"property":"og:description","content":"Article(s) > How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-8.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"hackingwithswift.com/example-code/language/how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{_ as comp,v as data};
