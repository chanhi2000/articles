import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as t,g as e,d as p,f as l,r as i,o as k}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),f=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 17</strong></p><p>SwiftUI&#39;s <code>Color</code> view doesn&#39;t always hold one specific color, and instead is only resolved to a specific value when it&#39;s being drawn on the screen. This allows the system to use slight variations between light and dark mode to ensure the optimal experience, but it also means the only way to get actual red, green, and blue (RGB) components out is to ask for the resolved color – ask the system “given this environment, what actual color values are being used?”</p><p>Resolving takes two steps: gaining access to the current environment, and pass that into a call to <code>resolve(in:)</code> on your color. You can then save the resulting data using <code>Codable</code> or whatever other data form you want.</p><p>For example, this lets the user choose any color they want, and displays its red, green, and blue components:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token keyword">var</span> environment</span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red</span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> resolvedColor<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token class-name">Resolved</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select your favorite color&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $color<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">let</span> resolvedColor <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Red: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>red</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Green: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>green</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blue: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>blue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Opacity: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>opacity</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> color<span class="token punctuation">,</span> initial<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> getColor<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        resolvedColor <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> environment<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-1.zip",target:"_blank",rel:"noopener noreferrer"},y=l(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-1~dark.png" alt="A color picker that displays its red, green, and blue components every time the color is changed." tabindex="0" loading="lazy"><figcaption>A color picker that displays its red, green, and blue components every time the color is changed.</figcaption></figure><div class="hint-container important"><p class="hint-container-title">Important</p><p>The data is provided as <code>Float</code> rather than <code>Double</code>.</p></div><p>In that code, <code>resolved</code> gets set to a <code>Color.Resolved</code> type, which can be converted back into a new <code>Color</code> object or be converted to JSON or similar using <code>Codable</code>.</p><p>For example, we could convert our resolved color to JSON like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token keyword">var</span> environment</span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red</span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> resolvedColor<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token class-name">Resolved</span><span class="token operator">?</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorJSON <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select your favorite color&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $color<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">let</span> resolvedColor <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Red: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>red</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Green: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>green</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blue: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>blue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Opacity: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resolvedColor<span class="token punctuation">.</span>opacity</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Color JSON: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">colorJSON</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> color<span class="token punctuation">,</span> initial<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> getColor<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        resolvedColor <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> environment<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> colorData <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>resolvedColor<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            colorJSON <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> colorData<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),C={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-2.zip",target:"_blank",rel:"noopener noreferrer"},_=l(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-2~dark.png" alt="A view that shows red, green, and blue values for a user color, and also the matching JSON data." tabindex="0" loading="lazy"><figcaption>A view that shows red, green, and blue values for a user color, and also the matching JSON data.</figcaption></figure><div class="hint-container note"><p class="hint-container-title">Note</p><p>We&#39;re dealing with floating-point numbers, so you can expect some microscopic variations.</p></div><p>If you&#39;ve loaded a resolved color and want to convert it back to a Color instance, just pass it into the initializer like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> resolvedColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token class-name">Resolved</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0.6</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span> opacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>resolvedColor<span class="token punctuation">)</span><span class="token punctuation">.</span>gradient<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),S={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-3.zip",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"A gentle blue gradient created from a resolved color.",-1),q={class:"hint-container details"},I=n("summary",null,"Similar solutions…",-1);function H(c,R){const a=i("VPCard"),o=i("FontIcon");return k(),u("div",null,[n("h1",v,[n("a",h,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,w,s(a,t(e({title:"How to read the red, green, and blue values from a Color | SwiftUI by Example",desc:"How to read the red, green, and blue values from a Color",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,n("blockquote",null,[n("p",null,[n("a",b,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",C,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),_,n("blockquote",null,[n("p",null,[n("a",S,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),x,n("details",q,[I,s(a,t(e({title:"How to create a date picker and read values from it | SwiftUI by Example",desc:"How to create a date picker and read values from it",link:"/hackingwithswift.com/swiftui/how-to-create-a-date-picker-and-read-values-from-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create a picker and read values from it | SwiftUI by Example",desc:"How to create a picker and read values from it",link:"/hackingwithswift.com/swiftui/how-to-create-a-picker-and-read-values-from-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create a segmented control and read values from it | SwiftUI by Example",desc:"How to create a segmented control and read values from it",link:"/hackingwithswift.com/swiftui/how-to-create-a-segmented-control-and-read-values-from-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const T=r(m,[["render",H],["__file","how-to-read-the-red-green-and-blue-values-from-a-color.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color.html","title":"How to read the red, green, and blue values from a Color","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to read the red, green, and blue values from a Color","description":"Article(s) > How to read the red, green, and blue values from a Color","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to read the red, green, and blue values from a Color"},{"property":"og:description","content":"How to read the red, green, and blue values from a Color"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to read the red, green, and blue values from a Color"}],["meta",{"property":"og:description","content":"Article(s) > How to read the red, green, and blue values from a Color"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-1~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to read the red, green, and blue values from a Color\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-1~dark.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color-2~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.15,"words":946},"filePathRelative":"hackingwithswift.com/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color.md","excerpt":"\\n"}');export{T as comp,U as data};
