import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as u,e as n,n as a,g as t,d as i,a as d,f as k,r as l,o as h}from"./app-BgNevrm5.js";const m={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g=e("nav",{class:"table-of-contents"},[e("ul")],-1),b=e("hr",null,null,-1),v=e("blockquote",null,[e("p",null,"Available from Swift 5.7")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0348-buildpartialblock.md",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"apple/swift-evolution",-1),x=k(`<p>To give you a practical example, here’s a simplified version of what SwiftUI’s <code>ViewBuilder</code> looks like:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@resultBuilder</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">SimpleViewBuilderOld</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildBlock</span><span class="token operator">&lt;</span>C0<span class="token punctuation">,</span> C1<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> c0<span class="token punctuation">:</span> C0<span class="token punctuation">,</span> <span class="token omit keyword">_</span> c1<span class="token punctuation">:</span> C1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TupleView</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>C0<span class="token punctuation">,</span> C1<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">where</span> C0 <span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> C1 <span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TupleView</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c0<span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildBlock</span><span class="token operator">&lt;</span>C0<span class="token punctuation">,</span> C1<span class="token punctuation">,</span> C2<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> c0<span class="token punctuation">:</span> C0<span class="token punctuation">,</span> <span class="token omit keyword">_</span> c1<span class="token punctuation">:</span> C1<span class="token punctuation">,</span> <span class="token omit keyword">_</span> c2<span class="token punctuation">:</span> C2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TupleView</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>C0<span class="token punctuation">,</span> C1<span class="token punctuation">,</span> C2<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">where</span> C0<span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> C1<span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> C2<span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TupleView</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c0<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’ve made that to include two versions of <code>buildBlock()</code>: one that accepts two views and one that accepts three. In practice, SwiftUI accepts a wide variety of alternatives, but critically only up to 10 – there’s a <code>buildBlock()</code> variant that returns <code>TupleView&lt;(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)&gt;</code>, but there isn’t anything beyond that for practical reasons.</p><p>We could then use that result builder with functions or computed properties, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@SimpleViewBuilderOld</span> <span class="token keyword">func</span> <span class="token function-definition function">createTextOld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will accept all three <code>Text</code> views using the <code>buildBlock&lt;C0, C1, C2&gt;()</code> variant, and return a single <code>TupleView</code> containing them all. However, in this simplified example there’s no way to add a <em>fourth</em> <code>Text</code> view, because I didn’t provide any more overloads in just the same way that SwiftUI doesn’t support 11 or more.</p><p>This is where the new <code>buildPartialBlock()</code> comes in, because it works like the <code>reduce()</code> method of sequences: it has an initial value, then updates that by adding whatever it has already to whatever comes next.</p><p>So, we could create a new result builder that knows how to accept a single view, and how to combine that view with another one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@resultBuilder</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">SimpleViewBuilderNew</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildPartialBlock</span><span class="token operator">&lt;</span><span class="token class-name">Content</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>first content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Content</span> <span class="token keyword">where</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        content</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildPartialBlock</span><span class="token operator">&lt;</span>C0<span class="token punctuation">,</span> C1<span class="token operator">&gt;</span><span class="token punctuation">(</span>accumulated<span class="token punctuation">:</span> C0<span class="token punctuation">,</span> next<span class="token punctuation">:</span> C1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TupleView</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>C0<span class="token punctuation">,</span> C1<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">where</span> C0<span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> C1<span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TupleView</span><span class="token punctuation">(</span><span class="token punctuation">(</span>accumulated<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even though we only have variants accepting one or two views, because they <em>accumulate</em> we can actually use as many as we want:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@SimpleViewBuilderNew</span> <span class="token keyword">func</span> <span class="token function-definition function">createTextNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result isn’t <em>identical</em>, however: in the first example we would get back a <code>TupleView&lt;Text, Text, Text&gt;</code>, whereas now we would get back a <code>TupleView&lt;(TupleView&lt;(Text, Text)&gt;, Text)&gt;</code> – one <code>TupleView</code> nested inside another. Fortunately, if the SwiftUI team do intend to adopt this they ought to be able to create the same 10 <code>buildPartialBlock()</code> overloads they had before, which should mean the compile automatically creates groups of 10 just like we’re doing explicitly right now.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>buildPartialBlock()</code> is part of Swift as opposed to any platform-specific runtime, so if you adopt it you’ll find it back deploys to earlier OS releases.</p></div>`,13),_={class:"hint-container details"},S=e("summary",null,"Other Changes in Swift 5.7",-1),T={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-6-to-5-7.playground.zip",target:"_blank",rel:"noopener noreferrer"};function V(c,B){const s=l("VPCard"),o=l("FontIcon");return h(),r("div",null,[e("h1",w,[e("a",f,[e("span",null,u(c.$frontmatter.title)+" 관련",1)])]),n(s,a(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,b,n(s,a(t({title:"buildPartialBlock for result builders | Changes in Swift 5.7",desc:"buildPartialBlock for result builders",link:"https://hackingwithswift.com/swift/5.7/buildpartialblock",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,e("p",null,[e("a",y,[i("SE-0348 ("),n(o,{icon:"iconfont icon-github"}),C,i(")")]),i(" dramatically simplifies the overloads required to implement complex result builders, which is part of the reason Swift’s advanced regular expression support was possible. However, it also theoretically removes the 10-view limit for SwiftUI without needing to add variadic generics, so if it’s adopted by the SwiftUI team it will make a lot of folks happy.")]),x,e("details",_,[S,n(s,a(t({title:"if let shorthand for unwrapping optionals | Changes in Swift 5.7",desc:"if let shorthand for unwrapping optionals",link:"/hackingwithswift.com/swift/5.7/if-let-shorthand.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Multi-statement closure type inference | Changes in Swift 5.7",desc:"Multi-statement closure type inference",link:"/hackingwithswift.com/swift/5.7/multi-statement-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Clock, Instant, and Duration | Changes in Swift 5.7",desc:"Clock, Instant, and Duration",link:"/hackingwithswift.com/swift/5.7/clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Regular expressions | Changes in Swift 5.7",desc:"Regular expressions",link:"/hackingwithswift.com/swift/5.7/regexes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Type inference from default expressions | Changes in Swift 5.7",desc:"Type inference from default expressions",link:"/hackingwithswift.com/swift/5.7/default-type-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Concurrency in top-level code | Changes in Swift 5.7",desc:"Concurrency in top-level code",link:"/hackingwithswift.com/swift/5.7/top-level-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Opaque parameter declarations | Changes in Swift 5.7",desc:"Opaque parameter declarations",link:"/hackingwithswift.com/swift/5.7/opaque-parameter-declarations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Structural opaque result types | Changes in Swift 5.7",desc:"Structural opaque result types",link:"/hackingwithswift.com/swift/5.7/structural-opaque-result-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Unlock existentials for all protocols | Changes in Swift 5.7",desc:"Unlock existentials for all protocols",link:"/hackingwithswift.com/swift/5.7/unlock-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Lightweight same-type requirements for primary associated types | Changes in Swift 5.7",desc:"Lightweight same-type requirements for primary associated types",link:"/hackingwithswift.com/swift/5.7/primary-associated-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Constrained existential types | Changes in Swift 5.7",desc:"Constrained existential types",link:"/hackingwithswift.com/swift/5.7/constrained-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Distributed actor isolation | Changes in Swift 5.7",desc:"Distributed actor isolation",link:"/hackingwithswift.com/swift/5.7/distributed-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "buildPartialBlock for result builders | Changes in Swift 5.7",
  "desc": "buildPartialBlock for result builders",
  "link": "/hackingwithswift.com/swift/5.7/buildpartialblock.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(s,a(t({title:"Implicitly opened existentials | Changes in Swift 5.7",desc:"Implicitly opened existentials",link:"/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Unavailable from async attribute | Changes in Swift 5.7",desc:"Unavailable from async attribute",link:"/hackingwithswift.com/swift/5.7/noasync.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e("p",null,[e("a",T,[n(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.7 playground")])])])])}const I=p(m,[["render",V],["__file","buildpartialblock.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swift/5.7/buildpartialblock.html","title":"buildPartialBlock for result builders","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"buildPartialBlock for result builders","description":"Article(s) > buildPartialBlock for result builders","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.7"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > buildPartialBlock for result builders"},{"property":"og:description","content":"buildPartialBlock for result builders"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/buildpartialblock.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/buildpartialblock.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"buildPartialBlock for result builders"}],["meta",{"property":"og:description","content":"Article(s) > buildPartialBlock for result builders"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.7"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"buildPartialBlock for result builders\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.67,"words":1100},"filePathRelative":"hackingwithswift.com/swift/5.7/buildpartialblock.md","excerpt":"\\n"}');export{I as comp,U as data};
