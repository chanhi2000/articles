import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as g,e,n as f,g as y,w as a,d as s,f as i,r as o,o as w}from"./app-BgNevrm5.js";const A="/bookshelf/assets/image/code-maze.com/action-filters-aspnetcore/Order-of-Infocation-in-Action-Filters.png",x="/bookshelf/assets/image/code-maze.com/action-filters-aspnetcore/02-New-Unprocessable-Entity-ActionFilter.png",F={},_={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},S=n("hr",null,null,-1),I=i("<ul><li><strong>Authorization filters</strong> – They run first to determine whether a user is authorized for the current request</li><li><strong>Resource filters</strong> – They run right after the authorization filters and are very useful for caching and performance</li><li><strong>Action filters</strong> – They run right before and after the action method execution</li><li><strong>Exception filters</strong> – They are used to handle exceptions before the response body is populated</li><li><strong>Result filters</strong> – They run before and after the execution of the action methods result.</li></ul><p>In this article, we are going to talk about Action filters and how to use them to create cleaner and reusable code in our Web API.</p>",2),q={class:"hint-container info"},T=n("p",{class:"hint-container-title"},"Info",-1),M={href:"https://github.com/CodeMazeBlog/action-filters-dotnetcore-webapi/tree/start-project",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"CodeMazeBlog/action-filters-dotnetcore-webapi",-1),j={href:"https://github.com/CodeMazeBlog/action-filters-dotnetcore-webapi/tree/end-project",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"CodeMazeBlog/action-filters-dotnetcore-webapi",-1),R=i(`<p>Let’s start.</p><hr><h2 id="action-filters-implementation" tabindex="-1"><a class="header-anchor" href="#action-filters-implementation"><span>Action Filters Implementation</span></a></h2><p>To create an Action filter, we need to create a class that inherits either from the <code>IActionFilter</code> interface or <code>IAsyncActionFilter</code> interface or from the <code>ActionFilterAttribute</code> class which is the implementation of the <code>IActionFilter</code>, <code>IAsyncActionFilter</code>, and a few different interfaces as well:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ActionFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span><span class="token punctuation">,</span> <span class="token class-name">IActionFilter</span><span class="token punctuation">,</span> <span class="token class-name">IFilterMetadata</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token class-name">IAsyncActionFilter</span><span class="token punctuation">,</span> <span class="token class-name">IResultFilter</span><span class="token punctuation">,</span> <span class="token class-name">IAsyncResultFilter</span><span class="token punctuation">,</span> <span class="token class-name">IOrderedFilter</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>In our examples, we are going to inherit from the <code>IActionFIlter</code> interface because it has all the method definitions we require.</p><p>To implement the synchronous Action filter that runs before and after action method execution, we need to implement <code>OnActionExecuting</code> and <code>OnActionExecuted</code> methods:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">namespace</span> <span class="token namespace">ActionFilters<span class="token punctuation">.</span>Filters</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionFilterExample</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IActionFilter</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// our code before action executes</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutedContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// our code after action executes</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can do the same thing with an asynchronous filter by inheriting from <code>IAsyncActionFilter</code>, but we only have one method to implement the <code>OnActionExecutionAsync</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">namespace</span> <span class="token namespace">ActionFilters<span class="token punctuation">.</span>Filters</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncActionFilterExample</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAsyncActionFilter</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnActionExecutionAsync</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ActionExecutionDelegate</span> next<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// execute any code before the action executes</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// execute any code after the action executes</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="the-scope-of-action-filters" tabindex="-1"><a class="header-anchor" href="#the-scope-of-action-filters"><span>The Scope of Action Filters</span></a></h2><p>Like the other types of filters, the action filter can be added to different scope levels: Global, Action, Controller.</p><p>If we want to use our filter globally, we need to register it inside the <code>AddControllers()</code> method in the <code>ConfigureServices</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>config <span class="token operator">=&gt;</span> </span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        config<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GlobalFilterExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>In .NET 6 and above, we don’t have the Startup class, so we have to use the Program class:</strong></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>config <span class="token operator">=&gt;</span> </span>
<span class="line"><span class="token punctuation">{</span> </span>
<span class="line">    config<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GlobalFilterExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But if we want to use our filter as a service type on the Action or Controller level, we need to register it in the same <code>ConfigureServices</code> method but as a service in the IoC container:</p>`,18),P=n("div",{class:"language-csharp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cs","data-title":"cs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"AddScoped"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ActionFilterExample"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"AddScoped"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ControllerFilterExample"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-csharp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cs","data-title":"cs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("builder"),n("span",{class:"token punctuation"},"."),s("Services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"AddScoped"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ActionFilterExample"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s()]),s(`
`),n("span",{class:"line"},[s("builder"),n("span",{class:"token punctuation"},"."),s("Services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"AddScoped"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ControllerFilterExample"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=i(`<p>Finally, to use a filter registered on the Action or Controller level, we need to place it on top of the Controller or Action as a ServiceType:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">namespace</span> <span class="token namespace">AspNetCore<span class="token punctuation">.</span>Controllers</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ControllerFilterExample</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ActionFilterExample</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="order-of-invocation" tabindex="-1"><a class="header-anchor" href="#order-of-invocation"><span>Order of Invocation</span></a></h2><p>The order in which our filters are executed is as follows:</p><figure><img src="`+A+`" alt="Order of execution of filters - Action Filters" tabindex="0" loading="lazy"><figcaption>Order of execution of filters - Action Filters</figcaption></figure><p>Of course, we can change the order of invocation by adding an additional property <code>Order</code> to the invocation statement:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">namespace</span> <span class="token namespace">AspNetCore<span class="token punctuation">.</span>Controllers</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ControllerFilterExample</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ActionFilterExample</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or something like this on top of the same action:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ActionFilterExample</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ActionFilterExample2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="improving-the-code-with-action-filters" tabindex="-1"><a class="header-anchor" href="#improving-the-code-with-action-filters"><span>Improving the Code with Action Filters</span></a></h2>`,12),B=n("code",null,"MoveController",-1),G=n("code",null,"Controllers",-1),D=i(`<p>Our actions are quite clean and readable without <code>try-catch</code> blocks due to global exception handling, but we can improve them even further.</p><p>The important thing to notice is that our <code>Movie</code> model inherits from the <code>IEntity</code> interface:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Movie&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Movie</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEntity</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;Name is required&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;Genre is required&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Genre <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;Director is required&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Director <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So let’s start with the validation code from the POST and PUT actions.</p><hr><h2 id="validation-with-action-filters" tabindex="-1"><a class="header-anchor" href="#validation-with-action-filters"><span>Validation with Action Filters</span></a></h2>`,6),U=n("code",null,"Movie",-1),H=i(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>movie <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Movie object is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span>ModelState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can extract that code into a custom Action Filter class, thus making this code reusable and the action cleaner.</p><p>So let’s do that.</p><p>Let’s create a new folder in our solution explorer, and name it <code>ActionFilters</code>. Then inside that folder, we are going to create a new class <code>ValidationFilterAttribute</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>Filters</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token namespace">ActionFilters<span class="token punctuation">.</span>ActionFilters</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IActionFilter</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutedContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we are going to modify the <code>OnActionExecuting</code> method to validate our model:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">ActionFilters<span class="token punctuation">.</span>Contracts</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>Filters</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token namespace">ActionFilters<span class="token punctuation">.</span>ActionFilters</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IActionFilter</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> param <span class="token operator">=</span> context<span class="token punctuation">.</span>ActionArguments<span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Value <span class="token keyword">is</span> <span class="token class-name">IEntity</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadRequestObjectResult</span><span class="token punctuation">(</span><span class="token string">&quot;Object is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UnprocessableEntityObjectResult</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>ModelState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutedContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span>          </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, let’s register this action filter in the <code>ConfigureServices</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">       services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MovieContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line">           options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">       services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ValidationFilterAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">       services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>For .NET 6, we have to use the <strong><code>builder</code></strong> variable inside the <strong><code>Program</code></strong> class:</strong></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MovieContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line">           options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       </span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ValidationFilterAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, let’s remove that validation code from our actions and call this action filter as a service:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationFilterAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">Movie</span> movie<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     _context<span class="token punctuation">.</span>Movies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     _context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     <span class="token keyword">return</span> <span class="token function">CreatedAtRoute</span><span class="token punctuation">(</span><span class="token string">&quot;MovieById&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> movie<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">,</span> movie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPut</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationFilterAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> id<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span><span class="token class-name">Movie</span> movie<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> dbMovie <span class="token operator">=</span> _context<span class="token punctuation">.</span>Movies<span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dbMovie <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    dbMovie<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    _context<span class="token punctuation">.</span>Movies<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>dbMovie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Excellent.</p><p>This code is much cleaner and more readable now without the validation part. And furthermore, the validation part is now reusable as long as our model classes inherit from the IEntity interface, which is quite common behavior.</p><p>Before we test this validation filter, we have to suppress validation from the <code>[ApiController]</code> attribute. If we don’t do it, it will overtake the validation from our action filter and always return 400 (BadRequest) for all validation errors. But as you’ve seen, if our model is invalid, we want to return the UnprocessableEntity result (422).</p><p>To suppress the default validation, we have to modify the <code>Startup</code> class:</p>`,17),L=n("div",{class:"language-csharp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cs","data-title":"cs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"Configure"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ApiBehaviorOptions"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("options "),n("span",{class:"token operator"},"=>")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    options"),n("span",{class:"token punctuation"},"."),s("SuppressModelStateInvalidFilter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("div",{class:"language-csharp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cs","data-title":"cs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("builder"),n("span",{class:"token punctuation"},"."),s("Services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"Configure"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ApiBehaviorOptions"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("options "),n("span",{class:"token operator"},"=>")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    options"),n("span",{class:"token punctuation"},"."),s("SuppressModelStateInvalidFilter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=i('<p>Now, if we send a PUT request for example with the invalid model we will get the <code>Unprocessable Entity</code> response:</p><figure><img src="'+x+`" alt="Unprocessable Entity ActionFilter" tabindex="0" loading="lazy"><figcaption>Unprocessable Entity ActionFilter</figcaption></figure><hr><h2 id="dependency-injection-in-action-filters" tabindex="-1"><a class="header-anchor" href="#dependency-injection-in-action-filters"><span>Dependency Injection in Action Filters</span></a></h2><p>If we take a look at our <code>GetById</code>, DELETE and PUT actions, we are going to see the code where we fetch the move by id from the database and check if it exists:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> dbMovie <span class="token operator">=</span> _context<span class="token punctuation">.</span>Movies<span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>dbMovie <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s something we can extract to the Action Filter class as well, thus making it reusable in all the actions.</p><p>Of course, we need to inject our <code>context</code> in a new ActionFilter class by using dependency injection.</p><p>So, let’s create another Action Filter class <code>ValidateEntityExistsAttribute</code> in the <code>ActionFilters</code> folder and modify it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token namespace">ActionFilters<span class="token punctuation">.</span>ActionFilters</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateEntityExistsAttribute<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IActionFilter</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">IEntity</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">MovieContext</span> _context<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token function">ValidateEntityExistsAttribute</span><span class="token punctuation">(</span><span class="token class-name">MovieContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            _context <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Guid</span> id <span class="token operator">=</span> Guid<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>ActionArguments<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                id <span class="token operator">=</span> <span class="token punctuation">(</span>Guid<span class="token punctuation">)</span>context<span class="token punctuation">.</span>ActionArguments<span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadRequestObjectResult</span><span class="token punctuation">(</span><span class="token string">&quot;Bad id parameter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> _context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>entity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotFoundResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;entity&quot;</span><span class="token punctuation">,</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutedContext</span> context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ve created this Action Filter class to be generic so that we could reuse it for any model in our project. Furthermore, if we find the entity in the database, we store it in <code>HttpContext</code> because we need that entity in our action methods and we don’t want to query the database two times (we would lose more than we gain if we double that action).</p><p>Now let’s register it:</p>`,12),Z=n("div",{class:"language-csharp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cs","data-title":"cs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"AddScoped"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ValidateEntityExistsAttribute"),n("span",{class:"token punctuation"},"<"),s("Movie"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),J=n("div",{class:"language-csharp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cs","data-title":"cs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("builder"),n("span",{class:"token punctuation"},"."),s("Services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"AddScoped"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("ValidateEntityExistsAttribute"),n("span",{class:"token punctuation"},"<"),s("Movie"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),X=i(`<p>And let’s modify our actions:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;MovieById&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidateEntityExistsAttribute<span class="token punctuation">&lt;</span>Movie<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> dbMovie <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Items<span class="token punctuation">[</span><span class="token string">&quot;entity&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">Movie</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>dbMovie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPut</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationFilterAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidateEntityExistsAttribute<span class="token punctuation">&lt;</span>Movie<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> id<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span><span class="token class-name">Movie</span> movie<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> dbMovie <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Items<span class="token punctuation">[</span><span class="token string">&quot;entity&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">Movie</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     dbMovie<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     _context<span class="token punctuation">.</span>Movies<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>dbMovie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     _context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     <span class="token keyword">return</span> <span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpDelete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidateEntityExistsAttribute<span class="token punctuation">&lt;</span>Movie<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> dbMovie <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Items<span class="token punctuation">[</span><span class="token string">&quot;entity&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">Movie</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     _context<span class="token punctuation">.</span>Movies<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>dbMovie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     _context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     <span class="token keyword">return</span> <span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Awesome.</p><p>Now our actions look great without code repetition, try-catch blocks, or additional fetch requests towards the database.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Thank you for reading this article. We hope you have learned new useful things.</p><p>As we already said, we always recommend using Action Filters because they give us reusability in our code and cleaner code in our actions as well.</p>`,8);function $(d,Q){const k=o("VPCard"),c=o("router-link"),m=o("SiteInfo"),l=o("RouteLink"),v=o("VidStack"),r=o("FontIcon"),u=o("Tabs");return w(),h("div",null,[n("h1",_,[n("a",E,[n("span",null,g(d.$frontmatter.title)+" 관련",1)])]),e(k,f(y({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",C,[n("ul",null,[n("li",null,[e(c,{to:"#action-filters-implementation"},{default:a(()=>[s("Action Filters Implementation")]),_:1})]),n("li",null,[e(c,{to:"#the-scope-of-action-filters"},{default:a(()=>[s("The Scope of Action Filters")]),_:1})]),n("li",null,[e(c,{to:"#order-of-invocation"},{default:a(()=>[s("Order of Invocation")]),_:1})]),n("li",null,[e(c,{to:"#improving-the-code-with-action-filters"},{default:a(()=>[s("Improving the Code with Action Filters")]),_:1})]),n("li",null,[e(c,{to:"#validation-with-action-filters"},{default:a(()=>[s("Validation with Action Filters")]),_:1})]),n("li",null,[e(c,{to:"#dependency-injection-in-action-filters"},{default:a(()=>[s("Dependency Injection in Action Filters")]),_:1})]),n("li",null,[e(c,{to:"#conclusion"},{default:a(()=>[s("Conclusion")]),_:1})])])]),S,e(m,{name:"Implementing Action Filters in ASP.NET Core",desc:"Find out how to use action filters to write cleaner actions and create a reusable code to validate your actions in .NET Core Web API.",url:"https://code-maze.com/action-filters-aspnetcore/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/code-maze.com/action-filters-aspnetcore/banner.png"}),n("p",null,[s("Filters in .NET offer a great way to hook into the "),e(l,{to:"/code-maze.com/asp-net-core-mvc-series.html"},{default:a(()=>[s("MVC")]),_:1}),s(" action invocation pipeline. Therefore, we can use filters to extract code that can be reused and make our actions cleaner and maintainable. There are some filters that are already provided by "),e(l,{to:"/code-maze.com/net-core-series.html"},{default:a(()=>[s("ASP.NET Core")]),_:1}),s(" like the authorization filter, and there are the custom ones that we can create ourselves.")]),n("p",null,[s("There are "),e(l,{to:"/code-maze.com/filters-in-asp-net-core-mvc.html"},{default:a(()=>[s("different filter types")]),_:1}),s(":")]),I,e(v,{src:"youtube/dsSBooVXvvg"}),n("div",q,[T,n("p",null,[s("To download the source code for our starting project, you can check out the "),n("a",M,[s("start-project-branch ("),e(r,{icon:"iconfont icon-github"}),N,s(")")]),s(". For the finished project refer to "),n("a",j,[s("end-project-branch ("),e(r,{icon:"iconfont icon-github"}),O,s(")")])])]),R,e(u,{id:"92",data:[{id:".NET Core"},{id:".NET 6 and above"}],active:0},{title0:a(({value:t,isActive:p})=>[s(".NET Core")]),title1:a(({value:t,isActive:p})=>[s(".NET 6 and above")]),tab0:a(({value:t,isActive:p})=>[P]),tab1:a(({value:t,isActive:p})=>[z]),_:1}),V,n("p",null,[s("If we open the starting project from the AppStart folder from our repository, we can find the "),B,s(" class in the "),G,s(" folder. This controller has an implementation for all the CRUD operations. For the sake of simplicity, we haven’t used any additional layers for our API. This project also implements global error handling so if you are not familiar with that topic, we suggest you read "),e(l,{to:"/code-maze.com/global-error-handling-aspnetcore.html"},{default:a(()=>[s("Global Exception Handling in .NET Core Web API.")]),_:1})]),D,n("p",null,[s("If we look at our "),e(l,{to:"/code-maze.com/net-core-web-development-part6.html"},{default:a(()=>[s("POST and PUT actions")]),_:1}),s(", we can notice the repeated code in which we validate our "),U,s(" model:")]),H,e(u,{id:"185",data:[{id:".NET Core"},{id:".NET 6 in the Program class:"}],active:0},{title0:a(({value:t,isActive:p})=>[s(".NET Core")]),title1:a(({value:t,isActive:p})=>[s(".NET 6 in the Program class:")]),tab0:a(({value:t,isActive:p})=>[L]),tab1:a(({value:t,isActive:p})=>[W]),_:1}),K,e(u,{id:"223",data:[{id:".NET Core"},{id:".NET 6 and above"}],active:0},{title0:a(({value:t,isActive:p})=>[s(".NET Core")]),title1:a(({value:t,isActive:p})=>[s(".NET 6 and above")]),tab0:a(({value:t,isActive:p})=>[Z]),tab1:a(({value:t,isActive:p})=>[J]),_:1}),X])}const sn=b(F,[["render",$],["__file","action-filters-aspnetcore.html.vue"]]),an=JSON.parse('{"path":"/code-maze.com/action-filters-aspnetcore.html","title":"Implementing Action Filters in ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Implementing Action Filters in ASP.NET Core","description":"Article(s) > Implementing Action Filters in ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","Article(s)"],"tag":["blog","code-maze.com","csharp"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Implementing Action Filters in ASP.NET Core"},{"property":"og:description","content":"Implementing Action Filters in ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/action-filters-aspnetcore.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/action-filters-aspnetcore.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Implementing Action Filters in ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Implementing Action Filters in ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/action-filters-aspnetcore/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/action-filters-aspnetcore/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Implementing Action Filters in ASP.NET Core"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:published_time","content":"2022-10-27T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Implementing Action Filters in ASP.NET Core\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/action-filters-aspnetcore/Order-of-Infocation-in-Action-Filters.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/action-filters-aspnetcore/02-New-Unprocessable-Entity-ActionFilter.png\\"],\\"datePublished\\":\\"2022-10-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/cs/articles/README.md","date":"2022-10-27T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/code-maze.com/action-filters-aspnetcore/banner.png"},"headers":[{"level":2,"title":"Action Filters Implementation","slug":"action-filters-implementation","link":"#action-filters-implementation","children":[]},{"level":2,"title":"The Scope of Action Filters","slug":"the-scope-of-action-filters","link":"#the-scope-of-action-filters","children":[]},{"level":2,"title":"Order of Invocation","slug":"order-of-invocation","link":"#order-of-invocation","children":[]},{"level":2,"title":"Improving the Code with Action Filters","slug":"improving-the-code-with-action-filters","link":"#improving-the-code-with-action-filters","children":[]},{"level":2,"title":"Validation with Action Filters","slug":"validation-with-action-filters","link":"#validation-with-action-filters","children":[]},{"level":2,"title":"Dependency Injection in Action Filters","slug":"dependency-injection-in-action-filters","link":"#dependency-injection-in-action-filters","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.47,"words":1940},"filePathRelative":"code-maze.com/action-filters-aspnetcore.md","localizedDate":"2022년 10월 27일","excerpt":"\\n"}');export{sn as comp,an as data};
