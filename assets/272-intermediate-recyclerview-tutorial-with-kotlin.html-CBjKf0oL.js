import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as a,n as h,g as m,w as o,d as s,f as p,r as l,o as v}from"./app-BgNevrm5.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},b=n("hr",null,null,-1),_=p('<p>Have you ever wanted to go to Mars or just look out over Mars’ horizon? We can’t send you there but we can give you the next best thing: an app with images from all the Mars rovers.</p><p>To show those images, we’ll use one of Android’s most popular views: the <code>RecyclerView</code>.</p><p>The <code>RecyclerView</code> layout was introduced in the Lollipop support library and Android developers have been using it for awhile. It is one of the most useful layouts and gives you more flexibility compared to a <code>ListView</code> in a much more performant package.</p><p>However, you may not know all that you can do with it. In this tutorial, you’ll see how to add sections, animations, dividers, and swipe gestures.</p><p>You should be familiar with the basics of using <code>ReyclerView</code>. If not, you can read an introduction to using <code>RecyclerView</code> <a href="https://www.raywenderlich.com/126528/android-recyclerview-tutorial" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Here is a screenshot from the final version of our app:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2017/10/Screenshot_1507091574-281x500.png" alt="mars rover screenshot" width="240" tabindex="0" loading="lazy"><figcaption>mars rover screenshot</figcaption></figure><p>Checkout those amazing Mars landscapes!</p><p>You’re going to continue with the NASA site used in the previous <code>RecyclerView</code> tutorial, but do things a bit differently. You’ll be using an API that will return a list of Mars rover photos. Along with the <code>RecyclerView</code> of photos, there are two spinners to change the list of photos: one for rovers and the other for cameras.</p><hr><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2>',11),q={href:"https://koenig-media.raywenderlich.com/uploads/2017/12/marsrovers-starter-1.zip",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,[s("Next, head to the NASA site ("),n("a",{href:"https://api.nasa.gov/index.html#apply-for-an-api-key",target:"_blank",rel:"noopener noreferrer"},"https://api.nasa.gov/index.html#apply-for-an-api-key"),s(") and get an API key to use for the rover photos.")],-1),x=n("p",null,[s("Build and run your app on an emulator or phone. You should see a default “Hello World!” "),n("strong",null,"TextView"),s(" in the center.")],-1),A=n("figure",null,[n("img",{src:"https://koenig-media.raywenderlich.com/uploads/2017/09/Screenshot_20170925-222953-281x500.png",alt:"screenshot",width:"240",tabindex:"0",loading:"lazy"}),n("figcaption",null,"screenshot")],-1),V=n("h3",{id:"manifest",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#manifest"},[n("span",null,"Manifest")])],-1),T=n("code",null,"AndroidManifest.xml",-1),P=p(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.INTERNET<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will allow you to get information from the NASA website. Note that this is not considered a “dangerous” permission and the user will not be asked to approve it.</p><h3 id="string-data" tabindex="-1"><a class="header-anchor" href="#string-data"><span>String Data</span></a></h3>`,3),I=n("code",null,"strings.xml",-1),S=n("code",null,"strings.xml",-1),L=n("code",null,"res/values",-1),C=n("code",null,"app_name",-1),j=p(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>api_error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Problems getting Photos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rovers<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Rovers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cameras<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Cameras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rovers<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Curiosity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Opportunity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Spirit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string-array</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>camera_names<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Front Hazard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Rear Hazard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Navigation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Panoramic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>Mast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string-array</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string-array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>camera_values<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>FHAZ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>RHAZ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>NAVCAM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>PANCAM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>MAST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string-array</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="main-layout" tabindex="-1"><a class="header-anchor" href="#main-layout"><span>Main Layout</span></a></h2>`,3),H=n("code",null,"MainActivity",-1),N=n("code",null,"activity_main.xml",-1),D=p(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.constraint.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.raywenderlich.marsrovers.MainActivity<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.constraint.ConstraintLayout</span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/control_layout<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10dp<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/roverLabel<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/rovers<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.AppCompatSpinner</span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/rovers<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/cameraLabel<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4dp<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/cameras<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/roverLabel<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.AppCompatSpinner</span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/cameras<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/rovers<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.constraint.ConstraintLayout</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.RecyclerView</span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/recycler_view<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0dp<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0dp<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gone<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/control_layout<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProgressBar</span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/progress<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>indeterminate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/control_layout<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.constraint.ConstraintLayout</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This uses Android&#39;s new <code>ConstraintLayout</code> to add two rows of spinners, one for the Rover and one for the camera. There’s a <code>RecyclerView</code> below the spinners. Below the <code>RecyclerView</code> there is a <code>ProgressBar</code> that will spin while the data is loading.</p>`,2),O=n("code",null,"MainActivity.kt",-1),M=n("code",null,"onCreate()",-1),B=n("code",null,"setContentView",-1),Y=p(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">recycler_view<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE</span>
<span class="line">recycler_view<span class="token punctuation">.</span>layoutManager <span class="token operator">=</span> <span class="token function">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),K=n("code",null,"recycler_view",-1),z=n("code",null,"recycler_view",-1),E=n("kbd",null,"option",-1),F=n("kbd",null,"return",-1),U=n("kbd",null,"Alt",-1),G=n("kbd",null,"Enter",-1),W=n("code",null,"[Import]",-1),J=n("code",null,"R.id.recycler_view",-1),Z=n("code",null,"recycler_view",-1),$=p('<p>Now, run the app and you should see the following:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2017/10/Screenshot_1507085951-281x500.png" alt="mars rover screenshot" width="240" tabindex="0" loading="lazy"><figcaption>mars rover screenshot</figcaption></figure><hr><h2 id="viewholder" tabindex="-1"><a class="header-anchor" href="#viewholder"><span>ViewHolder</span></a></h2><p>The <code>ViewHolder</code> class holds the inflated view, is created in a <code>RecyclerView.Adapter</code> in <code>onCreateViewHolder</code> and bound in <code>onBindViewHolder</code>.</p><p>Before <code>RecyclerView</code>, Android developers used <code>ListView</code> to achieve similar behavior. As <code>ListView</code> usage matured, developers started using the “view holder” pattern and Google then made <code>ViewHolder</code> a key part of the <code>RecyclerView</code> API.</p><p>You’ll be creating a special <code>ViewHolder</code> class that will allow you to handle text and image views without using <code>findViewById</code>. In this <code>DefaultViewHolder</code> class, you’ll start by going through all of the child views and putting them in a map so that you can easily retrieve the view later. See the starter project for the full <code>DefaultViewHolder</code> class.</p><hr><h2 id="adapter-layouts" tabindex="-1"><a class="header-anchor" href="#adapter-layouts"><span>Adapter Layouts</span></a></h2><p>You need to create the two layouts that will be used in the adapter, one for the section headers, and one for the rows themselves. First, you’ll add the header style needed for the header item layout.</p><h3 id="header-style" tabindex="-1"><a class="header-anchor" href="#header-style"><span>Header Style</span></a></h3>',11),X=n("code",null,"styles.xml",-1),Q=n("code",null,"header_item.xml",-1),nn=p(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android:textSize<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>16sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android:textColor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>@android:color/holo_red_dark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),sn=n("code",null,"res/layout",-1),an=n("code",null,"[New/Layout resource file]",-1),tn=n("code",null,"header_item.xml",-1),en=p(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vertical<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10dp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/header_text<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@style/header<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Front Hazard<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is just a <code>TextView</code> for the header text.</p>`,2),on=n("code",null,"row_item.xml",-1),pn=p(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vertical<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/camera_image<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>80dp<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>adjustViewBounds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fitXY<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/date<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10/07/2017<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This has an <code>ImageView</code> for the mars photo and a <code>TextView</code> for the date of the image below it.</p><hr><h2 id="data" tabindex="-1"><a class="header-anchor" href="#data"><span>Data</span></a></h2><p>You’ll be populating the <code>RecyclerView.Adapter</code> using data from the NASA site: <a href="https://api.nasa.gov/api.html#MarsPhotos" target="_blank" rel="noopener noreferrer">https://api.nasa.gov/api.html#MarsPhotos</a>.</p><p>An easy way to test an API is to use the Postman Chrome extension or the Postman app <a href="https://www.getpostman.com/" target="_blank" rel="noopener noreferrer">https://www.getpostman.com</a>. Once you’ve installed it, take the url <code>https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&amp;api_key=</code> and add your key to the end.</p><p>Hit the “Send” button in Postman and you’ll see the returned JSON in the Response section. Notice how it returns an object that has 1 item named photos, which is an array of objects. Now, you’ll create models to hold the data that comes back.</p>`,7),ln=n("code",null,"com.raywenderlich.marsrovers",-1),cn=n("code",null,"[New/Package]",-1),un=n("code",null,"models",-1),rn=n("code",null,"models",-1),dn=n("code",null,"[New/Kotlin File/Class]",-1),kn=n("code",null,"Camera",-1),hn=n("code",null,"Class",-1),mn=p(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Camera</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> rover_id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> full_name<span class="token operator">:</span> String<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Notice that you are using the <code>data</code> keyword to have Kotlin create the getters and setters for you, and that the class doesn’t need a beginning or ending brace as there are no methods. The field names match the names of the fields in the JSON response returned from the NASA API endpoint. You could make the names more readable, but you’d have to add some annotations to do that. For now, just use the given names.</p><p>Next, right-click on the <code>models</code> package and create a new Kotlin class named <code>Photo</code> and replace with the following:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Photo</span><span class="token punctuation">(</span><span class="token keyword">val</span> id <span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> img_src <span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> earth_date<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> camera<span class="token operator">:</span> Camera<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Create another Kotlin class named <code>PhotoList</code>. The <code>PhotoList</code> class just holds a list of photos and is the root element of the JSON data:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">PhotoList</span><span class="token punctuation">(</span><span class="token keyword">val</span> photos<span class="token operator">:</span> List<span class="token operator">&lt;</span>Photo<span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, create a <code>PhotoRow</code> class that will be used to indicate that a row is either a photo or a header. This way, you can just have a list of <code>PhotoRow</code> objects and check which type to show based on the value of the <code>RowType</code> enum. Create a new Kotlin file called <code>PhotoRow</code> in the <code>models</code> package and add the following:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token keyword">class</span> RowType <span class="token punctuation">{</span></span>
<span class="line">   PHOTO<span class="token punctuation">,</span></span>
<span class="line">   HEADER</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">PhotoRow</span><span class="token punctuation">(</span><span class="token keyword">var</span> type<span class="token operator">:</span> RowType<span class="token punctuation">,</span> <span class="token keyword">var</span> photo<span class="token operator">:</span> Photo<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">var</span> header<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>type</code> property will distinguish between photos and headers. The row will have either a photo or a header string. Both the photo and header variables are nullable.</p><hr><h2 id="adapter" tabindex="-1"><a class="header-anchor" href="#adapter"><span>Adapter</span></a></h2>`,11),vn=n("code",null,"RecyclerView.Adapter",-1),gn=n("code",null,"DefaultViewHolder",-1),wn=n("code",null,"com.raywenderlich.marsrovers.recyclerview",-1),yn=n("code",null,"PhotoAdapter",-1),fn=p(`<p>The class will start out like so:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token function">PhotoAdapter</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">var</span> photoList<span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span>Adapter<span class="token operator">&lt;</span>DefaultViewHolder<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Along with the passed in list of photos, create two more variables at the beginning of the class:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">var</span> filteredPhotos <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">var</span> filtering <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>filterPhotos</code> list is used to hold photos for a specific camera, and the <code>filtering</code> flag will be true when the user is filtering.</p><p>There are three abstract methods of <code>RecyclerView.Adapter</code> that have to be implemented: <code>getItemCount</code>, <code>onCreateViewHolder</code>, and <code>onBindViewHolder</code>. You will also override the <code>getItemViewType</code> method to return different values for the header and photo row type.</p><p><code>getItemCount</code> returns the number of photos available. If filtering is on, return the size from the filtered list:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>filtering<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> filteredPhotos<span class="token punctuation">.</span>size</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">return</span> photoList<span class="token punctuation">.</span>size</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>onBindViewHolder</code> is where you load the photo or set the header text.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> DefaultViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> photoRow <span class="token operator">:</span> PhotoRow <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>filtering<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    filteredPhotos<span class="token punctuation">[</span>position<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    photoList<span class="token punctuation">[</span>position<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>photoRow<span class="token punctuation">.</span>type <span class="token operator">==</span> RowType<span class="token punctuation">.</span>PHOTO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> photo <span class="token operator">=</span> photoRow<span class="token punctuation">.</span>photo</span>
<span class="line">    Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span>context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>photo<span class="token operator">?</span><span class="token punctuation">.</span>img_src<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>camera_image<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    photo<span class="token operator">?</span><span class="token punctuation">.</span>earth_date<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> holder<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>date<span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    photoRow<span class="token punctuation">.</span>header<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> holder<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>header_text<span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),bn={href:"https://github.com/bumptech/glide",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"bumptech/glide",-1),qn=n("code",null,"ImageView",-1),Rn=n("a",{href:"http://square.github.io/picasso/",target:"_blank",rel:"noopener noreferrer"},"Picasso",-1),xn=p(`<p><code>onCreateViewHolder</code> is where you inflate the layout and return the <strong>ViewHolder</strong>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> ViewGroup<span class="token punctuation">,</span> viewType<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> DefaultViewHolder <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> layoutInflater <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>context<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">val</span> inflatedView <span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    RowType<span class="token punctuation">.</span>PHOTO<span class="token punctuation">.</span>ordinal <span class="token operator">-&gt;</span> layoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>row_item<span class="token punctuation">,</span> parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> layoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>header_item<span class="token punctuation">,</span> parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">DefaultViewHolder</span><span class="token punctuation">(</span>inflatedView<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For the two methods <code>onCreateViewHolder</code> and <code>onBindViewHolder</code>, you need to distinguish between a header and photo row. You can do that by checking the PhotoRow’s type, as you’ll see in the next section.</p><hr><h2 id="section-headers" tabindex="-1"><a class="header-anchor" href="#section-headers"><span>Section Headers</span></a></h2><p>To provide headers for rows, you just need to have different row types. This is done by letting the <code>RecyclerView</code> know what type to use for each row.</p><p>Override the <code>getItemViewType</code> method and return a different integer for each type. You will be returning two different types, one for the header and one for the photo. You can use the ordinal of the enum (so the returned values will be 0 and 1). Add the following method after <code>onCreateViewHolder</code>.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getItemViewType</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>filtering<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    filteredPhotos<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span>ordinal</span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    photoList<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span>ordinal</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both <code>getItemCount</code> and <code>getItemViewType</code> need to take into account the filtering flags to use either the original <code>photoList</code> or the <code>filteredPhotos</code> list.</p><p>In <code>onCreateViewHolder</code>, you load in a row_item layout for photos and a head_item layout for the header. The <code>onBindViewHolder</code> checks the type and binds the appropriate items to the <strong>ViewHolder</strong>.</p><p>Now run the app to make sure it builds. Since you haven’t added the adapter to the <strong>RecyclerView</strong> yet, you won’t see anything quite yet, only the spinning ProgressBar.</p><hr><h2 id="diffutil" tabindex="-1"><a class="header-anchor" href="#diffutil"><span>DiffUtil</span></a></h2><p><code>DiffUtil</code> is a utility class from the <code>RecyclerView</code> support library used to calculate the difference between two lists and create the operations that will morph one list into another. It will be used by the <code>RecyclerView.Adapter</code> to trigger the optimal data change notifications that are used to animate the <strong>RecyclerView</strong>‘s rows.</p><p>To use this method, you need to implement the <code>DiffUtil.Callback</code>. Add this to the end of the <code>PhotoAdapter</code> class:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token function">PhotoRowDiffCallback</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> newRows <span class="token operator">:</span> List<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> oldRows <span class="token operator">:</span> List<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> DiffUtil<span class="token punctuation">.</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">areItemsTheSame</span><span class="token punctuation">(</span>oldItemPosition<span class="token operator">:</span> Int<span class="token punctuation">,</span> newItemPosition<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> oldRow <span class="token operator">=</span> oldRows<span class="token punctuation">[</span>oldItemPosition<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">val</span> newRow <span class="token operator">=</span> newRows<span class="token punctuation">[</span>newItemPosition<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> oldRow<span class="token punctuation">.</span>type <span class="token operator">==</span> newRow<span class="token punctuation">.</span>type</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getOldListSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> oldRows<span class="token punctuation">.</span>size</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getNewListSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> newRows<span class="token punctuation">.</span>size</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">areContentsTheSame</span><span class="token punctuation">(</span>oldItemPosition<span class="token operator">:</span> Int<span class="token punctuation">,</span> newItemPosition<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> oldRow <span class="token operator">=</span> oldRows<span class="token punctuation">[</span>oldItemPosition<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">val</span> newRow <span class="token operator">=</span> newRows<span class="token punctuation">[</span>newItemPosition<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> oldRow <span class="token operator">==</span> newRow</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This class checks the items to see if they are the same type or have the same values. The <code>areItemsTheSame</code> method just checks the row type but the <code>areContentsTheSame</code> checks to see if the rows are equal.</p><h3 id="additional-methods" tabindex="-1"><a class="header-anchor" href="#additional-methods"><span>Additional Methods</span></a></h3><p>To update the photo list, you need to pass in a new list, calculate the difference between the two lists and clear the filter. Add the following methods after <code>getItemViewType</code> in <code>PhotoAdapter</code> to support clearing the filter list, use <code>DiffUtil</code> to tell the <strong>Adapter</strong> how to update the photo views, and remove rows:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">clearFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    filtering <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    filteredPhotos<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">updatePhotos</span><span class="token punctuation">(</span>photos <span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   DiffUtil<span class="token punctuation">.</span><span class="token function">calculateDiff</span><span class="token punctuation">(</span><span class="token function">PhotoRowDiffCallback</span><span class="token punctuation">(</span>photos<span class="token punctuation">,</span> photoList<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchUpdatesTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">   photoList <span class="token operator">=</span> photos</span>
<span class="line">   <span class="token function">clearFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">removeRow</span><span class="token punctuation">(</span>row <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>filtering<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       filteredPhotos<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">       photoList<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice the <code>notifyItemRemoved</code> method. That method will allow animations to occur for the rows around the deleted row because it tells <strong>RecyclerView</strong> exactly how the data in the adapter has changed. It’s best not to use <code>notifyDataSetChanged</code> for this case, as that does not provide <strong>RecyclerView</strong> with details about exactly what has changed.</p><hr><h2 id="retrofit" tabindex="-1"><a class="header-anchor" href="#retrofit"><span>Retrofit</span></a></h2><p>To get the data from NASA, you’ll be using the <a href="http://square.github.io/retrofit/" target="_blank" rel="noopener noreferrer">Retrofit</a> and <a href="https://github.com/square/moshi" target="_blank" rel="noopener noreferrer">Moshi</a> libraries. You’ll use Retrofit for downloading the data and Moshi for converting it from JSON to our models.</p><p>First, create a service interface. Create a new package named <strong>service</strong> and then right click to create a new Kotlin interface named <em><code>NasaApi</code></em>. Replace the code with the following:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">interface</span> NasaApi <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;mars-photos/api/v1/rovers/{rover}/photos?sol=1000&amp;api_key=&lt;key&gt;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">fun</span> <span class="token function">getPhotos</span><span class="token punctuation">(</span><span class="token annotation builtin">@Path</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;rover&quot;</span></span><span class="token punctuation">)</span> rover<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Call<span class="token operator">&lt;</span>PhotoList<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Substitute your key from the NASA site for <code>&lt;key&gt;</code>. This sets up the method to get the list of Photos. The passed in rover string will be substitued for {rover}.</p><p>If you need to add an import for <code>Call</code>, be sure to use the one from the <code>retrofit2</code> package.</p><p>Next, you’ll need to create the actual service. Your service should be a Singleton and in Kotlin, creating one is extremely easy.</p>`,29),An=n("code",null,"service",-1),Vn=n("code",null,"[New/Kotlin File/Class]",-1),Tn=n("code",null,"NasaPhotos",-1),Pn=n("strong",null,"Kind",-1),In=n("code",null,"[Object]",-1),Sn=p(`<p>Create a variable named <code>service</code> that is used in the <code>getPhotos</code> method:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">object</span> NasaPhotos <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">val</span> service <span class="token operator">:</span> NasaApi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And then add an <code>init</code> method. This will create the instance of Retrofit, set Moshi as the JSON converter, and finally create the <code>service</code> object:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">init</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> retrofit <span class="token operator">=</span> Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;https://api.nasa.gov/&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>MoshiConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>NasaApi<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, create a new method to make the call for the photos:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">fun</span> <span class="token function">getPhotos</span><span class="token punctuation">(</span>rover<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Call<span class="token operator">&lt;</span>PhotoList<span class="token operator">&gt;</span> <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getPhotos</span><span class="token punctuation">(</span>rover<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You’re almost there. You just need to setup the spinners and the <strong>RecyclerView</strong> adapter, which you’ll do next.</p><hr><h2 id="updating-the-main-ui" tabindex="-1"><a class="header-anchor" href="#updating-the-main-ui"><span>Updating the main UI</span></a></h2><p>It’s time to update <code>MainActivity</code> to setup the spinners and load some photos!</p><p>Add a few variables to hold the current rover string and the spinner positions, at the top of <code>MainActivity</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">var</span> currentRover <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;curiosity&quot;</span></span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">var</span> currentRoverPosition <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">var</span> currentCameraPosition <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Above the <code>MainActivity</code> class declaration add:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;MarsRover&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>TAG</code> will be used for logging errors.</p><p>Add the following below the <code>onCreate</code> method:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">setupSpinners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token function">setupRoverSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token function">setupCameraSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">setupCameraSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// Camera spinner</span></span>
<span class="line">   <span class="token keyword">val</span> cameraStrings <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>camera_values<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">val</span> cameraAdapter <span class="token operator">=</span> ArrayAdapter<span class="token punctuation">.</span><span class="token function">createFromResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>camera_names<span class="token punctuation">,</span> android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_spinner_item<span class="token punctuation">)</span></span>
<span class="line">   cameraAdapter<span class="token punctuation">.</span><span class="token function">setDropDownViewResource</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_spinner_dropdown_item<span class="token punctuation">)</span></span>
<span class="line">   cameras<span class="token punctuation">.</span>adapter <span class="token operator">=</span> cameraAdapter</span>
<span class="line">   cameras<span class="token punctuation">.</span>onItemSelectedListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> AdapterView<span class="token punctuation">.</span><span class="token function">OnItemSelectedListener</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNothingSelected</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> AdapterView<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">       <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onItemSelected</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> AdapterView<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           currentCameraPosition <span class="token operator">=</span> position</span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">setupRoverSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// Setup the spinners for selecting different rovers and cameras</span></span>
<span class="line">   <span class="token keyword">val</span> roverStrings <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>rovers<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">val</span> adapter <span class="token operator">=</span> ArrayAdapter<span class="token punctuation">.</span><span class="token function">createFromResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>array<span class="token punctuation">.</span>rovers<span class="token punctuation">,</span> android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_spinner_item<span class="token punctuation">)</span></span>
<span class="line">   adapter<span class="token punctuation">.</span><span class="token function">setDropDownViewResource</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_spinner_dropdown_item<span class="token punctuation">)</span></span>
<span class="line">   rovers<span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter</span>
<span class="line">   rovers<span class="token punctuation">.</span>onItemSelectedListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> AdapterView<span class="token punctuation">.</span><span class="token function">OnItemSelectedListener</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNothingSelected</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> AdapterView<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">       <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onItemSelected</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> AdapterView<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRoverPosition <span class="token operator">!=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">               currentRover <span class="token operator">=</span> roverStrings<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">               <span class="token function">loadPhotos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">           currentRoverPosition <span class="token operator">=</span> position</span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These setup the spinners to hold the corresponding string arrays.</p><p>At the end of the <code>onCreate</code> method, add the following two lines that will setup the spinners and load the photos:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token function">setupSpinners</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">loadPhotos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, you’ll load and sort our photos. Add the following after <code>setupRoverSpinner</code> in the <code>MainActivity</code>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loadPhotos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    progress<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE</span>
<span class="line">    recycler_view<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE</span>
<span class="line">    NasaPhotos<span class="token punctuation">.</span><span class="token function">getPhotos</span><span class="token punctuation">(</span>currentRover<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>PhotoList<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>PhotoList<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           Snackbar<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>recycler_view<span class="token punctuation">,</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>api_error<span class="token punctuation">,</span> Snackbar<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span></span>
<span class="line">           Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Problems getting Photos with error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">t</span></span><span class="token string">.msg&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">       <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>PhotoList<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>PhotoList<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           response<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> photoResponse <span class="token operator">-&gt;</span></span>
<span class="line">               <span class="token keyword">if</span> <span class="token punctuation">(</span>photoResponse<span class="token punctuation">.</span>isSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                  <span class="token keyword">val</span> body <span class="token operator">=</span> photoResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                  body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span></span>
<span class="line">                     Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">body<span class="token punctuation">.</span>photos<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> photos&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                     <span class="token keyword">if</span> <span class="token punctuation">(</span>recycler_view<span class="token punctuation">.</span>adapter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">val</span> adapter <span class="token operator">=</span> <span class="token function">PhotoAdapter</span><span class="token punctuation">(</span><span class="token function">sortPhotos</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        recycler_view<span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter</span>
<span class="line">                     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token punctuation">(</span>recycler_view<span class="token punctuation">.</span>adapter <span class="token keyword">as</span> PhotoAdapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updatePhotos</span><span class="token punctuation">(</span><span class="token function">sortPhotos</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                     <span class="token punctuation">}</span></span>
<span class="line">                   <span class="token punctuation">}</span></span>
<span class="line">                   recycler_view<span class="token punctuation">.</span><span class="token function">scrollToPosition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                   recycler_view<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE</span>
<span class="line">                   progress<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE</span>
<span class="line">               <span class="token punctuation">}</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">sortPhotos</span><span class="token punctuation">(</span>photoList<span class="token operator">:</span> PhotoList<span class="token punctuation">)</span> <span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">val</span> map <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>Photo<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span>photo <span class="token keyword">in</span> photoList<span class="token punctuation">.</span>photos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">var</span> photos <span class="token operator">=</span> map<span class="token punctuation">[</span>photo<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>full_name<span class="token punctuation">]</span></span>
<span class="line">       <span class="token keyword">if</span> <span class="token punctuation">(</span>photos <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           photos <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">           map<span class="token punctuation">[</span>photo<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>full_name<span class="token punctuation">]</span> <span class="token operator">=</span> photos</span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">       photos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>photo<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">val</span> newPhotos <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       newPhotos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">PhotoRow</span><span class="token punctuation">(</span>RowType<span class="token punctuation">.</span>HEADER<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">       value<span class="token punctuation">.</span><span class="token function">mapTo</span><span class="token punctuation">(</span>newPhotos<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">PhotoRow</span><span class="token punctuation">(</span>RowType<span class="token punctuation">.</span>PHOTO<span class="token punctuation">,</span> it<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">return</span> newPhotos</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll have to import a few classes to get rid of the errors. Note that any of the imports that provide multiple options should use the ones in the <code>retrofit2</code> package.</p><p>In the <code>sortPhotos</code> method, you put the photos into sections arranged by camera.</p><p>Now it’s time to try it out. Build and run the app, and within about 10 or 20 seconds, you should see something like:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2017/10/Screenshot_1507091574-281x500.png" alt="mars rover screenshot" width="240" tabindex="0" loading="lazy"><figcaption>mars rover screenshot</figcaption></figure><p>If you don’t see any images, make sure you have your personal key in the Retrofit <code>@GET</code> annotation.</p><p>You can choose different rovers from the spinner in the top right and different cameras from the spinner below the rover spinner but they won’t do anything until they are hooked up. Note also that not all rovers have images from all cameras.</p><hr><h2 id="filtering" tabindex="-1"><a class="header-anchor" href="#filtering"><span>Filtering</span></a></h2><p>In order to filter the list, add the filterCamera method to PhotoAdapter below <code>getItemViewType</code>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">fun</span> <span class="token function">filterCamera</span><span class="token punctuation">(</span>camera<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   filtering <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">   <span class="token keyword">val</span> newPhotos <span class="token operator">=</span> photoList<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> photo <span class="token operator">-&gt;</span> photo<span class="token punctuation">.</span>type <span class="token operator">==</span> RowType<span class="token punctuation">.</span>PHOTO <span class="token operator">&amp;&amp;</span> photo<span class="token punctuation">.</span>photo<span class="token operator">?</span><span class="token punctuation">.</span>camera<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>camera<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> ArrayList<span class="token operator">&lt;</span>PhotoRow<span class="token operator">&gt;</span></span>
<span class="line">   DiffUtil<span class="token punctuation">.</span><span class="token function">calculateDiff</span><span class="token punctuation">(</span><span class="token function">PhotoRowDiffCallback</span><span class="token punctuation">(</span>newPhotos<span class="token punctuation">,</span> photoList<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchUpdatesTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">   filteredPhotos <span class="token operator">=</span> newPhotos</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now go back to your <code>MainActivity</code> and hook up the camera filtering. Add the following code to the beginning of the <code>OnItemSelectedListener.onItemSelected()</code> in the <code>setupCameraSpinner</code> method:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>recycler_view<span class="token punctuation">.</span>adapter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentCameraPosition <span class="token operator">!=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token punctuation">(</span>recycler_view<span class="token punctuation">.</span>adapter <span class="token keyword">as</span> PhotoAdapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filterCamera</span><span class="token punctuation">(</span>cameraStrings<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You pass in the camera string to filter on and create a new list with just those photos. You use Kotlin’s <code>filter</code> function on the collection and return a list of photos and has the given camera value.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2017/12/opportunity-281x500.png" alt="Now run the app and choose Opportunity as the new rover and you should see something like" width="240" tabindex="0" loading="lazy"><figcaption>Now run the app and choose Opportunity as the new rover and you should see something like</figcaption></figure><hr><h2 id="itemdecorators" tabindex="-1"><a class="header-anchor" href="#itemdecorators"><span>ItemDecorators</span></a></h2><p>Unlike <strong>ListView</strong>, <strong>RecyclerView</strong> does not come with any built-in dividers. Instead, <strong>RecyclerView</strong> allows you to add your own decorators.</p><p>The <strong>RecyclerView</strong> library comes with a <code>DividerItemDecoration</code> that can be used to put dividers between your rows. You can add a divider with this one line, which you should add to <code>onCreate()</code> in <code>MainActivity</code> after the line: <code>recycler_view.visibility = View.GONE</code>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">recycler_view<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token function">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can see the divider after the photo date on the last photo in a section.</p><p>To create your own decorator, just subclass <code>ItemDecoration</code> and implement the <code>onDraw</code> and/or the <code>onDrawOver</code> methods.</p><hr><h2 id="animations" tabindex="-1"><a class="header-anchor" href="#animations"><span>Animations</span></a></h2><p>__RecyclerView__s allow animations for each row and provides built-in animations for adding and removing rows.</p><p>To show an animation for adding a row, make sure you use <code>notifyItemAdded(position)</code> instead of calling <code>notifyDataChanged()</code>. This lets the view know that just one row has been added and can animate that addition.</p><p>For deleting, call <code>notifyItemRemoved(position)</code>.</p><p>To animate the addition of each item, add the following method to <code>PhotoAdapter</code>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">setAnimation</span><span class="token punctuation">(</span>viewToAnimate<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>viewToAnimate<span class="token punctuation">.</span>animation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> animation <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span>viewToAnimate<span class="token punctuation">.</span>context<span class="token punctuation">,</span> android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>slide_in_left<span class="token punctuation">)</span></span>
<span class="line">    viewToAnimate<span class="token punctuation">.</span>animation <span class="token operator">=</span> animation</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will provide an animation where the row slides in from the left.</p><p>Then add:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token function">setAnimation</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span>itemView<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>as the last line in <code>onBindViewHolder</code>. Now try running again.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2017/10/mars4.gif" alt="The animation adds a nice dynamic effect to the presentation of the photos." width="240" tabindex="0" loading="lazy"><figcaption>The animation adds a nice dynamic effect to the presentation of the photos.</figcaption></figure><hr><h2 id="swiping" tabindex="-1"><a class="header-anchor" href="#swiping"><span>Swiping</span></a></h2><p>Swiping is great way to let your user delete rows. You’re going to implement swiping in both the left and right direction to delete a row.</p><p><strong>RecyclerView</strong> uses an <code>ItemTouchHelper</code> class along with a swipe callback to handle the movement. The callback is simple and you will just call your adapter’s <code>removeRow</code> method in the <code>onSwiped</code> callback.</p>`,59),Ln=n("code",null,"MainActivity.kt",-1),Cn=p(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token function">SwipeHandler</span><span class="token punctuation">(</span><span class="token keyword">val</span> adapter<span class="token operator">:</span> PhotoAdapter<span class="token punctuation">,</span> dragDirs <span class="token operator">:</span> Int<span class="token punctuation">,</span> swipeDirs <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> ItemTouchHelper<span class="token punctuation">.</span><span class="token function">SimpleCallback</span><span class="token punctuation">(</span>dragDirs<span class="token punctuation">,</span> swipeDirs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onMove</span><span class="token punctuation">(</span>recyclerView<span class="token operator">:</span> RecyclerView<span class="token operator">?</span><span class="token punctuation">,</span> viewHolder<span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span>ViewHolder<span class="token operator">?</span><span class="token punctuation">,</span> target<span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span>ViewHolder<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSwiped</span><span class="token punctuation">(</span>viewHolder<span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span>ViewHolder<span class="token punctuation">,</span> direction<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    adapter<span class="token punctuation">.</span><span class="token function">removeRow</span><span class="token punctuation">(</span>viewHolder<span class="token punctuation">.</span>adapterPosition<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In <code>loadPhotos</code> you will find the following in the <code>onResponse</code> method:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>recycler_view<span class="token punctuation">.</span>adapter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> adapter <span class="token operator">=</span> <span class="token function">PhotoAdapter</span><span class="token punctuation">(</span><span class="token function">sortPhotos</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  recycler_view<span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Add the following after setting the <code>adapter</code> value:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">val</span> touchHandler <span class="token operator">=</span> <span class="token function">ItemTouchHelper</span><span class="token punctuation">(</span><span class="token function">SwipeHandler</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ItemTouchHelper<span class="token punctuation">.</span>LEFT <span class="token operator">or</span> ItemTouchHelper<span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">touchHandler<span class="token punctuation">.</span><span class="token function">attachToRecyclerView</span><span class="token punctuation">(</span>recycler_view<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://koenig-media.raywenderlich.com/uploads/2017/10/mars5.gif" alt="Run the app and try swiping left or right to delete a row." width="240" tabindex="0" loading="lazy"><figcaption>Run the app and try swiping left or right to delete a row.</figcaption></figure><p>Awesome! You’re just deleting the row from the display in the <strong>RecyclerView</strong>. In another app you would likely delete the item from a database and/or make an API call to delete the corresponding item on a server.</p><hr><h2 id="where-to-go-from-here" tabindex="-1"><a class="header-anchor" href="#where-to-go-from-here"><span>Where to go from here</span></a></h2><p>You’ve done a lot of work and now you know how to add animations, provide a swipe handler, add section headers, and use the <code>DiffUtil</code> class. Well done!</p><p>A great next step would be to eliminate the <code>PhotoRow</code> model class and <code>DefaultViewHolder</code> and get the project working with separate Header and Photo model objects and a dedicated <code>ViewHolder</code> for each.</p>`,11),jn={href:"https://koenig-media.raywenderlich.com/uploads/2017/12/marsrovers-final-1.zip",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"NasaApi.kt",-1),Nn=n("p",null,[s("If you need more information on "),n("code",null,"RecyclerView"),s("s, you can check out the following Android developer documentation:")],-1),Dn={href:"https://developer.android.com/guide/topics/ui/layout/recyclerview?hl=ko",target:"_blank",rel:"noopener noreferrer"},On={href:"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://developer.android.com/reference/android/support/v7/util/DiffUtil.html",target:"_blank",rel:"noopener noreferrer"},Bn=n("p",null,"I hope you enjoyed this Intermediate RecyclerView tutorial, and if you have any questions or comments, please join the forum discussion below!",-1),Yn=n("p",null,[s("Go forward and make great animated "),n("code",null,"RecyclerViews"),s("!")],-1);function Kn(i,zn){const c=l("VPCard"),e=l("router-link"),u=l("SiteInfo"),t=l("FontIcon");return v(),d("div",null,[n("h1",w,[n("a",y,[n("span",null,k(i.$frontmatter.title)+" 관련",1)])]),a(c,h(m({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[a(e,{to:"#getting-started"},{default:o(()=>[s("Getting Started")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#manifest"},{default:o(()=>[s("Manifest")]),_:1})]),n("li",null,[a(e,{to:"#string-data"},{default:o(()=>[s("String Data")]),_:1})])])]),n("li",null,[a(e,{to:"#main-layout"},{default:o(()=>[s("Main Layout")]),_:1})]),n("li",null,[a(e,{to:"#viewholder"},{default:o(()=>[s("ViewHolder")]),_:1})]),n("li",null,[a(e,{to:"#adapter-layouts"},{default:o(()=>[s("Adapter Layouts")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#header-style"},{default:o(()=>[s("Header Style")]),_:1})])])]),n("li",null,[a(e,{to:"#data"},{default:o(()=>[s("Data")]),_:1})]),n("li",null,[a(e,{to:"#adapter"},{default:o(()=>[s("Adapter")]),_:1})]),n("li",null,[a(e,{to:"#section-headers"},{default:o(()=>[s("Section Headers")]),_:1})]),n("li",null,[a(e,{to:"#diffutil"},{default:o(()=>[s("DiffUtil")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#additional-methods"},{default:o(()=>[s("Additional Methods")]),_:1})])])]),n("li",null,[a(e,{to:"#retrofit"},{default:o(()=>[s("Retrofit")]),_:1})]),n("li",null,[a(e,{to:"#updating-the-main-ui"},{default:o(()=>[s("Updating the main UI")]),_:1})]),n("li",null,[a(e,{to:"#filtering"},{default:o(()=>[s("Filtering")]),_:1})]),n("li",null,[a(e,{to:"#itemdecorators"},{default:o(()=>[s("ItemDecorators")]),_:1})]),n("li",null,[a(e,{to:"#animations"},{default:o(()=>[s("Animations")]),_:1})]),n("li",null,[a(e,{to:"#swiping"},{default:o(()=>[s("Swiping")]),_:1})]),n("li",null,[a(e,{to:"#where-to-go-from-here"},{default:o(()=>[s("Where to go from here")]),_:1})])])]),b,a(u,{name:"Intermediate RecyclerView Tutorial with Kotlin",desc:"In this RecyclerView tutorial you will learn how to build out intermediate techniques like swiping, animation and filtering in Kotlin.",url:"https://kodeco.com/272-intermediate-recyclerview-tutorial-with-kotlin",logo:"https://assets.carolus.kodeco.com/assets/murakami/category-icons/category-user-interface-android-d049bddfca80caac9854127a21a7287890d0ad1cd10fc7d7cb6538dc0d8d76a0.svg",preview:"https://koenig-media.raywenderlich.com/uploads/2017/12/RecyclerViewIntermediate-twitter.png"}),_,n("p",null,[s("Download the starter project "),n("a",q,[a(t,{icon:"iconfont icon-select"}),s("here")]),s(". Open it up in Android Studio 3.0.1 or later.")]),R,x,A,V,n("p",null,[s("Add the following to your "),a(t,{icon:"iconfont icon-code"}),T,s(" file before the application tag:")]),P,n("p",null,[s("To populate the spinners on the main screen, you will need to add strings for the spinners to the "),a(t,{icon:"iconfont icon-code"}),I,s(" file. Open "),a(t,{icon:"iconfont icon-code"}),S,s(" in the "),a(t,{icon:"fas fa-folder-open"}),L,s(" folder and add the following after the "),C,s(" string:")]),j,n("p",null,[s("You need to modify the main layout and add some code to the "),H,s(" class. Start out by replacing the layout in the "),a(t,{icon:"iconfont icon-code"}),N,s(" file.")]),D,n("p",null,[s("Now, time to modify "),a(t,{icon:"iconfont icon-java"}),O,s(". In the "),M,s(" method, after the call to "),B,s(", add the following:")]),Y,n("p",null,[s("When Android Studio gives you an error on "),K,s(", put your cursor on "),z,s(" and hit "),E,s("+"),F,s(" on Mac or "),U,s("+"),G,s(" on PC and select "),a(t,{icon:"iconfont icon-select"}),W,s(". This uses the Kotlin Android Extensions to turn the "),J,s(" id into a "),Z,s(" variable.")]),$,n("p",null,[s("Open the "),a(t,{icon:"iconfont icon-code"}),X,s(" file in the values resource folder and add the following style that will be used in the "),a(t,{icon:"iconfont icon-code"}),Q,s(" file:")]),nn,n("p",null,[s("You can use any color you’d like. To create the header, go to the "),a(t,{icon:"fas fa-folder-open"}),sn,s(" folder. Right-click and choose "),a(t,{icon:"iconfont icon-select"}),an,s(". Name the file "),a(t,{icon:"iconfont icon-code"}),tn,s(". You can leave the root element as suggested and then replace everything with the following:")]),en,n("p",null,[s("Next, right-click on the layout folder and create a new layout named "),a(t,{icon:"iconfont icon-code"}),on,s(". Again, leave the root element and replace with:")]),pn,n("p",null,[s("In Android Studio, navigate to the "),ln,s(" package. Right click and select "),a(t,{icon:"iconfont icon-select"}),cn,s(" to create a new package named "),un,s(".")]),n("p",null,[s("Next, right-click on the "),rn,s(" package and select "),a(t,{icon:"iconfont icon-select"}),dn,s(". Name the file "),kn,s(", choose "),hn,s(" as the “Kind” and replace the generated code with the following:")]),mn,n("p",null,[s("Your adapter will extend the "),vn,s(" class and use "),gn,s(". Navigate to the "),a(t,{icon:"fas fa-folder-open"}),wn,s(" package and add a new Kotlin class called "),yn,s(".")]),fn,n("p",null,[s("You can see that you’re using "),n("a",bn,[a(t,{icon:"iconfont icon-github"}),_n]),s(" to load images into the "),qn,s(". Glide seemed to work better for all of the Mars photos than "),Rn,s(", which was only able to load some of the images.")]),xn,n("p",null,[s("Right click on the "),An,s(" package and select "),a(t,{icon:"iconfont icon-select"}),Vn,s(", name it "),Tn,s(", and change the "),Pn,s(" to "),a(t,{icon:"iconfont icon-select"}),In,s(". That’s it! You now have a Kotlin Singleton.")]),Sn,n("p",null,[s("Open "),a(t,{icon:"iconfont icon-java"}),Ln,s(" and add the following at the bottom of the class:")]),Cn,n("p",null,[s("The final project for this tutorial is available "),n("a",jn,[a(t,{icon:"fas fa-file-zipper"}),s("here")]),s(". In the final project, be sure to remember to set the API key in "),a(t,{icon:"iconfont icon-java"}),Hn,s(".")]),Nn,n("ul",null,[n("li",null,[n("a",Dn,[a(t,{icon:"iconfont icon-android"}),s("Recyclerview Layouts")])]),n("li",null,[n("a",On,[a(t,{icon:"iconfont icon-android"}),s("RecyclerView Class")])]),n("li",null,[n("a",Mn,[a(t,{icon:"iconfont icon-android"}),s("DiffUtil Class")])])]),Bn,Yn])}const Un=r(g,[["render",Kn],["__file","272-intermediate-recyclerview-tutorial-with-kotlin.html.vue"]]),Gn=JSON.parse('{"path":"/kodeco.com/272-intermediate-recyclerview-tutorial-with-kotlin.html","title":"Intermediate RecyclerView Tutorial with Kotlin","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Intermediate RecyclerView Tutorial with Kotlin","description":"Article(s) > Intermediate RecyclerView Tutorial with Kotlin","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Gradle","Article(s)"],"tag":["blog","kodeco.com","java","kotiln","android","gradle"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Intermediate RecyclerView Tutorial with Kotlin"},{"property":"og:description","content":"Intermediate RecyclerView Tutorial with Kotlin"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/kodeco.com/272-intermediate-recyclerview-tutorial-with-kotlin.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kodeco.com/272-intermediate-recyclerview-tutorial-with-kotlin.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Intermediate RecyclerView Tutorial with Kotlin"}],["meta",{"property":"og:description","content":"Article(s) > Intermediate RecyclerView Tutorial with Kotlin"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://koenig-media.raywenderlich.com/uploads/2017/12/RecyclerViewIntermediate-twitter.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://koenig-media.raywenderlich.com/uploads/2017/12/RecyclerViewIntermediate-twitter.png"}],["meta",{"name":"twitter:image:alt","content":"Intermediate RecyclerView Tutorial with Kotlin"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"kodeco.com"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"kotiln"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"gradle"}],["meta",{"property":"article:published_time","content":"2017-12-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Intermediate RecyclerView Tutorial with Kotlin\\",\\"image\\":[\\"https://koenig-media.raywenderlich.com/uploads/2017/10/Screenshot_1507091574-281x500.png =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2017/09/Screenshot_20170925-222953-281x500.png =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2017/10/Screenshot_1507085951-281x500.png =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2017/10/Screenshot_1507091574-281x500.png =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2017/12/opportunity-281x500.png =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2017/10/mars4.gif =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2017/10/mars5.gif =240x\\"],\\"datePublished\\":\\"2017-12-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/java-android/articles/README.md","date":"2017-12-06T00:00:00.000Z","isOriginal":false,"cover":"https://koenig-media.raywenderlich.com/uploads/2017/12/RecyclerViewIntermediate-twitter.png"},"headers":[{"level":2,"title":"Getting Started","slug":"getting-started","link":"#getting-started","children":[{"level":3,"title":"Manifest","slug":"manifest","link":"#manifest","children":[]},{"level":3,"title":"String Data","slug":"string-data","link":"#string-data","children":[]}]},{"level":2,"title":"Main Layout","slug":"main-layout","link":"#main-layout","children":[]},{"level":2,"title":"ViewHolder","slug":"viewholder","link":"#viewholder","children":[]},{"level":2,"title":"Adapter Layouts","slug":"adapter-layouts","link":"#adapter-layouts","children":[{"level":3,"title":"Header Style","slug":"header-style","link":"#header-style","children":[]}]},{"level":2,"title":"Data","slug":"data","link":"#data","children":[]},{"level":2,"title":"Adapter","slug":"adapter","link":"#adapter","children":[]},{"level":2,"title":"Section Headers","slug":"section-headers","link":"#section-headers","children":[]},{"level":2,"title":"DiffUtil","slug":"diffutil","link":"#diffutil","children":[{"level":3,"title":"Additional Methods","slug":"additional-methods","link":"#additional-methods","children":[]}]},{"level":2,"title":"Retrofit","slug":"retrofit","link":"#retrofit","children":[]},{"level":2,"title":"Updating the main UI","slug":"updating-the-main-ui","link":"#updating-the-main-ui","children":[]},{"level":2,"title":"Filtering","slug":"filtering","link":"#filtering","children":[]},{"level":2,"title":"ItemDecorators","slug":"itemdecorators","link":"#itemdecorators","children":[]},{"level":2,"title":"Animations","slug":"animations","link":"#animations","children":[]},{"level":2,"title":"Swiping","slug":"swiping","link":"#swiping","children":[]},{"level":2,"title":"Where to go from here","slug":"where-to-go-from-here","link":"#where-to-go-from-here","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":14.49,"words":4346},"filePathRelative":"kodeco.com/272-intermediate-recyclerview-tutorial-with-kotlin.md","localizedDate":"2017년 12월 6일","excerpt":"\\n"}');export{Un as comp,Gn as data};
