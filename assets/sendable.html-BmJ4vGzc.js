import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,t as d,e as n,n as e,g as a,d as o,a as u,f as h,r as c,o as f}from"./app-BgNevrm5.js";const g={},m={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k=t("nav",{class:"table-of-contents"},[t("ul")],-1),b=t("hr",null,null,-1),v=t("blockquote",null,[t("p",null,"Available from Swift 5.5")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md",target:"_blank",rel:"noopener noreferrer"},S=t("code",null,"apple/swift-evolution",-1),_=t("code",null,"Sendable",-1),C=t("code",null,"@Sendable",-1),x=h(`<p>Many things are inherently safe to send across threads:</p><ul><li>All of Swift’s core value types, including <code>Bool</code>, <code>Int</code>, <code>String</code>, and similar.</li><li>Optionals, where the wrapped data is a value type.</li><li>Standard library collections that contain value types, such as <code>Array&lt;String&gt;</code> or <code>Dictionary&lt;Int, String&gt;</code>.</li><li>Tuples where the elements are all value types.</li><li>Metatypes, such as <code>String.self</code>.</li></ul><p>These have been updated to conform to the <code>Sendable</code> protocol.</p><p>As for custom types, it depends what you’re making:</p><ul><li>Actors automatically conform to <code>Sendable</code> because they handle their synchronization internally.</li><li>Custom structs and enums you define will also automatically conform to <code>Sendable</code> if they contain only values that also conform to <code>Sendable</code>, similar to how <code>Codable</code> works.</li><li>Custom classes can conform to <code>Sendable</code> as long as they either inherits from <code>NSObject</code> or from nothing at all, all properties are constant and themselves conform to <code>Sendable</code>, and they are marked as <code>final</code> to stop further inheritance.</li></ul><p>Swift lets us use the <code>@Sendable</code> attribute on functions or closure to mark them as working concurrently, and will enforce various rules to stop us shooting ourself in the foot. For example, the operation we pass into the <code>Task</code> initializer is marked <code>@Sendable</code>, which means this kind of code is allowed because the value captured by <code>Task</code> is a constant:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that code would <em>not</em> be allowed if <code>score</code> were a variable, because it could be accessed by one of the tasks while the other was changing its value.</p><p>You can mark your own functions and closures using <code>@Sendable</code>, which will enforce similar rules around captured values:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">runLater</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> function<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token attribute atrule">@Sendable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> execute<span class="token punctuation">:</span> function<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),A={class:"hint-container details"},T=t("summary",null,"Other Changes in Swift 5.5",-1),E={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-4-to-5-5.playground.zip",target:"_blank",rel:"noopener noreferrer"};function V(l,I){const s=c("VPCard"),i=c("FontIcon");return f(),p("div",null,[t("h1",m,[t("a",w,[t("span",null,d(l.$frontmatter.title)+" 관련",1)])]),n(s,e(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,b,n(s,e(a({title:"Sendable and @Sendable closures | Changes in Swift 5.5",desc:"Sendable and @Sendable closures",link:"https://hackingwithswift.com/swift/5.5/sendable",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,t("p",null,[t("a",y,[o("SE-0302 ("),n(i,{icon:"iconfont icon-github"}),S,o(")")]),o(" adds support for “sendable” data, which is data that can safely be transferred to another thread. This is accomplished through a new "),_,o(" protocol, and an "),C,o(" attribute for functions.")]),x,t("details",A,[T,n(s,e(a({title:"Async await | Changes in Swift 5.5",desc:"Async await",link:"/hackingwithswift.com/swift/5.5/async-await.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Async sequences | Changes in Swift 5.5",desc:"Async sequences",link:"/hackingwithswift.com/swift/5.5/async-sequences.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Effectful read-only properties | Changes in Swift 5.5",desc:"Effectful read-only properties",link:"/hackingwithswift.com/swift/5.5/effectful-read-only-properties.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Structured concurrency | Changes in Swift 5.5",desc:"Structured concurrency",link:"/hackingwithswift.com/swift/5.5/structured-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"async let bindings | Changes in Swift 5.5",desc:"async let bindings",link:"/hackingwithswift.com/swift/5.5/async-let-bindings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Continuations for interfacing async tasks with synchronous code | Changes in Swift 5.5",desc:"Continuations for interfacing async tasks with synchronous code",link:"/hackingwithswift.com/swift/5.5/continuations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Actors | Changes in Swift 5.5",desc:"Actors",link:"/hackingwithswift.com/swift/5.5/actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Global actors | Changes in Swift 5.5",desc:"Global actors",link:"/hackingwithswift.com/swift/5.5/global-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),u(` 
\`\`\`component VPCard
{
  "title": "Sendable and @Sendable closures | Changes in Swift 5.5",
  "desc": "Sendable and @Sendable closures",
  "link": "/hackingwithswift.com/swift/5.5/sendable.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(s,e(a({title:"if for postfix member expressions | Changes in Swift 5.5",desc:"if for postfix member expressions",link:"/hackingwithswift.com/swift/5.5/postfix-if.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Interchangeable use of CGFloat and Double types | Changes in Swift 5.5",desc:"Interchangeable use of CGFloat and Double types",link:"/hackingwithswift.com/swift/5.5/interchangeable-cgfloat-double.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Codable synthesis for enums with associated values | Changes in Swift 5.5",desc:"Codable synthesis for enums with associated values",link:"/hackingwithswift.com/swift/5.5/codable-enums.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"lazy now works in local contexts | Changes in Swift 5.5",desc:"lazy now works in local contexts",link:"/hackingwithswift.com/swift/5.5/local-lazy.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Extending property wrappers to function and closure parameters | Changes in Swift 5.5",desc:"Extending property wrappers to function and closure parameters",link:"/hackingwithswift.com/swift/5.5/property-wrapper-function-parameters.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Extending static member lookup in generic contexts | Changes in Swift 5.5",desc:"Extending static member lookup in generic contexts",link:"/hackingwithswift.com/swift/5.5/static-member-generic.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t("p",null,[t("a",E,[n(i,{icon:"fas fa-file-zipper"}),o("Download Swift 5.5 playground")])])])])}const D=r(g,[["render",V],["__file","sendable.html.vue"]]),F=JSON.parse('{"path":"/hackingwithswift.com/swift/5.5/sendable.html","title":"Sendable and @Sendable closures","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Sendable and @Sendable closures","description":"Article(s) > Sendable and @Sendable closures","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.5"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Sendable and @Sendable closures"},{"property":"og:description","content":"Sendable and @Sendable closures"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.5/sendable.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.5/sendable.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Sendable and @Sendable closures"}],["meta",{"property":"og:description","content":"Article(s) > Sendable and @Sendable closures"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.5"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Sendable and @Sendable closures\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.05,"words":916},"filePathRelative":"hackingwithswift.com/swift/5.5/sendable.md","excerpt":"\\n"}');export{D as comp,F as data};
