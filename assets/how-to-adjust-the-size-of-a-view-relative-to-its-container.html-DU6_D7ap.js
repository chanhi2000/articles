import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as t,t as u,e,n as s,g as n,d as h,f as o,r as i,o as d}from"./app-BgNevrm5.js";const w={},f={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),v=t("hr",null,null,-1),k=o(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 17</strong></p><p>SwiftUI&#39;s <code>containerRelativeFrame()</code> is a simple but powerful way to make views have a size relative to their container, which might be their whole window, the scroll view they are inside, or even just one column in your layout.</p><p>There are three core values you need to provide it: which axis you&#39;re trying to set, how many parts you want to divide the space into, and also how many parts should be given to each view.</p><p>For example, this tells views inside a <code>ScrollView</code> that they should be 2/5ths the width of their container:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ScrollView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> showsIndicators<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Item </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">containerRelativeFrame</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> span<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container-1.zip",target:"_blank",rel:"noopener noreferrer"},y=o('<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container-1~dark.gif" alt="A horizontally scrolling list of views, where each view is 2/5ths the width of the parent view." tabindex="0" loading="lazy"><figcaption>A horizontally scrolling list of views, where each view is 2/5ths the width of the parent view.</figcaption></figure><p>To be clear: the <code>count</code> parameter refers to how many parts the scroll view&#39;s horizontal space should be split into, and the <code>span</code> parameter refers to how many parts should be allocated to each text view. We&#39;ve used 5 for <code>count</code>, meaning that the scroll view&#39;s horizontal space will be split into 5, then used 2 for <code>span</code>, meaning that each text view will be given 2/5ths of the space.</p><p>This kind of uneven span means users will see 2.5 views when the app runs â€“ they see two things immediately, then see just enough of the next thing to know that scrolling is possible.</p><p>Exactly how you divide your space is down to you, but using a count of 12 is common in websites because it&#39;s divisible by 1, 2, 3, 4, 6, and 12, giving you lots of flexibility.</p><p>There are two extra things to know about using container relative frames:</p><ol><li>You can provide more than one axis if you want, using <code>[.horizontal, .vertical]</code>.</li><li>The default alignment is <code>.center</code>, but you can specify a custom <code>alignment</code> parameter with whatever you want.</li></ol>',6),z={class:"hint-container details"},j=t("summary",null,"Similar solutionsâ€¦",-1);function _(c,x){const a=i("VPCard"),l=i("FontIcon");return d(),r("div",null,[t("h1",f,[t("a",m,[t("span",null,u(c.$frontmatter.title)+" ê´€ë ¨",1)])]),e(a,s(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,v,e(a,s(n({title:"How to adjust the size of a view relative to its container | SwiftUI by Example",desc:"How to adjust the size of a view relative to its container",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,t("blockquote",null,[t("p",null,[t("a",b,[e(l,{icon:"fas fa-file-zipper"}),h("Download this as an Xcode project")])])]),y,t("details",z,[j,e(a,s(n({title:"How to dynamically adjust the appearance of a view based on its size and location | SwiftUI by Example",desc:"How to dynamically adjust the appearance of a view based on its size and location",link:"/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"How to adjust the position of a view using its offset | SwiftUI by Example",desc:"How to adjust the position of a view using its offset",link:"/hackingwithswift.com/swiftui/how-to-adjust-the-position-of-a-view-using-its-offset.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"How to provide relative sizes using GeometryReader | SwiftUI by Example",desc:"How to provide relative sizes using GeometryReader",link:"/hackingwithswift.com/swiftui/how-to-provide-relative-sizes-using-geometryreader.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"How to adjust the way an image is fitted to its space | SwiftUI by Example",desc:"How to adjust the way an image is fitted to its space",link:"/hackingwithswift.com/swiftui/how-to-adjust-the-way-an-image-is-fitted-to-its-space.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"How to animate the size of text | SwiftUI by Example",desc:"How to animate the size of text",link:"/hackingwithswift.com/swiftui/how-to-animate-the-size-of-text.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const I=p(w,[["render",_],["__file","how-to-adjust-the-size-of-a-view-relative-to-its-container.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container.html","title":"How to adjust the size of a view relative to its container","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to adjust the size of a view relative to its container","description":"Article(s) > How to adjust the size of a view relative to its container","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to adjust the size of a view relative to its container"},{"property":"og:description","content":"How to adjust the size of a view relative to its container"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"How to adjust the size of a view relative to its container"}],["meta",{"property":"og:description","content":"Article(s) > How to adjust the size of a view relative to its container"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container-1~dark.gif"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to adjust the size of a view relative to its container\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container-1~dark.gif\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.66,"words":797},"filePathRelative":"hackingwithswift.com/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container.md","excerpt":"\\n"}');export{I as comp,E as data};
