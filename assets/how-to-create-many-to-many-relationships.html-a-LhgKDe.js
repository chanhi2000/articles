import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,t as c,e as a,n as t,g as e,f as l,r as u,o as r}from"./app-BgNevrm5.js";const k={},d={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),h=n("hr",null,null,-1),w=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Many-to-many relationships in SwiftData are created when both sides of a relationship use arrays. They are fairly common, too: some actors appear in many films and most films have many actors, some authors write many books and some books have several authors, and so on.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>SwiftData will not infer many-to-many relationships; you must make them explicit using the <code>@Relationship</code> macro. Many-to-many relationships are easy to get wrong, so please read the below carefully.</p></div><p>First, declare your models, using <code>@Relationship</code> in one of the two so you make clear the inverse of your relationship. For example, we might have say actors can star in many films, and films can have many actors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Actor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>movies <span class="token operator">=</span> movies</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>inverse<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Actor</span><span class="token punctuation">.</span>movies<span class="token punctuation">)</span> <span class="token keyword">var</span> cast<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Actor</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> cast<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Actor</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>releaseYear <span class="token operator">=</span> releaseYear</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>cast <span class="token operator">=</span> cast</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now create and link your data, like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> mi2 <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Mission: Impossible 2&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> cast<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> cruise <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span>mi2<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> newton <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Thandiwe Newton&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span>mi2<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cruise<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newton<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>We don’t need to insert the <code>Movie</code> object – it will be inserted automatically by SwiftData because it’s used by the two actors.</p></div><p>There are lots of ways you can get many-to-many relationships wrong, and I’m afraid SwiftData is entirely unforgiving here – if you don’t follow the steps correctly things will just behave strangely, or even crash at runtime.</p><p>For example, if you attempt to manipulate the <code>movies</code> property of an actor before inserting them, you’ll get a hard crash. So, this code won’t work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> mi2 <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Mission: Impossible 2&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> cast<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> cruise <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> newton <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Thandiwe Newton&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">mi2<span class="token punctuation">.</span>cast<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cruise<span class="token punctuation">)</span></span>
<span class="line">mi2<span class="token punctuation">.</span>cast<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newton<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mi2<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cruise<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newton<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll also get a crash with the message “illegal attempt to establish a relationship” if you attempt to insert things out of sequence, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> mi2 <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Mission: Impossible 2&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> cast<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mi2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> cruise <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span>mi2<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> newton <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Thandiwe Newton&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span>mi2<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cruise<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newton<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And just for fun, if you accidentally miss off the <code>@Relationship</code> macro what you’ll get is pretty much random even when you insert things in the correct order.</p><p>If you need to manipulate the arrays directly, it’s important that all your data be inserted first. For our movies and actors example, that would mean creating all the data, inserting it, <em>then</em> manipulating the arrays, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> mi2 <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Mission: Impossible 2&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> cast<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> cruise <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> newton <span class="token operator">=</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Thandiwe Newton&quot;</span></span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mi2<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cruise<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newton<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">mi2<span class="token punctuation">.</span>cast<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cruise<span class="token punctuation">)</span></span>
<span class="line">mi2<span class="token punctuation">.</span>cast<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newton<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or we could add the movies to the actors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">cruise<span class="token punctuation">.</span>movies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>mi2<span class="token punctuation">)</span></span>
<span class="line">newton<span class="token punctuation">.</span>movies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>mi2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>There is a rather catastrophic SwiftData bug in iOS 17.0 where many-to-many relationships will fail based on the alphabetical ordering of your model names. This means in the above examples models named <code>Actor</code> and <code>Movie</code> will work but <code>Movie</code> and <code>Person</code> will not. Until a fix is released, a workaround is to provide a default value for your relationship array, like this: <code>var movies: [Movie] = []</code>.</p></div>`,19);function y(p,b){const s=u("VPCard");return r(),i("div",null,[n("h1",d,[n("a",m,[n("span",null,c(p.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,h,a(s,t(e({title:"How to create many-to-many relationships | SwiftData by Example",desc:"How to create many-to-many relationships",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-create-many-to-many-relationships",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const x=o(k,[["render",y],["__file","how-to-create-many-to-many-relationships.html.vue"]]),q=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-create-many-to-many-relationships.html","title":"How to create many-to-many relationships","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create many-to-many relationships","description":"Article(s) > How to create many-to-many relationships","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create many-to-many relationships"},{"property":"og:description","content":"How to create many-to-many relationships"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-many-to-many-relationships.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-many-to-many-relationships.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create many-to-many relationships"}],["meta",{"property":"og:description","content":"Article(s) > How to create many-to-many relationships"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create many-to-many relationships\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.4,"words":721},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-create-many-to-many-relationships.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{x as comp,q as data};
