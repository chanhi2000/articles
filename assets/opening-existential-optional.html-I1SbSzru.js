import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as t,g as e,d as i,a as m,f as d,r as l,o as g}from"./app-BgNevrm5.js";const k={},f={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Available from Swift 5.8")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0375-opening-existential-optional.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),x=d(`<p>For example, this code worked great in Swift 5.7, because it uses a non-optional <code>T</code> parameter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">double</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Numeric</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> number<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">    number <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token number">2.0</span></span>
<span class="line"><span class="token keyword">let</span> third<span class="token punctuation">:</span> <span class="token class-name">Float</span> <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> numbers<span class="token punctuation">:</span> <span class="token punctuation">[</span>any <span class="token class-name">Numeric</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Swift 5.8, that same parameter can now be optional, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">optionalDouble</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Numeric</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> number<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> numberToDouble <span class="token operator">=</span> number <span class="token operator">??</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">return</span>  numberToDouble <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">optionalDouble</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Swift 5.7 that would have issued the rather baffling error message “Type &#39;any Numeric&#39; cannot conform to &#39;Numeric’”, so it’s good to see this inconsistency resolved.</p>`,5),S={class:"hint-container details"},C=n("summary",null,"Other Changes in Swift 5.8",-1),O={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-7-to-5-8.playground.zip",target:"_blank",rel:"noopener noreferrer"};function T(p,N){const a=l("VPCard"),o=l("FontIcon");return g(),r("div",null,[n("h1",f,[n("a",h,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,s(a,t(e({title:"Opening existential arguments to optional parameters | Changes in Swift 5.8",desc:"Opening existential arguments to optional parameters",link:"https://hackingwithswift.com/swift/5.8/opening-existential-optional",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("p",null,[n("a",y,[i("SE-0375 ("),s(o,{icon:"iconfont icon-github"}),_,i(")")]),i(" extends a Swift 5.7 feature that allowed us to call generic functions using a protocol, fixing a small but annoying inconsistency: Swift 5.7 would not allow this behavior with optionals, whereas Swift 5.8 does.")]),x,n("details",S,[C,s(a,t(e({title:"Lift all limitations on variables in result builders | Changes in Swift 5.8",desc:"Lift all limitations on variables in result builders",link:"/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Function back deployment | Changes in Swift 5.8",desc:"Function back deployment",link:"/hackingwithswift.com/swift/5.8/function-back-deployment.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Allow implicit self for weak self captures, after self is unwrapped | Changes in Swift 5.8",desc:"Allow implicit self for weak self captures, after self is unwrapped",link:"/hackingwithswift.com/swift/5.8/implicit-self-weak-capture.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Concise magic file names | Changes in Swift 5.8",desc:"Concise magic file names",link:"/hackingwithswift.com/swift/5.8/concise-magic-file-names.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),m(` 
\`\`\`component VPCard
{
  "title": "Opening existential arguments to optional parameters | Changes in Swift 5.8",
  "desc": "Opening existential arguments to optional parameters",
  "link": "/hackingwithswift.com/swift/5.8/opening-existential-optional.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Collection downcasts in cast patterns are now supported | Changes in Swift 5.8",desc:"Collection downcasts in cast patterns are now supported",link:"/hackingwithswift.com/swift/5.8/collection-downcasts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",O,[s(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.8 playground")])])])])}const D=c(k,[["render",T],["__file","opening-existential-optional.html.vue"]]),F=JSON.parse('{"path":"/hackingwithswift.com/swift/5.8/opening-existential-optional.html","title":"Opening existential arguments to optional parameters","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Opening existential arguments to optional parameters","description":"Article(s) > Opening existential arguments to optional parameters","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.8"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Opening existential arguments to optional parameters"},{"property":"og:description","content":"Opening existential arguments to optional parameters"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/opening-existential-optional.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/opening-existential-optional.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Opening existential arguments to optional parameters"}],["meta",{"property":"og:description","content":"Article(s) > Opening existential arguments to optional parameters"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.8"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Opening existential arguments to optional parameters\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.74,"words":523},"filePathRelative":"hackingwithswift.com/swift/5.8/opening-existential-optional.md","excerpt":"\\n"}');export{D as comp,F as data};
