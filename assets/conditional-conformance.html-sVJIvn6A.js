import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as t,g as e,d as o,a as u,f as m,r as c,o as h}from"./app-BgNevrm5.js";const f={},k={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Available from Swift 4.1")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),S=m(`<p>To demonstrate conditional conformances, let&#39;s create a <code>Purchaseable</code> protocol that we can use to buy things:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">protocol</span> <span class="token class-name">Purchaseable</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">func</span> <span class="token function-definition function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now define a <code>Book</code> struct that conforms to the protocol, and prints a message when a book is bought:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">:</span> <span class="token class-name">Purchaseable</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">func</span> <span class="token function-definition function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You bought a book&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So far this is easy enough, but let&#39;s take it one step further: what if the user has a basket full of books, and wants to buy them all? We could loop over all books in the array by hand, calling <code>buy()</code> on each one. But a better approach is to write an extension on <code>Array</code> to make it conform to <code>Purchaseable</code>, then give it a <code>buy()</code> method that in turn calls <code>buy()</code> on each of its elements.</p><p>This is where conditional conformances come in: if we tried to extend all arrays, we&#39;d be adding functionality where it wouldn&#39;t make sense – we&#39;d be adding <code>buy()</code> to arrays of strings, for example, even though those strings don&#39;t have a <code>buy()</code> method we can call.</p><p>Swift 4.1 lets us make arrays conform to <code>Purchaseable</code> only if their elements also conform to <code>Purchaseable</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Array</span><span class="token punctuation">:</span> <span class="token class-name">Purchaseable</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Purchaseable</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">func</span> <span class="token function-definition function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token keyword">self</span> <span class="token punctuation">{</span></span>
<span class="line">         item<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, conditional conformances let us constrain the way our extensions are applied more precisely than was possible before.</p><p>Conditional conformances also make large parts of Swift code easier and safer, even if you don&#39;t do any extra work yourself. For example, this code creates two arrays of optional strings and checks whether they are equal:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token keyword">left</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Andrew&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Lizzie&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Sophie&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token keyword">right</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Charlotte&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">left</span> <span class="token operator">==</span> <span class="token keyword">right</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That might seem trivial, but that code wouldn&#39;t even compile in Swift 4.0 – both <code>String</code> and <code>[String]</code> were equatable, but <code>[String?]</code> was not.</p><p>The introduction of conditional conformance in Swift 4.1 means that it’s now possible to add protocol conformance to a type as long as it satisfies a condition. In this case, if the elements of the array are equatable, that means the whole thing is equatable. So, the above code now compiles in Swift 4.1</p><p>Conditional conformance has been extended to the <code>Codable</code> protocol in a way that will definitely make things safer. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> encoder <span class="token operator">=</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// try encoder.encode(people)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you uncomment the <code>encoder.encode(people)</code> line, Swift will refuse to build your code because you&#39;re trying to encode a struct that doesn&#39;t conform to <code>Codable</code>. However, that code compiled cleanly with Swift 4.0, then threw a fatal error at runtime because <code>Person</code> doesn’t conform to <code>Codable</code>.</p><p>Obviously no one wants a fatal error at runtime, because it means your app crashes. Fortunately, Swift 4.1 cleans this up using conditional conformances: <code>Optional</code>, <code>Array</code>, <code>Dictionary</code>, and <code>Set</code> now only conform to <code>Codable</code> if their contents also conform to <code>Codable</code>, so the above code will refuse to compile.</p>`,17),C={class:"hint-container details"},q=n("summary",null,"Other Changes in Swift 4.1",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-0-to-4-1.playground.zip",target:"_blank",rel:"noopener noreferrer"};function P(l,A){const a=c("VPCard"),i=c("FontIcon");return h(),r("div",null,[n("h1",k,[n("a",g,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,s(a,t(e({title:"Conditional conformances | Changes in Swift 4.1",desc:"Conditional conformances",link:"https://hackingwithswift.com/swift/4.1/conditional-conformance",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("p",null,[o("Swift 4.1 implements "),n("a",y,[o("SE-0143 ("),s(i,{icon:"iconfont icon-github"}),_,o(")")]),o(", which introduced proposed conditional conformances into the language. This allows types to conform to a protocol only when certain conditions are met.")]),S,n("details",C,[q,s(a,t(e({title:"Synthesized Equatable and Hashable | Changes in Swift 4.1",desc:"Synthesized Equatable and Hashable",link:"/hackingwithswift.com/swift/4.1/synthesized-protocols.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Key decoding strategies for Codable | Changes in Swift 4.1",desc:"Key decoding strategies for Codable",link:"/hackingwithswift.com/swift/4.1/key-decoding-strategies.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),u(` 
\`\`\`component VPCard
{
  "title": "Conditional conformances | Changes in Swift 4.1",
  "desc": "Conditional conformances",
  "link": "/hackingwithswift.com/swift/4.1/conditional-conformance.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Recursive constraints on associated types | Changes in Swift 4.1",desc:"Recursive constraints on associated types",link:"/hackingwithswift.com/swift/4.1/recursive-constraints.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Build configuration import testing | Changes in Swift 4.1",desc:"Build configuration import testing",link:"/hackingwithswift.com/swift/4.1/import-testing.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Target environment testing | Changes in Swift 4.1",desc:"Target environment testing",link:"/hackingwithswift.com/swift/4.1/target-environment.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"flatMap is now (partly) compactMap() | Changes in Swift 4.1",desc:"flatMap is now (partly) compactMap()",link:"/hackingwithswift.com/swift/4.1/compactmap.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[s(i,{icon:"fas fa-file-zipper"}),o("Download Swift 4.1 playground")])])])])}const z=p(f,[["render",P],["__file","conditional-conformance.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swift/4.1/conditional-conformance.html","title":"Conditional conformances","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Conditional conformances","description":"Article(s) > Conditional conformances","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.1"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Conditional conformances"},{"property":"og:description","content":"Conditional conformances"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.1/conditional-conformance.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.1/conditional-conformance.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Conditional conformances"}],["meta",{"property":"og:description","content":"Article(s) > Conditional conformances"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.1"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Conditional conformances\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.88,"words":865},"filePathRelative":"hackingwithswift.com/swift/4.1/conditional-conformance.md","excerpt":"\\n"}');export{z as comp,E as data};
