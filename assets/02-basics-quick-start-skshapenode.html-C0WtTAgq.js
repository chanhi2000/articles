import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as s,t as d,e as n,n as p,g as o,d as a,f as k,r as e,o as h}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b=s("nav",{class:"table-of-contents"},[s("ul")],-1),w=s("hr",null,null,-1),f=s("p",null,"The only way we can get through this project with our sanity intact is by whizzing through the things you know already so I can spend more time focusing on the new bits. So, be prepared for abrupt changes of pace: fast, slow, fast, slow, as appropriate.",-1),y=s("code",null,"GameScene.swift",-1),S=s("code",null,"didMove(to:)",-1),N=k(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> background <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceBackground&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">background<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">384</span><span class="token punctuation">)</span></span>
<span class="line">background<span class="token punctuation">.</span>blendMode <span class="token operator">=</span> <span class="token punctuation">.</span>replace</span>
<span class="line">background<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">physicsWorld<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0.85</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">createLives</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">createSlices</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The last three are all methods we&#39;ll create in a moment, but first there are two new lines in there. The default gravity of our physics world is -0.98, which is roughly equivalent to Earth&#39;s gravity. I&#39;m using a slightly lower value so that items stay up in the air a bit longer.</p><p>I&#39;m also telling the physics world to adjust its speed downwards, which causes all movement to happen at a slightly slower rate.</p><p>The first two new methods are easy and require little explanation, but you will need to add some properties to the <code>GameScene</code> class to support them:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> gameScore<span class="token punctuation">:</span> <span class="token class-name">SKLabelNode</span><span class="token operator">!</span> </span>
<span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        gameScore<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> livesImages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">SKSpriteNode</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> lives <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s all old news for you – if nothing else, this should show how far you&#39;ve come! Now here are the two new methods:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    gameScore <span class="token operator">=</span> <span class="token class-name">SKLabelNode</span><span class="token punctuation">(</span>fontNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chalkduster&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    gameScore<span class="token punctuation">.</span>horizontalAlignmentMode <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">left</span></span>
<span class="line">    gameScore<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">48</span></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>gameScore<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    gameScore<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">    score <span class="token operator">=</span> <span class="token number">0</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createLives</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> spriteNode <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceLife&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        spriteNode<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span><span class="token number">834</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">720</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">addChild</span><span class="token punctuation">(</span>spriteNode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        livesImages<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>spriteNode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll notice I&#39;m adding the lives images to the <code>livesImages</code> array, which is done so that we can cross off lives when the player loses.</p><figure><img src="https://hackingwithswift.com/img/books/hws/23-1@2x.png" alt="Our game interface is quite simple: score on the bottom left, lives on the top right, and a big empty area in the middle where we can smite penguins." tabindex="0" loading="lazy"><figcaption>Our game interface is quite simple: score on the bottom left, lives on the top right, and a big empty area in the middle where we can smite penguins.</figcaption></figure><p>That leaves the <code>createSlices()</code> method, and this bit <em>is</em> new. In this game, swiping around the screen will lead a glowing trail of slice marks that fade away when you let go or keep on moving. To make this work, we&#39;re going to do three things:</p><ol><li>Track all player moves on the screen, recording an array of all their swipe points.</li><li>Draw two slice shapes, one in white and one in yellow to make it look like there&#39;s a hot glow.</li><li>Use the <code>zPosition</code> property to make sure the slices go above everything else in the game.</li></ol><p>Drawing a shape in SpriteKit is easy thanks to a special node type called <code>SKShapeNode</code>. This lets you define any kind of shape you can draw, along with line width, stroke color and more, and it will render it to the screen. We&#39;re going to draw two lines – one for a yellow glow, and one for a white glow in the middle of the yellow glow – so we&#39;re going to need two <code>SKShapeNode</code> properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> activeSliceBG<span class="token punctuation">:</span> <span class="token class-name">SKShapeNode</span><span class="token operator">!</span></span>
<span class="line"><span class="token keyword">var</span> activeSliceFG<span class="token punctuation">:</span> <span class="token class-name">SKShapeNode</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And here&#39;s the code for the <code>createSlices()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createSlices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    activeSliceBG <span class="token operator">=</span> <span class="token class-name">SKShapeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line">    activeSliceFG <span class="token operator">=</span> <span class="token class-name">SKShapeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">9</span></span>
<span class="line"></span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>white</span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>activeSliceBG<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>activeSliceFG<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the background slice has a thicker line width than the foreground, and has a higher Z position than the background slice. I&#39;m using Z positions 2 and 3 for the slice shapes, because I&#39;ll be using Z position 1 for bombs and Z position 0 for everything else – this ensures the slice shapes are on top, then bombs, then everything else.</p>`,16);function _(i,q){const t=e("VPCard"),c=e("VidStack"),l=e("FontIcon");return h(),u("div",null,[s("h1",v,[s("a",g,[s("span",null,d(i.$frontmatter.title)+" 관련",1)])]),n(t,p(o({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,w,n(t,p(o({title:"Basics quick start: SKShapeNode | Hacking with iOS",desc:"Basics quick start: SKShapeNode",link:"https://hackingwithswift.com/read/23/2/basics-quick-start-skshapenode",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n(c,{src:"youtube/CK9OwMyJQDY"}),f,s("p",null,[a("Open up "),n(l,{icon:"fa-brands fa-swift"}),y,a(" and put this into "),S,a(":")]),N])}const B=r(m,[["render",_],["__file","02-basics-quick-start-skshapenode.html.vue"]]),C=JSON.parse('{"path":"/hackingwithswift.com/read/23/02-basics-quick-start-skshapenode.html","title":"Basics quick start: SKShapeNode","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Basics quick start: SKShapeNode","description":"Article(s) > Basics quick start: SKShapeNode","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Basics quick start: SKShapeNode"},{"property":"og:description","content":"Basics quick start: SKShapeNode"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/23/02-basics-quick-start-skshapenode.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/23/02-basics-quick-start-skshapenode.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Basics quick start: SKShapeNode"}],["meta",{"property":"og:description","content":"Article(s) > Basics quick start: SKShapeNode"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/23-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Basics quick start: SKShapeNode\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/23-1@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.58,"words":775},"filePathRelative":"hackingwithswift.com/read/23/02-basics-quick-start-skshapenode.md","excerpt":"\\n"}');export{B as comp,C as data};
