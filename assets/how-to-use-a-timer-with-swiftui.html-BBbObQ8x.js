import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as m,e as s,n as a,g as e,d as c,f as l,r as i,o as w}from"./app-BgNevrm5.js";const h={},k={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>If you want to run some code regularly, perhaps to make a countdown timer or similar, you should use <code>Timer</code> and the <code>onReceive()</code> modifier.</p><p>For example, this code creates a timer publisher that fires every second, updating a label with the current time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> currentDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now</span>
<span class="line">    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>every<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token punctuation">.</span>main<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>common<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">autoconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">currentDate</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span> input <span class="token keyword">in</span></span>
<span class="line">                currentDate <span class="token operator">=</span> input</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-use-a-timer-with-swiftui-1.zip",target:"_blank",rel:"noopener noreferrer"},_=l(`<p>It&#39;s important to use <code>.main</code> for the runloop option, because our timer will update the user interface. As for the <code>.common</code> mode, that allows the timer to run alongside other common events – for example, if the text was in a scroll view that was moving.</p><p>As you can see, the <code>onReceive()</code> closure gets passed in some input containing the current date. In the code above we assign that straight to <code>currentDate</code>, but you could use it to calculate how much time has passed since a previous date.</p><p>If you specifically wanted to create a countdown timer or stopwatch, you should create some state to track how much time remains, then subtract from that when the timer fires.</p><p>For example, we could create a countdown timer that shows time remaining in a label, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> timeRemaining <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>every<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token punctuation">.</span>main<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>common<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">autoconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">timeRemaining</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">                <span class="token keyword">if</span> timeRemaining <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">                    timeRemaining <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),S={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-use-a-timer-with-swiftui-2.zip",target:"_blank",rel:"noopener noreferrer"},I={class:"hint-container details"},U=n("summary",null,"Similar solutions…",-1);function x(r,H){const t=i("VPCard"),o=i("FontIcon"),p=i("VidStack");return w(),d("div",null,[n("h1",k,[n("a",f,[n("span",null,m(r.$frontmatter.title)+" 관련",1)])]),s(t,a(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,v,s(t,a(e({title:"How to use a timer with SwiftUI | SwiftUI by Example",desc:"How to use a timer with SwiftUI",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-use-a-timer-with-swiftui",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",y,[s(o,{icon:"fas fa-file-zipper"}),c("Download this as an Xcode project")])])]),s(p,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-a-timer-with-swiftui-1~dark.mp4"}),_,n("blockquote",null,[n("p",null,[n("a",S,[s(o,{icon:"fas fa-file-zipper"}),c("Download this as an Xcode project")])])]),s(p,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-a-timer-with-swiftui-2~dark.mp4"}),n("details",I,[U,s(t,a(e({title:"How to use Instruments to profile your SwiftUI code and identify slow layouts | SwiftUI by Example",desc:"How to use Instruments to profile your SwiftUI code and identify slow layouts",link:"/hackingwithswift.com/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"How to find which data change is causing a SwiftUI view to update | SwiftUI by Example",desc:"How to find which data change is causing a SwiftUI view to update",link:"/hackingwithswift.com/swiftui/how-to-find-which-data-change-is-causing-a-swiftui-view-to-update.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"How to make SwiftUI modifiers safer to use with @warn_unqualified_access | SwiftUI by Example",desc:"How to make SwiftUI modifiers safer to use with @warn_unqualified_access",link:"/hackingwithswift.com/swiftui/how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const V=u(h,[["render",x],["__file","how-to-use-a-timer-with-swiftui.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-use-a-timer-with-swiftui.html","title":"How to use a timer with SwiftUI","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use a timer with SwiftUI","description":"Article(s) > How to use a timer with SwiftUI","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use a timer with SwiftUI"},{"property":"og:description","content":"How to use a timer with SwiftUI"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-a-timer-with-swiftui.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-a-timer-with-swiftui.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use a timer with SwiftUI"}],["meta",{"property":"og:description","content":"Article(s) > How to use a timer with SwiftUI"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use a timer with SwiftUI\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.28,"words":684},"filePathRelative":"hackingwithswift.com/swiftui/how-to-use-a-timer-with-swiftui.md","excerpt":"\\n"}');export{V as comp,A as data};
