import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as s,t as m,e as n,n as e,g as i,d as a,f as c,r as l,o as w}from"./app-BgNevrm5.js";const h={},k={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},v=s("nav",{class:"table-of-contents"},[s("ul")],-1),f=s("hr",null,null,-1),b=s("blockquote",null,[s("p",null,"Updated for Xcode 16")],-1),y=s("p",null,"Just having names of menu items written out isn't particularly appealing for a restaurant, so let's make those items look good.",-1),_=s("em",null,"composable",-1),I=s("code",null,"Text(item.name)",-1),x=s("em",null,"could",-1),S=s("code",null,"ContentView.swift",-1),V=c(`<p>A better idea is to make a new view type that we can embed <em>inside</em> <code>ContentView</code>, and SwiftUI is designed to make this both easy (it takes only 30 seconds to learn) and extremely fast (it has almost zero performance impact).</p><p>So, press <kbd>Cmd</kbd>+<kbd>N</kbd> to create a new file, choose SwiftUI View under the User Interface category, then call it “ItemRow”. You&#39;ll see Xcode has generated a new view with some sample code to get us started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ItemRow</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to be doing something new in just a moment, but first I want to get us to the point where we are using <code>ItemRow</code> in our code. This means we need to add a <code>MenuItem</code> property to <code>ItemRow</code>, then use it in its body, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ItemRow</span> <span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> item<span class="token punctuation">:</span> <span class="token class-name">MenuItem</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),T=s("code",null,"ContentView.swift",-1),H=s("code",null,"Text(item.name)",-1),C=c(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ItemRow</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> item<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As you can see, that will create new <code>ItemRow</code> for each item in our menu section, which in turn will have some text inside.</p>`,2),U=s("code",null,"ItemRow.swift",-1),R=c(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ItemRow_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ItemRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That is SwiftUI&#39;s previewing code, which is what allows it show live previews while we work. It&#39;s trying to create an <code>ItemRow</code> without a menu item attached, which isn&#39;t possible. If you really wanted to preview individual rows you could do so by instantiating a copy of our full menu and passing in an example item, but in this instance I&#39;ve provided an example item for us so we have something to look at.</p><p>Change the code to this to make it all work again:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ItemRow_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ItemRow</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">MenuItem</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),j=s("code",null,"ContentView.swift",-1),q=s("code",null,"ItemRow",-1),E=c(`<p>In <code>ItemRow</code>, we&#39;re going to start by placing the item&#39;s thumbnail image and name side by side, like you&#39;d normally see in a <code>UITableViewCell</code>. Try writing this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>thumbnailImage<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll find that Xcode&#39;s preview does something quite strange: you&#39;ll see a thumbnail image appear, but no text for the item&#39;s name – how come one but not both?</p><p>Well, what&#39;s happening here is that <code>some View</code> means we will return one specific view from our method – not two different views, and certainly not no views at all. When you try and return two views like this, Swift automatically wraps them up in a single, hidden container called a <em>tuple view</em>, but without any further instructions on how to display this SwiftUI just picks the first view.</p><p>To fix this we need to put those two views inside a container, which in our case will be a <code>HStack</code>. This is a container that places its child views side by side horizontally, which is perfect for our needs.</p><p>So, try this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>thumbnailImage<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you wanted to put the item&#39;s price next to its name, you might try something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>thumbnailImage<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;$</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">item<span class="token punctuation">.</span>price</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that will put the price to the right of the name, which isn&#39;t great. What we usually want here is the kind of subtitle style that we get from <code>UITableViewCell</code>, where we can have an image on the left, and on the right have a title above a detail label.</p><p>We can achieve that with another stack, called a <code>VStack</code> – a <em>vertical</em> stack. This can go inside our existing <code>HStack</code> to create the hierarchy we want:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>thumbnailImage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;$</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">item<span class="token punctuation">.</span>price</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll notice that our item name and price are centered. That happens because it&#39;s the default behavior of <code>VStack</code>, but a left alignment would look much better here. We can get that by asking for a leading alignment when creating the <code>VStack</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;$</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">item<span class="token punctuation">.</span>price</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),P=s("code",null,"ContentView.swift",-1),A=s("figure",null,[s("img",{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/2-7~dark.png",alt:"A SwiftUI list with a picture, title, and caption for each row.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"A SwiftUI list with a picture, title, and caption for each row.")],-1),W={class:"hint-container details"},N=s("summary",null,"Further reading",-1),z={class:"hint-container details"},B=s("summary",null,"Similar solutions…",-1);function L(p,M){const t=l("VPCard"),r=l("VidStack"),o=l("FontIcon");return w(),d("div",null,[s("h1",k,[s("a",g,[s("span",null,m(p.$frontmatter.title)+" 관련",1)])]),n(t,e(i({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,f,n(t,e(i({title:"Composing views to create a list row | SwiftUI by Example",desc:"Composing views to create a list row",link:"https://hackingwithswift.com/quick-start/swiftui/composing-views-to-create-a-list-row",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n(r,{src:"youtube/tf4YQzQc6ek"}),y,s("p",null,[a("First, though, an important lesson: SwiftUI is designed to be "),_,a(", which means you can make views out of any other views you like. We have a simple text view for our items right now, "),I,a(", but we're going to add much more in there to bring it to life. While we "),x,a(" put that directly into "),n(o,{icon:"fa-brands fa-swift"}),S,a(", it becomes long and hard to read.")]),V,s("p",null,[a("Now we can go back to "),n(o,{icon:"fa-brands fa-swift"}),T,a(" and replace "),H,a(" with this:")]),C,s("p",null,[a("Now, our code won't build right now, because there's a problem in "),n(o,{icon:"fa-brands fa-swift"}),U,a(". This code is invalid:")]),R,s("p",null,[a("Once that's done our code will build again, and if you return back to "),n(o,{icon:"fa-brands fa-swift"}),j,a(" you should see the same preview we had before – nothing has changed. Of course, now we can start to add new things to that "),q,a(" struct to make it more interesting!")]),E,s("p",null,[a("If you head back to "),n(o,{icon:"fa-brands fa-swift"}),P,a(", your SwiftUI preview should update so you can see how the full list looks now – much better, I think!")]),A,s("details",W,[N,n(t,e(i({title:"How to create and compose custom views | SwiftUI by Example",desc:"How to create and compose custom views",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-and-compose-custom-views",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(i({title:"How to draw images using Image views | SwiftUI by Example",desc:"How to draw images using Image views",link:"/hackingwithswift.com/swiftui/how-to-draw-images-using-image-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(i({title:"How to create stacks using VStack and HStack | SwiftUI by Example",desc:"How to create stacks using VStack and HStack",link:"/hackingwithswift.com/swiftui/how-to-create-stacks-using-vstack-and-hstack.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),s("details",z,[B,n(t,e(i({title:"How to push a new view when a list row is tapped | SwiftUI by Example",desc:"How to push a new view when a list row is tapped",link:"/hackingwithswift.com/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(i({title:"How to allow row selection in a list | SwiftUI by Example",desc:"How to allow row selection in a list",link:"/hackingwithswift.com/swiftui/how-to-allow-row-selection-in-a-list.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(i({title:"How to adjust List row separator insets | SwiftUI by Example",desc:"How to adjust List row separator insets",link:"/hackingwithswift.com/swiftui/how-to-adjust-list-row-separator-insets.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(i({title:"How to add custom swipe action buttons to a List row | SwiftUI by Example",desc:"How to add custom swipe action buttons to a List row",link:"/hackingwithswift.com/swiftui/how-to-add-custom-swipe-action-buttons-to-a-list-row.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(i({title:"How to scroll to a specific row in a list | SwiftUI by Example",desc:"How to scroll to a specific row in a list",link:"/hackingwithswift.com/swiftui/how-to-scroll-to-a-specific-row-in-a-list.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const Y=u(h,[["render",L],["__file","composing-views-to-create-a-list-row.html.vue"]]),$=JSON.parse('{"path":"/hackingwithswift.com/swiftui/composing-views-to-create-a-list-row.html","title":"Composing views to create a list row","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Composing views to create a list row","description":"Article(s) > Composing views to create a list row","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Composing views to create a list row"},{"property":"og:description","content":"Composing views to create a list row"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/composing-views-to-create-a-list-row.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/composing-views-to-create-a-list-row.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Composing views to create a list row"}],["meta",{"property":"og:description","content":"Article(s) > Composing views to create a list row"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/2-7~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2024-04-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Composing views to create a list row\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/2-7~dark.png\\"],\\"datePublished\\":\\"2024-04-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2024-04-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.7,"words":1411},"filePathRelative":"hackingwithswift.com/swiftui/composing-views-to-create-a-list-row.md","localizedDate":"2024년 4월 30일","excerpt":"\\n"}');export{Y as comp,$ as data};
