import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as s,n as t,g as e,d as p,f as l,r as o,o as m}from"./app-BgNevrm5.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},b=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),f=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>When we use SwiftUI&#39;s <code>@State</code> property wrapper it does a huge amount of work on our behalf to allow two-way bindings for user interface controls. However, we can also create bindings by hand using the <code>Binding</code> type, which can be provided with custom <code>get</code> and <code>set</code> closures to run when the value is read or written.</p><p>For example, this creates a trivial binding that just acts as a passthrough for another property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> binding <span class="token operator">=</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token short-argument">$0</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enter your name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> binding<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-create-custom-bindings-1.zip",target:"_blank",rel:"noopener noreferrer"},_=l(`<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>When binding to a custom <code>Binding</code> instance, you don&#39;t need to use the dollar sign before the binding name – you&#39;re already reading the two-way binding.</p></div><p>Custom bindings are useful when you want to add extra logic to a binding being read or written – you might want to perform some calculations before sending a value back, or you might want to take some extra actions when the value is changed.</p><p>For example, we could create a stack of two toggle switches where both can be off and either one can be on, but both can&#39;t be on at the same time – enabling one will always disable the other. Here&#39;s how that looks in code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> firstToggle <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> secondToggle <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> firstBinding <span class="token operator">=</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>firstToggle <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">self</span><span class="token punctuation">.</span>firstToggle <span class="token operator">=</span> <span class="token short-argument">$0</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">self</span><span class="token punctuation">.</span>secondToggle <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> secondBinding <span class="token operator">=</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>secondToggle <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">self</span><span class="token punctuation">.</span>secondToggle <span class="token operator">=</span> <span class="token short-argument">$0</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">self</span><span class="token punctuation">.</span>firstToggle <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> firstBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;First toggle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> secondBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Second toggle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-create-custom-bindings-2.zip",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container details"},H=n("summary",null,"Similar solutions…",-1);function T(r,B){const a=o("VPCard"),i=o("FontIcon"),c=o("VidStack");return m(),d("div",null,[n("h1",w,[n("a",h,[n("span",null,k(r.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,v,s(a,t(e({title:"How to create custom bindings | SwiftUI by Example",desc:"How to create custom bindings",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-custom-bindings",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,n("blockquote",null,[n("p",null,[n("a",y,[s(i,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),s(c,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-custom-bindings-1~dark.mp4"}),_,n("blockquote",null,[n("p",null,[n("a",x,[s(i,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),s(c,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-custom-bindings-2~dark.mp4"}),n("details",S,[H,s(a,t(e({title:"How to create constant bindings | SwiftUI by Example",desc:"How to create constant bindings",link:"/hackingwithswift.com/swiftui/how-to-create-constant-bindings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Two-way bindings in SwiftUI | SwiftUI by Example",desc:"Two-way bindings in SwiftUI",link:"/hackingwithswift.com/swiftui/two-way-bindings-in-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Bindings and forms | SwiftUI by Example",desc:"Bindings and forms",link:"/hackingwithswift.com/swiftui/bindings-and-forms.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create and compose custom views | SwiftUI by Example",desc:"How to create and compose custom views",link:"/hackingwithswift.com/swiftui/how-to-create-and-compose-custom-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create a custom transition | SwiftUI by Example",desc:"How to create a custom transition",link:"/hackingwithswift.com/swiftui/how-to-create-a-custom-transition.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const I=u(g,[["render",T],["__file","how-to-create-custom-bindings.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-create-custom-bindings.html","title":"How to create custom bindings","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create custom bindings","description":"Article(s) > How to create custom bindings","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create custom bindings"},{"property":"og:description","content":"How to create custom bindings"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-custom-bindings.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-custom-bindings.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create custom bindings"}],["meta",{"property":"og:description","content":"Article(s) > How to create custom bindings"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create custom bindings\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"hackingwithswift.com/swiftui/how-to-create-custom-bindings.md","excerpt":"\\n"}');export{I as comp,U as data};
