import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as e,t as l,e as t,n as s,g as n,f as p,r,o as d}from"./app-BgNevrm5.js";const k={},u={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},h=e("nav",{class:"table-of-contents"},[e("ul")],-1),w=e("hr",null,null,-1),g=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Swift‚Äôs <code>Task</code> struct has a static <code>sleep()</code> method that will cause the current task to be suspended for at least some number of nanoseconds. Yes, nanoseconds: you need to write 1_000_000_000 to get 1 second. You need to call <code>Task.sleep()</code> using <code>await</code> as it will cause the task to be suspended, and you also need to use <code>try</code> because <code>sleep()</code> will throw an error if the task is cancelled.</p><p>For example, this will make the current task sleep for at least 3 seconds:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token number">3_000_000_000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Calling <code>Task.sleep()</code> will make the current task sleep for <em>at least</em> the amount of time you ask, not <em>exactly</em> the time you ask. There is a little drift involved because the system might be busy doing other work when the sleep ends, but you are at least guaranteed it won‚Äôt end <em>before</em> your time has elapsed.</p></div><p>Using nanoseconds is a bit clumsy, but Swift doesn‚Äôt have an alternative at this time ‚Äì the plan seems to be to wait for a more thorough review of managing time in the language before committing to specific API.</p><p>In the meantime, we can add small <code>Task</code> extensions to make sleeping easier to accomplish. For example, this lets us sleep using seconds as a floating-point number:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Task</span> <span class="token keyword">where</span> <span class="token class-name">Success</span> <span class="token operator">==</span> <span class="token class-name">Never</span><span class="token punctuation">,</span> <span class="token class-name">Failure</span> <span class="token operator">==</span> <span class="token class-name">Never</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> duration <span class="token operator">=</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>seconds <span class="token operator">*</span> <span class="token number">1_000_000_000</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> duration<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, you can now write <code>Task.sleep(seconds: 0.5)</code> or similar.</p><p>Calling <code>Task.sleep()</code> automatically checks for cancellation, meaning that if you cancel a sleeping task it will be woken and throw a <code>CancellationError</code> for you to catch.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Unlike making a thread sleep, <code>Task.sleep()</code> does <em>not</em> block the underlying thread, allowing it pick up work from elsewhere if needed.</p></div>`,11),f={class:"hint-container details"},y=e("summary",null,"Similar solutions‚Ä¶",-1);function b(o,v){const a=r("VPCard");return d(),i("div",null,[e("h1",u,[e("a",m,[e("span",null,l(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),t(a,s(n({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,w,t(a,s(n({title:"How to make a task sleep | Swift Concurrency by Example",desc:"How to make a task sleep",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-make-a-task-sleep",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,e("details",f,[y,t(a,s(n({title:"What‚Äôs the difference between a task and a detached task? | Swift Concurrency by Example",desc:"What‚Äôs the difference between a task and a detached task?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-a-task-and-a-detached-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(n({title:"How to create and use task local values | Swift Concurrency by Example",desc:"How to create and use task local values",link:"/hackingwithswift.com/concurrency/how-to-create-and-use-task-local-values.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(n({title:"How to cancel a task group | Swift Concurrency by Example",desc:"How to cancel a task group",link:"/hackingwithswift.com/concurrency/how-to-cancel-a-task-group.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(n({title:"How to cancel a Task | Swift Concurrency by Example",desc:"How to cancel a Task",link:"/hackingwithswift.com/concurrency/how-to-cancel-a-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(n({title:"How to run tasks using SwiftUI‚Äôs task() modifier | Swift Concurrency by Example",desc:"How to run tasks using SwiftUI‚Äôs task() modifier",link:"/hackingwithswift.com/concurrency/how-to-run-tasks-using-swiftuis-task-modifier.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const T=c(k,[["render",b],["__file","how-to-make-a-task-sleep.html.vue"]]),H=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-make-a-task-sleep.html","title":"How to make a task sleep","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to make a task sleep","description":"Article(s) > How to make a task sleep","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to make a task sleep"},{"property":"og:description","content":"How to make a task sleep"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-make-a-task-sleep.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-make-a-task-sleep.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to make a task sleep"}],["meta",{"property":"og:description","content":"Article(s) > How to make a task sleep"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to make a task sleep\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.15,"words":646},"filePathRelative":"hackingwithswift.com/concurrency/how-to-make-a-task-sleep.md","localizedDate":"2021ÎÖÑ 11Ïõî 28Ïùº","excerpt":"\\n"}');export{T as comp,H as data};
