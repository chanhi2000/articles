import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as a,n as t,g as o,d as s,a as h,f as l,r as c,o as m}from"./app-BgNevrm5.js";const k={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Available from Swift 6.0")],-1),y=n("p",null,"Swift 6 contains another barrage of updates around concurrency, and the team ought to be proud of the extraordinary advances they have made to make this release possible.",-1),_=n("p",null,"By far the biggest change is that complete concurrency checking is enabled by default. Unless you're very fortunate indeed, there's a very good chance your code will need some adjustment – it's no surprise the Swift team made it optional in earlier versions to give folks time to evaluate what's changing.",-1),S=n("p",null,'Swift 6 improves concurrency checking further, and the Swift team say it "removes many false-positive data-race warnings" that were present in 5.10. It also introduces several targeted changes that will do wonders to make concurrency easier to adopt – if you tried with 5.10 and found things just too gnarly to figure out, hopefully some of the changes in Swift 6 will help.',-1),C={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0414-region-based-isolation.md",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"apple/swift-evolution",-1),q=l(`<p>At the core of this change lies the existing concept of <em>sendability</em>. A <code>Sendable</code> type is one that can be safely passed around in a concurrent environment, which can include value types such as structs, final classes with constant properties, actors that automatically protect their own mutable state, and more.</p><p>Before Swift 6 the compiler was very strict: if you had a non-sendable value on one actor and tried to send it to another actor, you&#39;d get concurrency checking warnings. For example, although SwiftUI view bodies run on the main actor, SwiftUI views themselves <em>don&#39;t</em>, which can easily cause all sorts of false positive warnings from the compiler – Swift thinks there&#39;s a potential race condition when really there isn&#39;t.</p><p>You can see the problem with the following code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>task <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">await</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> user<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">loadData</span><span class="token punctuation">(</span><span class="token keyword">for</span> user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Loading data for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before Swift 6 the call to <code>loadData()</code> would throw up a warning: &quot;passing argument of non-sendable type &#39;User&#39; outside of main actor-isolated context may introduce data races.&quot;</p><p><em>After</em> Swift 6 this warning goes away: Swift now detects that the code doesn&#39;t actually present a problem because <code>user</code> isn&#39;t being accessed from two or more places at once, so it won&#39;t emit a warning – the compiler is able to analyze the program&#39;s flow and detect that it&#39;s safe.</p><p>This change effectively means sendable objects are now either those that conform to <code>Sendable</code>, or those that don&#39;t need to conform to <code>Sendable</code> because the compiler can prove they are being used safely – it&#39;s a dramatic simplification of concurrency for developers, made possible by truly cutting-edge compiler development.</p><p>But there are many other, smaller improvements, including:</p>`,8),x={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0430-transferring-parameters-and-results.md",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"apple/swift-evolution",-1),M=n("code",null,"sending",-1),I={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0423-dynamic-actor-isolation.md",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"apple/swift-evolution",-1),B={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0420-inheritance-of-actor-isolation.md",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"apple/swift-evolution",-1),O=n("code",null,"async",-1),E={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0401-remove-property-wrapper-isolation.md",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"apple/swift-evolution",-1),N=l(`<p>Previously, any struct or class using a property wrapper with <code>@MainActor</code> for its wrapped value will automatically be <code>@MainActor</code>. This is what makes <code>@StateObject</code> and <code>@ObservedObject</code> convey &quot;main-actor-ness&quot; on SwiftUI views that use them – if you use either of those two property wrappers in a SwiftUI view, the whole view becomes <code>@MainActor</code> too.</p><p>As an example, consider the view model below, marked with <code>@MainActor</code> as is good practice:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewModel</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Authenticating…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to use that from a SwiftUI view using <code>@StateObject</code>, you must <em>also</em> mark the view with <code>@MainActor</code> from Swift 6 and later, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">LogInView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">private</span> <span class="token keyword">var</span> model <span class="token operator">=</span> <span class="token class-name">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> startAuthentication<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">startAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        model<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before Swift 6, <code>@MainActor</code> would have been conferred on the whole view because of its <code>@StateObject</code> property.</p>`,6),P={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0412-strict-concurrency-for-global-variables.md",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"apple/swift-evolution",-1),F=l(`<p>This applies to loose variables you might have in your projects at global scope:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> gigawatts <span class="token operator">=</span> <span class="token number">1.21</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>But also to static variables stored in types:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">House</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> motto <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Winter is coming&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This data can be accessed anywhere at any time, which makes it inherently unsafe. To resolve the problem you either need to convert the variable into a sendable constant, restrict it to a global actor, e.g. <code>@MainActor</code>, or, if you have no other option or know it&#39;s protected somewhere else, mark it nonisolated.</p><p>For example, all of these are allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">XWing</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@MainActor</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> sFoilsAttackPosition <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">WarpDrive</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">let</span> maximumSpeed <span class="token operator">=</span> <span class="token number">9.975</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">var</span> idNumber <span class="token operator">=</span> <span class="token number">24601</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Not recommended unless you&#39;re certain it&#39;s safe</span></span>
<span class="line"><span class="token keyword">nonisolated</span><span class="token punctuation">(</span><span class="token keyword">unsafe</span><span class="token punctuation">)</span> <span class="token keyword">var</span> britishCandy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Kit Kat&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Mars Bar&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Skittles&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Starburst&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Twix&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),L={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0411-isolated-default-values.md",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"apple/swift-evolution",-1),R=l(`<p>For example, the code below is now allowed, when previously it would have triggered an error:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@MainActor</span> </span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">DataController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>logger<span class="token punctuation">:</span> <span class="token class-name">Logger</span> <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because both <code>DataController</code> and <code>Logger</code> have been restricted to the main actor, Swift now considers the <code>Logger()</code> creation to also be restricted to the main actor, which makes perfect sense.</p>`,3),W={href:"https://massicotte.org",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,"And remember: if Swift 6 throws up concurrency warnings and errors about your code, those problems were there beforehand too – they just weren't being diagnosed automatically!",-1),z={class:"hint-container details"},G=n("summary",null,"Other Changes in Swift 6.0",-1),J={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-10-to-6-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function X(p,Y){const e=c("VPCard"),i=c("FontIcon");return m(),u("div",null,[n("h1",f,[n("a",w,[n("span",null,d(p.$frontmatter.title)+" 관련",1)])]),a(e,t(o({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,b,a(e,t(o({title:"Complete concurrency enabled by default | Changes in Swift 6.0",desc:"Complete concurrency enabled by default",link:"https://hackingwithswift.com/swift/6.0/concurrency",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,y,_,S,n("p",null,[s("Easily the biggest is "),n("a",C,[s("SE-0414 ("),a(i,{icon:"iconfont icon-github"}),A,s(")")]),s(", which defines isolation regions that allow the compiler to conclusively prove different parts of your code can run concurrently.")]),q,n("ul",null,[n("li",null,[n("a",x,[s("SE-0430 ("),a(i,{icon:"iconfont icon-github"}),j,s(")")]),s(" adds a new "),M,s(" keyword for when we need to send values between isolation regions.")]),n("li",null,[n("a",I,[s("SE-0423 ("),a(i,{icon:"iconfont icon-github"}),V,s(")")]),s(" improves concurrency support when needing to operate with Objective-C frameworks.")]),n("li",null,[n("a",B,[s("SE-0420 ("),a(i,{icon:"iconfont icon-github"}),T,s(")")]),s(" allows us to make "),O,s(" functions that are isolated to the same actor as their caller.")])]),n("p",null,[s("Some other changes were present in earlier versions of Swift, but hidden behind feature flags. For example, "),n("a",E,[s("SE-0401 ("),a(i,{icon:"iconfont icon-github"}),U,s(")")]),s(" removes a feature that was introduced back in Swift 5.5: actor inference for property wrappers.")]),N,n("p",null,[s("Another old change that's now enabled in Swift 6 is "),n("a",P,[s("SE-0412 ("),a(i,{icon:"iconfont icon-github"}),D,s(")")]),s(", which requires global variables to be safe in concurrent environments.")]),F,n("p",null,[s("Another feature present earlier but now enabled is "),n("a",L,[s("SE-0411 ("),a(i,{icon:"iconfont icon-github"}),K,s(")")]),s(", which changes function default values to have the same isolation as the function they are inside.")]),R,n("p",null,[s("Swift concurrency remains a bit of a moving target, but if you'd like to know more I highly recommend "),n("a",W,[a(i,{icon:"fas fa-globe"}),s("Matt Massicotte's blog")]),s(" – I don't think anyone is doing more to educate Swift developers about effective adoption of Swift concurrency.")]),H,n("details",z,[G,h(` 
\`\`\`component VPCard
{
  "title": "Complete concurrency enabled by default | Changes in Swift 6.0",
  "desc": "Complete concurrency enabled by default",
  "link": "/hackingwithswift.com/swift/6.0/concurrency.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),a(e,t(o({title:"count(where:) | Changes in Swift 6.0",desc:"count(where:)",link:"/hackingwithswift.com/swift/6.0/count-where.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Typed throws | Changes in Swift 6.0",desc:"Typed throws",link:"/hackingwithswift.com/swift/6.0/typed-throws.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Pack iteration | Changes in Swift 6.0",desc:"Pack iteration",link:"/hackingwithswift.com/swift/6.0/pack-iteration.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Add Collection Operations on Noncontiguous Elements | Changes in Swift 6.0",desc:"Add Collection Operations on Noncontiguous Elements",link:"/hackingwithswift.com/swift/6.0/rangeset.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Access-level modifiers on import declarations | Changes in Swift 6.0",desc:"Access-level modifiers on import declarations",link:"/hackingwithswift.com/swift/6.0/access-level-import.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"Upgrades for noncopyable types | Changes in Swift 6.0",desc:"Upgrades for noncopyable types",link:"/hackingwithswift.com/swift/6.0/noncopyable-upgrades.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"128-bit Integer Types | Changes in Swift 6.0",desc:"128-bit Integer Types",link:"/hackingwithswift.com/swift/6.0/int128.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,t(o({title:"BitwiseCopyable | Changes in Swift 6.0",desc:"BitwiseCopyable",link:"/hackingwithswift.com/swift/6.0/bitwisecopyable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",J,[a(i,{icon:"fas fa-file-zipper"}),s("Download Swift 6.0 playground")])])])])}const Z=r(k,[["render",X],["__file","concurrency.html.vue"]]),nn=JSON.parse('{"path":"/hackingwithswift.com/swift/6.0/concurrency.html","title":"Complete concurrency enabled by default","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Complete concurrency enabled by default","description":"Article(s) > Complete concurrency enabled by default","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-6.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Complete concurrency enabled by default"},{"property":"og:description","content":"Complete concurrency enabled by default"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/6.0/concurrency.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/6.0/concurrency.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Complete concurrency enabled by default"}],["meta",{"property":"og:description","content":"Article(s) > Complete concurrency enabled by default"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-6.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Complete concurrency enabled by default\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":5.04,"words":1513},"filePathRelative":"hackingwithswift.com/swift/6.0/concurrency.md","excerpt":"\\n"}');export{Z as comp,nn as data};
