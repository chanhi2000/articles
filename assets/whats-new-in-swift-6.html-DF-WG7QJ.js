import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as m,e as a,n as k,g as f,w as o,d as s,f as t,r as l,o as w}from"./app-BgNevrm5.js";const b={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},_=n("hr",null,null,-1),S=n("hr",null,null,-1),x=n("p",null,"2024 is Swift's 10th anniversary, and for the last five of those years we've had no major-version Swift updates – literally half of Swift's life has been 5.0 through to 5.10.",-1),q=n("p",null,"This is more common than you might think. In fact, several major programming languages have some kind of release that takes significantly longer than all others: Python 3 took years to arrive, PHP 6 took so long the team bailed out and jumped straight to PHP 7, and Perl 6 dragged on so much that it ended up evolving into a different language called Raku.",-1),I=n("p",null,"Swift last had major breaking changes back in Swift 3, but when enabled in full Swift's own v6 has the potential to make Swift 3 look like a walk in the park. This is partly because of new changes, but partly also because many features added in recent Swift versions have been hidden behind feature flags that will be enabled by default in Swift 6.",-1),E=n("p",null,"Let's take a look at what's changing…",-1),j={class:"hint-container tip"},T=n("p",{class:"hint-container-title"},"Tips",-1),A={href:"https://github.com/twostraws/whats-new-in-swift-6-0",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"twostraws/whats-new-in-swift-6-0",-1),B=n("hr",null,null,-1),M=n("h2",{id:"complete-concurrency-enabled-by-default",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#complete-concurrency-enabled-by-default"},[n("span",null,"Complete concurrency enabled by default")])],-1),P=n("p",null,"Swift 6 contains another barrage of updates around concurrency, and the team ought to be proud of the extraordinary advances they have made to make this release possible.",-1),O=n("p",null,"By far the biggest change is that complete concurrency checking is enabled by default. Unless you're very fortunate indeed, there's a very good chance your code will need some adjustment – it's no surprise the Swift team made it optional in earlier versions to give folks time to evaluate what's changing.",-1),W=n("p",null,'Swift 6 improves concurrency checking further, and the Swift team say it "removes many false-positive data-race warnings" that were present in 5.10. It also introduces several targeted changes that will do wonders to make concurrency easier to adopt – if you tried with 5.10 and found things just too gnarly to figure out, hopefully some of the changes in Swift 6 will help.',-1),R={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0414-region-based-isolation.md",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"apple/swift-evolution",-1),F=t(`<p>At the core of this change lies the existing concept of <em>sendability</em>. A <code>Sendable</code> type is one that can be safely passed around in a concurrent environment, which can include value types such as structs, final classes with constant properties, actors that automatically protect their own mutable state, and more.</p><p>Before Swift 6 the compiler was very strict: if you had a non-sendable value on one actor and tried to send it to another actor, you&#39;d get concurrency checking warnings. For example, although SwiftUI view bodies run on the main actor, SwiftUI views themselves <em>don&#39;t</em>, which can easily cause all sorts of false positive warnings from the compiler – Swift thinks there&#39;s a potential race condition when really there isn&#39;t.</p><p>You can see the problem with the following code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>task <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">await</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> user<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">loadData</span><span class="token punctuation">(</span><span class="token keyword">for</span> user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Loading data for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before Swift 6 the call to <code>loadData()</code> would throw up a warning: &quot;passing argument of non-sendable type &#39;User&#39; outside of main actor-isolated context may introduce data races.&quot;</p><p><em>After</em> Swift 6 this warning goes away: Swift now detects that the code doesn&#39;t actually present a problem because <code>user</code> isn&#39;t being accessed from two or more places at once, so it won&#39;t emit a warning – the compiler is able to analyze the program&#39;s flow and detect that it&#39;s safe.</p><p>This change effectively means sendable objects are now either those that conform to <code>Sendable</code>, or those that don&#39;t need to conform to <code>Sendable</code> because the compiler can prove they are being used safely – it&#39;s a dramatic simplification of concurrency for developers, made possible by truly cutting-edge compiler development.</p><p>But there are many other, smaller improvements, including:</p>`,8),U={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0430-transferring-parameters-and-results.md",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"apple/swift-evolution",-1),D=n("code",null,"sending",-1),L={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0423-dynamic-actor-isolation.md",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"apple/swift-evolution",-1),H={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0420-inheritance-of-actor-isolation.md",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"apple/swift-evolution",-1),Y=n("code",null,"async",-1),J={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0401-remove-property-wrapper-isolation.md",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"apple/swift-evolution",-1),$=t(`<p>Previously, any struct or class using a property wrapper with <code>@MainActor</code> for its wrapped value will automatically be <code>@MainActor</code>. This is what makes <code>@StateObject</code> and <code>@ObservedObject</code> convey main-actor-ness on SwiftUI views that use them – if you use either of those two property wrappers in a SwiftUI view, the whole view becomes <code>@MainActor</code> too.</p><p>As an example, consider the view model below, marked with <code>@MainActor</code> as is good practice:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewModel</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Authenticating…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to use that from a SwiftUI view using <code>@StateObject</code>, you must <em>also</em> mark the view with <code>@MainActor</code> from Swift 6 and later, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">LogInView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">private</span> <span class="token keyword">var</span> model <span class="token operator">=</span> <span class="token class-name">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> startAuthentication<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">startAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        model<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before Swift 6, <code>@MainActor</code> would have been conferred on the whole view because of its <code>@StateObject</code> property.</p>`,6),G={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0412-strict-concurrency-for-global-variables.md",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"apple/swift-evolution",-1),Q=t(`<p>This applies to loose variables you might have in your projects at global scope:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> gigawatts <span class="token operator">=</span> <span class="token number">1.21</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>But also to static variables stored in types:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">House</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> motto <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Winter is coming&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This data can be accessed anywhere at any time, which makes it inherently unsafe. To resolve the problem you either need to convert the variable into a sendable constant, restrict it to a global actor, e.g. <code>@MainActor</code>, or, if you have no other option or know it&#39;s protected somewhere else, mark it nonisolated.</p><p>For example, all of these are allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">XWing</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@MainActor</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> sFoilsAttackPosition <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">WarpDrive</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">let</span> maximumSpeed <span class="token operator">=</span> <span class="token number">9.975</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">var</span> idNumber <span class="token operator">=</span> <span class="token number">24601</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Not recommended unless you&#39;re certain it&#39;s safe</span></span>
<span class="line"><span class="token keyword">nonisolated</span><span class="token punctuation">(</span><span class="token keyword">unsafe</span><span class="token punctuation">)</span> <span class="token keyword">var</span> britishCandy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Kit Kat&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Mars Bar&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Skittles&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Starburst&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Twix&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),nn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0411-isolated-default-values.md",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"apple/swift-evolution",-1),an=t(`<p>For example, the code below is now allowed, when previously it would have triggered an error:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@MainActor</span> </span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">DataController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>logger<span class="token punctuation">:</span> <span class="token class-name">Logger</span> <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because both <code>DataController</code> and <code>Logger</code> have been restricted to the main actor, Swift now considers the <code>Logger()</code> creation to also be restricted to the main actor, which makes perfect sense.</p>`,3),en={href:"https://massicotte.org",target:"_blank",rel:"noopener noreferrer"},tn=n("p",null,"And remember: if Swift 6 throws up concurrency warnings and errors about your code, those problems were there beforehand too – they just weren't being diagnosed automatically!",-1),on=n("hr",null,null,-1),ln=n("h2",{id:"count-where",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#count-where"},[n("span",null,"count(where:)")])],-1),pn={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0220-count-where.md",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"apple/swift-evolution",-1),rn=n("code",null,"count(where:)",-1),un=n("code",null,"filter()",-1),dn=t(`<p>This example creates an array of test results, and counts how many are greater or equal to 85:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> passCount <span class="token operator">=</span> scores<span class="token punctuation">.</span>count <span class="token punctuation">{</span> rgument&quot;<span class="token operator">&gt;</span><span class="token short-argument">$0</span> <span class="token operator">&gt;=</span> <span class="token number">85</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And this counts how many names in an array start with “Terry”:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> pythons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Eric Idle&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Graham Chapman&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;John Cleese&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Michael Palin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Terry Gilliam&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Terry Jones&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> terryCount <span class="token operator">=</span> pythons<span class="token punctuation">.</span>count <span class="token punctuation">{</span> rgument<span class="token string-literal"><span class="token string">&quot;&gt;$0.hasPrefix(&quot;</span></span><span class="token class-name">Terry</span>&quot;<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This method is available to all types that conform to <code>Sequence</code>, so you can use it on sets and dictionaries too.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p><code>count(where:)</code> was originally planned for Swift 5.0 way back in 2019, but was withdrawn at the time for performance reasons.</p></div><hr><h2 id="typed-throws" tabindex="-1"><a class="header-anchor" href="#typed-throws"><span>Typed throws</span></a></h2>`,8),hn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0413-typed-throws.md",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"apple/swift-evolution",-1),kn=t(`<p>As an example of typed throws, we could define a <code>CopierError</code> that can track when a photocopier runs out of paper:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">CopierError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> outOfPaper</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could then create a <code>Photocopier</code> struct that creates some number of copies of a page. This might throw errors if there isn&#39;t enough paper loaded for the requested operation, but rather than mark it simply as <code>throws</code> we&#39;ll use <code>throws(CopierError)</code> to be clear exactly what kind of errors can be thrown:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Photocopier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> pagesRemaining<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">copy</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token punctuation">(</span><span class="token class-name">CopierError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> count <span class="token operator">&gt;=</span> pagesRemaining <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token class-name">CopierError</span><span class="token punctuation">.</span>outOfPaper</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        pagesRemaining <span class="token operator">-=</span> count</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>With this change you can either use <code>throws</code> to specify any kind of error being thrown, or <code>throws(OneSpecificErrorType)</code> to signal that only that one type can be thrown. You cannot write <code>throws(A, B, C)</code> to throw one of several errors.</p></div><p>Now we can write code to attempt photocopying, catching the single error that can possibly be thrown:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> copier <span class="token operator">=</span> <span class="token class-name">Photocopier</span><span class="token punctuation">(</span>pagesRemaining<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">try</span> copier<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token class-name">CopierError</span><span class="token punctuation">.</span>outOfPaper <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Please refill the paper&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That call site is the important change here: in earlier versions of Swift we&#39;d need a so-called &quot;Pokémon catch&quot; at the end, because Swift couldn&#39;t be sure exactly which error types could be thrown – you&#39;ve &quot;gotta catch &#39;em all.&quot;</p><p>This comes with several other advantages:</p><ol><li>Because Swift knows that <code>CopierError</code> is the only error type that can be thrown, we can write <code>throw .outOfPaper</code>.</li><li>If the code in a <code>do</code> block only throws one kind of error, the <code>error</code> value in a general <code>catch</code> block will automatically have the same error type rather than being any kind of error.</li><li>If we attempt to throw any other kind of error not listed in the <code>throws</code> clause, Swift will issue a compile error.</li></ol><p>Where this gets really clever is that <code>throws(any Error)</code> is equivalent to using just <code>throws</code> by itself, and <code>throws(Never)</code> is equivalent to a non-throwing function. That might sound obscure, but it means in many places <code>rethrows</code> can be expressed more clearly: the function throws whatever the function parameter throws.</p><p>As an example, Swift 6&#39;s new <code>count(where:)</code> method accepts a closure used to evaluate how many items match whatever kind of filter you&#39;re running. That closure might throw errors, and if it does <code>count(where:)</code> will throw that same error type:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">count</span><span class="token operator">&lt;</span><span class="token class-name">E</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">where</span> predicate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If that closure <em>doesn&#39;t</em> throw an error, <code>throws(E)</code> is effectively <code>throws(Never)</code>, meaning that <code>count(where:)</code> will also not throw errors.</p><p>Even though typed throws seem very appealing, they aren&#39;t a great choice when the errors that can be thrown might change in the future. They are a particularly poor choice in library code, because they lock you into a contract you might not want to stick to in the future.</p><p>In fact, here I&#39;ll just defer to the authors of the evolution proposal, who sum it up like this: <strong>even with the addition of typed throws to Swift, untyped throws is better for most scenarios.</strong></p><p>Where typed throws <em>are</em> particularly useful is in the increasingly important realm of embedded Swift, where performance and predictability is critical. Apple&#39;s recent interest in typed throws would rather suggest that embedded Swift is something they are keen to invest in as a priority – perhaps the idea of having kernel-level Swift isn&#39;t so far away.</p><hr><h2 id="pack-iteration" tabindex="-1"><a class="header-anchor" href="#pack-iteration"><span>Pack iteration</span></a></h2>`,19),fn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0408-pack-iteration.md",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"apple/swift-evolution",-1),bn=t(`<p>Although value packs remain one of the most complex features of Swift, the evolution proposal shows just how useful this feature is by adding tuple comparison for any arity in just a few lines of code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token operator">==</span> <span class="token operator">&lt;</span>each <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Equatable</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">repeat</span> each <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">repeat</span> each <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">repeat</span> <span class="token punctuation">(</span>each lhs<span class="token punctuation">,</span> each rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">left</span> <span class="token operator">==</span> <span class="token keyword">right</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),gn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0015-tuple-comparison-operators.md",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"apple/swift-evolution",-1),yn=n("code",null,"==",-1),_n=n("code",null,"(1, 2, 3, 4, 5, 6, 7) == (1, 2, 3, 4, 5, 6, 7)",-1),Sn=n("p",null,[s("Tantalizingly, the Future Directions section](https://github.com/apple/swift-evolution/blob/main/proposals/0408-pack-iteration.md#future-directions) of this evolution proposal suggest that in the future we might see a variant of Swift's "),n("code",null,"zip()"),s(" function that supports any number of sequences.")],-1),xn=n("p",null,[s("That being said, if I were to speculate I'd say this particular feature feels more like Apple continuing work to formalize a technique SwiftUI has used for some time: being able to iterate over "),n("code",null,"TupleView"),s(" children in a "),n("code",null,"VStack"),s(".")],-1),qn=n("hr",null,null,-1),In=n("h2",{id:"add-collection-operations-on-noncontiguous-elements",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#add-collection-operations-on-noncontiguous-elements"},[n("span",null,"Add Collection Operations on Noncontiguous Elements")])],-1),En={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0270-rangeset-and-collection-operations.md",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"apple/swift-evolution",-1),Tn=t(`<p>This change is powered by a new type called <code>RangeSet</code>. If you&#39;ve ever used <code>IndexSet</code> from Foundation, think of <code>RangeSet</code> as being <code>IndexSet</code> except for any kind of <code>Comparable</code> type rather than just integers.</p><p>Lots of Swift API has been upgraded to <code>RangeSet</code>. To give us some example data to work with, we could create an array of students with exam results like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ExamResult</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> student<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name">ExamResult</span><span class="token punctuation">(</span>student<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Eric Effiong&quot;</span></span><span class="token punctuation">,</span> score<span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ExamResult</span><span class="token punctuation">(</span>student<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Maeve Wiley&quot;</span></span><span class="token punctuation">,</span> score<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ExamResult</span><span class="token punctuation">(</span>student<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Otis Milburn&quot;</span></span><span class="token punctuation">,</span> score<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can get a <code>RangeSet</code> containing the indices of all students who score 85% or higher like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> topResults <span class="token operator">=</span> results<span class="token punctuation">.</span>indices <span class="token punctuation">{</span> student <span class="token keyword">in</span></span>
<span class="line">    student<span class="token punctuation">.</span>score <span class="token operator">&gt;=</span> <span class="token number">85</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And if we wanted to get access to those students, we can use a new <code>Collection</code> subscript:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">[</span>topResults<span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result<span class="token punctuation">.</span>student</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> scored </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result<span class="token punctuation">.</span>score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">%&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This subscript returns another new type called <code>DiscontiguousSlice</code>, which is similar to <code>Slice</code> in that for performance reasons it refers to elements stored in a different collection, except the indices are <em>discontiguous</em>, meaning that they aren&#39;t necessarily adjacent in the collection.</p><p>The &quot;set&quot; part of the name is there because <code>RangeSet</code> supports a variety of functions that come from the <code>SetAlgebra</code> protocol, including <code>union()</code>, <code>intersection()</code>, and <code>isSuperset(of:)</code>. This also means that inserting one range into another will merge any overlapping ranges rather than creating duplicates.</p><hr><h2 id="access-level-modifiers-on-import-declarations" tabindex="-1"><a class="header-anchor" href="#access-level-modifiers-on-import-declarations"><span>Access-level modifiers on import declarations</span></a></h2>`,11),An={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0409-access-level-on-imports.md",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"apple/swift-evolution",-1),Bn=n("code",null,"private import SomeLibrary",-1),Mn=t(`<p>There are various ways this will be useful, including the ability for library developers to avoid accidentally leaking their own dependencies. For example, a banking might be split into multiple parts:</p><ul><li>The app itself, presenting the user interface.</li><li>A Banking library that handles all the functionality and core logic.</li><li>Several smaller, internal libraries that handle individual pieces of work that are lower level, such as a Transactions package, a Networking package, and so on.</li></ul><p>So, the app depends on the Banking library, and the Banking library in turn depends on Transactions, Networking, and other internal libraries.</p><p>We can demonstrate that setup with some code that also demonstrates the problem being resolved here. First, we could say that the low-level Transactions package has a struct such as this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">BankTransaction</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// code here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Up in the Banking library we might write a function to send money from one account number to another using that <code>BankTransaction</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">sendMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">BankTransaction</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// handle sending money then send back the result</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">BankTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now in the main app we can call <code>sendMoney()</code> to do the work.</p><p>That&#39;s all regular Swift code, but it can create a rather unpleasant problem: very often wrapper libraries don&#39;t want to reveal the inner workings of the libraries they rely on internally, which is exactly what happens here – our main app is given access to the <code>BankTransaction</code> struct from the Transactions library, when really it should only use APIs from the Banking library.</p><p>From 6.0 onwards we can solve this problem by using access control on the import for Transactions: by using <code>internal import Transactions</code> or similar in the Banking library, Swift will refuse to build any code declared as public that exposes API from the Transactions library.</p><p>This really helps to clear up code boundaries: the Banking framework can still go ahead and use all the libraries it wants internally, but it won&#39;t be allowed to send those back to clients – the app in this case – by accident. If we genuinely did want to expose the internal framework types, we would use <code>public import Transactions</code> to make that explicit.</p><p>On a more fine-grained level, this also allows files inside the same module to add extra restrictions – one file could privately import a framework without wanting to accidentally expose the contents of that framework elsewhere.</p><p>Although Swift 6 hasn&#39;t shipped yet, it&#39;s looking like the default for imports will be <code>internal</code> when running in Swift 6 mode, but <code>public</code> in Swift 5 mode to retain compatibility with existing code.</p><hr><h2 id="upgrades-for-noncopyable-types" tabindex="-1"><a class="header-anchor" href="#upgrades-for-noncopyable-types"><span>Upgrades for noncopyable types</span></a></h2>`,15),Pn=t(`<p>As a reminder, noncopyable types allow us create types that have unique ownership, which we can pass around using borrowing or consuming as needed.</p><p>One example of noncopyable types I previously used were the secret messages used in the Mission Impossible movies – they famously self-destruct after being read, which we can model with a noncopyable type that is consumed (i.e. destroyed) upon reading:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token punctuation">:</span> <span class="token operator">~</span><span class="token class-name">Copyable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> agent<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>agent<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>agent <span class="token operator">=</span> agent</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    consuming <span class="token keyword">func</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">agent</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">message</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>agent<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Ethan Hunt&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;You need to abseil down a skyscraper for some reason.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code, the compiler enforces that <code>message.read()</code> can only ever be called once, because it consumes the object.</p>`,4),On={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0427-noncopyable-generics.md",target:"_blank",rel:"noopener noreferrer"},Wn=n("code",null,"apple/swift-evolution",-1),Rn=n("code",null,"Copyable",-1),Nn=n("code",null,"~Copyable",-1),Fn=t("<p>This impacts on the other changes introduced with this proposal. For example, noncopyable types can now be used with generics, allowing things like <em>optional</em> noncopyable instances because Swift&#39;s <code>Optional</code> is implemented a generic enum. However, because generic type parameters automatically conform to <code>Copyable</code> we must explicitly opt out using <code>~Copyable</code>.</p><p>Similarly, this change means noncopyable types can now conform to protocols, but only when those protocols are also marked <code>~Copyable</code> because otherwise they get automatically opted into <code>Copyable</code> as mentioned above. (In case you were curious, <code>Copyable</code> types can conform to noncopyable protocols just fine.)</p>",2),Un={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0429-partial-consumption.md",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"apple/swift-evolution",-1),Dn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0429-partial-consumption.md",target:"_blank",rel:"noopener noreferrer"},Ln=n("code",null,"apple/swift-evolution",-1),zn=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Package</span><span class="token punctuation">:</span> <span class="token operator">~</span><span class="token class-name">Copyable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> from<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;IMF&quot;</span></span></span>
<span class="line">    <span class="token keyword">var</span> message<span class="token punctuation">:</span> <span class="token class-name">Message</span></span>
<span class="line"></span>
<span class="line">    consuming <span class="token keyword">func</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code is now valid Swift, as long as the types in question don&#39;t have deinitializers.</p>`,2),Hn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0432-noncopyable-switch.md",target:"_blank",rel:"noopener noreferrer"},Kn=n("code",null,"apple/swift-evolution",-1),Yn=n("code",null,"where",-1),Jn=t(`<p>Continuing our Mission Impossible example, we could say that one set of orders might be signed or anonymous, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">ImpossibleOrder</span><span class="token punctuation">:</span> <span class="token operator">~</span><span class="token class-name">Copyable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">signed</span><span class="token punctuation">(</span><span class="token class-name">Package</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because that enum has associated values that are noncopyable, it must itself be noncopyable. However, the associated values being noncopyable also means that pattern matching with <code>where</code> was tricky – if you wanted to perform one set of actions for one <code>Message</code> type, and a different set for another <code>Message</code> type, you were out of luck.</p>`,3),Zn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0432-noncopyable-switch.md",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"apple/swift-evolution",-1),Gn=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">issueOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>agent<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Ethan Hunt&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;You need to abseil down a skyscraper for some reason.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token class-name">ImpossibleOrder</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span> consume order <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">signed</span><span class="token punctuation">(</span><span class="token keyword">let</span> package<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        package<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token keyword">let</span> message<span class="token punctuation">)</span> <span class="token keyword">where</span> message<span class="token punctuation">.</span>agent <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Ethan Hunt&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Play dramatic music&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token keyword">let</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Put together, this collection of changes helps make noncopyable types work much more naturally in Swift.</p><hr><h2 id="_128-bit-integer-types" tabindex="-1"><a class="header-anchor" href="#_128-bit-integer-types"><span>128-bit Integer Types</span></a></h2>`,4),Xn={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0425-int128.md",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"apple/swift-evolution",-1),ns=n("code",null,"Int128",-1),ss=n("code",null,"UInt128",-1),as=t(`<p>Still, I&#39;d feel guilty if I didn&#39;t at least give you a code sample, so here goes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> enoughForAnybody<span class="token punctuation">:</span> <span class="token class-name">Int128</span> <span class="token operator">=</span> <span class="token number">170_141_183_460_469_231_731_687_303_715_884_105_727</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="bitwisecopyable" tabindex="-1"><a class="header-anchor" href="#bitwisecopyable"><span>BitwiseCopyable</span></a></h2>`,4),es={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0426-bitwise-copyable.md",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"apple/swift-evolution",-1),os=n("code",null,"BitwiseCopyable",-1),is=t(`<p><em>Most of the time you don&#39;t need to do anything to enable <code>BitwiseCopyable</code> support</em>. Swift will automatically apply it to most structs and enums you create as long as all the properties they contain are also bitwise copyable. That includes a huge collection of built-in types: all integers, all floating-point numbers, <code>Bool</code>, <code>Duration</code>, <code>StaticString</code>, and more.</p><p>Where things take a little more thinking is when you&#39;re building a library – if Swift were to automatically apply a conformance to <code>BitwiseCopyable</code> it could cause problems if your type changed in the future in a way that made it <em>not</em> support the protocol.</p><p>So, Swift disables the automatic inference for types you export with <code>public</code> or <code>package</code> visibility unless you explicitly mark those types with <code>@frozen</code>.</p><p>If you specifically need to disable <code>BitwiseCopyable</code>, you can do that by adding <code>~BitwiseCopyable</code> to your type&#39;s inheritance list. For example, the standard library&#39;s <code>CommandLine</code> enum is both <code>public</code> and <code>@frozen</code>, so the Swift team explicitly opt out of it being bitwise copyable like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@frozen</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CommandLine</span> <span class="token punctuation">:</span> <span class="token operator">~</span><span class="token class-name">BitwiseCopyable</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Opting out of <code>BitwiseCopyable</code> must happen directly where your type is declared rather than in an extension.</p></div><hr><h2 id="and-maybe-more" tabindex="-1"><a class="header-anchor" href="#and-maybe-more"><span>And maybe more…</span></a></h2><p>Until Swift 6 ships as final later in the year it&#39;s hard to tell exactly what mix of features might arrive. At this time, the following proposals are the ones I&#39;m watching carefully:</p>`,9),ls={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0364-retroactive-conformance-warning.md",target:"_blank",rel:"noopener noreferrer"},ps=n("code",null,"apple/swift-evolution",-1),cs={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0415-function-body-macros.md",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"apple/swift-evolution",-1),us={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0419-backtrace-api.md",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"apple/swift-evolution",-1),hs=n("p",null,[s("The retroactive conformances change is particularly interesting, mostly because Apple does a less than optimal job of making some of its most common framework types conform to common protocols like "),n("code",null,"Equatable"),s(" and "),n("code",null,"Codable"),s(" – I really hope that changes before SE-0364 kicks in.")],-1),ms=n("hr",null,null,-1),ks=n("h2",{id:"where-next",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#where-next"},[n("span",null,"Where next?")])],-1),fs=n("p",null,"Swift 6 feels like it has been on the horizon for some years now – I can certainly remember thinking about it pretty much ever since early concurrency discussions, when we started looking towards the compiler refusing to build code that wasn't provably concurrency-safe.",-1),ws=n("p",null,"Over time, Swift 6 became something of a dumping ground for code-breaking features – some evolution proposals landed in earlier versions of Swift, and were either disabled fully or in part without enabling specific compiler flags. Some or all of these will now enabled when Swift 6 language mode is enabled:",-1),bs={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0354-regex-literals.md",target:"_blank",rel:"noopener noreferrer"},gs={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0409-access-level-on-imports.md",target:"_blank",rel:"noopener noreferrer"},vs={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0274-magic-file.md",target:"_blank",rel:"noopener noreferrer"},ys={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0286-forward-scan-trailing-closures.md",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md",target:"_blank",rel:"noopener noreferrer"},Ss=n("code",null,"any",-1),xs={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0384-importing-forward-declared-objc-interfaces-and-protocols.md",target:"_blank",rel:"noopener noreferrer"},qs={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0383-deprecate-uiapplicationmain-and-nsapplicationmain.md",target:"_blank",rel:"noopener noreferrer"},Is=n("p",null,"Now that Swift 6 is finally here, there's undoubtedly going to be a fair amount of churn in projects: if you're moving from Swift 5.10 to Swift 6 without trying some of the compiler flags or enabling strict concurrency checking, there's a good chance your project won't build.",-1),Es=n("p",null,"There will also be just as much churn in documentation: many tutorials, books, and conference videos will be outdated when projects start moving to Swift 6 across the board, unless Apple really does some magic with their framework updates alongside Swift 6.",-1),js={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0435-swiftpm-per-target-swift-language-version-setting.md",target:"_blank",rel:"noopener noreferrer"},Ts=n("code",null,"apple/swift-evolution",-1),As=n("p",null,"I know it probably feels like Swift's concurrency story has been in non-stop flux ever since it was introduced, but I also don't think it's over yet. Even with the remarkable efforts that went into Swift 5.10 and 6.0, I fully expect a few more years of refinement to happen both in Swift and particularly Apple's frameworks to help make concurrency as smooth as possible.",-1),Cs=n("p",null,"Perhaps the more interesting question is whether Swift 6.x will last as long as Swift 5.x did, or whether the team will ease into a slightly more regular cadence now the mammoth work of complete concurrency is finally enabled.",-1);function Bs(p,Ms){const c=l("VPCard"),i=l("router-link"),r=l("SiteInfo"),e=l("FontIcon"),u=l("RouteLink");return w(),h("div",null,[n("h1",g,[n("a",v,[n("span",null,m(p.$frontmatter.title)+" 관련",1)])]),a(c,k(f({title:"Swift > Article(s)",desc:"Article(s)",link:"/programming/swift/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[a(i,{to:"#complete-concurrency-enabled-by-default"},{default:o(()=>[s("Complete concurrency enabled by default")]),_:1})]),n("li",null,[a(i,{to:"#count-where"},{default:o(()=>[s("count(where:)")]),_:1})]),n("li",null,[a(i,{to:"#typed-throws"},{default:o(()=>[s("Typed throws")]),_:1})]),n("li",null,[a(i,{to:"#pack-iteration"},{default:o(()=>[s("Pack iteration")]),_:1})]),n("li",null,[a(i,{to:"#add-collection-operations-on-noncontiguous-elements"},{default:o(()=>[s("Add Collection Operations on Noncontiguous Elements")]),_:1})]),n("li",null,[a(i,{to:"#access-level-modifiers-on-import-declarations"},{default:o(()=>[s("Access-level modifiers on import declarations")]),_:1})]),n("li",null,[a(i,{to:"#upgrades-for-noncopyable-types"},{default:o(()=>[s("Upgrades for noncopyable types")]),_:1})]),n("li",null,[a(i,{to:"#_128-bit-integer-types"},{default:o(()=>[s("128-bit Integer Types")]),_:1})]),n("li",null,[a(i,{to:"#bitwisecopyable"},{default:o(()=>[s("BitwiseCopyable")]),_:1})]),n("li",null,[a(i,{to:"#and-maybe-more"},{default:o(()=>[s("And maybe more…")]),_:1})]),n("li",null,[a(i,{to:"#where-next"},{default:o(()=>[s("Where next?")]),_:1})])])]),_,a(r,{name:"What's new in Swift 6.0? – Hacking with Swift",desc:"When fully enabled, Swift 6 is likely to require changes in pretty much every project.",url:"https://hackingwithswift.com/articles/242/whats-new-in-swift-6",logo:"https://hackingwithswift.com/favicon.svg",preview:"https://hackingwithswift.com/uploads/swift-evolution-12.jpg"}),S,x,q,I,E,n("div",j,[T,n("p",null,[s("You can also "),n("a",A,[a(e,{icon:"fas fa-download"}),s("download this as an Xcode playground ("),a(e,{icon:"iconfont icon-github"}),C,s(")")]),s(" if you want to try the code samples yourself.")])]),B,M,P,O,W,n("p",null,[s("Easily the biggest is "),n("a",R,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0414 ("),a(e,{icon:"iconfont icon-github"}),N,s(")")]),s(", defines isolation regions that allow the compiler to conclusively prove different parts of your code can run concurrently.")]),F,n("ul",null,[n("li",null,[n("a",U,[a(e,{icon:"fa-brands fa-swift"}),s("SE-430 ("),a(e,{icon:"iconfont icon-github"}),V,s(")")]),s(" adds a new "),D,s(" keyword for when we need to send values between isolation regions.")]),n("li",null,[n("a",L,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0423 ("),a(e,{icon:"iconfont icon-github"}),z,s(")")]),s(" improves concurrency support when needing to operate with Objective-C frameworks.")]),n("li",null,[n("a",H,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0420 ("),a(e,{icon:"iconfont icon-github"}),K,s(")")]),s(" allows us to make "),Y,s(" functions that are isolated to the same actor as their caller.")])]),n("p",null,[s("Some other changes were present in earlier versions of Swift, but hidden behind feature flags. For example, "),n("a",J,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0401 ("),a(e,{icon:"iconfont icon-github"}),Z,s(")")]),s(" removes a feature that was introduced back in Swift 5.5: actor inference for property wrappers.")]),$,n("p",null,[s("Another old change that's now enable in Swift 6 is "),n("a",G,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0412 ("),a(e,{icon:"iconfont icon-github"}),X,s(")")]),s(" requires global variables to be safe in concurrent environments.")]),Q,n("p",null,[s("A further feature present earlier but now enabled is "),n("a",nn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0411 ("),a(e,{icon:"iconfont icon-github"}),sn,s(")")]),s(", which changes function default values to have the same isolation as the function they are inside.")]),an,n("p",null,[s("Swift concurrency remains a bit of a moving target, but if you'd like to know more I highly recommend "),n("a",en,[a(e,{icon:"fas fa-globe"}),s("Matt Massicotte's blog")]),s(" – I don't think anyone is doing more to educate Swift developers about effective adoption of Swift concurrency.")]),tn,on,ln,n("p",null,[s("."),n("a",pn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0220 ("),a(e,{icon:"iconfont icon-github"}),cn,s(")")]),s(" introduced a new "),rn,s(" method that performs the equivalent of a "),un,s(" and count in a single pass. This saves the creation of a new array that gets immediately discarded, and provides a clear and concise solution to a common problem.")]),dn,n("p",null,[s("."),n("a",hn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0413 ("),a(e,{icon:"iconfont icon-github"}),mn,s(")")]),s(' introduced the ability to specify exactly what types of errors a function can throw, known as "typed throws". This resolves an annoyance with errors in Swift: we needed a general catch clause even when we had specifically caught all possible errors.')]),kn,n("p",null,[s("."),n("a",fn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0408 ("),a(e,{icon:"iconfont icon-github"}),wn,s(")")]),s(" introduces pack iteration, which adds the ability to loop over the parameter pack feature introduced in Swift 5.9.")]),bn,n("p",null,[s("If that means nothing to you, the Simple English version is that "),n("a",gn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0015 ("),a(e,{icon:"iconfont icon-github"}),vn,s(")")]),s(" added support for direct tuple comparison up to arity 6, meaning that two tuples with up to six items could be compared using "),yn,s(". If you tried comparing tuples with seven items – e.g. "),_n,s(" – Swift would throw up an error. SE-0408, along with the code above, removes that restriction.")]),Sn,xn,qn,In,n("p",null,[s("."),n("a",En,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0270 ("),a(e,{icon:"iconfont icon-github"}),jn,s(")")]),s(" introduces various new methods to handle more complex operations on collections, such as moving or remove multiple items that aren't contiguous.")]),Tn,n("p",null,[s("."),n("a",An,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0409 ("),a(e,{icon:"iconfont icon-github"}),Cn,s(")")]),s(" adds the ability to mark import declarations with access control modifiers, such as "),Bn,s(".")]),Mn,n("p",null,[s("Noncopyable types were "),a(u,{to:"/hackingwithswift.com/swift/5.9/noncopyable-structs-and-enums.html"},{default:o(()=>[s("introduced in Swift 5.9")]),_:1}),s(", but are getting several upgrades in Swift 6.")]),Pn,n("p",null,[s("The first major improvement is "),n("a",On,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0427 ("),a(e,{icon:"iconfont icon-github"}),Wn,s(")")]),s(", which introduces a batch of improvements at once. The biggest of those is that every struct, class, enum, generic type parameter, and protocol in Swift 6 automatically conforms to a new "),Rn,s(" protocol unless you explicitly opt out using "),Nn,s(".")]),Fn,n("p",null,[s("."),n("a",Un,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0429 ("),a(e,{icon:"iconfont icon-github"}),Vn,s(")")]),s(" improves things further by adding partial consumption of noncopyable values.")]),n("p",null,[s("Previously it could be a problem when one noncopyable type incorporated another. For example, even fairly trivial code like the below was a problem before "),n("a",Dn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0429 ("),a(e,{icon:"iconfont icon-github"}),Ln,s(")")]),s(":")]),zn,n("p",null,[s("A third major noncopyable improvement is "),n("a",Hn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0432 ("),a(e,{icon:"iconfont icon-github"}),Kn,s(")")]),s(", which allows us to borrow noncopyable types while switching over them. Previously it was impossible to do pattern matching with "),Yn,s(" clauses that depended on noncopyable values, whereas thanks to SE-0432 this is now possible in Swift 6.")]),Jn,n("p",null,[s("With "),n("a",Zn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0432 ("),a(e,{icon:"iconfont icon-github"}),$n,s(")")]),s(" this is now resolved, meaning code like the below is now allowed:")]),Gn,n("p",null,[s("."),n("a",Xn,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0425 ("),a(e,{icon:"iconfont icon-github"}),Qn,s(")")]),s(" introduces "),ns,s(" and "),ss,s('. I literally have nothing more to say about these, because I think you already know exactly how they work – even the evolution proposal says, "the actual API of the types is uninteresting."')]),as,n("p",null,[s("."),n("a",es,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0426 ("),a(e,{icon:"iconfont icon-github"}),ts,s(")")]),s(" introduces a new "),os,s(" protocol, which has the sole purpose of allowing the compiler to create more optimized code for conforming types.")]),is,n("ul",null,[n("li",null,[n("a",ls,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0364 ("),a(e,{icon:"iconfont icon-github"}),ps,s("): Warning for Retroactive Conformances of External Types")])]),n("li",null,[n("a",cs,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0415 ("),a(e,{icon:"iconfont icon-github"}),rs,s("): Function body macros")])]),n("li",null,[n("a",us,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0419 ("),a(e,{icon:"iconfont icon-github"}),ds,s("): Swift Backtrace API")])])]),hs,ms,ks,fs,ws,n("ul",null,[n("li",null,[n("a",bs,[a(e,{icon:"fa-brands fa-swift"}),s("Bare slash regexes")])]),n("li",null,[n("a",gs,[a(e,{icon:"fa-brands fa-swift"}),s("Access control for imports")])]),n("li",null,[n("a",vs,[a(e,{icon:"fa-brands fa-swift"}),s("Concise magic file names")])]),n("li",null,[n("a",ys,[a(e,{icon:"fa-brands fa-swift"}),s("Forward scan matching for trailing closures")])]),n("li",null,[n("a",_s,[a(e,{icon:"fa-brands fa-swift"}),Ss,s(" being required for existential types")])]),n("li",null,[n("a",xs,[a(e,{icon:"fa-brands fa-swift"}),s("Importing Forward Declared Objective-C Interfaces and Protocols")])]),n("li",null,[n("a",qs,[a(e,{icon:"fa-brands fa-swift"}),s("Deprecate @UIApplicationMain and @NSApplicationMain")])])]),Is,Es,n("p",null,[s("One thing that will help – which I think will also land in Swift 6, but it's hard to tell – is "),n("a",js,[a(e,{icon:"fa-brands fa-swift"}),s("SE-0435 ("),a(e,{icon:"iconfont icon-github"}),Ts,s(")")]),s(", which allows developers to control the Swift language setting on individual targets in their project. If this comes with Swift 6, it will certainly make it easier to move across to Swift 6 incrementally.")]),As,Cs])}const Ws=d(b,[["render",Bs],["__file","whats-new-in-swift-6.html.vue"]]),Rs=JSON.parse(`{"path":"/hackingwithswift.com/whats-new-in-swift-6.html","title":"What's new in Swift 6.0?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What's new in Swift 6.0?","description":"When fully enabled, Swift 6 is likely to require changes in pretty much every project.","icon":"fa-brands fa-swift","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","ios","xcode"],"head":[[{"meta":null},{"property":"og:title","content":"What's new in Swift 6.0?"},{"property":"og:description","content":"When fully enabled, Swift 6 is likely to require changes in pretty much every project."},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/whats-new-in-swift-6.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/whats-new-in-swift-6.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What's new in Swift 6.0?"}],["meta",{"property":"og:description","content":"When fully enabled, Swift 6 is likely to require changes in pretty much every project."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/uploads/swift-evolution-12.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://hackingwithswift.com/uploads/swift-evolution-12.jpg"}],["meta",{"name":"twitter:image:alt","content":"What's new in Swift 6.0?"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:published_time","content":"2024-06-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What's new in Swift 6.0?\\",\\"image\\":[\\"https://hackingwithswift.com/uploads/swift-evolution-12.jpg\\"],\\"datePublished\\":\\"2024-06-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/swift/articles/README.md","date":"2024-06-10T00:00:00.000Z","isOriginal":false,"cover":"https://hackingwithswift.com/uploads/swift-evolution-12.jpg"},"headers":[{"level":2,"title":"Complete concurrency enabled by default","slug":"complete-concurrency-enabled-by-default","link":"#complete-concurrency-enabled-by-default","children":[]},{"level":2,"title":"count(where:)","slug":"count-where","link":"#count-where","children":[]},{"level":2,"title":"Typed throws","slug":"typed-throws","link":"#typed-throws","children":[]},{"level":2,"title":"Pack iteration","slug":"pack-iteration","link":"#pack-iteration","children":[]},{"level":2,"title":"Add Collection Operations on Noncontiguous Elements","slug":"add-collection-operations-on-noncontiguous-elements","link":"#add-collection-operations-on-noncontiguous-elements","children":[]},{"level":2,"title":"Access-level modifiers on import declarations","slug":"access-level-modifiers-on-import-declarations","link":"#access-level-modifiers-on-import-declarations","children":[]},{"level":2,"title":"Upgrades for noncopyable types","slug":"upgrades-for-noncopyable-types","link":"#upgrades-for-noncopyable-types","children":[]},{"level":2,"title":"128-bit Integer Types","slug":"_128-bit-integer-types","link":"#_128-bit-integer-types","children":[]},{"level":2,"title":"BitwiseCopyable","slug":"bitwisecopyable","link":"#bitwisecopyable","children":[]},{"level":2,"title":"And maybe more…","slug":"and-maybe-more","link":"#and-maybe-more","children":[]},{"level":2,"title":"Where next?","slug":"where-next","link":"#where-next","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":17.14,"words":5142},"filePathRelative":"hackingwithswift.com/whats-new-in-swift-6.md","localizedDate":"2024년 6월 10일","excerpt":"\\n"}`);export{Ws as comp,Rs as data};
