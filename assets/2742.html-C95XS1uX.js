import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,b as e,t as u,e as i,n as c,g as d,w as a,d as t,a as n,f as s,r as l,o as w}from"./app-BgNevrm5.js";const y={},_={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},z={class:"table-of-contents"},b=e("hr",null,null,-1),x=e("p",null,"IT 지식이 무엇보다 중요해진 요즘, 여러분은 어떻게 공부하고 있나요? 가장 먼저 눈길이 가는 건 다양한 IT 강의 영상일 겁니다. 강의를 제공하는 교육 기업들과 함께, 요즘IT에서 ‘IT 강의 시리즈’를 준비했습니다. 엄선한 교육 영상을 텍스트로 읽고 필요한 정보를 빠르게 가져가세요.",-1),S={href:"https://url.kr/37pfmk",target:"_blank",rel:"noopener noreferrer"},v={class:"hint-container details"},J=e("summary",null,[e("strong",null,"시작하는 개발자를 위한 JS"),t(" 시리즈")],-1),T=e("p",null,"안녕하세요, 가르치는 일을 진심으로 사랑하는 개발자 콜트 스틸입니다. 이번 강의에서는 JavaScript의 전개 구문(Spread syntax)을 살펴보려고 합니다. 편하게 코드를 쓰고 관리하도록 큰 도움을 줄 겁니다.",-1),E=e("hr",null,null,-1),A=e("h2",{id:"함수-호출-시의-전개-구문",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#함수-호출-시의-전개-구문"},[e("span",null,"함수 호출 시의 전개 구문")])],-1),D=e("p",null,"우선 전개 구문이란 무엇인지부터 배우겠습니다. 제가 좋아하는 기능이죠.",-1),I=e("p",null,"사실 이 내용을 한 번에 설명할 수는 없습니다. 전개는 다양한 상황에서 쓰입니다. JavaScript에서 마치 다용도로 쓰이는 스위스 군용 칼과 같은 역할을 한다고 볼 수 있습니다.",-1),M=e("h3",{id:"전개-spread-란-무엇일까",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#전개-spread-란-무엇일까"},[e("span",null,"전개(Spread)란 무엇일까?")])],-1),O={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",target:"_blank",rel:"noopener noreferrer"},B=s('<div class="hint-container info"><p class="hint-container-title">Info</p><figure><img src="https://yozm.wishket.com/media/news/2742/스크린샷_2024-08-27_오후_5_22_13.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>배열과 같이 반복 가능한 객체를 전개 구문을 사용해서 확장합니다. 함수로 호출할 경우엔 0개 이상의 인수로, 배열 리터럴에서는 요소로 확장할 수 있습니다. 그리고 객체 리터럴의 경우, 객체 표현식은 0개 이상 키-값 쌍으로 확장할 수 있습니다.</p></div><p>여러분이 모두 이해했다면 제 설명은 더 필요 없겠죠. 이 설명만으로도 충분하다고 생각합니다. 예시도 필요 없을 거고요. 그러나 아니라면, 아직 익혀야 할 내용이 많습니다.</p><p>이 정의에서 여러분이 주목해야 할 핵심 단어는 바로 “확장(expanded)”입니다. 중요한 단어입니다. 전개의 역할이죠. 즉, 전개를 쓰면 어떤 것을 가져와서 펼친다는 겁니다. 반복할 수 있는 객체를 펼치면 변화가 나타납니다. 그럼 한번 해 보겠습니다.</p><h3 id="숫자-배열-전개하기" tabindex="-1"><a class="header-anchor" href="#숫자-배열-전개하기"><span>숫자 배열 전개하기</span></a></h3><p>콘솔을 열고 함수를 쓰겠습니다. <code>Math.max</code>를 쓰고 인수를 하나씩 넣습니다. 곧 최댓값을 우리에게 알려 주죠. 인수를 열 개에서 오십 개까지, 혹은 백 개까지 넣을 수 있습니다. 그래도 최댓값을 찾을 겁니다.</p><p>반면 <code>Math.min</code>은 최솟값을 우리에게 줍니다. 마찬가지 인수는 원하는 만큼 넣을 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>내장 메서드에 있는 다른 함수들과 다릅니다. 그들과의 차이는 분명합니다. 다른 함수는 인수를 한 개 혹은 두 개만 선택해 넣으니까요.</p><p>이제 배열을 만들겠습니다. 배열에 숫자를 많이 넣어 보죠. <code>Math.max</code>에 인수로 넣었던 숫자를 모두 넣겠습니다. <code>nums</code>라는 변수에 저장해 볼게요.</p><figure><img src="https://yozm.wishket.com/media/news/2742/2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이제 최댓값이나 최솟값을 찾아보겠습니다. <code>Math.max</code>를 이용해서요. 그런데 이런, <code>Math.max</code>에 <code>nums</code>를 넣었더니 숫자가 아니라고 나옵니다. (NaN)</p><figure><img src="https://yozm.wishket.com/media/news/2742/3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>어떻게 출력해야 할지 모르기 때문입니다. 숫자 전체가 있는 배열이 그대로 통과되니까요. 이를 해결하려면 인수를 따로 넣어야 합니다. 숫자 하나하나 넣어야 하죠.</p><p>그래서 우리는 전개를 사용할 겁니다. 점 세 개(...)가 필요하죠. 그러면 이 배열이 각각 인수로 펼쳐집니다. 무슨 뜻일까요? 직접 보겠습니다. <code>Math.max</code>에 <code>nums</code>만 쓰는 대신에 점 세 개를 <code>nums</code> 앞에 넣었습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>그러면 <code>Math.max</code> 함수와 똑같은 값이 나옵니다. 배열이 펼쳐지고 인수가 따로 들어가기 때문입니다. 전개 구문이 배열 괄호를 지웠을 뿐 <code>nums</code> 변수의 값이 바뀐 건 아무것도 없습니다. <code>Math.max</code>에 ...<code>nums</code>가 통과하며 배열이 펼쳐진 것입니다.</p><h3 id="문자-배열-전개하기" tabindex="-1"><a class="header-anchor" href="#문자-배열-전개하기"><span>문자 배열 전개하기</span></a></h3><p>예를 하나 더 만들어 보죠.</p><p><code>console.log</code>에는 원하는 대로 인수를 넣을 수 있습니다. 인수를 쉼표로 분리해서 넣겠습니다. 쉼표가 중요한 역할을 하진 않지만, 쉼표를 넣으면 인수 사이에 공백을 만들어서 출력하죠.</p><figure><img src="https://yozm.wishket.com/media/news/2742/5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>console.log</code>에 <code>nums</code>를 넣으면 어떨까요?</p><figure><img src="https://yozm.wishket.com/media/news/2742/6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>숫자 배열을 출력했습니다. 그런데 점 세 개를 넣어서 출력하면 결과가 조금 다릅니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>배열에 있는 요소를 <code>console.log</code>에서 각각의 인수로 출력했습니다. 숫자 사이에 공백이 있죠.</p><h3 id="문자열-전개하기" tabindex="-1"><a class="header-anchor" href="#문자열-전개하기"><span>문자열 전개하기</span></a></h3><p>배열에만 전개 구문을 사용할 수 있는 건 아닙니다. 반복할 수 있는 객체가 더 있습니다. 문자열 역시 <code>for...of</code> 문으로 반복할 수 있죠. 그래서 마찬가지로 함수로 호출할 때 펼칠 수 있습니다.</p><p>먼저 문자열을 출력해 보겠습니다. <code>console.log</code>에 인수로 hello를 입력하면 hello란 단어 하나만 출력할 겁니다. 점 세 개(...)를 넣어서 hello를 펼치면 어떨까요? 문자가 하나씩 펼쳐지고 인수가 분리되겠죠. 아래 이미지처럼 나옵니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>둘 다 바르게 출력한 것으로 큰 차이는 없어 보입니다. 문자 사이에 공백이 생겼을 뿐이죠.</p><p>출력값이 어떻게 달라지는지 봤으니, 이번엔 조금 다르게 입력해 보겠습니다. <code>console.log</code>에 h, e, l을 쉼표로 분리해 넣었습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>hello 단어를 전부 넣지는 않았지만, 전개 구문을 썼을 때 공백이 어디서 나왔는지 알 수 있습니다. 인수를 따로따로 넣은 것과 같은 효과죠. 문자열 한 덩어리가 문자 하나하나로 분리된 효과입니다. 숫자 배열을 출력한 것과 같습니다.</p><hr><h2 id="배열-리터럴-전개-구문" tabindex="-1"><a class="header-anchor" href="#배열-리터럴-전개-구문"><span>배열 리터럴 전개 구문</span></a></h2><p>전개 구문 두 번째 내용입니다. 배열 리터럴의 경우, 전개 구문을 사용해서 배열과 같이 반복할 수 있는 객체를 0개 이상의 요소로 확장합니다. 즉, 반복할 수 있는 객체를 어떻게 펼치는지 알아보겠습니다.</p><h3 id="배열-복사하기" tabindex="-1"><a class="header-anchor" href="#배열-복사하기"><span>배열 복사하기</span></a></h3><p>예시로 자세히 설명해 볼게요. 여기 고양이(cats)와 개(dogs) 배열이 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',39),N=e("p",null,"세 번째 배열을 만들겠습니다. 함수 이름은 모든 반려동물(allPets)로 모든 고양이와 모든 개를 여기에 포함하려고 합니다. 지금이야 적지만 요소가 수백 개 정도 늘어났을 때, 이를 모두 입력하려면 정말 힘들 겁니다.",-1),j=e("p",null,"이때 전개 연산자를 이용하면 작업이 수월합니다. 물론 다른 방법도 있습니다. slice와 같은 함수로 배열을 복사할 수도 있었죠. 그렇지만 여기에서는 사용하지 않을 겁니다. 우리는 반복할 수 있는 객체를 전개해 펼칠 거니까요.",-1),C=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2742/11.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),P=s('<p>전개한 고양이 배열을 새로운 배열에 넣었습니다. 출력값은 어떨까요?</p><figure><img src="https://yozm.wishket.com/media/news/2742/12.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>똑같습니다. 다만 짚고 넘어갈 것이 있습니다. 모든 반려동물(allPets) 배열로 고양이 이름을 출력한 것 같지만, 사실 위와 아래의 출력값은 다릅니다. 위의 배열은 그저 복사한 값입니다.</p><p>모든 반려동물(allPets) 배열의 인수를 하나를 바꿔 보겠습니다. allPets.push로 아무 값이나 넣었죠. 그 결과, 모든 반려동물 배열은 달라졌지만, 고양이 배열은 여전히 출력값이 같죠.</p><figure><img src="https://yozm.wishket.com/media/news/2742/13.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>즉, 전개를 이용해 콘텐츠를 복사한 겁니다.</p><h3 id="두-가지-배열-묶기" tabindex="-1"><a class="header-anchor" href="#두-가지-배열-묶기"><span>두 가지 배열 묶기</span></a></h3><p>두 가지 배열을 묶을 수도 있습니다. 고양이 배열과 개 배열을 모두 쓰는 거죠. 이제 만약 모든 반려동물 배열을 출력하면 두 가지 값을 다 출력할 겁니다. 배열 두 개를 묶어, 세 번째 배열을 새롭게 만든 것입니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/14.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',9),L=s('<p>그대로 결과를 출력해 보고, 순서를 바꿔서도 출력해 보았습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/15.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이처럼 전개를 사용하면 최종적인 결과에도 영향을 미칠 수 있습니다.</p><p>새로운 인수를 추가할 수도 있습니다. 거북이 이름을 넣어 볼게요. ‘스피디(Speedy)’라고 입력하겠습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>출력값에 ‘스피디(Speedy)’도 있는 것을 확인할 수 있습니다. 원하는 대로 넣을 수 있죠. 조금 이상하지만, 만약 여러분이 숫자를 넣어도 동작할 겁니다.</p><p>이처럼 전개는 모두 똑같은 방식으로 작동합니다. 함수로 호출할 때, 배열을 펼쳤던 경우와 같죠. 이번에는 배열 하나를 다른 배열로 펼치거나, 배열 두 개를 펼쳐서 세 번째 배열을 만들었을 뿐입니다.</p><p>배열만 펼칠 수 있는 건 아닙니다. 반복할 수 있는 객체에는 문자열도 있다고 했죠. hello라는 문자열을 배열 안에 넣고 전개 구문을 넣으면, 문자열을 펼쳐 배열을 새롭게 만들 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/17.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>console.log</code>로 문자열을 펼쳤을 때와 결과가 같습니다. 요소가 하나하나씩 존재하고요. 이 경우에는 문자 하나하나가 배열에서 요소들로 펼쳐진 겁니다.</p><hr><h2 id="객체-전개-구문" tabindex="-1"><a class="header-anchor" href="#객체-전개-구문"><span>객체 전개 구문</span></a></h2><p>전개 구문의 마지막 활용법입니다. 객체 리터럴에서 전개를 사용하는 경우를 보겠습니다.</p><p>전개 구문을 활용하면 객체에 있는 특성을 복사해서 새로운 객체를 만들 수 있습니다. 객체 여러 개를 한 객체로 묶을 수도 있습니다. 또, 기존의 객체를 이용해서 새로운 객체를 만든 다음, 복사하거나 수정할 수도 있습니다. 차근차근 알아봅시다.</p><h3 id="특성을-펼쳐-새로운-객체-만들기" tabindex="-1"><a class="header-anchor" href="#특성을-펼쳐-새로운-객체-만들기"><span>특성을 펼쳐 새로운 객체 만들기</span></a></h3><p>우선 객체의 특성을 펼쳐서 새로운 객체를 만들어 보겠습니다. 여기 예를 볼까요? 객체가 두 개 있습니다. 고양잇과(feline)와 갯과(canine)가 있죠.</p><figure><img src="https://yozm.wishket.com/media/news/2742/18.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',17),R=s('<p>두 객체 모두 생물 분류(family) 특성이 있습니다. 마찬가지 고양잇과(Felidae)와 갯과(Caninae)입니다. 이제 특성 하나를 복사해서 새로운 객체를 만들어 보죠.</p><p><code>{...feline}</code> 이라는 구문으로 객체를 복사할 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/19.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>새로운 객체의 특성은 고양잇과 객체의 특성과 같습니다. 여기에 새로운 특성을 추가할 수도 있습니다. 색을 넣어 볼게요. 검은색(black)이라고 하겠습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/20.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>그러면 고양잇과 특성에 검은색이라는 특성을 추가한 객체가 새롭게 만들어졌습니다. 특성을 복사해서 객체를 새롭게 펼쳤고 검은색을 추가한 거죠.</p><h3 id="객체를-묶어-새로운-객체-만들기" tabindex="-1"><a class="header-anchor" href="#객체를-묶어-새로운-객체-만들기"><span>객체를 묶어 새로운 객체 만들기</span></a></h3><p>이제 객체 두 개를 묶어서 새로운 객체, catDog를 만들겠습니다. 고양잇과와 갯과를 <code>{...feline, ...canine}</code> 구문으로 묶었습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/21.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>특성 두 개가 모두 복사되었습니다. 하지만 이럴 때는 충돌이 생깁니다. 두 객체 모두 생물 분류 특성이 있기 때문이죠. 그래서 순서가 중요합니다.</p><p>예시에서는 고양잇과 특성인 Felidae가 먼저 복사되었고, 그 다음 갯과 특성인 Caninae가 복사되었습니다. 이렇게 충돌이 있을 때는 두 번째 복사된 특성이 앞의 특성을 덮습니다. 만약 순서를 바꿔 입력하면, 생물 분류 특성 역시 바뀔 것입니다.</p><p>아예 새로운 특성을 넣어보면 어떨까요? 생물 분류 특성인 family를 ‘Steele’이라고 쓰겠습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/22.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>곧 Steele이 객체 특성으로 나타난 것을 볼 수 있습니다. 마지막에 있었으니까요.</p><p>지금까지 전개를 사용해서 객체를 복사해 봤습니다. 특성에서 키-값 쌍을 가져와 추가한 다음 새로운 객체를 만들었죠. 이런 질문을 가끔 받습니다. “이 구문이 많이 쓰이나요?” 라고요.</p><p>자, 이 방법은 배열을 펼쳐서 새로운 객체를 만들 경우에도 쓰입니다. 2, 4, 6, 8을 넣은 배열이 있습니다. 이 배열을 펼쳐서 객체를 만들겠습니다. 점 세 개를 넣어 전개했죠. 결과가 어떻게 될까요? 무엇이 키고 무엇이 값이죠?</p><figure><img src="https://yozm.wishket.com/media/news/2742/23.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>인덱스를 키로 사용한 것이 보입니다. 인덱스 0번에 ‘2’가 있죠. 1번엔 ‘4’, 2번엔 ‘6’, 3번엔 ‘8’이 있죠. 문자열도 이와 똑같이 취급할 수 있습니다.</p><h3 id="왜-전개를-사용할까" tabindex="-1"><a class="header-anchor" href="#왜-전개를-사용할까"><span>왜 전개를 사용할까?</span></a></h3><p>그럼 왜 전개를 사용할까요? 왜 새로운 객체를 만들죠?</p><p>객체를 복사할 때 우리는 전개를 사용해서 펼칩니다. 객체를 복사하는 작업은 주로 라이브러리나 리액트(React)를 쓸 때 필요합니다. 처음 시작하는 단계에서는 다루지 않아도 실무에서는 아주 중요합니다.</p><p>그래서 객체를 변형하지 않고 복사하는 방법을 배우는 겁니다. 변형이 아닌 복사를 활용하는 경우를 하나 더 보겠습니다. 여기에 데이터가 있습니다. 어떤 사용자의 데이터입니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/24.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',23),F=e("p",null,"사용자는 이메일과 비밀번호, 사용자 명을 입력해야 합니다. 이걸 모두 묶어 새로운 객체를 만들고 정보를 추가하겠습니다. 만약 이 사용자가 웹사이트에 등록하려면, 이 정보를 모두 제공해야 하니까요.",-1),V=e("p",null,[t("그리고 사용자만의 식별자인 ID도 필요하고 "),e("code",null,"isAdmin"),t(" 특성이 참인지 거짓인지도 입력해야 합니다.")],-1),G=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2742/25.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),U=s('<p>데이터를 복사하겠습니다. dataFromForm의 모든 정보를 복사할 수 있습니다. ID를 추가하고, <code>isAdmin</code> 특성의 값은 거짓입니다. 두 특성은 제가 만들었죠. 다시 이것을 변수 <code>newUser</code>로 저장하겠습니다.</p><p>콘솔에서 보겠습니다. <code>newUser</code>를 입력하니 아래와 같이 나왔습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2742/26.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>email</code>, <code>password</code>, <code>username</code>은 폼에 있던 데이터죠. 그리고 ID와 <code>isAdmin</code> 특성은 제가 만든 것입니다. 이렇게 기존 데이터를 해치지 않으며 사용자의 식별을 수행할 수 있습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>전개에 관한 설명은 여기까지입니다. 꽤 많은 내용을 배웠지만, 정리하자면 전개란 정보의 소스를 펼쳐 다른 용도로 만드는 작업입니다.</p><p>배열 또는 반복할 수 있는 객체를 인수나 배열 리터럴로 펼칠 수 있습니다. 또 객체를 펼쳐 새로운 객체를 만들 수 있고요. 말 그대로 모두 펼치는 것(전개)과 관련 있었습니다. 고생하셨습니다. 다음 시간에는 분해에 대해 알아보겠습니다.</p>',8);function K(g,W){const p=l("VPCard"),o=l("router-link"),m=l("SiteInfo"),r=l("FontIcon");return w(),f("div",null,[e("h1",_,[e("a",k,[e("span",null,u(g.$frontmatter.title)+" 관련",1)])]),i(p,c(d({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",z,[e("ul",null,[e("li",null,[i(o,{to:"#함수-호출-시의-전개-구문"},{default:a(()=>[t("함수 호출 시의 전개 구문")]),_:1}),e("ul",null,[e("li",null,[i(o,{to:"#전개-spread-란-무엇일까"},{default:a(()=>[t("전개(Spread)란 무엇일까?")]),_:1})]),e("li",null,[i(o,{to:"#숫자-배열-전개하기"},{default:a(()=>[t("숫자 배열 전개하기")]),_:1})]),e("li",null,[i(o,{to:"#문자-배열-전개하기"},{default:a(()=>[t("문자 배열 전개하기")]),_:1})]),e("li",null,[i(o,{to:"#문자열-전개하기"},{default:a(()=>[t("문자열 전개하기")]),_:1})])])]),e("li",null,[i(o,{to:"#배열-리터럴-전개-구문"},{default:a(()=>[t("배열 리터럴 전개 구문")]),_:1}),e("ul",null,[e("li",null,[i(o,{to:"#배열-복사하기"},{default:a(()=>[t("배열 복사하기")]),_:1})]),e("li",null,[i(o,{to:"#두-가지-배열-묶기"},{default:a(()=>[t("두 가지 배열 묶기")]),_:1})])])]),e("li",null,[i(o,{to:"#객체-전개-구문"},{default:a(()=>[t("객체 전개 구문")]),_:1}),e("ul",null,[e("li",null,[i(o,{to:"#특성을-펼쳐-새로운-객체-만들기"},{default:a(()=>[t("특성을 펼쳐 새로운 객체 만들기")]),_:1})]),e("li",null,[i(o,{to:"#객체를-묶어-새로운-객체-만들기"},{default:a(()=>[t("객체를 묶어 새로운 객체 만들기")]),_:1})]),e("li",null,[i(o,{to:"#왜-전개를-사용할까"},{default:a(()=>[t("왜 전개를 사용할까?")]),_:1})])])]),e("li",null,[i(o,{to:"#마치며"},{default:a(()=>[t("마치며")]),_:1})])])]),b,i(m,{name:"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지 | 요즘IT",desc:"이번 강의에서는 JavaScript의 전개(Spread) 구문을 살펴보려고 합니다. 편하게 코드를 쓰고 관리하도록 큰 도움을 줄 겁니다. 여기서 전개란 정보의 소스를 펼쳐 다른 용도로 만드는 작업입니다. 배열 또는 반복할 수 있는 객체를 인수나 배열 리터럴로 펼칠 수 있습니다. 또 객체를 펼쳐 새로운 객체를 만들 수 있고요. 말 그대로 모두 펼치는 것(전개)과 관련 있었습니다. 전개 구문은 언제, 어떻게 활용하면 좋을까요?",url:"https://yozm.wishket.com/magazine/detail/2742/",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",preview:"https://yozm.wishket.com/media/news/2742/스크린샷_2024-08-27_오후_5_22_13.png"}),x,e("p",null,[t("이번 강의는 ‘Web 개발자 부트캠프 2024: JavaScript의 최신 기능들’입니다. 개발자이자 부트캠프 강사로 활동하며 전 세계 175만 명 이상 수강생을 배출한 콜트 스틸(Colt Steele) 님이 강의를 맡았습니다. 시작하는 개발자를 위해 코드 작성에 도움이 되는 JavaScript 기능을 소개합니다. 영어로 진행한 강의의 번역본을 기초로 글을 구성했고, 전체 영상은 "),e("a",S,[i(r,{icon:"fas fa-globe"}),t("유데미")]),t("에서 확인할 수 있습니다.")]),e("details",v,[J,i(p,c(d({title:"시작하는 개발자를 위한 JS 매개 변수 활용법 2가지 | 요즘IT",desc:"시작하는 개발자를 위한 JS 매개 변수 활용법 2가지",link:"/yozm.wishket.com/2732.md",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",background:"rgba(84,7,224,0.2)"})),null,16),i(p,c(d({title:"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지 | 요즘IT",desc:"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지",link:"/yozm.wishket.com/2742.md",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",background:"rgba(84,7,224,0.2)"})),null,16)]),T,E,A,D,I,M,e("p",null,[t("공식적인 정의는 아니지만 "),e("a",O,[i(r,{icon:"fa-brands fa-firefox"}),t("MDN")]),t("에서 발췌한 전개의 정의입니다.")]),B,n(" TODO: Google Lens "),N,j,C,n(" TODO: Google Lens "),P,n(" TODO: Google Lens "),L,n(" TODO: Google Lens "),R,n(" TODO: Google Lens "),F,V,G,n(" TODO: Google Lens "),U,i(m,{name:"The Web Developer Bootcamp: Learn HTML, CSS, Node, and More! | Udemy",desc:"전세계 90만명이 선택한 유데미 베스트셀러! HTML, CSS, JavaScript, Node.js 등을 활용한 13개 이상의 프로젝트로 확실하게 웹 개발 입문 완성",url:"https://url.kr/37pfmk",logo:"https://udemy.com/staticx/udemy/images/v7/apple-touch-icon.png",preview:"https://img-b.udemycdn.com/course/480x270/4297574_42d1_4.jpg"})])}const $=h(y,[["render",K],["__file","2742.html.vue"]]),q=JSON.parse('{"path":"/yozm.wishket.com/2742.html","title":"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지","description":"Article(s) > 시작하는 개발자를 위한 JS 전개 구문 활용법 3가지","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","yozm.wishket.com","js","javascript"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 시작하는 개발자를 위한 JS 전개 구문 활용법 3가지"},{"property":"og:description","content":"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2742.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2742.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지"}],["meta",{"property":"og:description","content":"Article(s) > 시작하는 개발자를 위한 JS 전개 구문 활용법 3가지"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2742/스크린샷_2024-08-27_오후_5_22_13.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2742/스크린샷_2024-08-27_오후_5_22_13.png"}],["meta",{"name":"twitter:image:alt","content":"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2023-09-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"시작하는 개발자를 위한 JS 전개 구문 활용법 3가지\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2742/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2024-08-27_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5_22_13.png\\",\\"https://yozm.wishket.com/media/news/2742/1.png\\",\\"https://yozm.wishket.com/media/news/2742/2.png\\",\\"https://yozm.wishket.com/media/news/2742/3.png\\",\\"https://yozm.wishket.com/media/news/2742/4.png\\",\\"https://yozm.wishket.com/media/news/2742/5.png\\",\\"https://yozm.wishket.com/media/news/2742/6.png\\",\\"https://yozm.wishket.com/media/news/2742/7.png\\",\\"https://yozm.wishket.com/media/news/2742/8.png\\",\\"https://yozm.wishket.com/media/news/2742/9.png\\",\\"https://yozm.wishket.com/media/news/2742/10.png\\",\\"https://yozm.wishket.com/media/news/2742/11.png\\",\\"https://yozm.wishket.com/media/news/2742/12.png\\",\\"https://yozm.wishket.com/media/news/2742/13.png\\",\\"https://yozm.wishket.com/media/news/2742/14.png\\",\\"https://yozm.wishket.com/media/news/2742/15.png\\",\\"https://yozm.wishket.com/media/news/2742/16.png\\",\\"https://yozm.wishket.com/media/news/2742/17.png\\",\\"https://yozm.wishket.com/media/news/2742/18.png\\",\\"https://yozm.wishket.com/media/news/2742/19.png\\",\\"https://yozm.wishket.com/media/news/2742/20.png\\",\\"https://yozm.wishket.com/media/news/2742/21.png\\",\\"https://yozm.wishket.com/media/news/2742/22.png\\",\\"https://yozm.wishket.com/media/news/2742/23.png\\",\\"https://yozm.wishket.com/media/news/2742/24.png\\",\\"https://yozm.wishket.com/media/news/2742/25.png\\",\\"https://yozm.wishket.com/media/news/2742/26.png\\"],\\"datePublished\\":\\"2023-09-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/js/articles/README.md","date":"2023-09-02T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2742/스크린샷_2024-08-27_오후_5_22_13.png"},"headers":[{"level":2,"title":"함수 호출 시의 전개 구문","slug":"함수-호출-시의-전개-구문","link":"#함수-호출-시의-전개-구문","children":[{"level":3,"title":"전개(Spread)란 무엇일까?","slug":"전개-spread-란-무엇일까","link":"#전개-spread-란-무엇일까","children":[]},{"level":3,"title":"숫자 배열 전개하기","slug":"숫자-배열-전개하기","link":"#숫자-배열-전개하기","children":[]},{"level":3,"title":"문자 배열 전개하기","slug":"문자-배열-전개하기","link":"#문자-배열-전개하기","children":[]},{"level":3,"title":"문자열 전개하기","slug":"문자열-전개하기","link":"#문자열-전개하기","children":[]}]},{"level":2,"title":"배열 리터럴 전개 구문","slug":"배열-리터럴-전개-구문","link":"#배열-리터럴-전개-구문","children":[{"level":3,"title":"배열 복사하기","slug":"배열-복사하기","link":"#배열-복사하기","children":[]},{"level":3,"title":"두 가지 배열 묶기","slug":"두-가지-배열-묶기","link":"#두-가지-배열-묶기","children":[]}]},{"level":2,"title":"객체 전개 구문","slug":"객체-전개-구문","link":"#객체-전개-구문","children":[{"level":3,"title":"특성을 펼쳐 새로운 객체 만들기","slug":"특성을-펼쳐-새로운-객체-만들기","link":"#특성을-펼쳐-새로운-객체-만들기","children":[]},{"level":3,"title":"객체를 묶어 새로운 객체 만들기","slug":"객체를-묶어-새로운-객체-만들기","link":"#객체를-묶어-새로운-객체-만들기","children":[]},{"level":3,"title":"왜 전개를 사용할까?","slug":"왜-전개를-사용할까","link":"#왜-전개를-사용할까","children":[]}]},{"level":2,"title":"마치며","slug":"마치며","link":"#마치며","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"yozm.wishket.com/2742.md","localizedDate":"2023년 9월 2일","excerpt":"\\n"}');export{$ as comp,q as data};
