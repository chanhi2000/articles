import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,t as r,e as s,n as e,g as t,f as u,r as o,o as d}from"./app-BgNevrm5.js";const k={},h={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),v=u(`<p>We need to make three final changes to this project in order to finish: show the correct number of items, show the correct information inside each cell, then make it so that when users tap a picture they can set a person&#39;s name.</p><p>Those methods are all increasingly difficult, so we&#39;ll start with the first one. Right now, your collection view&#39;s <code>numberOfItemsInSection</code> method just has <code>return 10</code> in there, so you&#39;ll see 10 items regardless of how many people are in your array. This is easily fixed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">collectionView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> collectionView<span class="token punctuation">:</span> <span class="token class-name">UICollectionView</span><span class="token punctuation">,</span> numberOfItemsInSection section<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> people<span class="token punctuation">.</span>count</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we need to update the collection view&#39;s <code>cellForItemAt</code> method so that it configures each <code>PersonCell</code> cell to have the correct name and image of the person in that position in the array. This takes a few steps:</p><ul><li>Pull out the person from the <code>people</code> array at the correct position.</li><li>Set the <code>name</code> label to the person&#39;s name.</li><li>Create a <code>UIImage</code> from the person&#39;s image filename, adding it to the value from <code>getDocumentsDirectory()</code> so that we have a full path for the image.</li></ul><p>We&#39;re also going to use this opportunity to give the image views a border and slightly rounded corners, then give the whole cell matching rounded corners, to make it all look a bit more interesting. This is all done using <code>CALayer</code>, so that means we need to convert the <code>UIColor</code> to a <code>CGColor</code>. Anyway, here&#39;s the new code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">collectionView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> collectionView<span class="token punctuation">:</span> <span class="token class-name">UICollectionView</span><span class="token punctuation">,</span> cellForItemAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UICollectionViewCell</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> cell <span class="token operator">=</span> collectionView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withReuseIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Person&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">PersonCell</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unable to dequeue PersonCell.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> person <span class="token operator">=</span> people<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>item<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    cell<span class="token punctuation">.</span>name<span class="token punctuation">.</span>text <span class="token operator">=</span> person<span class="token punctuation">.</span>name</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">getDocumentsDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendingPathComponent</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>image<span class="token punctuation">)</span></span>
<span class="line">    cell<span class="token punctuation">.</span>imageView<span class="token punctuation">.</span>image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>contentsOfFile<span class="token punctuation">:</span> path<span class="token punctuation">.</span>path<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    cell<span class="token punctuation">.</span>imageView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>borderColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">(</span>white<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cgColor</span>
<span class="line">    cell<span class="token punctuation">.</span>imageView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>borderWidth <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">    cell<span class="token punctuation">.</span>imageView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>cornerRadius <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line">    cell<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>cornerRadius <span class="token operator">=</span> <span class="token number">7</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> cell</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are three new things in there.</p><p>First, notice how I’ve used <code>indexPath.item</code> rather than <code>indexPath.row</code>, because collection views don’t really think in terms of rows.</p><p>Second, that code sets the <code>cornerRadius</code> property, which rounds the corners of a <code>CALayer</code> – or in our case the <code>UIView</code> being drawn by the <code>CALayer</code>.</p><p>Third, I snuck in a new <code>UIColor</code> initializer: <code>UIColor(white:alpha:)</code>. This is useful when you only want grayscale colors.</p><p>With that done, the app works: you can run it with <kbd>Cmd</kbd>+<kbd>R</kbd>, import photos, and admire the way they all appear correctly in the app. But don&#39;t get your hopes up, because we&#39;re not done yet – you still can&#39;t assign names to people!</p><p>For this last part of the project, we&#39;re going to recap how to add text fields to a <code>UIAlertController</code>, just like you did in project 5. All of the code is old, but I&#39;m going to go over it again to make sure you fully understand.</p><p>First, the delegate method we&#39;re going to implement is the collection view’s <code>didSelectItemAt</code> method, which is triggered when the user taps a cell. This method needs to pull out the <code>Person</code> object at the array index that was tapped, then show a <code>UIAlertController</code> asking users to rename the person.</p><p>Adding a text field to an alert controller is done with the <code>addTextField()</code> method. We&#39;ll also need to add two actions: one to cancel the alert, and one to save the change. To save the changes, we need to add a closure that pulls out the text field value and assigns it to the person&#39;s <code>name</code> property, then we&#39;ll also need to reload the collection view to reflect the change.</p><p>That&#39;s it! The only thing that&#39;s new, and it&#39;s hardly new at all, is the setting of the <code>name</code> property. Put this new method into your class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">collectionView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> collectionView<span class="token punctuation">:</span> <span class="token class-name">UICollectionView</span><span class="token punctuation">,</span> didSelectItemAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> person <span class="token operator">=</span> people<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>item<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Rename person&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token keyword">weak</span> ac<span class="token punctuation">]</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> newName <span class="token operator">=</span> ac<span class="token operator">?</span><span class="token punctuation">.</span>textFields<span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">        person<span class="token punctuation">.</span>name <span class="token operator">=</span> newName</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>collectionView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the project is complete: you can import photos of people, then tap on them to rename. Well done!</p>`,18);function f(p,y){const a=o("VPCard"),c=o("VidStack");return d(),i("div",null,[n("h1",h,[n("a",m,[n("span",null,r(p.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,w,s(a,e(t({title:"Connecting up the people | Hacking with iOS",desc:"Connecting up the people",link:"https://hackingwithswift.com/read/10/6/connecting-up-the-people",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(c,{src:"youtube/Ab4m2Mhj4-o"}),v])}const I=l(k,[["render",f],["__file","06-connecting-up-the-people.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/read/10/06-connecting-up-the-people.html","title":"Connecting up the people","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Connecting up the people","description":"Article(s) > Connecting up the people","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Connecting up the people"},{"property":"og:description","content":"Connecting up the people"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/10/06-connecting-up-the-people.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/10/06-connecting-up-the-people.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Connecting up the people"}],["meta",{"property":"og:description","content":"Article(s) > Connecting up the people"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Connecting up the people\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.85,"words":855},"filePathRelative":"hackingwithswift.com/read/10/06-connecting-up-the-people.md","excerpt":"\\n"}');export{I as comp,_ as data};
