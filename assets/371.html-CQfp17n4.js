import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,b as n,t as _,e as a,n as o,g as e,w as l,d as s,f as u,r as i,o as v}from"./app-BgNevrm5.js";const f={},b={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},y=n("hr",null,null,-1),w=n("figure",null,[n("img",{src:"https://image.toast.com/aaaadh/real/2023/techblog/NHNuD074uB77CuC6B0uB4DC MeetupPLT Hook uCCB4uD06CuB97C uC704uD55C Android so uD30CuC77C uD30CuC2F1uC12CuB124uC77C230829.jpg",alt:"[NHN클라우드] Meetup!_PLT Hook 체크를 위한 Android so 파일",tabindex:"0",loading:"lazy"}),n("figcaption",null,"[NHN클라우드] Meetup!_PLT Hook 체크를 위한 Android so 파일")],-1),C=n("h2",{id:"들어가며",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#들어가며"},[n("span",null,"들어가며")])],-1),x={href:"https://github.com/bytedance/bhook",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"bytedance/bhook",-1),z=n("p",null,"실제로 사용해 보니 쉽고, 안정적으로 후킹이 가능합니다. 다음 사진은 fopen 함수를 plt hook하여 로그를 찍은 것입니다.",-1),L=n("figure",null,[n("img",{src:"https://image.toast.com/aaaadh/real/2023/techblog/01(7).png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),U=n("p",null,"제가 쉽게 할 수 있다는 건 남들도, 특히 해커들도 쉽게 할 수 있다는 거겠죠? 이러한 후킹은 어뷰징으로 이어질 수 있기 때문에 분석하는 입장에서는 plt hook 당한 함수를 찾아낼 수 있어야겠죠.",-1),A=n("hr",null,null,-1),P=n("h2",{id:"plt-hook-하면-무슨-일이-발생하는가",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#plt-hook-하면-무슨-일이-발생하는가"},[n("span",null,"PLT hook 하면 무슨 일이 발생하는가?")])],-1),B=n("p",null,"so 파일은 ELF 파일 포맷을 가지고 있습니다. ELF 파일은 메모리에 로드되면 .rela.plt 섹션에 정의되어 있는 함수(심볼)의 주소값을 .got.plt 섹션에 저장합니다. 그 후 .got.plt 섹션에 저장되어 있는 주소를 참조하여 해당 함수를 호출하게 됩니다.",-1),T=n("code",null,"libart.so",-1),D={href:"https://github.com/horsicq/XELFViewer",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"horsicq/XELFViewer",-1),S=n("code",null,".rela.plt",-1),q=n("code",null,"0x212",-1),N=n("code",null,"r_offset",-1),$=n("code",null,"0x6a6480",-1),F=n("code",null,"r_offset",-1),M=n("code",null,"libart.so",-1),O=n("code",null,"0x6a6480",-1),j=n("code",null,"0x212",-1),R=u('<figure><img src="https://image.toast.com/aaaadh/real/2023/techblog/02(5).png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>0x212 심볼은 무엇을 의미할까요? <code>.dynsym</code> 섹션에서 찾을 수 있습니다. <code>0x212</code>는 십진수로 530입니다. 530은 <code>.dynsym</code> 섹션의 인덱스입니다. 즉, <code>.dynsym</code> 섹션에서 530번째 저장되어 있는 심볼인 것이죠. <code>fopen</code>이네요.</p><figure><img src="https://image.toast.com/aaaadh/real/2023/techblog/03(5).png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),I=n("code",null,"fopen",-1),V=n("code",null,"libart.so",-1),J=n("code",null,"0x6a6480",-1),W=n("code",null,"fopen",-1),K=n("code",null,".got.plt",-1),G=u('<p>만약 <code>fopen</code> 함수가 plt hook 당하면 <code>.got.plt</code> 섹션에 저장되는 <code>fopen</code> 함수의 주소가 다른 곳(악성 so 파일의 함수 주소)으로 바뀌게 될 것입니다.</p><figure><img src="https://image.toast.com/aaaadh/real/2023/techblog/04(6).png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="plt-hook-당한-함수를-어떻게-식별하는가" tabindex="-1"><a class="header-anchor" href="#plt-hook-당한-함수를-어떻게-식별하는가"><span>PLT hook 당한 함수를 어떻게 식별하는가?</span></a></h2><p>런타임 시에 특정 함수가 plt hook을 당하면 <code>.got.plt</code> 섹션에 저장되는 주소값이 바꿔치기 당할 것입니다. <code>.got.plt</code> 섹션에 주소값을 저장하는 심볼들은 <code>.rela.plt</code> 섹션에 정의되어 있습니다. <code>.rela.plt</code> 섹션에는 어떤 심볼 및 그 심볼의 주소값이 어느 위치에 저장되는지 나와 있습니다.</p><p>그러니, <code>.rela.plt</code> 섹션을 파싱해서 어떤 심볼의 주소값이 악성 <code>so</code> 파일에 위치하고 있으면 plt hook 당한 것으로 판단할 수 있습니다.</p><p><code>.rela.plt</code> 섹션을 어떻게 파싱할까요? 그냥 <code>open</code> 함수로 <code>so</code> 파일 열어서 파싱하면 되는 것 아닐까요? 그러나 문제가 있습니다. <code>android:extractNativeLibs=&quot;false&quot;</code> 옵션으로 빌드한 apk 파일의 경우 so 파일을 apk 파일에서 추출하지 않고 로드하기 때문에 <code>open</code> 함수로 열어볼 수가 없습니다.</p>',7),X=n("code",null,"libil2cpp.so",-1),Y=n("code",null,"split_config_arm64_v8a.apk",-1),Z=n("code",null,"apk",-1),Q=n("figure",null,[n("img",{src:"https://image.toast.com/aaaadh/real/2023/techblog/05(5).png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),nn=n("code",null,"so",-1),sn=n("code",null,".rela.plt",-1),an=n("code",null,"libart.so",-1),pn=n("code",null,"e_shoff",-1),tn=n("code",null,"0x836a98",-1),on=n("figure",null,[n("img",{src:"https://image.toast.com/aaaadh/real/2023/techblog/06(6).png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),en=n("p",null,"자, 이제 Section Header 위치로 직접 가서 메모리를 관찰해 봐야겠습니다.",-1),cn=n("p",null,"아뿔싸! Memory access violation이 발생하면서 접근이 안 됩니다...무슨 문제일까요?",-1),ln=n("figure",null,[n("img",{src:"https://image.toast.com/aaaadh/real/2023/techblog/07(5).png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),un={href:"https://stackoverflow.com/a/44854052",target:"_blank",rel:"noopener noreferrer"},rn=u('<p>난감하네요. Section Header 에 <code>.rela.plt</code> 등 섹션 위치가 정의되어 있는데, 이게 메모리에 로드되지 않는다면 어떻게 위치를 알아내고 파싱을 할 수 있을까요? 다행히 Program Header는 메모리에 로드가 됩니다.</p><figure><img src="https://image.toast.com/aaaadh/real/2023/techblog/08(4).png" alt="이 Program Header에는  섹션의 위치 등 정보가 담겨 있습니다." tabindex="0" loading="lazy"><figcaption>이 Program Header에는 <code>.dynamic</code> 섹션의 위치 등 정보가 담겨 있습니다.</figcaption></figure><figure><img src="https://image.toast.com/aaaadh/real/2023/techblog/09(3).png" alt="그리고 이  섹션에는 파싱에 필요한 다른 섹션들의 위치 정보가 담겨 있습니다." tabindex="0" loading="lazy"><figcaption>그리고 이 <code>.dynamic</code> 섹션에는 파싱에 필요한 다른 섹션들의 위치 정보가 담겨 있습니다.</figcaption></figure><p>이제, 섹션들의 메모리상의 위치 정보를 확보했으니 파싱만 하면 되겠군요.</p>',4),kn=n("code",null,"fopen",-1),dn=n("code",null,"libil2cpp.so",-1),mn=n("code",null,"fopen",-1),_n=n("code",null,"0x72079708e8",-1),vn=n("code",null,"libplthooktest.so",-1),fn=n("code",null,"libc.so",-1),bn=n("code",null,"fopen",-1),hn=u(`<figure><img src="https://image.toast.com/aaaadh/real/2023/techblog/10(3).png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>파싱에 사용된 frida 스크립트 공유합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> magic <span class="token operator">=</span> <span class="token string">&quot;464c457f&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">parseElf</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    base <span class="token operator">=</span> <span class="token function">ptr</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Read elf header</span></span>
<span class="line">    <span class="token keyword">var</span> elf_magic <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elf_magic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">!=</span> magic<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Wrong magic&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> arch <span class="token operator">=</span> Process<span class="token punctuation">.</span>arch</span>
<span class="line">    <span class="token keyword">var</span> is32bit <span class="token operator">=</span> arch <span class="token operator">==</span> <span class="token string">&quot;arm&quot;</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 1:32 0:64</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> size_of_Elf32_Ehdr <span class="token operator">=</span> <span class="token number">0x34</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf32_Ehdr_phoff <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf32_Ehdr_shoff <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf32_Ehdr_phentsize <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf32_Ehdr_phnum <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf32_Ehdr_shentsize <span class="token operator">=</span> <span class="token number">46</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf32_Ehdr_shnum <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf32_Ehdr_shstrndx <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> size_of_Elf64_Ehdr <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf64_Ehdr_phoff <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf64_Ehdr_shoff <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf64_Ehdr_phentsize <span class="token operator">=</span> <span class="token number">54</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf64_Ehdr_phnum <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf64_Ehdr_shentsize <span class="token operator">=</span> <span class="token number">58</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf64_Ehdr_shnum <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> off_of_Elf64_Ehdr_shstrndx <span class="token operator">=</span> <span class="token number">62</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> got_plt_secition_addr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> dynamic_section_addr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> dynstr_section_addr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> dynsym_section_addr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> rela_plt_section_addr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Parse Ehdr(Elf header)</span></span>
<span class="line">    <span class="token keyword">var</span> phoff <span class="token operator">=</span> is32bit <span class="token operator">?</span> size_of_Elf32_Ehdr <span class="token operator">:</span> size_of_Elf64_Ehdr   <span class="token comment">// Program header table file offset</span></span>
<span class="line">    <span class="token keyword">var</span> shoff <span class="token operator">=</span> is32bit <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf32_Ehdr_shoff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf64_Ehdr_shoff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Section header table file offset</span></span>
<span class="line">    <span class="token keyword">var</span> phentsize <span class="token operator">=</span> is32bit <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf32_Ehdr_phentsize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf64_Ehdr_phentsize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Size of entries in the program header table</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>is32bit <span class="token operator">&amp;&amp;</span> phentsize <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 0x20</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[*] Wrong e_phentsize. Should be 32. Let&#39;s assume it&#39;s 32&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        phentsize <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is32bit <span class="token operator">&amp;&amp;</span> phentsize <span class="token operator">!=</span> <span class="token number">56</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Wrong e_phentsize. Should be 56. Let&#39;s assume it&#39;s 56&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        phentsize <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> phnum <span class="token operator">=</span> is32bit <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf32_Ehdr_phnum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf64_Ehdr_phnum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Number of entries in program header table</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>phnum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;phnum is 0. Let&#39;s assume it&#39;s 10. because we just need to find .dynamic section&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        phnum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> shentsize <span class="token operator">=</span> is32bit <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf32_Ehdr_shentsize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf64_Ehdr_shentsize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Size of the section header</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>is32bit <span class="token operator">&amp;&amp;</span> shentsize <span class="token operator">!=</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 0x28</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Wrong e_shentsize. Should be 40&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is32bit <span class="token operator">&amp;&amp;</span> shentsize <span class="token operator">!=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Wrong e_shentsize. Should be 64&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> shnum <span class="token operator">=</span> is32bit <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf32_Ehdr_shnum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf64_Ehdr_shnum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Number of entries in section header table</span></span>
<span class="line">    <span class="token keyword">var</span> shstrndx <span class="token operator">=</span> is32bit <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf32_Ehdr_shstrndx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>off_of_Elf64_Ehdr_shstrndx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Section header table index of the entry associated with the section name string table</span></span>
<span class="line">    <span class="token comment">// console.log(\`phoff: \${phoff}, shoff: \${shoff}, phentsize: \${phentsize}, phnum: \${phnum}, shentsize: \${shentsize}, shnum: \${shnum}, shstrndx: \${shstrndx}\`)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Parse Phdr(Program header)</span></span>
<span class="line">    <span class="token keyword">var</span> phdrs <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>phoff<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> phnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> phdr <span class="token operator">=</span> phdrs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">*</span> phentsize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> p_type <span class="token operator">=</span> phdr<span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">var</span> p_offset <span class="token operator">=</span> is32bit <span class="token operator">?</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> p_vaddr <span class="token operator">=</span> is32bit <span class="token operator">?</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> p_paddr <span class="token operator">=</span> is32bit <span class="token operator">?</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> p_filesz <span class="token operator">=</span> is32bit <span class="token operator">?</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> p_memsz <span class="token operator">=</span> is32bit <span class="token operator">?</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> p_flags <span class="token operator">=</span> is32bit <span class="token operator">?</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> p_align <span class="token operator">=</span> is32bit <span class="token operator">?</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x1c</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> phdr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// console.log(\`p_type: \${p_type}, p_offset: \${p_offset}, p_vaddr: \${p_vaddr}, p_paddr: \${p_paddr}, p_filesz: \${p_filesz}, p_memsz: \${p_memsz}, p_flags: \${p_flags}, p_align: \${p_align}\`);</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p_type <span class="token operator">==</span> <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// .dynamic</span></span>
<span class="line">            dynamic_section_addr <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p_vaddr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">var</span> dynamic_section_indices <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>p_memsz<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>p_align<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line">            <span class="token keyword">var</span> dynamic_section_entsize <span class="token operator">=</span> p_align <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dynamic_section_indices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">var</span> d_tag <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynamic_section_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">*</span> dynamic_section_entsize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynamic_section_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">*</span> dynamic_section_entsize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>d_tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">var</span> d_value <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynamic_section_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">*</span> dynamic_section_entsize <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynamic_section_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">*</span> dynamic_section_entsize <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>d_tag <span class="token operator">==</span> <span class="token number">0x3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// .got.plt</span></span>
<span class="line">                    got_plt_secition_addr <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d_value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d_tag <span class="token operator">==</span> <span class="token number">0x5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// .dynstr</span></span>
<span class="line">                    dynstr_section_addr <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d_value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d_tag <span class="token operator">==</span> <span class="token number">0x6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// .dynsym</span></span>
<span class="line">                    dynsym_section_addr <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d_value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d_tag <span class="token operator">==</span> <span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// .rela.plt</span></span>
<span class="line">                    rela_plt_section_addr <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d_value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Parse .dynsym</span></span>
<span class="line">    <span class="token keyword">var</span> dynsym_section_entsize <span class="token operator">=</span> is32bit <span class="token operator">?</span> <span class="token number">0x10</span> <span class="token operator">:</span> <span class="token number">0x18</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> dynsyms <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> st_infos <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token number">0x00</span><span class="token punctuation">,</span>   <span class="token comment">// LOCAL NOTYPE</span></span>
<span class="line">        <span class="token number">0x03</span><span class="token punctuation">,</span>   <span class="token comment">// LOCAL SECTION</span></span>
<span class="line">        <span class="token number">0x10</span><span class="token punctuation">,</span>   <span class="token comment">// GLOBAL NOTYPE</span></span>
<span class="line">        <span class="token number">0x11</span><span class="token punctuation">,</span>   <span class="token comment">// GLOBAL OBJECT</span></span>
<span class="line">        <span class="token number">0x12</span><span class="token punctuation">,</span>   <span class="token comment">// GLOBAL FUNC</span></span>
<span class="line">        <span class="token number">0x1a</span><span class="token punctuation">,</span>   <span class="token comment">// GLOBAL LOOS</span></span>
<span class="line">        <span class="token number">0x20</span><span class="token punctuation">,</span>   <span class="token comment">// WEAK NOTYPE</span></span>
<span class="line">        <span class="token number">0x21</span><span class="token punctuation">,</span>   <span class="token comment">// WEAK OBJECT</span></span>
<span class="line">        <span class="token number">0x22</span><span class="token punctuation">,</span>   <span class="token comment">// WEAK FUNC</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">var</span> st_others <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token number">0x0</span><span class="token punctuation">,</span>        <span class="token comment">/* STV_DEFAULT. Default symbol visibility rules */</span></span>
<span class="line">        <span class="token number">0x1</span><span class="token punctuation">,</span>        <span class="token comment">/* STV_INTERNAL. Processor specific hidden class */</span></span>
<span class="line">        <span class="token number">0x2</span><span class="token punctuation">,</span>        <span class="token comment">/* STV_HIDDEN. Sym unavailable in other modules */</span></span>
<span class="line">        <span class="token number">0x3</span><span class="token punctuation">,</span>        <span class="token comment">/* STV_PROTECTED. Not preemptible, not exported */</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i <span class="token operator">+=</span> dynsym_section_entsize<span class="token punctuation">,</span> id<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> dynsym_section_entaddr <span class="token operator">=</span> dynsym_section_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">var</span> st_name <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> st_value <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> st_size <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> st_info <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st_infos<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>st_info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">st_info: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>st_info<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not a valid</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">var</span> st_other <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0xd</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st_others<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>st_other<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">st_ohter: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>st_other<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not a valid</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">var</span> st_shndx <span class="token operator">=</span> is32bit <span class="token operator">?</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0xe</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dynsym_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">var</span> symbol_name <span class="token operator">=</span> dynstr_section_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>st_name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readUtf8String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        dynsyms<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&quot;symbol_name&quot;</span><span class="token operator">:</span> symbol_name<span class="token punctuation">,</span> </span>
<span class="line">            <span class="token string-property property">&quot;st_value&quot;</span><span class="token operator">:</span> st_value<span class="token punctuation">,</span> </span>
<span class="line">            <span class="token string-property property">&quot;st_size&quot;</span><span class="token operator">:</span> st_size<span class="token punctuation">,</span> </span>
<span class="line">            <span class="token string-property property">&quot;st_info&quot;</span><span class="token operator">:</span> st_info<span class="token punctuation">,</span> </span>
<span class="line">            <span class="token string-property property">&quot;st_other&quot;</span><span class="token operator">:</span> st_other<span class="token punctuation">,</span> </span>
<span class="line">            <span class="token string-property property">&quot;st_shndx&quot;</span><span class="token operator">:</span> st_shndx</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// console.log(\`\${id}. st_name: \${st_name} --&gt; \${symbol_name}, st_value: \${st_value}, st_size: \${st_size}, st_info: \${st_info}, st_other: \${st_other}, st_shndx: \${st_shndx}\`)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Parse .rela.plt</span></span>
<span class="line">    <span class="token keyword">var</span> rela_plt_section_entsize <span class="token operator">=</span> is32bit <span class="token operator">?</span> <span class="token number">0x8</span> <span class="token operator">:</span> <span class="token number">0x18</span></span>
<span class="line">    <span class="token keyword">var</span> <span class="token constant">R_ARM_JUMP_SLOT</span> <span class="token operator">=</span> <span class="token number">0x16</span>  <span class="token comment">/* Create PLT entry */</span></span>
<span class="line">    <span class="token keyword">var</span> <span class="token constant">R_AARCH64_JUMP_SLOT</span> <span class="token operator">=</span> <span class="token number">0x402</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i <span class="token operator">+=</span> rela_plt_section_entsize<span class="token punctuation">,</span> id<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> rela_plt_section_entaddr <span class="token operator">=</span> rela_plt_section_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> r_offset <span class="token operator">=</span> is32bit <span class="token operator">?</span> rela_plt_section_entaddr<span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> rela_plt_section_entaddr<span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> r_info_addr <span class="token operator">=</span> is32bit <span class="token operator">?</span> rela_plt_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">:</span> rela_plt_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> reloc_type <span class="token operator">=</span> is32bit <span class="token operator">?</span> r_info_addr<span class="token punctuation">.</span><span class="token function">readU8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> r_info_addr<span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>is32bit <span class="token operator">&amp;&amp;</span> reloc_type <span class="token operator">!=</span> <span class="token constant">R_ARM_JUMP_SLOT</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>is32bit <span class="token operator">&amp;&amp;</span> reloc_type <span class="token operator">!=</span> <span class="token constant">R_AARCH64_JUMP_SLOT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">var</span> sym_index <span class="token operator">=</span> is32bit <span class="token operator">?</span> r_info_addr<span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8</span> <span class="token operator">:</span> r_info_addr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> symptr_in_got_plt <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r_offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> r_addend <span class="token operator">=</span> rela_plt_section_entaddr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> location <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">findModuleByAddress</span><span class="token punctuation">(</span>symptr_in_got_plt<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;None&#39;</span> <span class="token operator">:</span> Process<span class="token punctuation">.</span><span class="token function">findModuleByAddress</span><span class="token punctuation">(</span>symptr_in_got_plt<span class="token punctuation">)</span><span class="token punctuation">.</span>name</span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. symbol: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dynsyms<span class="token punctuation">[</span>sym_index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;symbol_name&quot;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --&gt; addr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>symptr_in_got_plt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>location<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">parseElf</span><span class="token punctuation">(</span>Module<span class="token punctuation">.</span><span class="token function">findBaseAddress</span><span class="token punctuation">(</span><span class="token string">&quot;libil2cpp.so&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>긴 글을 읽어 주셔서 감사합니다.</p><hr><h2 id="참고-문헌" tabindex="-1"><a class="header-anchor" href="#참고-문헌"><span>참고 문헌</span></a></h2>`,6);function gn(r,yn){const t=i("VPCard"),c=i("router-link"),k=i("SiteInfo"),p=i("FontIcon");return v(),m("div",null,[n("h1",b,[n("a",h,[n("span",null,_(r.$frontmatter.title)+" 관련",1)])]),a(t,o(e({title:"Andriod > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(t,o(e({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",g,[n("ul",null,[n("li",null,[a(c,{to:"#들어가며"},{default:l(()=>[s("들어가며")]),_:1})]),n("li",null,[a(c,{to:"#plt-hook-하면-무슨-일이-발생하는가"},{default:l(()=>[s("PLT hook 하면 무슨 일이 발생하는가?")]),_:1})]),n("li",null,[a(c,{to:"#plt-hook-당한-함수를-어떻게-식별하는가"},{default:l(()=>[s("PLT hook 당한 함수를 어떻게 식별하는가?")]),_:1})]),n("li",null,[a(c,{to:"#참고-문헌"},{default:l(()=>[s("참고 문헌")]),_:1})])])]),y,a(k,{name:"PLT Hook 체크를 위한 Android so 파일 파싱 | NHN Cloud Meetup",desc:"PLT Hook 체크를 위한 Android so 파일 파싱",url:"https://meetup.nhncloud.com/posts/371",logo:"https://meetup.nhncloud.com/resources/img/favicon.ico",preview:"https://image.toast.com/aaaadh/real/2023/techblog/NHNuD074uB77CuC6B0uB4DC%20MeetupPLT%20Hook%20uCCB4uD06CuB97C%20uC704uD55C%20Android%20so%20uD30CuC77C%20uD30CuC2F1uC12CuB124uC77C230829.jpg"}),w,C,n("p",null,[s("Android PLT(procedure linkage table) hook과 관련해 plt hook 당한 함수를 식별하는 방법을 공유하고자 합니다. plt hook 라이브러리로는 bytedance에서 오픈소스로 공개한 "),n("a",x,[a(p,{icon:"iconfont icon-github"}),s(),E]),s("이 많이 사용되고 있는 것으로 보입니다.")]),z,L,U,A,P,B,n("p",null,[s("다음은 "),a(p,{icon:"fas fa-file-lines"}),T,s(" 파일을 로컬에서 elf 파싱("),n("a",D,[a(p,{icon:"iconfont icon-github"}),H]),s(") 프로그램으로 열어 본 것입니다. "),S,s(" 섹션에 "),q,s(" 라는 심볼이 정의되어 있고, "),N,s(" 값이 "),$,s("입니다. "),F,s(" 은 "),a(p,{icon:"fas fa-file-lines"}),M,s(" 파일이 메모리에 로드되면 그 base 주소로부터 "),O,s(" 위치만큼 떨어진 곳에 "),j,s(" 심볼의 주소값을 저장하겠다는 뜻입니다.")]),R,n("p",null,[s('정리하면 "'),I,s(" 함수는 .rela.plt 섹션에 정의되어 있고, "),a(p,{icon:"fas fa-file-lines"}),V,s(" 파일이 메모리에 로드되면 base 주소로부터 "),J,s(" 위치 떨어진 곳에 "),W,s(" 함수의 주소를 저장한다. 그곳의 위치는 "),K,s(' 섹션에 있다"가 되겠습니다.')]),G,n("p",null,[s("다음은 어느 게임 앱의 메모리에 로드된 "),a(p,{icon:"fas fa-file-lines"}),X,s(" 파일 정보인데요. 그 경로가 "),a(p,{icon:"fa-brands fa-android"}),Y,s(" 파일 안에 있는 것을 알 수 있습니다(! 표시가 "),Z,s(" 파일 안에 있는 경로를 의미함).")]),Q,n("p",null,[s("흠...그래도 문제없죠. 어차피 "),nn,s(" 파일은 메모리에 로드되는 것이니 메모리에서 직접 .rela.plt 섹션을 파싱하면 될 테니까요. 그러면 .rela.plt 섹션이 메모리의 어디에 위치하고 있는지 알아내면 되겠습니다. "),sn,s(" 섹션의 위치는 Section Header라는 곳에 정의되어 있습니다. 그 Section Header의 위치는 Elf Header(Elf_Ehdr)에 정의되어 있습니다. 로컬에서 "),a(p,{icon:"fas fa-file-lines"}),an,s(" 파일의 Elf Header 중 "),pn,s(" 값이 "),tn,s("입니다. 그곳이 Section Header의 위치입니다.")]),on,en,cn,ln,n("p",null,[s("런타임 시에 Seciton Header도 메모리에 로드되는 것으로 알고 접근하였는데, 찾아보니 Section Header는 메모리에 로드되지 않는다고 합니다(출처: "),n("a",un,[a(p,{icon:"fa-brands fa-stack-overflow"}),s("https://stackoverflow.com/a/44854052")]),s(").")]),rn,n("p",null,[s("다음은 어느 게임 앱의 "),kn,s(" 함수를 plt hook 한 뒤, "),a(p,{icon:"fas fa-file-lines"}),dn,s(" 파일의 .rela.plt 섹션을 메모리상에서 파싱한 결과입니다. 음..."),mn,s(" 함수의 주소가 "),_n,s("인데, 그 위치가 "),a(p,{icon:"fas fa-file-lines"}),vn,s(" 파일이네요. 원래라면 위치가 "),a(p,{icon:"fas fa-file-lines"}),fn,s("가 되어야 할 것입니다. 따라서 "),bn,s(" 함수가 plt hook 당한 것으로 판단할 수 있습니다.")]),hn,a(t,o(e({title:"elf.h source code [glibc/elf/elf.h] - Codebrowser ",desc:"Browse the source of glibc glibc-2 using KDAB Codebrowser which provides IDE like features for browsing C, C++, Rust & Dart code in your browser",link:"https://codebrowser.dev/glibc/glibc/elf/elf.h.html",logo:"https://codebrowser.dev/img/favico.svg",background:"rgba(0,119,200,0.2)"})),null,16),a(t,o(e({title:"bytedance/bhook",desc:"🔥 ByteHook is an Android PLT hook library which supports armeabi-v7a, arm64-v8a, x86 and x86_64.",link:"https://github.com/bytedance/bhook",logo:"https://avatars.githubusercontent.com/u/4158466?s=200&v=4",background:"rgba(13,16,20,0.2)"})),null,16),a(t,o(e({title:"personal_script/Frida_script/android_hook_detect.js at master · lich4/personal_script · GitHub",desc:"Scripts useful for Vulnerability Exploit, Static Analysis, Dynamic Analysis, File Format Exploit, ...",link:"https://github.com/lich4/personal_script/blob/master/Frida_script/android_hook_detect.js",logo:"https://avatars.githubusercontent.com/u/8621719?v=4",background:"rgba(13,16,20,0.2)"})),null,16),a(t,o(e({title:"horsicq/XELFViewer",desc:"ELF file viewer/editor for Windows, Linux and MacOS.",link:"https://github.com/horsicq/XELFViewer",logo:"https://avatars.githubusercontent.com/u/7762949?v=4",background:"rgba(13,16,20,0.2)"})),null,16),a(t,o(e({title:"linux - Reading ELF header of loaded shared object during runtime - Stack Overflow",desc:"I wrote some code to search for a symbol in a shared library's ELF header. The code works if I parse the shared object file stored on my disk. Now, I wanted to use this code to parse the ELF heade...",link:"https://stackoverflow.com/a/44854052",logo:"https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",background:"rgba(244,128,36,0.2)"})),null,16)])}const xn=d(f,[["render",gn],["__file","371.html.vue"]]),En=JSON.parse('{"path":"/meetup.nhncloud.com/371.html","title":"PLT Hook 체크를 위한 Android so 파일 파싱","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"PLT Hook 체크를 위한 Android so 파일 파싱","description":"Article(s) > PLT Hook 체크를 위한 Android so 파일 파싱","icon":"fa-brands fa-android","category":["Android","JavaScript","DevOps","Article(s)"],"tag":["blog","meetup.nhncloud.com","js","android","so"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > PLT Hook 체크를 위한 Android so 파일 파싱"},{"property":"og:description","content":"PLT Hook 체크를 위한 Android so 파일 파싱"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/meetup.nhncloud.com/371.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/meetup.nhncloud.com/371.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"PLT Hook 체크를 위한 Android so 파일 파싱"}],["meta",{"property":"og:description","content":"Article(s) > PLT Hook 체크를 위한 Android so 파일 파싱"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.toast.com/aaaadh/real/2023/techblog/NHNuD074uB77CuC6B0uB4DC%20MeetupPLT%20Hook%20uCCB4uD06CuB97C%20uC704uD55C%20Android%20so%20uD30CuC77C%20uD30CuC2F1uC12CuB124uC77C230829.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://image.toast.com/aaaadh/real/2023/techblog/NHNuD074uB77CuC6B0uB4DC%20MeetupPLT%20Hook%20uCCB4uD06CuB97C%20uC704uD55C%20Android%20so%20uD30CuC77C%20uD30CuC2F1uC12CuB124uC77C230829.jpg"}],["meta",{"name":"twitter:image:alt","content":"PLT Hook 체크를 위한 Android so 파일 파싱"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"meetup.nhncloud.com"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"so"}],["meta",{"property":"article:published_time","content":"2023-09-04T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PLT Hook 체크를 위한 Android so 파일 파싱\\",\\"image\\":[\\"https://image.toast.com/aaaadh/real/2023/techblog/NHNuD074uB77CuC6B0uB4DC%20MeetupPLT%20Hook%20uCCB4uD06CuB97C%20uC704uD55C%20Android%20so%20uD30CuC77C%20uD30CuC2F1uC12CuB124uC77C230829.jpg\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/01%287%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/02%285%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/03%285%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/04%286%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/05%285%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/06%286%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/07%285%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/08%284%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/09%283%29.png\\",\\"https://image.toast.com/aaaadh/real/2023/techblog/10%283%29.png\\"],\\"datePublished\\":\\"2023-09-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/java-android/articles/README.md","date":"2023-09-04T00:00:00.000Z","isOriginal":false,"cover":"https://image.toast.com/aaaadh/real/2023/techblog/NHNuD074uB77CuC6B0uB4DC%20MeetupPLT%20Hook%20uCCB4uD06CuB97C%20uC704uD55C%20Android%20so%20uD30CuC77C%20uD30CuC2F1uC12CuB124uC77C230829.jpg"},"headers":[{"level":2,"title":"들어가며","slug":"들어가며","link":"#들어가며","children":[]},{"level":2,"title":"PLT hook 하면 무슨 일이 발생하는가?","slug":"plt-hook-하면-무슨-일이-발생하는가","link":"#plt-hook-하면-무슨-일이-발생하는가","children":[]},{"level":2,"title":"PLT hook 당한 함수를 어떻게 식별하는가?","slug":"plt-hook-당한-함수를-어떻게-식별하는가","link":"#plt-hook-당한-함수를-어떻게-식별하는가","children":[]},{"level":2,"title":"참고 문헌","slug":"참고-문헌","link":"#참고-문헌","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.09,"words":1527},"filePathRelative":"meetup.nhncloud.com/371.md","localizedDate":"2023년 9월 4일","excerpt":"\\n"}');export{xn as comp,En as data};
