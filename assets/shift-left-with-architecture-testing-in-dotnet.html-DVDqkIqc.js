import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as k,e as a,n as m,g as v,w as t,d as s,f as p,r as i,o as g}from"./app-BgNevrm5.js";const f={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},_=n("hr",null,null,-1),A=n("strong",null,"modular monolith",-1),T=n("p",null,"Fast forward a few months (or years), and things might look different.",-1),I=n("p",null,"The codebase has grown, and new features have been added. Maybe your team has even changed, with new developers coming on board. Adding new features becomes a pain, and bugs are popping up left and right.",-1),N={href:"https://deviq.com/antipatterns/big-ball-of-mud",target:"_blank",rel:"noopener noreferrer"},S=p('<p>Today, I want to show you how architecture testing can prevent this problem.</p><hr><h2 id="technical-debt" tabindex="-1"><a class="header-anchor" href="#technical-debt"><span>Technical Debt</span></a></h2><p>Technical debt is the consequence of prioritizing development speed over well-designed code. It happens when teams cut corners to meet deadlines, make quick fixes, or don&#39;t understand the architecture clearly.</p><p>Each shortcut or hack adds to the pile, making the code harder to understand, change, and maintain. But why do developers take these shortcuts in the first place?</p><p>Don&#39;t developers care about keeping the code clean?</p><p>Well, the truth is, most developers do care. If you&#39;re reading this newsletter, odds are you also care. But, developers are often under pressure to deliver features quickly. Sometimes, the quickest way to do that is to take a shortcut.</p><p>Plus, not everyone has a deep understanding of software architecture, or they might disagree on what the &quot;right&quot; architecture is. And let&#39;s be honest: some developers want to get their code working and move on to the next thing.</p><hr><h2 id="architecture-testing" tabindex="-1"><a class="header-anchor" href="#architecture-testing"><span>Architecture Testing</span></a></h2>',10),E=n("strong",null,"architecture testing",-1),x=n("strong",null,"CI pipeline",-1),M={href:"https://github.com/BenMorris/NetArchTest",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"BenMorris/NetArchTest",-1),D=n("strong",null,"fundamentals of architecture testing",-1),B=n("p",null,"Let's see how to write some architecture tests.",-1),C=n("hr",null,null,-1),H=n("h2",{id:"architecture-testing-modular-monolith",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#architecture-testing-modular-monolith"},[n("span",null,"Architecture Testing: Modular Monolith")])],-1),L=n("strong",null,"modular monolith architecture",-1),R=p(`<ul><li>Modules aren&#39;t allowed to reference each other</li><li>Modules can only call the public API of other modules</li></ul><p>Here&#39;s an architecture test that enforces these module constraints. The <code>Ticketing</code> module is not allowed to reference the other modules directly. However, it can reference the public API of other modules (integration events in this example). The entry point is the <code>Types</code> class, which exposes a fluent API to build the rules you want to enforce. NetArchTest allows us to enforce the direction of dependencies between modules.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TicketingModule_ShouldNotHaveDependencyOn_AnyOtherModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> otherModules <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token attribute"><span class="token class-name">UsersNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">EventsNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">AttendanceNamespace</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> integrationEventsModules <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token attribute"><span class="token class-name">UsersIntegrationEventsNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">EventsIntegrationEventsNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">AttendanceIntegrationEventsNamespace</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">List<span class="token punctuation">&lt;</span>Assembly<span class="token punctuation">&gt;</span></span> ticketingAssemblies <span class="token operator">=</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span></span>
<span class="line">        Modules<span class="token punctuation">.</span>Ticketing<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span></span>
<span class="line">        Modules<span class="token punctuation">.</span>Ticketing<span class="token punctuation">.</span>Presentation<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TicketingModule</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly</span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssemblies</span><span class="token punctuation">(</span>ticketingAssemblies<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">DoNotHaveDependencyOnAny</span><span class="token punctuation">(</span>integrationEventsModules<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">NotHaveDependencyOnAny</span><span class="token punctuation">(</span>otherModules<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),P=n("strong",null,"Modular Monolith Architecture",-1),W=n("hr",null,null,-1),F=n("h2",{id:"architecture-testing-clean-architecture",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#architecture-testing-clean-architecture"},[n("span",null,"Architecture Testing: Clean Architecture")])],-1),O=n("strong",null,"Clean Architecture",-1),G=p(`<p>For example, the <code>Domain</code> layer isn&#39;t allowed to reference the <code>Application</code> layer. Here&#39;s an architecture test enforcing this rule:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DomainLayer_ShouldNotHaveDependencyOn_ApplicationLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>DomainAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">NotHaveDependencyOn</span><span class="token punctuation">(</span>ApplicationAssembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s also simple introduce a rule that the <code>Application</code> layer isn&#39;t allowed to reference the <code>Infrastructure</code> layer. The architecture test will fail whenever someone in the team breaks the dependency rule.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ApplicationLayer_ShouldNotHaveDependencyOn_InfrastructureLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>ApplicationAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">NotHaveDependencyOn</span><span class="token punctuation">(</span>InfrastructureAssembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can introduce more architecture tests for the <code>Infrastructure</code> and <code>Presentation</code> layers, if needed.</p>`,5),q=n("strong",null,"Pragmatic Clean Architecture",-1),Y=p(`<hr><h2 id="architecture-testing-design-rules" tabindex="-1"><a class="header-anchor" href="#architecture-testing-design-rules"><span>Architecture Testing: Design Rules</span></a></h2><p>Architecture testing is also useful for enforcing design rules in your code. If your team has coding standards everyone should follow, architecture testing can help you enforce them.</p><p>For example, we want to ensure that all domain events are sealed types. You can use the <code>BeSealed</code> method to enforce a design rule that types implementing <code>IDomainEvent</code> or <code>DomainEvent</code> should be sealed.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DomainEvents_Should_BeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>DomainAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ImplementInterface</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IDomainEvent</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Inherit</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DomainEvent</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">BeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An interesting design rule could be requiring all domain entities not to have a public constructor. Instead, you would create an <code>Entity</code> instance through a static factory method. This approach improves the encapsulation of your <code>Entity</code>.</p><p>Here&#39;s an architecture test enforcing this design rule:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Entities_ShouldOnlyHave_PrivateConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> entityTypes <span class="token operator">=</span> Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>DomainAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Inherit</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Entity</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> failingTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> entityType <span class="token keyword">in</span> entityTypes<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ConstructorInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> constructors <span class="token operator">=</span> entityType</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span>BindingFlags<span class="token punctuation">.</span>Public <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>constructors<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            failingTypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>entityType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    failingTypes<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another thing you can do with architecture tests is enforce naming conventions in your code. Here&#39;s an example of requiring all command handlers to have a name ending with <code>CommandHandler</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CommandHandler_ShouldHave_NameEndingWith_CommandHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>ApplicationAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ImplementInterface</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ImplementInterface</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">HaveNameEndingWith</span><span class="token punctuation">(</span><span class="token string">&quot;CommandHandler&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Even the most well-planned software projects decay because of technical debt. Most developers have good intentions. However, time pressure, misunderstandings, and resistance to rules all contribute to this problem.</p>`,13),U=n("strong",null,"Architecture testing",-1),V=n("p",null,"A few key takeaways:",-1),J=n("ul",null,[n("li",null,[n("strong",null,"Technical debt is inevitable"),s(": It slows down development, introduces bugs, and frustrates developers.")]),n("li",null,[n("strong",null,"Architecture testing is your safety net"),s(": It helps you catch architectural violations before they become problematic.")]),n("li",null,[n("strong",null,"Start small and iterate"),s(": You don't have to test everything at once. Focus on the most critical rules first.")]),n("li",null,[n("strong",null,"Make it part of your workflow"),s(": Integrate architecture tests into your CI/CD pipeline so they run automatically.")])],-1),z={class:"hint-container info"},K=n("p",{class:"hint-container-title"},"Action point",-1),Z={href:"https://github.com/BenMorris/ArchUnitNET",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"BenMorris/ArchUnitNET",-1),Q=n("p",null,"That's all for today.",-1),X=n("p",null,"See you next week.",-1);function nn(u,sn){const r=i("VPCard"),c=i("router-link"),l=i("SiteInfo"),e=i("RouteLink"),o=i("FontIcon");return g(),h("div",null,[n("h1",b,[n("a",y,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),a(r,m(v({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[a(c,{to:"#technical-debt"},{default:t(()=>[s("Technical Debt")]),_:1})]),n("li",null,[a(c,{to:"#architecture-testing"},{default:t(()=>[s("Architecture Testing")]),_:1})]),n("li",null,[a(c,{to:"#architecture-testing-modular-monolith"},{default:t(()=>[s("Architecture Testing: Modular Monolith")]),_:1})]),n("li",null,[a(c,{to:"#architecture-testing-clean-architecture"},{default:t(()=>[s("Architecture Testing: Clean Architecture")]),_:1})]),n("li",null,[a(c,{to:"#architecture-testing-design-rules"},{default:t(()=>[s("Architecture Testing: Design Rules")]),_:1})]),n("li",null,[a(c,{to:"#summary"},{default:t(()=>[s("Summary")]),_:1})])])]),_,a(l,{name:"Shift Left With Architecture Testing in .NET",desc:"In this newsletter, we'll explore how architecture testing can safeguard our project's architecture. Architecture tests can help us shift left and detect architectural issues faster.",url:"https://milanjovanovic.tech/blog/shift-left-with-architecture-testing-in-dotnet/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_091.png"}),n("p",null,[s("Picture this: You're part of a team building a shiny new .NET application. You've carefully chosen your software architecture. It could be microservices, a "),a(e,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:t(()=>[A]),_:1}),s(", or something else entirely. You've decided which database you will use and all the other tools you need. Everyone's excited, the code is flowing, and features are getting shipped.")]),T,I,n("p",null,[s("And slowly but surely, the neat architecture you started with has turned into a "),n("a",N,[a(o,{icon:"fas fa-globe"}),s("big ball of mud")]),s(". What went wrong? And more importantly, what can we do about it?")]),S,n("p",null,[s("Luckily, there's a way to enforce software architecture on your project before things get out of hand. It's called "),a(e,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:t(()=>[E]),_:1}),s(". These are automated tests that check whether your code follows the architectural rules you've set up.")]),n("p",null,[s("With architecture testing, you can ["),a(o,{icon:"fa-brands fa-wikipedia-w"}),s(`"shift left"](https://en.wikipedia.org/wiki/Shift-left_testing. This enables you to find and fix problems early in the development process when they're much easier and cheaper to deal with.`)]),n("p",null,[s("Think of it like a safety net for your software architecture and design rules. If someone accidentally breaks a rule, the test will catch it and alert you. Bonus points if you integrate architecture testing into your "),a(e,{to:"/milanjovanovic.tech/how-to-build-ci-cd-pipeline-with-github-actions-and-dotnet.html"},{default:t(()=>[x]),_:1}),s(".")]),n("p",null,[s("There are a few libraries you can use for architecture testing. I prefer working with the "),n("a",M,[a(o,{icon:"iconfont icon-github"}),j]),s(" library, which I'll use for the examples.")]),a(l,{name:"BenMorris/NetArchTest",desc:"A fluent API for .Net that can enforce architectural rules in unit tests.",url:"https://github.com/BenMorris/NetArchTest",logo:"https://avatars.githubusercontent.com/u/1744805?s=96&v=4",preview:"https://opengraph.githubassets.com/4c8300674a4b7439d39f13b79063a42dfa61d3592cb63f349a3c93ee9d9066c2/BenMorris/NetArchTest"}),n("p",null,[s("You can check out this article to learn the "),a(e,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:t(()=>[D]),_:1}),s(".")]),B,C,H,n("p",null,[s("You built an application using the "),a(e,{to:"/milanjovanovic.tech/what-is-a-modular-monolith.html"},{default:t(()=>[L]),_:1}),s(". But how can you maintain the constraints between the modules?")]),R,n("p",null,[s("If you want to learn how to build robust and scalable systems using this architectural approach, check out "),a(e,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:t(()=>[P]),_:1}),s(".")]),W,F,n("p",null,[s("We can also write architecture tests for "),a(e,{to:"/milanjovanovic.tech/why-clean-architecture-is-great-for-complex-projects.html"},{default:t(()=>[O]),_:1}),s(". The inner layers aren't allowed to reference the outer layers. Instead, the inner layers define abstractions and the outer layers implement these abstractions.")]),G,n("p",null,[s("Ready to learn more about building production-ready applications using this architectural approach? You should check out "),a(e,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:t(()=>[q]),_:1}),s(".")]),Y,n("p",null,[a(e,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:t(()=>[U]),_:1}),s(" acts as a safeguard. It prevents your codebase from turning into a big ball of mud. By catching architectural violations early on, you can shift left. Short feedback loops avoid costly rework and improve developer productivity. It also ensures the long-term health of your project.")]),V,J,n("div",z,[K,n("p",null,[s("Start by exploring popular .NET architecture testing libraries like "),n("a",Z,[a(o,{icon:"iconfont icon-github"}),$]),s(". Experiment with writing tests for common architectural rules and gradually integrate them into your development workflow.")]),a(l,{name:"TNG/ArchUnitNET",desc:"A C# architecture test library to specify and assert architecture rules in C# for automated testing.",url:"https://github.com/TNG/ArchUnitNET",logo:"https://avatars.githubusercontent.com/u/432256?s=88&v=4",preview:"https://opengraph.githubassets.com/686a0d4957388dbf014b2807249af0019cd0ae23730f21d3709bf0562887b8cf/TNG/ArchUnitNET"})]),Q,X])}const en=d(f,[["render",nn],["__file","shift-left-with-architecture-testing-in-dotnet.html.vue"]]),cn=JSON.parse('{"path":"/milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.html","title":"Shift Left With Architecture Testing in .NET","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Shift Left With Architecture Testing in .NET","description":"Article(s) > Shift Left With Architecture Testing in .NET","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Shift Left With Architecture Testing in .NET"},{"property":"og:description","content":"Shift Left With Architecture Testing in .NET"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Shift Left With Architecture Testing in .NET"}],["meta",{"property":"og:description","content":"Article(s) > Shift Left With Architecture Testing in .NET"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_091.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_091.png"}],["meta",{"name":"twitter:image:alt","content":"Shift Left With Architecture Testing in .NET"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2024-05-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Shift Left With Architecture Testing in .NET\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_091.png\\"],\\"datePublished\\":\\"2024-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2024-05-25T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_091.png"},"headers":[{"level":2,"title":"Technical Debt","slug":"technical-debt","link":"#technical-debt","children":[]},{"level":2,"title":"Architecture Testing","slug":"architecture-testing","link":"#architecture-testing","children":[]},{"level":2,"title":"Architecture Testing: Modular Monolith","slug":"architecture-testing-modular-monolith","link":"#architecture-testing-modular-monolith","children":[]},{"level":2,"title":"Architecture Testing: Clean Architecture","slug":"architecture-testing-clean-architecture","link":"#architecture-testing-clean-architecture","children":[]},{"level":2,"title":"Architecture Testing: Design Rules","slug":"architecture-testing-design-rules","link":"#architecture-testing-design-rules","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.04,"words":1512},"filePathRelative":"milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.md","localizedDate":"2024년 5월 25일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{en as comp,cn as data};
