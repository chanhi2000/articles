import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as r,e as s,n as a,g as e,a as d,d as u,f as w,r as o,o as h}from"./app-BgNevrm5.js";const m={},f={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=w(`<blockquote><p>Available from Swift 5.8</p></blockquote><p>This resolves another small but potentially annoying inconsistency in Swift where downcasting a collection ‚Äì e.g. casting an array of <code>ClassA</code> to an array of another type that <em>inherits</em> from <code>ClassA</code> ‚Äì would not be allowed in some circumstances.</p><p>For example, this code is now valid in Swift 5.8, whereas it would not have worked previously:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Woof!&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">bark</span><span class="token punctuation">(</span>using pets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Pet</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> pets <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">let</span> pets <span class="token keyword">as</span> <span class="token punctuation">[</span><span class="token class-name">Dog</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> pet <span class="token keyword">in</span> pets <span class="token punctuation">{</span></span>
<span class="line">            pet<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;No barking today.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before Swift 5.8 that would have led to the error message, ‚ÄúCollection downcast in cast pattern is not implemented; use an explicit downcast to &#39;[Dog]&#39; instead.‚Äù In practice, syntax such as <code>if let dogs = pets as? [Dog] {</code> worked just fine, so I would imagine that error was rarely seen. However, this change does mean another language inconsistency is resolved, which is always welcome.</p>`,5),y={class:"hint-container details"},_=n("summary",null,"Other Changes in Swift 5.8",-1),C={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-7-to-5-8.playground.zip",target:"_blank",rel:"noopener noreferrer"};function S(i,x){const t=o("VPCard"),c=o("FontIcon");return h(),p("div",null,[n("h1",f,[n("a",g,[n("span",null,r(i.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),s(t,a(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,v,s(t,a(e({title:"Collection downcasts in cast patterns are now supported | Changes in Swift 5.8",desc:"Collection downcasts in cast patterns are now supported",link:"https://hackingwithswift.com/swift/5.8/collection-downcasts",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("details",y,[_,s(t,a(e({title:"Lift all limitations on variables in result builders | Changes in Swift 5.8",desc:"Lift all limitations on variables in result builders",link:"/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"Function back deployment | Changes in Swift 5.8",desc:"Function back deployment",link:"/hackingwithswift.com/swift/5.8/function-back-deployment.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"Allow implicit self for weak self captures, after self is unwrapped | Changes in Swift 5.8",desc:"Allow implicit self for weak self captures, after self is unwrapped",link:"/hackingwithswift.com/swift/5.8/implicit-self-weak-capture.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"Concise magic file names | Changes in Swift 5.8",desc:"Concise magic file names",link:"/hackingwithswift.com/swift/5.8/concise-magic-file-names.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"Opening existential arguments to optional parameters | Changes in Swift 5.8",desc:"Opening existential arguments to optional parameters",link:"/hackingwithswift.com/swift/5.8/opening-existential-optional.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Collection downcasts in cast patterns are now supported | Changes in Swift 5.8",
  "desc": "Collection downcasts in cast patterns are now supported",
  "link": "/hackingwithswift.com/swift/5.8/collection-downcasts.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n("p",null,[n("a",C,[s(c,{icon:"fas fa-file-zipper"}),u("Download Swift 5.8 playground")])])])])}const D=l(m,[["render",S],["__file","collection-downcasts.html.vue"]]),N=JSON.parse('{"path":"/hackingwithswift.com/swift/5.8/collection-downcasts.html","title":"Collection downcasts in cast patterns are now supported","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Collection downcasts in cast patterns are now supported","description":"Article(s) > Collection downcasts in cast patterns are now supported","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.8"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Collection downcasts in cast patterns are now supported"},{"property":"og:description","content":"Collection downcasts in cast patterns are now supported"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/collection-downcasts.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/collection-downcasts.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Collection downcasts in cast patterns are now supported"}],["meta",{"property":"og:description","content":"Article(s) > Collection downcasts in cast patterns are now supported"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.8"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Collection downcasts in cast patterns are now supported\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swift/5.7/if-let-shorthand.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.74,"words":521},"filePathRelative":"hackingwithswift.com/swift/5.8/collection-downcasts.md","excerpt":"\\n"}');export{D as comp,N as data};
