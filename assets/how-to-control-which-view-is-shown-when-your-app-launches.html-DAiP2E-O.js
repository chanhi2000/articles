import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as n,t as l,e as s,n as a,g as o,f as p,r as h,o as r}from"./app-BgNevrm5.js";const w={},u={id:"frontmatter-title-관련",tabindex:"-1"},d={class:"header-anchor",href:"#frontmatter-title-관련"},m=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),f=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>When you make a new SwiftUI project, Xcode will automatically create a new Swift file with the same name as your project, which will be used to bootstrap your app – to present your initial user interface.</p><p>For example, the default file will look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">SwiftUITestApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, you can just change <code>ContentView</code> to whatever other view you want to show.</p><p>However, this is a great place to set up all the core UI you need, such as a tab view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">TabView</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">HomeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">ContactsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">LocationView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">AccountView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-control-which-view-is-shown-when-your-app-launches-1~dark.png" alt="A line of 4 tab labels, one of which is blue to denote that it is active." tabindex="0" loading="lazy"><figcaption>A line of 4 tab labels, one of which is blue to denote that it is active.</figcaption></figure>`,8),k={class:"hint-container details"},v=n("summary",null,"Similar solutions…",-1);function y(e,b){const t=h("VPCard");return r(),c("div",null,[n("h1",u,[n("a",d,[n("span",null,l(e.$frontmatter.title)+" 관련",1)])]),s(t,a(o({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,g,s(t,a(o({title:"How to control which view is shown when your app launches | SwiftUI by Example",desc:"How to control which view is shown when your app launches",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-control-which-view-is-shown-when-your-app-launches",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,n("details",k,[v,s(t,a(o({title:"How to control which NavigationSplitView column is shown in compact layouts | SwiftUI by Example",desc:"How to control which NavigationSplitView column is shown in compact layouts",link:"/hackingwithswift.com/swiftui/how-to-control-which-navigationsplitview-column-is-shown-in-compact-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(o({title:"How to run code when your app launches | SwiftUI by Example",desc:"How to run code when your app launches",link:"/hackingwithswift.com/swiftui/how-to-run-code-when-your-app-launches.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(o({title:"How to run an asynchronous task when a view is shown | SwiftUI by Example",desc:"How to run an asynchronous task when a view is shown",link:"/hackingwithswift.com/swiftui/how-to-run-an-asynchronous-task-when-a-view-is-shown.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(o({title:"How to find which data change is causing a SwiftUI view to update | SwiftUI by Example",desc:"How to find which data change is causing a SwiftUI view to update",link:"/hackingwithswift.com/swiftui/how-to-find-which-data-change-is-causing-a-swiftui-view-to-update.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(o({title:"How to fix “Function declares an opaque return type, but has no return statements in its body from which to infer an underlying type” | SwiftUI by Example",desc:"How to fix “Function declares an opaque return type, but has no return statements in its body from which to infer an underlying type”",link:"/hackingwithswift.com/swiftui/how-to-fix-function-declares-an-opaque-return-type-but-has-no-return-statements-in-its-body-from-which-to-infer-an-underlying-type.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const S=i(w,[["render",y],["__file","how-to-control-which-view-is-shown-when-your-app-launches.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-control-which-view-is-shown-when-your-app-launches.html","title":"How to control which view is shown when your app launches","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to control which view is shown when your app launches","description":"Article(s) > How to control which view is shown when your app launches","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to control which view is shown when your app launches"},{"property":"og:description","content":"How to control which view is shown when your app launches"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-control-which-view-is-shown-when-your-app-launches.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-control-which-view-is-shown-when-your-app-launches.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to control which view is shown when your app launches"}],["meta",{"property":"og:description","content":"Article(s) > How to control which view is shown when your app launches"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-control-which-view-is-shown-when-your-app-launches-1~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to control which view is shown when your app launches\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-control-which-view-is-shown-when-your-app-launches-1~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.96,"words":588},"filePathRelative":"hackingwithswift.com/swiftui/how-to-control-which-view-is-shown-when-your-app-launches.md","excerpt":"\\n"}');export{S as comp,x as data};
