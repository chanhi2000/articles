import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as t,t as d,e as s,n,g as a,d as o,f as m,r as i,o as b}from"./app-BgNevrm5.js";const h={},w={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},v=t("nav",{class:"table-of-contents"},[t("ul")],-1),g=t("hr",null,null,-1),f=m(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI&#39;s <code>@StateObject</code> property wrapper is a specialized form of <code>@ObservedObject</code>, having all the same functionality with one important addition: it should be used to <em>create</em> observed objects, rather than just store one that was passed in externally.</p><p>When you add a property to a view using <code>@StateObject</code>, SwiftUI considers that view to be the owner of the observable object. All other views where you pass that object should use <code>@ObservedObject</code>.</p><p><strong>This really matters.</strong> Seriously, if you get this wrong you might find your object gets destroyed by accident, which will cause your app to crash seemingly randomly.</p><p>So, to be clear: you should create your observable object somewhere using <code>@StateObject</code>, and in all subsequent places where you pass that object you should use <code>@ObservedObject</code>.</p><p>Here&#39;s an example in code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// An example class to work with</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A view that creates and owns the Player object.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> player <span class="token operator">=</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">PlayerNameView</span><span class="token punctuation">(</span>player<span class="token punctuation">:</span> player<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show detail view&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A view that monitors the Player object for changes, but</span></span>
<span class="line"><span class="token comment">// doesn&#39;t own it.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">PlayerNameView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> player<span class="token punctuation">:</span> <span class="token class-name">Player</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">player<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),y={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects-1.zip",target:"_blank",rel:"noopener noreferrer"},j=t("p",null,[o("If you're finding it hard to remember the distinction, try this: whenever you see “State” in a property wrapper, e.g. "),t("code",null,"@State"),o(", "),t("code",null,"@StateObject"),o(", "),t("code",null,"@GestureState"),o(", it means “the current view owns this data.”")],-1),x={class:"hint-container details"},S=t("summary",null,"Similar solutions…",-1);function _(c,O){const e=i("VPCard"),l=i("FontIcon"),p=i("VidStack");return b(),u("div",null,[t("h1",w,[t("a",k,[t("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(e,n(a({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,g,s(e,n(a({title:"How to use @StateObject to create and monitor external objects | SwiftUI by Example",desc:"How to use @StateObject to create and monitor external objects",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,t("blockquote",null,[t("p",null,[t("a",y,[s(l,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),s(p,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects-1~dark.mp4"}),j,t("details",x,[S,s(e,n(a({title:"How to use @ObservedObject to manage state from external objects | SwiftUI by Example",desc:"How to use @ObservedObject to manage state from external objects",link:"/hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,n(a({title:"What is the @StateObject property wrapper? | SwiftUI by Example",desc:"What is the @StateObject property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-stateobject-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,n(a({title:"Observable objects, environment objects, and @Published | SwiftUI by Example",desc:"Observable objects, environment objects, and @Published",link:"/hackingwithswift.com/swiftui/observable-objects-environment-objects-and-published.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,n(a({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,n(a({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const U=r(h,[["render",_],["__file","how-to-use-stateobject-to-create-and-monitor-external-objects.html.vue"]]),H=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects.html","title":"How to use @StateObject to create and monitor external objects","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use @StateObject to create and monitor external objects","description":"Article(s) > How to use @StateObject to create and monitor external objects","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use @StateObject to create and monitor external objects"},{"property":"og:description","content":"How to use @StateObject to create and monitor external objects"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use @StateObject to create and monitor external objects"}],["meta",{"property":"og:description","content":"Article(s) > How to use @StateObject to create and monitor external objects"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use @StateObject to create and monitor external objects\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.12,"words":637},"filePathRelative":"hackingwithswift.com/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects.md","excerpt":"\\n"}');export{U as comp,H as data};
