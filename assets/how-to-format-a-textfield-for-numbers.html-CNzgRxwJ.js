import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as a,g as e,d as l,f as o,r as p,o as m}from"./app-BgNevrm5.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),b=o(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>You can attach a formatter to SwiftUI&#39;s <code>TextField</code> in order to restrict what kind of data it can contain, but honestly it&#39;s a bit limited in what it can do.</p><p>To demonstrate the functionality – and also its limitations – we could write some code to let the user enter a score in a game, and show what they entered. Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enter your score&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $score<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span>number<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>roundedBorder<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your score was </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-format-a-textfield-for-numbers-1.zip",target:"_blank",rel:"noopener noreferrer"},y=o(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-format-a-textfield-for-numbers-1~dark.png" alt="A text field showing 123, with a label below saying “Your score was 123.”" tabindex="0" loading="lazy"><figcaption>A text field showing 123, with a label below saying “Your score was 123.”</figcaption></figure><div class="hint-container important"><p class="hint-container-title">Important</p><p>If you&#39;re using Xcode 12 you need to use <code>RoundedBorderTextFieldStyle()</code> rather than <code>.roundedBorder</code>, and also create a custom number formatter, like this:</p></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> formatter<span class="token punctuation">:</span> <span class="token class-name">NumberFormatter</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> formatter <span class="token operator">=</span> <span class="token class-name">NumberFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        formatter<span class="token punctuation">.</span>numberStyle <span class="token operator">=</span> <span class="token punctuation">.</span>decimal</span>
<span class="line">        <span class="token keyword">return</span> formatter</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enter your score&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $score<span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> formatter<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">RoundedBorderTextFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your score was </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),x={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-format-a-textfield-for-numbers-2.zip",target:"_blank",rel:"noopener noreferrer"},_=o("<p>Regardless of which code option you choose, if you try using it you&#39;ll notice a few things:</p><ol><li>The “Your score was” text view updates only when the user presses Return.</li><li>The user is free to enter any kind of text that they want, and it only jumps back to being a number when they press Return.</li><li>Before validation, they can even enter invalid numbers, such as 12.34.56.</li></ol><p>If you&#39;re happy with that – if you&#39;re happy that the text field allows any input, and only validates its numbers and updates its state when the user presses Return – then you&#39;re good to go.</p><p>However, if you want to try to fix some those you&#39;ll soon hit more problems. For example, you might try to attach the <code>.keyboardType(.decimalPad)</code> modifier to your text field in order to restrict it to numbers and decimal point only. However, now:</p><ol><li>The user can still enter multiple decimal points before validation happens.</li><li>By default, the decimal pad keyboard has no Return key to hide the keyboard; you&#39;ll need to add one yourself.</li></ol><p>I wish there were a nice workaround for this, but I&#39;m afraid there is not – not without rolling your own wrapper around <code>UITextField</code>, that is. In the meantime, you either accept the shortcomings of the existing functionality, or use an alternative input mechanism such as <code>Stepper</code>.</p>",6),T={class:"hint-container details"},F=n("summary",null,"Similar solutions…",-1);function H(c,S){const t=p("VPCard"),i=p("FontIcon");return m(),u("div",null,[n("h1",f,[n("a",k,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(t,a(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,g,s(t,a(e({title:"How to format a TextField for numbers | SwiftUI by Example",desc:"How to format a TextField for numbers",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-format-a-textfield-for-numbers",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",v,[s(i,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",x,[s(i,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),_,n("details",T,[F,s(t,a(e({title:"How to format text inside text views | SwiftUI by Example",desc:"How to format text inside text views",link:"/hackingwithswift.com/swiftui/how-to-format-text-inside-text-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"How to format dates inside text views | SwiftUI by Example",desc:"How to format dates inside text views",link:"/hackingwithswift.com/swiftui/how-to-format-dates-inside-text-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"How to make a TextField expand vertically as the user types | SwiftUI by Example",desc:"How to make a TextField expand vertically as the user types",link:"/hackingwithswift.com/swiftui/how-to-make-a-textfield-expand-vertically-as-the-user-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"How to dismiss the keyboard for a TextField | SwiftUI by Example",desc:"How to dismiss the keyboard for a TextField",link:"/hackingwithswift.com/swiftui/how-to-dismiss-the-keyboard-for-a-textfield.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(e({title:"How to add a TextField to an alert | SwiftUI by Example",desc:"How to add a TextField to an alert",link:"/hackingwithswift.com/swiftui/how-to-add-a-textfield-to-an-alert.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const V=r(h,[["render",H],["__file","how-to-format-a-textfield-for-numbers.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-format-a-textfield-for-numbers.html","title":"How to format a TextField for numbers","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to format a TextField for numbers","description":"Article(s) > How to format a TextField for numbers","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to format a TextField for numbers"},{"property":"og:description","content":"How to format a TextField for numbers"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-format-a-textfield-for-numbers.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-format-a-textfield-for-numbers.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to format a TextField for numbers"}],["meta",{"property":"og:description","content":"Article(s) > How to format a TextField for numbers"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-format-a-textfield-for-numbers-1~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to format a TextField for numbers\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-format-a-textfield-for-numbers-1~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.71,"words":813},"filePathRelative":"hackingwithswift.com/swiftui/how-to-format-a-textfield-for-numbers.md","excerpt":"\\n"}');export{V as comp,R as data};
