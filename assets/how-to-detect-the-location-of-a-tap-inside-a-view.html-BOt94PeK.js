import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as k,e as s,n as t,g as e,d as o,f as c,r as i,o as d}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),b=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>Updated for iOS 16</strong></p><p>SwiftUI has an <code>onTapGesture()</code> variant that lets us detect the exact location of a tap, either relative to a view&#39;s bounds or globally on the whole screen.</p><p>As an example, this displays a red circle, and prints the relative location of any taps it receives:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">{</span> location <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tapped at </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">location</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view-1.zip",target:"_blank",rel:"noopener noreferrer"},y=c(`<p>“Relative location” means relative to the circle&#39;s bounds – as the circle is 100x100 in size, if you tap the exact center it would print 50x50 regardless of where the circle was placed on the screen.</p><p>If you want the <em>global</em> location – i.e., where your tap took place relative to the top-left corner of the entire screen – you should add the <code>coordinateSpace</code> parameter like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onTapGesture</span><span class="token punctuation">(</span>coordinateSpace<span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span> location <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tapped at </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">location</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),T={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view-2.zip",target:"_blank",rel:"noopener noreferrer"},I=c(`<p>This <code>onTapGesture()</code> variant is available from iOS 16 and later. If you&#39;re looking to do something similar on earlier versions of iOS, we can build something similar by wrapping UIKit and sprinkling some SwiftUI sugar on top to make it easy to use.</p><p>This takes quite a bit of code, so I want to list the exact steps we&#39;ll be following first, then provide all the code with extra comments afterwards. The end result is a reusable view modifier you can attach to any view – text, image, etc – that can detect touches starting, ending, and moving, depending on what you want.</p><p>First, the steps:</p><ol><li>We need to create a <code>UIViewRepresentable</code> that can wrap a custom <code>UIView</code> subclass.</li><li>This <code>UIView</code> subclass will implement <code>touchesBegan()</code>, <code>touchesMoved()</code>, <code>touchesEnded()</code>, and <code>touchesCancelled()</code>, so we can track the user&#39;s touches as they happen.</li><li>Each of those <code>UIView</code> methods will find the touch&#39;s location in the view, then send it upwards as a <code>CGPoint</code> if appropriate.</li><li>We&#39;ll decide the “if appropriate” part based on two things: which touch events the user has asked us to track (perhaps they just want <code>touchesBegan()</code> for example), and whether they want us to carry on tracking events after their finger has left the view.</li><li>We&#39;ll create a new struct that conforms to <code>ViewModifier</code>, using the <code>overlay()</code> modifier to place our <code>UIViewRepresentable</code> over any other view. Overlays automatically resize themselves to be the same as their parent view, which is perfect here.</li><li>Create a <code>View</code> extension to add an <code>onTouch()</code> modifier, which makes the finished API pleasant to use. It&#39;s a lot, I know, but it does work really well as you&#39;ll see. Here&#39;s the code:</li></ol><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Our UIKit to SwiftUI wrapper view</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">TouchLocatingView</span><span class="token punctuation">:</span> <span class="token class-name">UIViewRepresentable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The types of touches users want to be notified about</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">TouchType</span><span class="token punctuation">:</span> <span class="token class-name">OptionSet</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> rawValue<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">static</span> <span class="token keyword">let</span> started <span class="token operator">=</span> <span class="token class-name">TouchType</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">static</span> <span class="token keyword">let</span> moved <span class="token operator">=</span> <span class="token class-name">TouchType</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">static</span> <span class="token keyword">let</span> ended <span class="token operator">=</span> <span class="token class-name">TouchType</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">static</span> <span class="token keyword">let</span> all<span class="token punctuation">:</span> <span class="token class-name">TouchType</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>started<span class="token punctuation">,</span> <span class="token punctuation">.</span>moved<span class="token punctuation">,</span> <span class="token punctuation">.</span>ended<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// A closure to call when touch data has arrived</span></span>
<span class="line">    <span class="token keyword">var</span> onUpdate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">CGPoint</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// The list of touch types to be notified of</span></span>
<span class="line">    <span class="token keyword">var</span> types <span class="token operator">=</span> <span class="token class-name">TouchType</span><span class="token punctuation">.</span>all</span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Whether touch information should continue after the user&#39;s finger has left the view</span></span>
<span class="line">    <span class="token keyword">var</span> limitToBounds <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">makeUIView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TouchLocatingUIView</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Create the underlying UIView, passing in our configuration</span></span>
<span class="line">        <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token class-name">TouchLocatingUIView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        view<span class="token punctuation">.</span>onUpdate <span class="token operator">=</span> onUpdate</span>
<span class="line">        view<span class="token punctuation">.</span>touchTypes <span class="token operator">=</span> types</span>
<span class="line">        view<span class="token punctuation">.</span>limitToBounds <span class="token operator">=</span> limitToBounds</span>
<span class="line">        <span class="token keyword">return</span> view</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">updateUIView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> uiView<span class="token punctuation">:</span> <span class="token class-name">TouchLocatingUIView</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// The internal UIView responsible for catching taps</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">TouchLocatingUIView</span><span class="token punctuation">:</span> <span class="token class-name">UIView</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Internal copies of our settings</span></span>
<span class="line">        <span class="token keyword">var</span> onUpdate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CGPoint</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span><span class="token operator">?</span></span>
<span class="line">        <span class="token keyword">var</span> touchTypes<span class="token punctuation">:</span> <span class="token class-name">TouchLocatingView</span><span class="token punctuation">.</span><span class="token class-name">TouchType</span> <span class="token operator">=</span> <span class="token punctuation">.</span>all</span>
<span class="line">        <span class="token keyword">var</span> limitToBounds <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Our main initializer, making sure interaction is enabled.</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> frame<span class="token punctuation">)</span></span>
<span class="line">            isUserInteractionEnabled <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Just in case you&#39;re using storyboards!</span></span>
<span class="line">        <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> <span class="token class-name">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> coder<span class="token punctuation">)</span></span>
<span class="line">            isUserInteractionEnabled <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Triggered when a touch starts.</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesBegan</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">send</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> forEvent<span class="token punctuation">:</span> <span class="token punctuation">.</span>started<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Triggered when an existing touch moves.</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesMoved</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">send</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> forEvent<span class="token punctuation">:</span> <span class="token punctuation">.</span>moved<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Triggered when the user lifts a finger.</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesEnded</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">send</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> forEvent<span class="token punctuation">:</span> <span class="token punctuation">.</span>ended<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Triggered when the user&#39;s touch is interrupted, e.g. by a low battery alert.</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesCancelled</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">send</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> forEvent<span class="token punctuation">:</span> <span class="token punctuation">.</span>ended<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Send a touch location only if the user asked for it</span></span>
<span class="line">        <span class="token keyword">func</span> <span class="token function-definition function">send</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> location<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> forEvent event<span class="token punctuation">:</span> <span class="token class-name">TouchLocatingView</span><span class="token punctuation">.</span><span class="token class-name">TouchType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">guard</span> touchTypes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> limitToBounds <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">||</span> bounds<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                onUpdate<span class="token operator">?</span><span class="token punctuation">(</span><span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A custom SwiftUI view modifier that overlays a view with our UIView subclass.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">TouchLocater</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> type<span class="token punctuation">:</span> <span class="token class-name">TouchLocatingView</span><span class="token punctuation">.</span><span class="token class-name">TouchType</span> <span class="token operator">=</span> <span class="token punctuation">.</span>all</span>
<span class="line">    <span class="token keyword">var</span> limitToBounds <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token keyword">let</span> perform<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">CGPoint</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        content</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token class-name">TouchLocatingView</span><span class="token punctuation">(</span>onUpdate<span class="token punctuation">:</span> perform<span class="token punctuation">,</span> types<span class="token punctuation">:</span> type<span class="token punctuation">,</span> limitToBounds<span class="token punctuation">:</span> limitToBounds<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A new method on View that makes it easier to apply our touch locater view.</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">onTouch</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">TouchLocatingView</span><span class="token punctuation">.</span><span class="token class-name">TouchType</span> <span class="token operator">=</span> <span class="token punctuation">.</span>all<span class="token punctuation">,</span> limitToBounds<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> perform<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">CGPoint</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">TouchLocater</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> type<span class="token punctuation">,</span> limitToBounds<span class="token punctuation">:</span> limitToBounds<span class="token punctuation">,</span> perform<span class="token punctuation">:</span> perform<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Finally, here&#39;s some example code you can try out.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This will track all touches, inside bounds only.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span>perform<span class="token punctuation">:</span> updateLocation<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This will track all touches, ignoring bounds – you can start a touch inside, then carry on moving it outside.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span>limitToBounds<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> perform<span class="token punctuation">:</span> updateLocation<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This will track only starting touches, inside bounds only.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token punctuation">.</span>started<span class="token punctuation">,</span> perform<span class="token punctuation">:</span> updateLocation<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">updateLocation</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> location<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),V={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view-3.zip",target:"_blank",rel:"noopener noreferrer"},_={class:"hint-container details"},U=n("summary",null,"Similar solutions…",-1);function x(l,S){const a=i("VPCard"),p=i("FontIcon");return d(),r("div",null,[n("h1",v,[n("a",w,[n("span",null,k(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,f,s(a,t(e({title:"How to detect the location of a tap inside a view | SwiftUI by Example",desc:"How to detect the location of a tap inside a view",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",g,[s(p,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",T,[s(p,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),I,n("blockquote",null,[n("p",null,[n("a",V,[s(p,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),n("details",_,[U,s(a,t(e({title:"How to read tap and double-tap gestures | SwiftUI by Example",desc:"How to read tap and double-tap gestures",link:"/hackingwithswift.com/swiftui/how-to-read-tap-and-double-tap-gestures.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to dynamically adjust the appearance of a view based on its size and location | SwiftUI by Example",desc:"How to dynamically adjust the appearance of a view based on its size and location",link:"/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to make a scroll view move to a location using ScrollViewReader | SwiftUI by Example",desc:"How to make a scroll view move to a location using ScrollViewReader",link:"/hackingwithswift.com/swiftui/how-to-make-a-scroll-view-move-to-a-location-using-scrollviewreader.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to read the user's location using LocationButton | SwiftUI by Example",desc:"How to read the user's location using LocationButton",link:"/hackingwithswift.com/swiftui/how-to-read-the-users-location-using-locationbutton.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to draw a border inside a view | SwiftUI by Example",desc:"How to draw a border inside a view",link:"/hackingwithswift.com/swiftui/how-to-draw-a-border-inside-a-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const C=u(m,[["render",x],["__file","how-to-detect-the-location-of-a-tap-inside-a-view.html.vue"]]),H=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view.html","title":"How to detect the location of a tap inside a view","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to detect the location of a tap inside a view","description":"Article(s) > How to detect the location of a tap inside a view","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to detect the location of a tap inside a view"},{"property":"og:description","content":"How to detect the location of a tap inside a view"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to detect the location of a tap inside a view"}],["meta",{"property":"og:description","content":"Article(s) > How to detect the location of a tap inside a view"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to detect the location of a tap inside a view\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.9,"words":1471},"filePathRelative":"hackingwithswift.com/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view.md","excerpt":"\\n"}');export{C as comp,H as data};
