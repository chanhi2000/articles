import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as e,g as t,d,f as c,r as o,o as k}from"./app-BgNevrm5.js";const m={},h={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Swift does not provide a built-in way of converting an <code>AsyncSequence</code> into a regular <code>Sequence</code>, but often you’ll want to make this conversion yourself so you don’t need to keep awaiting results to come back in the future.</p><p>The easiest thing to do is call <code>reduce(into:)</code> on the sequence, appending each item to an array of the sequence’s element type. To make this more reusable, I’d recommend adding an extension such as this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">AsyncSequence</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">rethrows</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Element</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">reduce</span><span class="token punctuation">(</span>into<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Element</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token short-argument">$1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, you can now call <code>collect()</code> on any async sequence in order to get a simple array of its values. Because this is an async operation, you must call it using <code>await</code> like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">AsyncSequence</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">rethrows</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Element</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">reduce</span><span class="token punctuation">(</span>into<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Element</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token short-argument">$1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getNumberArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/random-numbers.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> numbers <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span><span class="token function">compactMap</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token keyword">await</span> numbers<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">getNumberArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),v={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-convert-an-asyncsequence-into-a-sequence-1.zip",target:"_blank",rel:"noopener noreferrer"},b=c('<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Because we’ve made <code>collect()</code> use <code>rethrows</code>, you only need to call it using <code>try</code> if the call to <code>reduce()</code> would normally throw, so if you have an async sequence that doesn’t throw errors you can skip <code>try</code> entirely.</p></div>',1),q={class:"hint-container details"},S=n("summary",null,"Similar solutions…",-1);function _(p,A){const a=o("VPCard"),i=o("FontIcon");return k(),r("div",null,[n("h1",h,[n("a",y,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,f,s(a,e(t({title:"How to convert an AsyncSequence into a Sequence | Swift Concurrency by Example",desc:"How to convert an AsyncSequence into a Sequence",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-convert-an-asyncsequence-into-a-sequence",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("blockquote",null,[n("p",null,[n("a",v,[s(i,{icon:"fas fa-file-zipper"}),d("Download this as an Xcode project")])])]),b,n("details",q,[S,s(a,e(t({title:"What’s the difference between Sequence, AsyncSequence, and AsyncStream? | Swift Concurrency by Example",desc:"What’s the difference between Sequence, AsyncSequence, and AsyncStream?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-sequence-asyncsequence-and-asyncstream.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to manipulate an AsyncSequence using map(), filter(), and more | Swift Concurrency by Example",desc:"How to manipulate an AsyncSequence using map(), filter(), and more",link:"/hackingwithswift.com/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to loop over an AsyncSequence using for await | Swift Concurrency by Example",desc:"How to loop over an AsyncSequence using for await",link:"/hackingwithswift.com/concurrency/how-to-loop-over-an-asyncsequence-using-for-await.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to use continuations to convert completion handlers into async functions | Swift Concurrency by Example",desc:"How to use continuations to convert completion handlers into async functions",link:"/hackingwithswift.com/concurrency/how-to-use-continuations-to-convert-completion-handlers-into-async-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const E=l(m,[["render",_],["__file","how-to-convert-an-asyncsequence-into-a-sequence.html.vue"]]),C=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-convert-an-asyncsequence-into-a-sequence.html","title":"How to convert an AsyncSequence into a Sequence","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to convert an AsyncSequence into a Sequence","description":"Article(s) > How to convert an AsyncSequence into a Sequence","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to convert an AsyncSequence into a Sequence"},{"property":"og:description","content":"How to convert an AsyncSequence into a Sequence"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-convert-an-asyncsequence-into-a-sequence.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-convert-an-asyncsequence-into-a-sequence.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to convert an AsyncSequence into a Sequence"}],["meta",{"property":"og:description","content":"Article(s) > How to convert an AsyncSequence into a Sequence"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to convert an AsyncSequence into a Sequence\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/concurrency/what-are-tasks-and-task-groups.md","date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.98,"words":594},"filePathRelative":"hackingwithswift.com/concurrency/how-to-convert-an-asyncsequence-into-a-sequence.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{E as comp,C as data};
