import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as t,g as e,d as i,a as d,f as k,r as o,o as m}from"./app-BgNevrm5.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.0")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"apple/swift-evolution",-1),q=k(`<p>In its most basic form, the new string interpolation system lets us control how objects appear in strings. Swift has default behavior for structs that is helpful for debugging, because it prints the struct name followed by all its properties. But if you were working with classes (that don’t have this behavior), or wanted to format that output so it could be user-facing, then you could use the new string interpolation system.</p><p>For example, if we had a struct like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we wanted to add a special string interpolation for that so that we printed users neatly, we would add an extension to <code>String.StringInterpolation</code> with a new <code>appendInterpolation()</code> method. Swift already has several of these built in, and uses the interpolation <em>type</em> – in this case <code>User</code> to figure out which method to call.</p><p>In this case, we’re going to add an implementation that puts the user’s name and age into a single string, then calls one of the built-in <code>appendInterpolation()</code> methods to add that to our string, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;My name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">value<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> and I&#39;m </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">value<span class="token punctuation">.</span>age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can create a user and print out their data:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Guybrush Threepwood&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User details: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print <strong>User details: My name is Guybrush Threepwood and I&#39;m 33</strong>, whereas with the custom string interpolation it would have printed <strong>User details: User(name: &quot;Guybrush Threepwood&quot;, age: 33)</strong>. Of course, that functionality is no different from just implementing the <code>CustomStringConvertible</code> protocol, so let’s move on to more advanced usages.</p><p>Your custom interpolation method can take as many parameters as you need, labeled or unlabeled. For example, we could add an interpolation to print numbers using various styles, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">NumberFormatter</span><span class="token punctuation">.</span><span class="token class-name">Style</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> formatter <span class="token operator">=</span> <span class="token class-name">NumberFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        formatter<span class="token punctuation">.</span>numberStyle <span class="token operator">=</span> style</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> result <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> number <span class="token keyword">as</span> <span class="token class-name">NSNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">appendLiteral</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>NumberFormatter</code> class has a number of styles, including currency ($72.83), ordinal (1st, 12th), and spell out (five, forty-three). So, we could create a random number and have it spelled out into a string like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> lucky <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;The lucky number this week is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>spellOut</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>lucky<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can call <code>appendLiteral()</code> as many times as you need, or even not at all if necessary. For example, we could add a string interpolation to repeat a string multiple times, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span><span class="token keyword">repeat</span> str<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> count <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">appendLiteral</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Baby shark </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token keyword">repeat</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;doo &quot;</span></span><span class="token punctuation">,</span> <span class="token number">6</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And, as these are just regular methods, you can use Swift’s full range of functionality. For example, we might add an interpolation that joins an array of strings together, but if that array is empty execute a closure that returns a string instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> values<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">,</span> empty defaultValue<span class="token punctuation">:</span> <span class="token attribute atrule">@autoclosure</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> values<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">appendLiteral</span><span class="token punctuation">(</span><span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">appendLiteral</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;, &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Harry&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ron&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Hermione&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;List of students: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">names<span class="token punctuation">,</span> empty<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;No one&quot;</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using <code>@autoclosure</code> means that we can use simple values or call complex functions for the default value, but none of that work will be done unless <code>values.count</code> is zero.</p><p>With a combination of the <code>ExpressibleByStringLiteral</code> and <code>ExpressibleByStringInterpolation</code> protocols it’s now possible to create whole types using string interpolation, and if we add <code>CustomStringConvertible</code> we can even make those types print as strings however we want.</p><p>To make this work, we need to fulfill some specific criteria:</p><ul><li>Whatever type we create should conform to <code>ExpressibleByStringLiteral</code>, <code>ExpressibleByStringInterpolation</code>, and <code>CustomStringConvertible</code>. The latter is only needed if you want to customize the way the type is printed.</li><li><em>Inside</em> your type needs to be a nested struct called <code>StringInterpolation</code> that conforms to <code>StringInterpolationProtocol</code>.</li><li>The nested struct needs to have an initializer that accepts two integers telling us roughly how much data it can expect.</li><li>It also needs to implement an <code>appendLiteral()</code> method, as well as one or more <code>appendInterpolation()</code> methods.</li><li>Your main type needs to have two initializers that allow it to be created from string literals and string interpolations.</li></ul><p>We can put all that together into an example type that can construct HTML from various common elements. The “scratchpad” inside the nested <code>StringInterpolation</code> struct will be a string: each time a new literal or interpolation is added, we’ll append it to the string. To help you see exactly what’s going on, I’ve added some <code>print()</code> calls inside the various append methods.</p><p>Here’s the code.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">HTMLComponent</span><span class="token punctuation">:</span> <span class="token class-name">ExpressibleByStringLiteral</span><span class="token punctuation">,</span> <span class="token class-name">ExpressibleByStringInterpolation</span><span class="token punctuation">,</span> <span class="token class-name">CustomStringConvertible</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">StringInterpolation</span><span class="token punctuation">:</span> <span class="token class-name">StringInterpolationProtocol</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// start with an empty string</span></span>
<span class="line">        <span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// allocate enough space to hold twice the amount of literal text</span></span>
<span class="line">        <span class="token keyword">init</span><span class="token punctuation">(</span>literalCapacity<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> interpolationCount<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            output<span class="token punctuation">.</span><span class="token function">reserveCapacity</span><span class="token punctuation">(</span>literalCapacity <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// a hard-coded piece of text – just add it</span></span>
<span class="line">        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendLiteral</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> literal<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Appending </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">literal</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            output<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>literal<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// a Twitter username – add it as a link</span></span>
<span class="line">        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>twitter<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Appending </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">twitter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            output<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;&lt;a href=\\&quot;https://twitter/</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">twitter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">\\&quot;&gt;@</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">twitter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&lt;/a&gt;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// an email address – add it using mailto</span></span>
<span class="line">        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Appending </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">email</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            output<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;&lt;a href=\\&quot;mailto:</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">email</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">\\&quot;&gt;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">email</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&lt;/a&gt;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// the finished text for this whole component</span></span>
<span class="line">    <span class="token keyword">let</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// create an instance from a literal string</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>stringLiteral value<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        description <span class="token operator">=</span> value</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// create an instance from an interpolated string</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>stringInterpolation<span class="token punctuation">:</span> <span class="token class-name">StringInterpolation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        description <span class="token operator">=</span> stringInterpolation<span class="token punctuation">.</span>output</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now create and use an instance of <code>HTMLComponent</code> using string interpolation like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">HTMLComponent</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;You should follow me on Twitter </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">twitter<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;twostraws&quot;</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, or you can email me at </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">email<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;paul@hackingwithswift.com&quot;</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Thanks to the <code>print()</code> calls that were scattered inside, you’ll see exactly how the string interpolation functionality works: you’ll see “Appending You should follow me on Twitter”, “Appending twostraws”, “Appending , or you can email me at “, “Appending paul@hackingwithswift.com”, and finally “Appending .” – each part triggers a method call, and is added to our string.</p>`,27),I={class:"hint-container details"},_=n("summary",null,"Other Changes in Swift 5.0",-1),C={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-2-to-5-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function x(l,T){const a=o("VPCard"),p=o("FontIcon");return m(),r("div",null,[n("h1",h,[n("a",v,[n("span",null,u(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,w,s(a,t(e({title:"Customizing string interpolation | Changes in Swift 5.0",desc:"Customizing string interpolation",link:"https://hackingwithswift.com/swift/5.0/string-interpolation",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",y,[i("SE-0228 ("),s(p,{icon:"iconfont icon-github"}),S,i(")")]),i(" dramatically revamped Swift’s string interpolation system so that it’s more efficient and more flexible, and it’s creating a whole new range of features that were previously impossible.")]),q,n("details",I,[_,s(a,t(e({title:"Raw strings | Changes in Swift 5.0",desc:"Raw strings",link:"/hackingwithswift.com/swift/5.0/raw-strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"A standard Result type | Changes in Swift 5.0",desc:"A standard Result type",link:"/hackingwithswift.com/swift/5.0/result.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Customizing string interpolation | Changes in Swift 5.0",
  "desc": "Customizing string interpolation",
  "link": "/hackingwithswift.com/swift/5.0/string-interpolation.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Dynamically callable types | Changes in Swift 5.0",desc:"Dynamically callable types",link:"/hackingwithswift.com/swift/5.0/dynamically-callable-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Handling future enum cases | Changes in Swift 5.0",desc:"Handling future enum cases",link:"/hackingwithswift.com/swift/5.0/handling-future-enum-cases.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Flattening nested optionals resulting from try? | Changes in Swift 5.0",desc:"Flattening nested optionals resulting from try?",link:"/hackingwithswift.com/swift/5.0/flattening-optionals.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Checking for integer multiples | Changes in Swift 5.0",desc:"Checking for integer multiples",link:"/hackingwithswift.com/swift/5.0/integer-multiples.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Transforming and unwrapping dictionary values with compactMapValues() | Changes in Swift 5.0",desc:"Transforming and unwrapping dictionary values with compactMapValues()",link:"/hackingwithswift.com/swift/5.0/compactmapvalues.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",C,[s(p,{icon:"fas fa-file-zipper"}),i("Download Swift 5.0 playground")])])])])}const j=c(g,[["render",x],["__file","string-interpolation.html.vue"]]),L=JSON.parse('{"path":"/hackingwithswift.com/swift/5.0/string-interpolation.html","title":"Customizing string interpolation","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Customizing string interpolation","description":"Article(s) > Customizing string interpolation","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Customizing string interpolation"},{"property":"og:description","content":"Customizing string interpolation"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/string-interpolation.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/string-interpolation.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Customizing string interpolation"}],["meta",{"property":"og:description","content":"Article(s) > Customizing string interpolation"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Customizing string interpolation\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.74,"words":1422},"filePathRelative":"hackingwithswift.com/swift/5.0/string-interpolation.md","excerpt":"\\n"}');export{j as comp,L as data};
