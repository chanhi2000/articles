import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,b as n,t as f,e as a,n as u,g as d,w as e,d as s,f as o,r as i,o as y}from"./app-BgNevrm5.js";const w={},C={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},A=n("hr",null,null,-1),x=n("p",null,"Caching is one of the simplest techniques to significantly improve your application's performance. It's the process of temporarily storing data in a faster access location. You will typically cache the results of expensive operations or frequently accessed data.",-1),P=n("p",null,"Caching allows subsequent requests for the same data to be served from the cache instead of fetching the data from its source.",-1),T=n("p",null,[s("ASP.NET Core offers several types of caches, such as "),n("code",null,"IMemoryCache"),s(", "),n("code",null,"IDistributedCache"),s(", and the upcoming "),n("code",null,"HybridCache"),s(" (.NET 9).")],-1),E={href:"https://learn.microsoft.com/en-us/aspnet/core/performance/caching/memory",target:"_blank",rel:"noopener noreferrer"},I=n("hr",null,null,-1),D=n("h2",{id:"how-caching-improves-application-performance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-caching-improves-application-performance"},[n("span",null,"How Caching Improves Application Performance")])],-1),M=n("p",null,"Caching improves your application's performance by reducing latency and server load while enhancing scalability and user experience.",-1),R=n("li",null,[n("strong",null,"Faster data retrieval"),s(": Cached data can be accessed much faster than retrieving it from the source (like a database or an API). Caches are typically stored in memory (RAM).")],-1),N=n("li",null,[n("strong",null,"Fewer database queries"),s(": Caching frequently accessed data reduces the number of database queries. This reduces the load on the database server.")],-1),q=n("li",null,[n("strong",null,"Lower CPU usage"),s(": Rendering web pages or processing API responses can consume significant CPU resources. Caching the results reduces the need for repetitive CPU-intensive tasks.")],-1),j=n("li",null,[n("strong",null,"Handling increased traffic"),s(": By reducing the load on backend systems, caching allows your application to handle more concurrent users and requests.")],-1),O=n("strong",null,"Distributed caching",-1),F={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},H=o(`<p>In a recent project I worked on, we used Redis to scale to more than 1,000,000 users. We only had one SQL Server instance with a read-replica for reporting. The power of caching, eh?</p><hr><h2 id="caching-abstractions-in-asp-net-core" tabindex="-1"><a class="header-anchor" href="#caching-abstractions-in-asp-net-core"><span>Caching Abstractions in ASP.NET Core</span></a></h2><p>ASP.NET Core provides two primary abstractions for working with caches:</p><ul><li><code>IMemoryCache</code>: Stores data in the memory of the web server. Simple to use but not suitable for distributed scenarios.</li><li><code>IDistributedCache</code>: Offers a more robust solution for distributed applications. It allows you to store cached data in a distributed cache like Redis.</li></ul><p>We have to register these services with DI to use them. <code>AddDistributedMemoryCache</code> will configure the in-memory implementation of <code>IDistributedCache</code>, which isn&#39;t distributed.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDistributedMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s how you can use the <code>IMemoryCache</code>. We will first check if the cached value is present and return it directly if it&#39;s there. Otherwise, we must fetch the value from the database and cache it for subsequent requests.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;products/{id}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">IMemoryCache</span> cache<span class="token punctuation">,</span> <span class="token class-name">AppDbContext</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Product</span> product<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            product <span class="token operator">=</span> context<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> cacheEntryOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheEntryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">SetAbsoluteExpiration</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">SetSlidingExpiration</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> product<span class="token punctuation">,</span> cacheEntryOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cache expiration is another important topic to discuss. We want to remove cache entries that aren&#39;t used and become stale. You can pass in the <code>MemoryCacheEntryOptions</code>, allowing you to configure cache expiration. For example, we can set the <code>AbsoluteExpiration</code> and <code>SlidingExpiration</code> values to control when the cache entry will expire.</p><hr><h2 id="cache-aside-pattern" tabindex="-1"><a class="header-anchor" href="#cache-aside-pattern"><span>Cache-Aside Pattern</span></a></h2><p>The cache-aside pattern is the most common caching strategy. Here&#39;s how it works:</p><ol><li><strong>Check the cache</strong>: Look for the requested data in the cache.</li><li><strong>Fetch from source (if cache miss)</strong>: If the data isn&#39;t in the cache, fetch it from the source.</li><li><strong>Update the cache</strong>: Store the fetched data in the cache for subsequent requests.</li></ol><figure><img src="https://milanjoavnovic.tech/blogs/mnw_093/cache_aside.png?imwidth=3840" alt="Cache-aside pattern." tabindex="0" loading="lazy"><figcaption>Cache-aside pattern.</figcaption></figure><p>Here&#39;s how you can implement the cache-aside pattern as an extension method for <code>IDistributedCache</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DistributedCacheExtensions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DistributedCacheEntryOptions</span> DefaultExpiration <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        AbsoluteExpirationRelativeToNow <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetOrCreateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">this</span> <span class="token class-name">IDistributedCache</span> cache<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Func<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> factory<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">DistributedCacheEntryOptions<span class="token punctuation">?</span></span> cacheOptions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> cachedData <span class="token operator">=</span> <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedData <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>cachedData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">SetStringAsync</span><span class="token punctuation">(</span></span>
<span class="line">            key<span class="token punctuation">,</span></span>
<span class="line">            JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            cacheOptions <span class="token operator">??</span> DefaultExpiration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re using <code>JsonSerializer</code> to manage serialization to and from a JSON string. The <code>SetStringAsync</code> method also accepts a <code>DistributedCacheEntryOptions</code> argument to control cache expiration.</p><p>Here&#39;s how we would use this extension method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;products/{id}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">IDistributedCache</span> cache<span class="token punctuation">,</span> <span class="token class-name">AppDbContext</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">GetOrCreateAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;products-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> productFromDb <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">FindAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> productFromDb<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="pros-and-cons-of-in-memory-caching" tabindex="-1"><a class="header-anchor" href="#pros-and-cons-of-in-memory-caching"><span>Pros and Cons of In-Memory Caching</span></a></h2>`,22),z=n("ul",null,[n("li",null,"Extremely fast"),n("li",null,"Simple to implement"),n("li",null,"No external dependencies")],-1),J=n("ul",null,[n("li",null,"Cache data is lost if the server restarts"),n("li",null,"Limited to the memory (RAM) of a single server"),n("li",null,"Cache data is not shared across multiple instances of your application")],-1),W=n("hr",null,null,-1),G=n("h2",{id:"distributed-caching-with-redis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#distributed-caching-with-redis"},[n("span",null,"Distributed Caching With Redis")])],-1),L={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"StackExchange.Redis",-1),U=o(`<p>However, there&#39;s also the <code>Microsoft.Extensions.Caching.StackExchangeRedis</code> library, allowing you to integrate Redis with <code>IDistributedCache</code>.</p><div class="language-pwsh line-numbers-mode" data-highlighter="prismjs" data-ext="pwsh" data-title="pwsh"><pre><code><span class="line">Install-Package Microsoft.Extensions.Caching.StackExchangeRedis</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here&#39;s how you can configure it with DI by providing a connection string to Redis:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">string</span></span> connectionString <span class="token operator">=</span> builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;Redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddStackExchangeRedisCache</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>Configuration <span class="token operator">=</span> connectionString<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An alternative approach is to register an <code>IConnectionMultiplexer</code> as a service. Then, we will use it to provide a function for the <code>ConnectionMultiplexerFactory</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">string</span></span> connectionString <span class="token operator">=</span> builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;Redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">IConnectionMultiplexer</span> connectionMultiplexer <span class="token operator">=</span></span>
<span class="line">    ConnectionMultiplexer<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>connectionMultiplexer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddStackExchangeRedisCache</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>ConnectionMultiplexerFactory <span class="token operator">=</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>connectionMultiplexer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, when you inject <code>IDistributedCache</code>, it will use Redis under the hood.</p><hr><h2 id="cache-stampede-and-hybridcache" tabindex="-1"><a class="header-anchor" href="#cache-stampede-and-hybridcache"><span>Cache Stampede and HybridCache</span></a></h2>`,9),B={href:"https://en.wikipedia.org/wiki/Cache_stampede",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"lock",-1),Z=n("code",null,"Semaphore",-1),Y=n("code",null,"SemaphoreSlim",-1),$=o(`<p>Here&#39;s how we could use <code>SemaphoreSlim</code> to introduce locking before fetching data:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DistributedCacheExtensions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">SemaphoreSlim</span> Semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SemaphoreSlim</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Arguments omitted for brevity</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetOrCreateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Fetch data from cache, and return if present</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Cache miss</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line highlighted">            <span class="token keyword">await</span> Semaphore<span class="token punctuation">.</span><span class="token function">WaitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Check if the data was added to the cache by another request</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// If not, proceed to fetch data and cache it</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">SetStringAsync</span><span class="token punctuation">(</span></span>
<span class="line">                key<span class="token punctuation">,</span></span>
<span class="line">                JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                cacheOptions <span class="token operator">??</span> DefaultExpiration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">finally</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Semaphore<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The previous implementation has a lock contention issue since all requests have to wait for the semaphore. A much better solution would be locking based on the <code>key</code> value.</p>`,3),Q=n("code",null,"HybridCache",-1),X=n("code",null,"IDistributedCache",-1),nn={href:"https://learn.microsoft.com/en-us/aspnet/core/performance/caching/hybrid",target:"_blank",rel:"noopener noreferrer"},sn=o('<hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Caching is a powerful technique for improving web application performance. ASP.NET Core&#39;s caching abstractions make it easy to implement various caching strategies.</p><p>We can choose from <code>IMemoryCache</code> for in-memory cache and <code>IDistributedCache</code> for distributed caching.</p><p>Here are a few guidelines to wrap up this week&#39;s issue:</p><ul><li>Use <code>IMemoryCache</code> for simple, in-memory caching</li><li>Implement the cache aside pattern to minimize database hits</li><li>Consider Redis as a high-performance distributed cache implementation</li><li>Use <code>IDistributedCache</code> for sharing cached data across multiple applications</li></ul><p>That&#39;s all for today.</p><p>See you next week.</p>',8);function an(h,en){const r=i("VPCard"),t=i("router-link"),m=i("SiteInfo"),c=i("FontIcon"),k=i("Tabs"),v=i("RouteLink");return y(),b("div",null,[n("h1",C,[n("a",_,[n("span",null,f(h.$frontmatter.title)+" 관련",1)])]),a(r,u(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(r,u(d({title:"Redis > Article(s)",desc:"Article(s)",link:"/data-science/redis/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",S,[n("ul",null,[n("li",null,[a(t,{to:"#how-caching-improves-application-performance"},{default:e(()=>[s("How Caching Improves Application Performance")]),_:1})]),n("li",null,[a(t,{to:"#caching-abstractions-in-asp-net-core"},{default:e(()=>[s("Caching Abstractions in ASP.NET Core")]),_:1})]),n("li",null,[a(t,{to:"#cache-aside-pattern"},{default:e(()=>[s("Cache-Aside Pattern")]),_:1})]),n("li",null,[a(t,{to:"#pros-and-cons-of-in-memory-caching"},{default:e(()=>[s("Pros and Cons of In-Memory Caching")]),_:1})]),n("li",null,[a(t,{to:"#distributed-caching-with-redis"},{default:e(()=>[s("Distributed Caching With Redis")]),_:1})]),n("li",null,[a(t,{to:"#cache-stampede-and-hybridcache"},{default:e(()=>[s("Cache Stampede and HybridCache")]),_:1})]),n("li",null,[a(t,{to:"#summary"},{default:e(()=>[s("Summary")]),_:1})])])]),A,a(m,{name:"Caching in ASP.NET Core: Improving Application Performance",desc:"Caching is one of the simplest techniques to significantly improve your application's performance. In this newsletter, we will explore how to implement caching in ASP.NET Core applications.",url:"https://milanjovanovic.tech/blog/caching-in-aspnetcore-improving-application-performance/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_093.png"}),x,P,T,n("p",null,[s("In this newsletter, we will explore how to implement "),n("a",E,[a(c,{icon:"fa-brands fa-microsoft"}),s("caching in ASP.NET Core")]),s(" applications.")]),I,D,M,n("ul",null,[R,N,q,j,n("li",null,[O,s(": Distributed cache solutions like "),n("a",F,[a(c,{icon:"iconfont icon-redis"}),s("Redis")]),s(" enable scaling the cache across multiple servers, further improving performance and resilience.")])]),H,a(k,{id:"131",data:[{id:"Pros:"},{id:"Cons:"}],active:0},{title0:e(({value:p,isActive:l})=>[s("Pros:")]),title1:e(({value:p,isActive:l})=>[s("Cons:")]),tab0:e(({value:p,isActive:l})=>[z]),tab1:e(({value:p,isActive:l})=>[J]),_:1}),W,G,n("p",null,[n("a",L,[a(c,{icon:"iconfont icon-redis"}),s("Redis")]),s(" is a popular in-memory data store often used as a high-performance distributed cache. To use Redis in your ASP.NET Core application, you can use the "),V,s(" library.")]),U,n("p",null,[s("The in-memory cache implementations in ASP.NET Core are susceptible to race conditions, which can cause a cache stampede. A "),n("a",B,[a(c,{icon:"fa-brands fa-wikipedia-w"}),s("cache stampede")]),s(" happens when concurrent requests encounter a cache miss and try to fetch the data from the source. This can overload your application and negate the benefits of caching.")]),n("p",null,[s("Locking is one solution for the cache stampede problem. .NET offers many options for "),a(v,{to:"/milanjovanovic.tech/introduction-to-locking-and-concurrency-control-in-dotnet-6.html"},{default:e(()=>[s("locking and concurrency control")]),_:1}),s(". The most commonly used locking primitives are the "),K,s(" statement and the "),Z,s(" (or "),Y,s(") class.")]),$,n("p",null,[s(".NET 9 introduces a new caching abstraction called "),Q,s(", which aims to solve the shortcomings of "),X,s(". Learn more about this in the "),n("a",nn,[a(c,{icon:"fa-brands fa-microsoft"}),s("Hybrid cache documentation")]),s(".")]),sn])}const on=g(w,[["render",an],["__file","caching-in-aspnetcore-improving-application-performance.html.vue"]]),pn=JSON.parse('{"path":"/milanjovanovic.tech/caching-in-aspnetcore-improving-application-performance.html","title":"Caching in ASP.NET Core: Improving Application Performance","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Caching in ASP.NET Core: Improving Application Performance","description":"Article(s) > Caching in ASP.NET Core: Improving Application Performance","icon":"iconfont icon-csharp","category":["C#","DotNet","Redis","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","redis"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Caching in ASP.NET Core: Improving Application Performance"},{"property":"og:description","content":"Caching in ASP.NET Core: Improving Application Performance"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/caching-in-aspnetcore-improving-application-performance.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/caching-in-aspnetcore-improving-application-performance.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Caching in ASP.NET Core: Improving Application Performance"}],["meta",{"property":"og:description","content":"Article(s) > Caching in ASP.NET Core: Improving Application Performance"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_093.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_093.png"}],["meta",{"name":"twitter:image:alt","content":"Caching in ASP.NET Core: Improving Application Performance"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2024-06-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Caching in ASP.NET Core: Improving Application Performance\\",\\"image\\":[\\"https://milanjoavnovic.tech/blogs/mnw_093/cache_aside.png?imwidth=3840\\"],\\"datePublished\\":\\"2024-06-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2024-06-08T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_093.png"},"headers":[{"level":2,"title":"How Caching Improves Application Performance","slug":"how-caching-improves-application-performance","link":"#how-caching-improves-application-performance","children":[]},{"level":2,"title":"Caching Abstractions in ASP.NET Core","slug":"caching-abstractions-in-asp-net-core","link":"#caching-abstractions-in-asp-net-core","children":[]},{"level":2,"title":"Cache-Aside Pattern","slug":"cache-aside-pattern","link":"#cache-aside-pattern","children":[]},{"level":2,"title":"Pros and Cons of In-Memory Caching","slug":"pros-and-cons-of-in-memory-caching","link":"#pros-and-cons-of-in-memory-caching","children":[]},{"level":2,"title":"Distributed Caching With Redis","slug":"distributed-caching-with-redis","link":"#distributed-caching-with-redis","children":[]},{"level":2,"title":"Cache Stampede and HybridCache","slug":"cache-stampede-and-hybridcache","link":"#cache-stampede-and-hybridcache","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.82,"words":1447},"filePathRelative":"milanjovanovic.tech/caching-in-aspnetcore-improving-application-performance.md","localizedDate":"2024년 6월 8일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{on as comp,pn as data};
