import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,t as r,e as a,n as e,g as n,f as c,r as l,o as u}from"./app-BgNevrm5.js";const d={},h={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},k=t("nav",{class:"table-of-contents"},[t("ul")],-1),w=t("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Sorting SwiftData queries is either done with a key path for simple sorts, or an array of <code>SortDescriptor</code> for more complex sorts. Some query variants – e.g. creating a <code>FetchDescriptor</code> by hand – only support the array approach, whereas using <code>@Query</code> supports both.</p><p>For the simplest approach using <code>@Query</code>, you can specify your sort order as a key path on the model you’re querying. So, if we had a <code>Movie</code> model, we could load all movies sorted alphabetically by their name like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And if you wanted a <em>descending</em> alphabetical sort, we’d use this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can even dig into relationship data, for example sorting by the name of a movie’s director:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>director<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This sort key path can be any directly comparable property of your model, so we could sort by movie name, movie release date, director age, or anything similar.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Although you can make your models conform to <code>Comparable</code> and use them in these sort orders, it will not work as intended. Behind the scenes SwiftData will insert your model to its own table with a primary key integer, then sort <em>by that integer</em> – you’re effectively sorting by when each object was inserted into your context.</p></div><p>To get more advanced sorting, you can specify an array of <code>SortDescriptor</code>. This approach works much the same with both <code>@Query</code> and <code>FetchDescriptor</code>, which does make life a little easier. The advantage of this approach is that you can specify multiple sort orders to have them applied in order: if the first two fields sort the same for two objects, then they are sorted by the second field, then the third, and so on.</p><p>For example, we could sort a list of movies alphabetically, then release date reverse, then finally by director name:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>director<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are lots of movies called “The Awakening” (over 30!), and it’s not <em>impossible</em> to have two movies with the same name and same release date, but it would be supremely unlikely to have name, release date, <em>and</em> director name all be the same.</p><p>As I said, this same approach works great with a standalone <code>FetchDescriptor</code>, although here the type inference for key paths works a little better so we can skip the model name:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> descriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function f(o,y){const s=l("VPCard");return u(),p("div",null,[t("h1",h,[t("a",m,[t("span",null,r(o.$frontmatter.title)+" 관련",1)])]),a(s,e(n({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,w,a(s,e(n({title:"How to sort SwiftData queries using key paths or SortDescriptor | SwiftData by Example",desc:"How to sort SwiftData queries using key paths or SortDescriptor",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-sort-swiftdata-queries-using-key-paths-or-sortdescriptor",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g])}const S=i(d,[["render",f],["__file","how-to-sort-swiftdata-queries-using-key-paths-or-sortdescriptor.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-sort-swiftdata-queries-using-key-paths-or-sortdescriptor.html","title":"How to sort SwiftData queries using key paths or SortDescriptor","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to sort SwiftData queries using key paths or SortDescriptor","description":"Article(s) > How to sort SwiftData queries using key paths or SortDescriptor","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to sort SwiftData queries using key paths or SortDescriptor"},{"property":"og:description","content":"How to sort SwiftData queries using key paths or SortDescriptor"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-sort-swiftdata-queries-using-key-paths-or-sortdescriptor.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-sort-swiftdata-queries-using-key-paths-or-sortdescriptor.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to sort SwiftData queries using key paths or SortDescriptor"}],["meta",{"property":"og:description","content":"Article(s) > How to sort SwiftData queries using key paths or SortDescriptor"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to sort SwiftData queries using key paths or SortDescriptor\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.95,"words":586},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-sort-swiftdata-queries-using-key-paths-or-sortdescriptor.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{S as comp,D as data};
