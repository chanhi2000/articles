import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as e,g as t,d as o,f as c,r as l,o as k}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),b=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>There are only three differences between creating an <code>AsyncSequence</code> and creating a regular <code>Sequence</code>:</p><ol><li>We need to conform to the <code>AsyncSequence</code> and <code>AsyncIteratorProtocol</code> protocols.</li><li>The <code>next()</code> method of our iterator must be marked <code>async</code>.</li><li>We need to create a <code>makeAsyncIterator()</code> method rather than <code>makeIterator()</code>.</li></ol><p>That last point technically allows us to create one type that is both a synchronous and asynchronous sequence, although I’m not sure when that would be a good idea.</p><p>We’re going to build two async sequences so you can see how they work, one simple and one more realistic. First, the simple one, which is an async sequence that doubles numbers every time <code>next()</code> is called:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">DoubleGenerator</span><span class="token punctuation">:</span> <span class="token class-name">AsyncSequence</span><span class="token punctuation">,</span> <span class="token class-name">AsyncIteratorProtocol</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">typealias</span> <span class="token class-name">Element</span> <span class="token operator">=</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Element</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">defer</span> <span class="token punctuation">{</span> current <span class="token operator">&amp;*=</span> <span class="token number">2</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> current <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> current</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">makeAsyncIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">DoubleGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token class-name">DoubleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> number <span class="token keyword">in</span> sequence <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),f={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-create-a-custom-asyncsequence-1.zip",target:"_blank",rel:"noopener noreferrer"},g=c(`<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>In case you haven’t seen it before, <code>&amp;*=</code> multiples with overflow, meaning that rather than running out of room when the value goes beyond the highest number of a 64-bit integer, it will instead flip around to be negative. We use this to our advantage, returning <code>nil</code> when we reach that point.</p></div><p>If you prefer having a separate iterator struct, that also works as with <code>Sequence</code> and you don’t need to adjust the calling code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">DoubleGenerator</span><span class="token punctuation">:</span> <span class="token class-name">AsyncSequence</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">typealias</span> <span class="token class-name">Element</span> <span class="token operator">=</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">AsyncIterator</span><span class="token punctuation">:</span> <span class="token class-name">AsyncIteratorProtocol</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Element</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">defer</span> <span class="token punctuation">{</span> current <span class="token operator">&amp;*=</span> <span class="token number">2</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> current <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> current</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">makeAsyncIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">AsyncIterator</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">AsyncIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token class-name">DoubleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> number <span class="token keyword">in</span> sequence <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),q={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-create-a-custom-asyncsequence-2.zip",target:"_blank",rel:"noopener noreferrer"},A=c(`<p>Now let’s look at a more complex example, which will periodically fetch a URL that’s either local or remote, and send back any values that have changed from the previous request.</p><p>This is more complex for various reasons:</p><ol><li>Our <code>next()</code> method will be marked <code>throws</code>, so callers are responsible for handling loop errors.</li><li>Between checks we’re going to sleep for some number of seconds, so we don’t overload the network. This will be configurable when creating the watcher, but internally it will use <code>Task.sleep()</code>.</li><li>If we get data back and it hasn’t changed, we go around our loop again – wait for some number of seconds, re-fetch the URL, then check again.</li><li>Otherwise, if there <em>has</em> been a change between the old and new data, we overwrite our old data with the new data and send it back.</li><li>If no data is returned from our request, we immediately terminate the iterator by sending back <code>nil</code>.</li><li>This is important: once our iterator ends, any further attempt to call <code>next()</code> must also return <code>nil</code>. This is part of the design of <code>AsyncSequence</code>, so stick to it.</li></ol><p>To add to the complexity a little, <code>Task.sleep()</code> measures its time in nanoseconds, so to sleep for one second you should specify 1 billion as the sleep amount.</p><p>Like I said, this is more complex, but it’s also a useful, real-world example of <code>AsyncSequence</code>. It’s also particularly powerful when combined with SwiftUI’s <code>task()</code> modifier, because the network fetches will automatically start when a view is shown and cancelled when it disappears. This allows you to constantly watch for new data coming in, and stream it directly into your UI.</p><p>Anyway, here’s the code – it creates a <code>URLWatcher</code> struct that conforms to the <code>AsyncSequence</code> protocol, along with an example of it being used to display a list of users in a SwiftUI view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">URLWatcher</span><span class="token punctuation">:</span> <span class="token class-name">AsyncSequence</span><span class="token punctuation">,</span> <span class="token class-name">AsyncIteratorProtocol</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">typealias</span> <span class="token class-name">Element</span> <span class="token operator">=</span> <span class="token class-name">Data</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span></span>
<span class="line">    <span class="token keyword">let</span> delay<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> comparisonData<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token operator">?</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> isActive <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> delay<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>delay <span class="token operator">=</span> delay</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">Element</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Once we&#39;re inactive always return nil immediately</span></span>
<span class="line">        <span class="token keyword">guard</span> isActive <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token nil constant">nil</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> comparisonData <span class="token operator">==</span> <span class="token nil constant">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// If this is our first iteration, return the initial value</span></span>
<span class="line">            comparisonData <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Otherwise, sleep for a while and see if our data changed</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1_000_000_000</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">let</span> latestData <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> latestData <span class="token operator">!=</span> comparisonData <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// New data is different from previous data,</span></span>
<span class="line">                    <span class="token comment">// so update previous data and send it back</span></span>
<span class="line">                    comparisonData <span class="token operator">=</span> latestData</span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> comparisonData <span class="token operator">==</span> <span class="token nil constant">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            isActive <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> comparisonData</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> data</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">makeAsyncIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">URLWatcher</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// As an example of URLWatcher in action, try something like this:</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Decodable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token punctuation">{</span> user <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span>task <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// continuously check the URL watcher for data</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">fetchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;FILENAMEHERE.json&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> urlWatcher <span class="token operator">=</span> <span class="token class-name">URLWatcher</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">,</span> delay<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> data <span class="token keyword">in</span> urlWatcher <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> withAnimation <span class="token punctuation">{</span></span>
<span class="line">                    users <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// just bail out</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),S={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-create-a-custom-asyncsequence-3.zip",target:"_blank",rel:"noopener noreferrer"},_=c(`<p>To make that work in your own project, replace “FILENAMEHERE” with the location of a local file you can test with. For example, I might use <strong>/Users/twostraws/users.json</strong>, giving that file the following example contents:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Paul&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the code first runs the list will show Paul, but if you edit the JSON file and re-save with extra users, they will just slide into the SwiftUI list automatically.</p>`,3),x={class:"hint-container details"},I=n("summary",null,"Similar solutions…",-1);function D(i,E){const a=l("VPCard"),p=l("FontIcon");return k(),u("div",null,[n("h1",v,[n("a",w,[n("span",null,d(i.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,y,s(a,e(t({title:"How to create a custom AsyncSequence | Swift Concurrency by Example",desc:"How to create a custom AsyncSequence",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-create-a-custom-asyncsequence",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",f,[s(p,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),g,n("blockquote",null,[n("p",null,[n("a",q,[s(p,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),A,n("blockquote",null,[n("p",null,[n("a",S,[s(p,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),_,n("details",x,[I,s(a,e(t({title:"How to convert an AsyncSequence into a Sequence | Swift Concurrency by Example",desc:"How to convert an AsyncSequence into a Sequence",link:"/hackingwithswift.com/concurrency/how-to-convert-an-asyncsequence-into-a-sequence.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"What’s the difference between Sequence, AsyncSequence, and AsyncStream? | Swift Concurrency by Example",desc:"What’s the difference between Sequence, AsyncSequence, and AsyncStream?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-sequence-asyncsequence-and-asyncstream.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to manipulate an AsyncSequence using map(), filter(), and more | Swift Concurrency by Example",desc:"How to manipulate an AsyncSequence using map(), filter(), and more",link:"/hackingwithswift.com/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to loop over an AsyncSequence using for await | Swift Concurrency by Example",desc:"How to loop over an AsyncSequence using for await",link:"/hackingwithswift.com/concurrency/how-to-loop-over-an-asyncsequence-using-for-await.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to create a task group and add tasks to it | Swift Concurrency by Example",desc:"How to create a task group and add tasks to it",link:"/hackingwithswift.com/concurrency/how-to-create-a-task-group-and-add-tasks-to-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const R=r(m,[["render",D],["__file","how-to-create-a-custom-asyncsequence.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-create-a-custom-asyncsequence.html","title":"How to create a custom AsyncSequence","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create a custom AsyncSequence","description":"Article(s) > How to create a custom AsyncSequence","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create a custom AsyncSequence"},{"property":"og:description","content":"How to create a custom AsyncSequence"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-create-a-custom-asyncsequence.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-create-a-custom-asyncsequence.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create a custom AsyncSequence"}],["meta",{"property":"og:description","content":"Article(s) > How to create a custom AsyncSequence"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create a custom AsyncSequence\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.49,"words":1347},"filePathRelative":"hackingwithswift.com/concurrency/how-to-create-a-custom-asyncsequence.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{R as comp,T as data};
