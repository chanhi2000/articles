import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as e,t as p,e as i,n as h,g as u,w as n,d as t,f as a,r as l,o as _}from"./app-BgNevrm5.js";const f={},E={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},y=e("hr",null,null,-1),A=a('<p>여러 사람과 함께 작업하다 보면 프로젝트에는 다양한 커밋이 등록됩니다. 곧 PR(Pull Request)을 통해 이러한 커밋들이 하나의 브랜치로 합쳐지죠. 다만 많은 사람이 저장소 하나를 공유하면 어떤 브랜치 전략을 사용하든 종종 충돌이 발생하고는 합니다.</p><p>깃에서 말하는 충돌이란, 여러 사용자가 동일한 내용을 수정할 때, 깃이 어떤 변경점을 적용해야 하는지 알지 못해 병합 작업을 중단하는 것을 말합니다. 깃 작업을 하다 일어난 충돌을 쉽사리 해결하지 못해 시간을 많이 쓴 경험, 누구나 한 번쯤은 있을 겁니다. 오늘은 그런 여러분을 위해 알아두면 유용한 팁 두 가지를 공유하고자 합니다.</p><hr><h2 id="bisect-버그-커밋-쉽게-찾기" tabindex="-1"><a class="header-anchor" href="#bisect-버그-커밋-쉽게-찾기"><span>Bisect - 버그 커밋 쉽게 찾기</span></a></h2><p>첫 번째로 알아볼 커맨드는 Bisect입니다. Bisect는 “두 갈래로 나누다”라는 뜻을 가진 영어 단어인데요. 깃에서도 이와 유사한 원리로 동작하는 커맨드입니다. 특히 문제가 발생한 최초의 커밋을 찾아낼 때 아주 유용하게 사용할 수 있죠. 여러분의 이해를 돕기 위해 한 가지 예시 상황을 같이 살펴보겠습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2545/image1-git-bisect-프로젝트-환경.png" alt="프로젝트의 커밋은 이렇게 되어있다." tabindex="0" loading="lazy"><figcaption>프로젝트의 커밋은 이렇게 되어있다.</figcaption></figure><p>쇼핑몰을 만드는 “my-mall” 프로젝트는 위와 같은 커밋 이력을 갖고 있습니다. 마스터 브랜치에 커밋이 쌓이다가 브랜치가 두 개로 분리되어 각자의 작업을 하고 다시 마스터 브랜치로 합쳐진 모양입니다.</p><p>문제는 가장 최근 커밋<code>(4f28eec, “unused imports 삭제”)</code>에서 발견되었습니다. 개발자는 프로젝트를 빌드하려고 명령어를 입력했지만, 곧 실패하고 오류 화면을 보게 됩니다.</p><figure><img src="https://yozm.wishket.com/media/news/2545/image2-git-bisect-오류-화면.png" alt="프로젝트 빌드에 실패해 버렸다." tabindex="0" loading="lazy"><figcaption>프로젝트 빌드에 실패해 버렸다.</figcaption></figure><p>아무래도 <code>useState</code>를 사용하는 과정에서 오타가 발생한 모양입니다. 그런데 이 오류가 어느 커밋에서 발생했는지 어떻게 알 수 있을까요? 예시 프로젝트는 CRA(Create React App)를 사용했지만, 프로젝트마다 오류 결과를 보여주는 모습이 조금씩 다를 수도 있습니다. 게다가 리액트 프로젝트 환경이 아닐 수도 있고요. Bisect는 이런 상황에서 문제가 발생한 최초의 커밋을 찾아낼 수 있는 아주 강력한 기능입니다.</p><h3 id="bisect-동작-원리" tabindex="-1"><a class="header-anchor" href="#bisect-동작-원리"><span>Bisect 동작 원리</span></a></h3>',11),B=e("p",null,[t("Bisect가 동작하는 원리는 이진 탐색과 동일합니다. 처음과 끝을 기준 삼아 중간 지점을 확인하고, 다시 그 중간 지점부터 새로 중간 지점을 설정해 확인하는 방식이죠. 시간 복잡도 역시 이진 탐색과 같이 밑이 2인 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mtext",null,"O"),e("mrow",null,[e("mo",{fence:"true"},"("),e("mi",null,"log"),e("mo",null,"⁡"),e("mi",null,"N"),e("mo",{fence:"true"},")")])]),e("annotation",{encoding:"application/x-tex"},"\\text{O}\\left(\\log{N}\\right)")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord text"},[e("span",{class:"mord"},"O")]),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"minner"},[e("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),e("span",{class:"mop"},[t("lo"),e("span",{style:{"margin-right":"0.01389em"}},"g")]),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},[e("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),e("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])]),t("입니다.")],-1),k=e("img",{src:"https://yozm.wishket.com/media/news/2545/image3-git-bisect-77을_찾아라.png",alt:'Bisect는 예시 이미지에서 숫자 77을 찾는 과정과 동일하게 동작한다. <FontIcon icon="fas fa-globe"/><출처: 나무위키 - 이진탐색>',tabindex:"0",loading:"lazy"},null,-1),x={href:"https://namu.wiki/w/%EC%9D%B4%EC%A7%84%20%ED%83%90%EC%83%89",target:"_blank",rel:"noopener noreferrer"},z=e("h3",{id:"bisect-사용법",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bisect-사용법"},[e("span",null,"Bisect 사용법")])],-1),D=e("p",null,"Bisect는 다음 명령어로 매우 쉽게 사용할 수 있습니다.",-1),C=e("code",null,"git bisect start",-1),H=e("code",null,"git bisect good <COMMIT>",-1),R=e("code",null,"<COMMIT>",-1),M=e("code",null,"git bisect bad <COMMIT>",-1),v=e("code",null,"<COMMIT>",-1),O=e("code",null,"git bisect reset",-1),G=a('<h3 id="오류-커밋-찾아가기" tabindex="-1"><a class="header-anchor" href="#오류-커밋-찾아가기"><span>오류 커밋 찾아가기</span></a></h3><p>현재 <code>HEAD</code>는 프로젝트의 가장 최근 커밋인 “unused imports 삭제”에 위치합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2545/image4-git-bisect-start.png" alt="이 상태에서  명령어를 입력하겠습니다. 이제 깃이 사용자가 Bisect를 시작하겠다는 신호를 받아들입니다.&gt;" tabindex="0" loading="lazy"><figcaption>이 상태에서 <code>git bisect start</code> 명령어를 입력하겠습니다. 이제 깃이 사용자가 Bisect를 시작하겠다는 신호를 받아들입니다.&gt;</figcaption></figure><p><code>git bisect start</code> 명령어를 입력하고 나니, good/bad 커밋 입력을 기다린다는 메시지를 확인할 수 있었습니다. 이 명령어는 시작점과 끝점을 입력해야 그때부터 본격적으로 동작합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2545/image5-git-bisect-bad.png" alt="Bisect는 문제가 없는 커밋을 Good, 문제가 있는 버그 커밋을 Bad로 인식합니다." tabindex="0" loading="lazy"><figcaption>Bisect는 문제가 없는 커밋을 Good, 문제가 있는 버그 커밋을 Bad로 인식합니다.</figcaption></figure>',5),N=e("code",null,"HEAD",-1),I=e("code",null,"git bisect bad",-1),T=e("code",null,"HEAD",-1),P=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2545/image6-git-bisect-good.png",alt:"Bisect는 시작점과 끝점을 모두 입력해야 동작한다.",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Bisect는 시작점과 끝점을 모두 입력해야 동작한다.")],-1),F=e("code",null,"git bisect good",-1),S=e("code",null,"HEAD",-1),V=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2545/image9-git-bisect-끝.png",alt:"Bisect가 동작하면 의 위치는 양 끝점의 절반쯤 위치로 옮겨진다.",tabindex:"0",loading:"lazy"}),e("figcaption",null,[t("Bisect가 동작하면 "),e("code",null,"HEAD"),t("의 위치는 양 끝점의 절반쯤 위치로 옮겨진다.")])],-1),K=e("code",null,"HEAD",-1),L=e("code",null,"git bisect bad",-1),Z=e("code",null,"git bisect good",-1),q=e("code",null,"HEAD",-1),j=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2545/image8-git-bisect-시작-2.png",alt:"Bisect 진행 도중에는 커밋의 상태에 따라 의 위치가 달라진다.",tabindex:"0",loading:"lazy"}),e("figcaption",null,[t("Bisect 진행 도중에는 커밋의 상태에 따라 "),e("code",null,"HEAD"),t("의 위치가 달라진다.")])],-1),J=e("p",null,"진행을 따라가며 계속해서 good/bad 커밋을 입력하다 보면 Bisect는 결국 문제가 되는 커밋을 찾게 됩니다.",-1),$=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2545/image9-git-bisect-끝.png",alt:"Bisect가 버그가 있는 커밋을 찾아낸 경우",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Bisect가 버그가 있는 커밋을 찾아낸 경우")],-1),Q=e("code",null,"git bisect reset",-1),U=e("p",null,[t("이렇게 Bisect를 이용하면 아주 빠른 속도로 버그의 출처를 확인할 수 있습니다. 커밋이 10만 개나 쌓여 있다 하더라도 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mtext",null,"O"),e("mrow",null,[e("mo",{fence:"true"},"("),e("mi",null,"log"),e("mo",null,"⁡"),e("mi",null,"N"),e("mo",{fence:"true"},")")])]),e("annotation",{encoding:"application/x-tex"},"\\text{O}\\left(\\log{N}\\right)")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord text"},[e("span",{class:"mord"},"O")]),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"minner"},[e("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),e("span",{class:"mop"},[t("lo"),e("span",{style:{"margin-right":"0.01389em"}},"g")]),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},[e("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),e("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])]),t("의 속도로 버그를 찾아내기까지 필요한 확인은 단 17번입니다. 모든 커밋을 전부 확인하는 것보다 훨씬 강력한 기능이죠. 한 번 사용해 보시는 것을 추천해 드립니다.")],-1),W=e("hr",null,null,-1),X=e("h2",{id:"reflog-사라진-커밋-찾기",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reflog-사라진-커밋-찾기"},[e("span",null,"Reflog - 사라진 커밋 찾기")])],-1),Y=e("p",null,"두 번째 커맨드는 Reflog입니다. Bisect보다 더 생소할 수 있는데요, 이 명령어는 우리가 실수로 로컬 환경에 쌓아놓은 커밋을 삭제했을 때 아주 유용하게 사용할 수 있습니다. 여러 브랜치를 옮겨 다니며 작업을 하다 보면 실수하게 마련이죠. 특히 이전에 작업했던 커밋을 잃어버려 기억에 의존하며 처음부터 다시 코드를 짠 경험이 한 번쯤은 있을 겁니다. 이제부터 그럴 때는 Reflog 명령어를 사용해 봅시다.",-1),ee=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2545/image10-reflog-문제상황.png",alt:"가장 최근 커밋을 실수로 삭제해 버렸다!",tabindex:"0",loading:"lazy"}),e("figcaption",null,"가장 최근 커밋을 실수로 삭제해 버렸다!")],-1),te=e("code",null,"git reflog",-1),ie=a('<figure><img src="https://yozm.wishket.com/media/news/2545/image11-git-reflog-입력하면-보이는것.png" alt="무시무시한 무언가가 화면에 보인다." tabindex="0" loading="lazy"><figcaption>무시무시한 무언가가 화면에 보인다.</figcaption></figure><p>일반적으로 우리가 보던 로그의 형태와 사뭇 다르게 생겼죠. Reflog 명령어가 깃의 HEAD 변화만을 추적하기 때문입니다. Reflog 명령어를 사용하면 화면에서 <code>HEAD</code> 변화에 따른 결과를 볼 수 있습니다. 위의 스크린샷을 볼까요? <code>HEAD@{0}</code>과 같은 표시가 로그 맨 앞에 나타납니다. 이는 <code>HEAD</code>의 상태 변화가 어떤 순서로 기록되었는지 보여주는 일종의 번호입니다. 중괄호 안의 숫자가 작을수록 가장 최근에 변경된 이력입니다.</p><p><code>HEAD@{0}</code> 옆에는 <code>checkout</code> 등 깃 명령어에 해당하는 키워드가 적혀있습니다. 즉, <code>HEAD</code>의 상태가 바뀌었을 때 어떤 일이 발생했는지를 보여주는 내용입니다. 빨간색 박스 안 <code>checkout</code>의 경우, <code>7e894e…</code> 커밋에서 <code>e97eca…</code> 커밋으로 <code>HEAD</code>를 옮기며 업데이트가 있었다는 내용입니다.</p><h3 id="실수로-지운-커밋-복구하기" tabindex="-1"><a class="header-anchor" href="#실수로-지운-커밋-복구하기"><span>실수로 지운 커밋 복구하기</span></a></h3><p>가장 최근 <code>HEAD</code>의 변경점을 다시 볼까요? <code>reset</code> 명령어로 <code>HEAD</code>가 <code>e97eca7</code> 커밋으로 이동했다는 것을 알 수 있습니다. 이 커밋은 Merge branch &#39;task-2&#39;에 해당하는 커밋입니다. 우리가 실수로 커밋을 지우고 난 다음, 가장 최근으로 올라온 커밋이기도 하지요.</p>',5),se=e("code",null,"reset",-1),oe=e("code",null,"git reset --hard <COMMIT>",-1),ne=e("code",null,"HEAD@{0}",-1),le=e("code",null,"HEAD@{1}",-1),ae=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2545/image12-git-reflog-되돌아갈-곳.png",alt:" 커밋이 우리가 되돌아갈 커밋이다.",tabindex:"0",loading:"lazy"}),e("figcaption",null,[e("code",null,"4f28eec"),t(" 커밋이 우리가 되돌아갈 커밋이다.")])],-1),ce=e("code",null,"git reset --hard 4f28eec",-1),me=e("code",null,"HEAD",-1),re=e("figure",null,[e("img",{src:"https://yozm.wishket.com/media/news/2545/image13-git-reflog-복구된-커밋.png",alt:"커밋이 복구되었다!",tabindex:"0",loading:"lazy"}),e("figcaption",null,"커밋이 복구되었다!")],-1),ge=e("code",null,"reset",-1),de=e("code",null,"hard",-1),pe=e("code",null,"git log",-1),he=e("hr",null,null,-1),ue=e("h2",{id:"마치며",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#마치며"},[e("span",null,"마치며")])],-1),_e=e("p",null,"지금까지 사용 빈도가 그리 높지 않지만 아주 강력한 기능을 가진 깃 명령어, Bisect와 Reflog를 알아보았습니다.",-1),fe=e("p",null,[t("Bisect는 버그가 발생한 최초 커밋을 검증 몇 번만으로 찾을 수 있는 명령어였습니다. start로 시작을 선언하고 good, bad 커밋을 입력하면 그때부터 깃이 이진 탐색을 시작하는 방식입니다. "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mtext",null,"O"),e("mrow",null,[e("mo",{fence:"true"},"("),e("mi",null,"log"),e("mo",null,"⁡"),e("mi",null,"N"),e("mo",{fence:"true"},")")])]),e("annotation",{encoding:"application/x-tex"},"\\text{O}\\left(\\log{N}\\right)")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord text"},[e("span",{class:"mord"},"O")]),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"minner"},[e("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),e("span",{class:"mop"},[t("lo"),e("span",{style:{"margin-right":"0.01389em"}},"g")]),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},[e("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")]),e("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])]),t("의 속도로 버그가 처음 발생한 커밋을 찾을 수 있습니다.")],-1),Ee=e("p",null,"Reflog는 실수로 지운 커밋을 아주 손쉽게 찾을 수 있는 명령어입니다. 깃은 HEAD의 상태 변화를 따로 추적하고 있습니다. 따라서 HEAD의 위치가 달라지는 모든 명령어를 조회할 수 있죠. 실수로 지운 커밋은 깃에서 완전히 사라지는 것이 아닙니다. 어떠한 커밋과도 연결점이 존재하지 않는 고아 상태로 전환될 뿐입니다. Reflog로 그 위치만 찾는다면, reset 명령어로 HEAD를 재조정해 커밋을 살릴 수 있습니다.",-1),be=e("p",null,"이외에도 깃에는 유용한 명령어가 아주 많습니다. 여러분도 종종 새로운 명령어를 익혀 보다 폭넓게 깃을 활용해 보세요!",-1);function we(c,ye){const m=l("VPCard"),o=l("router-link"),r=l("SiteInfo"),s=l("FontIcon");return _(),d("div",null,[e("h1",E,[e("a",b,[e("span",null,p(c.$frontmatter.title)+" 관련",1)])]),i(m,h(u({title:"Git > Article(s)",desc:"Article(s)",link:"/programming/git/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",w,[e("ul",null,[e("li",null,[i(o,{to:"#bisect-버그-커밋-쉽게-찾기"},{default:n(()=>[t("Bisect - 버그 커밋 쉽게 찾기")]),_:1}),e("ul",null,[e("li",null,[i(o,{to:"#bisect-동작-원리"},{default:n(()=>[t("Bisect 동작 원리")]),_:1})]),e("li",null,[i(o,{to:"#bisect-사용법"},{default:n(()=>[t("Bisect 사용법")]),_:1})]),e("li",null,[i(o,{to:"#오류-커밋-찾아가기"},{default:n(()=>[t("오류 커밋 찾아가기")]),_:1})])])]),e("li",null,[i(o,{to:"#reflog-사라진-커밋-찾기"},{default:n(()=>[t("Reflog - 사라진 커밋 찾기")]),_:1}),e("ul",null,[e("li",null,[i(o,{to:"#실수로-지운-커밋-복구하기"},{default:n(()=>[t("실수로 지운 커밋 복구하기")]),_:1})])])]),e("li",null,[i(o,{to:"#마치며"},{default:n(()=>[t("마치며")]),_:1})])])]),y,i(r,{name:"팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지 | 요즘IT",desc:"여러 사람과 함께 작업하다 보면 프로젝트에는 다양한 커밋이 등록됩니다. 곧 PR(Pull Request)을 통해 이러한 커밋들이 하나의 브랜치로 합쳐지죠. 다만 많은 사람이 저장소 하나를 공유하면 어떤 브랜치 전략을 사용하든 종종 충돌이 발생하고는 합니다. 깃 작업을 하다 일어난 충돌을 쉽사리 해결하지 못해 시간을 많이 쓴 경험, 누구나 한 번쯤은 있을 겁니다. 오늘은 그런 여러분을 위해 알아두면 유용한 팁 두 가지를 공유하고자 합니다.",url:"https://yozm.wishket.com/magazine/detail/2545/",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",preview:"https://yozm.wishket.com/media/news/2545/image4-git-bisect-start.png"}),A,B,e("figure",null,[k,e("figcaption",null,[t("Bisect는 예시 이미지에서 숫자 77을 찾는 과정과 동일하게 동작한다. "),e("a",x,[i(s,{icon:"fas fa-globe"}),t("<출처: 나무위키 - 이진탐색>")])])]),z,D,e("ul",null,[e("li",null,[i(s,{icon:"fas fa-terminal"}),C,t(": Bisect를 시작하는 명령어입니다. 동작을 위해 항상 먼저 입력해야 합니다.")]),e("li",null,[i(s,{icon:"fas fa-terminal"}),H,t(": 특정 커밋에 문제가 없을 경우 입력하는 명령어입니다. "),R,t("에는 커밋 해시를 입력할 수 있는데, 입력하지 않으면 현재 HEAD가 위치한 커밋의 해시를 사용합니다.")]),e("li",null,[i(s,{icon:"fas fa-terminal"}),M,t(": 문제가 발생하는 커밋을 Bisect에 알려줄 때 사용하는 명령어입니다. "),v,t(" 부분은 위와 같습니다.")]),e("li",null,[i(s,{icon:"fas fa-terminal"}),O,t(": Bisect를 종료할 때 사용하는 명령어입니다.")])]),G,e("p",null,[t("현재 "),N,t("는 가장 최신 커밋에 있는데요, 이 상황에서 프로젝트 빌드가 정상적으로 동작하지 않았으므로 이 커밋은 문제가 있는 커밋이라 볼 수 있습니다. "),i(s,{icon:"fas fa-terminal"}),I,t(" 명령어를 입력해 현재 "),T,t("는 버그가 존재하는 커밋이라고 알려주면, Bisect에서는 나머지 끝점에 해당하는 정상적인 커밋(Good) 입력을 기다립니다.")]),P,e("p",null,[t("위 스크린샷은 최초의 커밋인 “my-mall 프로젝트 설치”의 커밋 해시를 사용해 "),i(s,{icon:"fas fa-terminal"}),F,t(" 명령어를 실행한 모습입니다. 시작점과 끝점을 모두 입력받은 Bisect는 동작을 시작합니다. 두 커밋의 절반쯤에 위치한 커밋으로 "),S,t("를 옮겨 탐색하는 거죠.")]),V,e("p",null,[t("이제 앞으로 남은 일은 "),K,t("가 옮겨진 커밋에서 문제가 있는지 검사하는 일입니다. 여전히 문제가 있다면 "),i(s,{icon:"fas fa-terminal"}),L,t("를, 문제가 없는 정상적인 커밋이라면 "),i(s,{icon:"fas fa-terminal"}),Z,t(" 명령어를 입력합니다. 곧 Bisect는 다음 목적지로 "),q,t("를 다시 옮겨가며 최초로 문제가 발생한 커밋을 찾게 됩니다.")]),j,J,$,e("p",null,[t("버그를 만든 최초의 커밋을 발견하면 Bisect는 해당 커밋에 대한 상세 정보를 화면에 보여줍니다. 어떤 파일이 바뀌었는지, 커밋의 내용은 무엇인지, 누가 커밋을 했는지 등 정보를 확인할 수 있습니다. 모든 정보를 얻은 다음, Bisect를 더 사용하고 싶지 않으면 "),i(s,{icon:"fas fa-terminal"}),Q,t(" 명령어로 종료할 수 있습니다.")]),U,W,X,Y,ee,e("p",null,[t("Reflog 명령어는 "),i(s,{icon:"fas fa-terminal"}),te,t("를 터미널에 입력하는 것만으로 동작합니다.")]),ie,e("p",null,[t("이때 "),se,t(" 명령어를 사용하면 HEAD를 강제로 옮길 수 있습니다. 즉, "),i(s,{icon:"fas fa-terminal"}),oe,t(" 명령어만으로 쉽게 삭제한 커밋을 복구할 수 있다는 뜻입니다. "),ne,t("의 기록은 이미 커밋이 지워진 다음이니 우리는 "),le,t("의 커밋으로 되돌려 보겠습니다.")]),ae,i(s,{icon:"fas fa-terminal"}),ce,t(" 명령어를 실행하겠습니다. "),me,t("가 다시 사라졌던 커밋의 위치로 되돌아 갑니다."),re,e("p",null,[t("이렇게 간단하게 커밋이 되돌아왔습니다! 깃에서는 "),ge,t(" 명령어에 "),de,t(" 옵션을 사용해도 커밋이 완전히 사라지지 않습니다. 일종의 고아(orphan) 상태로 전환될 뿐이죠. 이는 커밋 기록은 여전히 존재하지만, 그 어떤 커밋과도 연결 지점이 없는 상태를 의미합니다. Reflog를 잘 활용하면 "),i(s,{icon:"fas fa-terminal"}),pe,t(" 명령어로는 확인할 수 없는 커밋의 고아 상태를 볼 수 있습니다. 이제 여러분의 사라진 커밋도 복구할 수 있겠죠.")]),he,ue,_e,fe,Ee,be])}const ke=g(f,[["render",we],["__file","2545.html.vue"]]),xe=JSON.parse('{"path":"/yozm.wishket.com/2545.html","title":"팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지","description":"Article(s) > 팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지","icon":"iconfont icon-git","category":["Git","Article(s)"],"tag":["blog","yozm.wishket.com","git"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지"},{"property":"og:description","content":"팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2545.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2545.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지"}],["meta",{"property":"og:description","content":"Article(s) > 팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2545/image4-git-bisect-start.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2545/image4-git-bisect-start.png"}],["meta",{"name":"twitter:image:alt","content":"팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:published_time","content":"2024-04-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"팀장님에게 칭찬받기 좋은 Git 꿀팁 2가지\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2545/image1-git-bisect-%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%92%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A7%E1%86%BC.png\\",\\"https://yozm.wishket.com/media/news/2545/image2-git-bisect-%E1%84%8B%E1%85%A9%E1%84%85%E1%85%B2-%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB.png\\",\\"https://namu.wiki/w/%EC%9D%B4%EC%A7%84%20%ED%83%90%EC%83%89\\",\\"https://yozm.wishket.com/media/news/2545/image4-git-bisect-start.png\\",\\"https://yozm.wishket.com/media/news/2545/image5-git-bisect-bad.png\\",\\"https://yozm.wishket.com/media/news/2545/image6-git-bisect-good.png\\",\\"https://yozm.wishket.com/media/news/2545/image9-git-bisect-%E1%84%81%E1%85%B3%E1%87%80.png\\",\\"https://yozm.wishket.com/media/news/2545/image8-git-bisect-%E1%84%89%E1%85%B5%E1%84%8C%E1%85%A1%E1%86%A8-2.png\\",\\"https://yozm.wishket.com/media/news/2545/image9-git-bisect-%E1%84%81%E1%85%B3%E1%87%80.png\\",\\"https://yozm.wishket.com/media/news/2545/image10-reflog-%E1%84%86%E1%85%AE%E1%86%AB%E1%84%8C%E1%85%A6%E1%84%89%E1%85%A1%E1%86%BC%E1%84%92%E1%85%AA%E1%86%BC.png\\",\\"https://yozm.wishket.com/media/news/2545/image11-git-reflog-%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%85%E1%85%A7%E1%86%A8%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB-%E1%84%87%E1%85%A9%E1%84%8B%E1%85%B5%E1%84%82%E1%85%B3%E1%86%AB%E1%84%80%E1%85%A5%E1%86%BA.png\\",\\"https://yozm.wishket.com/media/news/2545/image12-git-reflog-%E1%84%83%E1%85%AC%E1%84%83%E1%85%A9%E1%86%AF%E1%84%8B%E1%85%A1%E1%84%80%E1%85%A1%E1%86%AF-%E1%84%80%E1%85%A9%E1%86%BA.png\\",\\"https://yozm.wishket.com/media/news/2545/image13-git-reflog-%E1%84%87%E1%85%A9%E1%86%A8%E1%84%80%E1%85%AE%E1%84%83%E1%85%AC%E1%86%AB-%E1%84%8F%E1%85%A5%E1%84%86%E1%85%B5%E1%86%BA.png\\"],\\"datePublished\\":\\"2024-04-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/git/articles/README.md","date":"2024-04-16T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2545/image4-git-bisect-start.png"},"headers":[{"level":2,"title":"Bisect - 버그 커밋 쉽게 찾기","slug":"bisect-버그-커밋-쉽게-찾기","link":"#bisect-버그-커밋-쉽게-찾기","children":[{"level":3,"title":"Bisect 동작 원리","slug":"bisect-동작-원리","link":"#bisect-동작-원리","children":[]},{"level":3,"title":"Bisect 사용법","slug":"bisect-사용법","link":"#bisect-사용법","children":[]},{"level":3,"title":"오류 커밋 찾아가기","slug":"오류-커밋-찾아가기","link":"#오류-커밋-찾아가기","children":[]}]},{"level":2,"title":"Reflog - 사라진 커밋 찾기","slug":"reflog-사라진-커밋-찾기","link":"#reflog-사라진-커밋-찾기","children":[{"level":3,"title":"실수로 지운 커밋 복구하기","slug":"실수로-지운-커밋-복구하기","link":"#실수로-지운-커밋-복구하기","children":[]}]},{"level":2,"title":"마치며","slug":"마치며","link":"#마치며","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.83,"words":850},"filePathRelative":"yozm.wishket.com/2545.md","localizedDate":"2024년 4월 16일","excerpt":"\\n"}');export{ke as comp,xe as data};
