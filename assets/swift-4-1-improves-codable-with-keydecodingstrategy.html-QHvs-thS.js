import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as e,t as u,e as n,n as m,g as h,d as s,w as o,f as w,r as a,o as k}from"./app-BgNevrm5.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},y=e("nav",{class:"table-of-contents"},[e("ul")],-1),b=e("hr",null,null,-1),_=e("figure",null,[e("img",{src:"https://hackingwithswift.com/uploads/swift-evolution-5.jpg",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),S=e("code",null,"Codable",-1),C=e("p",null,[s("However, "),e("code",null,"Codable"),s(" had one particular annoyance that hit most users: if your JSON used snake_case for its key names and your Swift code used camelCase for its property names, "),e("code",null,"Codable"),s(" wouldn’t be able to convert between the two – you needed to create your own "),e("code",null,"CodingKeys"),s(" mapping to explain how the two matched up.")],-1),q=e("code",null,"keyDecodingStrategy",-1),D=e("code",null,"JSONDecoder",-1),j=e("code",null,"keyEncodingStrategy",-1),N=e("code",null,"JSONEncoder",-1),x=w(`<p>Enough chat – let’s look at a practical example. Create a new Playground and give it this JSON string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> jsonString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">[</span>
<span class="line">    {</span>
<span class="line">        &quot;name&quot;: &quot;MacBook Pro&quot;,</span>
<span class="line">        &quot;screen_size&quot;: 15,</span>
<span class="line">        &quot;cpu_count&quot;: 4</span>
<span class="line">    },</span>
<span class="line">    {</span>
<span class="line">        &quot;name&quot;: &quot;iMac Pro&quot;,</span>
<span class="line">        &quot;screen_size&quot;: 27,</span>
<span class="line">        &quot;cpu_count&quot;: 18</span>
<span class="line">    }</span>
<span class="line">]</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">.</span>utf8<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That stores an array of two items, each describing a Mac. As you can see, both <code>screen_size</code> and <code>cpu_count</code> use snake case – words are all lowercased, with underscores separating them. I’ve added a conversion to <code>Data</code> at the end, because that’s what <code>JSONDecoder</code> works with.</p><p>Now, we want to convert that JSON into an array of <code>Mac</code> instances using this struct:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Mac</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> screenSize<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">var</span> cpuCount<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That follows standard Swift naming conventions, so the property names are all camelCased – words have no separators, but second and subsequent words all start with a capital letter.</p><p>In Swift 4.0 you might try to decode that JSON like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> macs <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Mac</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> jsonData<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>macs<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that code won’t work because <code>Codable</code> doesn’t know how to map camelCase keys to the snake_case. This is where the new <code>keyDecodingStrategy</code> property comes in: it’s set to <code>.useDefaultKeys</code> by default, which does a direct mapping of JSON names to Swift properties. However, if you change it to <code>.convertFromSnakeCase</code> then the above code works immediately because <code>Codable</code> handles the name conversion for us.</p><p>So, add this line just before the start of the <code>do</code> block:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">decoder<span class="token punctuation">.</span>keyDecodingStrategy <span class="token operator">=</span> <span class="token punctuation">.</span>convertFromSnakeCase</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When you want to go back the other way – to convert a <code>Codable</code> struct with camelCase properties back to JSON with snake_case keys, set the <code>keyEncodingStrategy</code> to <code>.convertToSnakeCase</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> encoder <span class="token operator">=</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">encoder<span class="token punctuation">.</span>keyEncodingStrategy <span class="token operator">=</span> <span class="token punctuation">.</span>convertToSnakeCase</span>
<span class="line"><span class="token keyword">let</span> encoded <span class="token operator">=</span> <span class="token keyword">try</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>macs<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),E={href:"https://github.com/apple/swift/blob/77e417f1d043b888a83652471b53cedb952fd655/test/stdlib/TestJSONEncoder.swift#L597",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"apple/swift",-1);function J(i,T){const c=a("VPCard"),l=a("SiteInfo"),t=a("RouteLink"),p=a("FontIcon");return k(),d("div",null,[e("h1",f,[e("a",v,[e("span",null,u(i.$frontmatter.title)+" 관련",1)])]),n(c,m(h({title:"Swift > Article(s)",desc:"Article(s)",link:"/programming/swift/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),y,b,n(l,{name:"Swift 4.1 improves Codable with keyDecodingStrategy – Hacking with Swift",desc:"Snake case is now just a few keystrokes away.",url:"https://hackingwithswift.com/articles/52/swift-4-1-improves-codable-with-keydecodingstrategy",logo:"https://hackingwithswift.com/favicon.svg",preview:"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"}),_,e("p",null,[s("Swift 4.0 "),n(t,{to:"/hackingwithswift.com/swift4.html"},{default:o(()=>[s("brought many great new features")]),_:1}),s(", including multi-line strings, better keypaths, and lots of improved dictionary functionality. But it also gave us "),S,s(" for the first time: by far the easiest, safest way to convert Swift objects into JSON and XML.")]),C,e("p",null,[s("Well, Swift 4.1 has fixed this beautifully: along with "),n(t,{to:"/hackingwithswift.com/whats-new-in-swift-4-1.html"},{default:o(()=>[s("awesome new features of its own")]),_:1}),s(" there’s a new "),q,s(" property on "),D,s(" that can automatically convert between snake_case and camelCase if you need it. The inverse property, "),j,s(", also exists on "),N,s(" so you can convert your Swift camelCase names back into snake_case.")]),x,e("p",null,[s("If you have more advanced uses – perhaps you prefer SCREAMING_SNAKE_CASE for some reason? – you can also specify a custom key strategy, but "),e("a",E,[s("looking at the tests for that ("),n(p,{icon:"iconfont icon-github"}),O,s(")")]),s(" it seems a rather involved thing to do, at least for now.")]),e("p",null,[s("For more on the new features in Swift 4.1, see our article "),n(t,{to:"/hackingwithswift.com/whats-new-in-swift-4-1.html"},{default:o(()=>[s("what's new in Swift 4.1")]),_:1}),s(".")])])}const A=r(g,[["render",J],["__file","swift-4-1-improves-codable-with-keydecodingstrategy.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/swift-4-1-improves-codable-with-keydecodingstrategy.html","title":"Swift 4.1 improves Codable with keyDecodingStrategy","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Swift 4.1 improves Codable with keyDecodingStrategy","description":"Snake case is now just a few keystrokes away.","icon":"fa-brands fa-swift","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","ios","xcode"],"head":[[{"meta":null},{"property":"og:title","content":"Swift 4.1 improves Codable with keyDecodingStrategy"},{"property":"og:description","content":"Snake case is now just a few keystrokes away."},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift-4-1-improves-codable-with-keydecodingstrategy.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift-4-1-improves-codable-with-keydecodingstrategy.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Swift 4.1 improves Codable with keyDecodingStrategy"}],["meta",{"property":"og:description","content":"Snake case is now just a few keystrokes away."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"}],["meta",{"name":"twitter:image:alt","content":"Swift 4.1 improves Codable with keyDecodingStrategy"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:published_time","content":"2018-02-05T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Swift 4.1 improves Codable with keyDecodingStrategy\\",\\"image\\":[\\"https://hackingwithswift.com/uploads/swift-evolution-5.jpg\\"],\\"datePublished\\":\\"2018-02-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/swift/articles/README.md","date":"2018-02-05T00:00:00.000Z","isOriginal":false,"cover":"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.27,"words":681},"filePathRelative":"hackingwithswift.com/swift-4-1-improves-codable-with-keydecodingstrategy.md","localizedDate":"2018년 2월 5일","excerpt":"\\n"}');export{A as comp,R as data};
