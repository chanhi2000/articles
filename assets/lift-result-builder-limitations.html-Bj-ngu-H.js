import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as r,e as s,n as t,g as e,d as i,a as d,f as k,r as o,o as m}from"./app-BgNevrm5.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),g=n("blockquote",null,[n("p",null,"Available from Swift 5.8")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0373-vars-without-limits-in-result-builders.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),S=k(`<p>For example, in Swift 5.8 we can use lazy variables directly inside result builders, like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">lazy</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token function">fetchUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">fetchUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That shows the <em>concept</em>, but doesn’t provide any benefit because the lazy variable is always used – there’s no difference between using <code>lazy var</code> and <code>let</code> in that code. To see where it’s actually useful takes a longer code example, like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// The user is an active subscriber, not an active subscriber, or we don&#39;t know their status yet.</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">UserState</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> subscriber<span class="token punctuation">,</span> nonsubscriber<span class="token punctuation">,</span> unknown</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Two small pieces of information about the user</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token constant">UUID</span></span>
<span class="line">    <span class="token keyword">var</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">SubscriberView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token class-name">UserState</span><span class="token punctuation">.</span>unknown</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">lazy</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token function">fetchUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">switch</span> state <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token punctuation">.</span>subscriber<span class="token punctuation">:</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">. Here&#39;s what&#39;s new for subscribers…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token punctuation">.</span>nonsubscriber<span class="token punctuation">:</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">. Here&#39;s why you should subscribe…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Subscribe now&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">startSubscription</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> user<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token punctuation">.</span>unknown<span class="token punctuation">:</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Sign up today!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Example function that would do complex work</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">fetchUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">startSubscription</span><span class="token punctuation">(</span><span class="token keyword">for</span> user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Starting subscription…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach solves problems that would appear in the alternatives:</p><ul><li>If we didn’t use <code>lazy</code>, then <code>fetchUsername()</code> would be called in all three cases of <code>state</code>, even when it isn’t used in one.</li><li>If we removed <code>lazy</code> and placed the call to <code>fetchUsername()</code> <em>inside</em> the two cases then we would be duplicating code – not a massive problem with a simple one liner, but you can imagine how this would cause problems in more complex code.</li><li>If we moved <code>user</code> out to a computed property, it would be called a second time when the user clicked the &quot;Subscribe now&quot; button.</li></ul><p>This change also allows us to use property wrappers and local computed properties inside result builders, although I suspect they will be less useful. For example, this kind of code is now allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">CounterView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token attribute atrule">@AppStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;counter&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">var</span> tapCount <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Count: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">tapCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            tapCount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, although that will cause the underlying <code>UserDefaults</code> value to change with each tap, using <code>@AppStorage</code> in this way <em>won’t</em> cause the <code>body</code> property to be reinvoked every time <code>tapCount</code> changes – our UI won’t automatically be updated to reflect the change.</p>`,9),C={class:"hint-container details"},q=n("summary",null,"Other Changes in Swift 5.8",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-7-to-5-8.playground.zip",target:"_blank",rel:"noopener noreferrer"};function U(p,V){const a=o("VPCard"),l=o("FontIcon");return m(),u("div",null,[n("h1",b,[n("a",w,[n("span",null,r(p.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),h,f,s(a,t(e({title:"Lift all limitations on variables in result builders | Changes in Swift 5.8",desc:"Lift all limitations on variables in result builders",link:"https://hackingwithswift.com/swift/5.8/lift-result-builder-limitations",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("p",null,[n("a",y,[i("SE-0373 ("),s(l,{icon:"iconfont icon-github"}),_,i(")")]),i(" relaxes some of the restrictions on variables when used inside result builders, allowing us to write code that would previously have been disallowed by the compiler.")]),S,n("details",C,[q,d(` 
\`\`\`component VPCard
{
  "title": "Lift all limitations on variables in result builders | Changes in Swift 5.8",
  "desc": "Lift all limitations on variables in result builders",
  "link": "/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Function back deployment | Changes in Swift 5.8",desc:"Function back deployment",link:"/hackingwithswift.com/swift/5.8/function-back-deployment.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Allow implicit self for weak self captures, after self is unwrapped | Changes in Swift 5.8",desc:"Allow implicit self for weak self captures, after self is unwrapped",link:"/hackingwithswift.com/swift/5.8/implicit-self-weak-capture.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Concise magic file names | Changes in Swift 5.8",desc:"Concise magic file names",link:"/hackingwithswift.com/swift/5.8/concise-magic-file-names.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Opening existential arguments to optional parameters | Changes in Swift 5.8",desc:"Opening existential arguments to optional parameters",link:"/hackingwithswift.com/swift/5.8/opening-existential-optional.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Collection downcasts in cast patterns are now supported | Changes in Swift 5.8",desc:"Collection downcasts in cast patterns are now supported",link:"/hackingwithswift.com/swift/5.8/collection-downcasts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[s(l,{icon:"fas fa-file-zipper"}),i("Download Swift 5.8 playground")])])])])}const I=c(v,[["render",U],["__file","lift-result-builder-limitations.html.vue"]]),L=JSON.parse('{"path":"/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.html","title":"Lift all limitations on variables in result builders","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Lift all limitations on variables in result builders","description":"Article(s) > Lift all limitations on variables in result builders","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.8"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Lift all limitations on variables in result builders"},{"property":"og:description","content":"Lift all limitations on variables in result builders"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Lift all limitations on variables in result builders"}],["meta",{"property":"og:description","content":"Article(s) > Lift all limitations on variables in result builders"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.8"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lift all limitations on variables in result builders\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swift/5.9/discarding-task-groups.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.75,"words":825},"filePathRelative":"hackingwithswift.com/swift/5.8/lift-result-builder-limitations.md","excerpt":"\\n"}');export{I as comp,L as data};
