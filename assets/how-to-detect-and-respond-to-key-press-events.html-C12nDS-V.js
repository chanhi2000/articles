import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as d,e as n,n as a,g as e,d as u,f as i,r as o,o as k}from"./app-BgNevrm5.js";const h={},w={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=s("nav",{class:"table-of-contents"},[s("ul")],-1),g=s("hr",null,null,-1),f=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 17</strong></p><p>SwiftUI has an onKeyPress() modifier that lets us respond to hardware keyboard events being triggered in our app, with the only catch being that the view where you&#39;re watching for key presses must currently have input focus.</p><p>Watching for key presses takes various forms depending on what you want, but no matter what approach you take your view <em>must</em> be focusable in order to respond to a key press. So, this code marks a <code>Text</code> view as being focusable and currently focused, then updates its contents whenever a key is pressed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@FocusState</span> <span class="token keyword">private</span> <span class="token keyword">var</span> focused<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">focusable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">focused</span><span class="token punctuation">(</span>$focused<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>onKeyPress <span class="token punctuation">{</span> press <span class="token keyword">in</span></span>
<span class="line">                key <span class="token operator">+=</span> press<span class="token punctuation">.</span>characters</span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">.</span>handled</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span>onAppear <span class="token punctuation">{</span></span>
<span class="line">                focused <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),y={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-detect-and-respond-to-key-press-events-1.zip",target:"_blank",rel:"noopener noreferrer"},b=i(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-detect-and-respond-to-key-press-events-1~dark.gif" alt="The message typing is fun being typed out one letter at a time." tabindex="0" loading="lazy"><figcaption>The message typing is fun being typed out one letter at a time.</figcaption></figure><p>The <code>return .handled</code> part tells SwiftUI the key press has been responded to in full by our action closure. If you send back <code>.ignored</code> instead, the key press will be passed on to whatever parent view is able to handle it next.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>The characters we receive do <em>not</em> have any modifier keys attached, so it won&#39;t give you things like uppercase letters or special symbols.</p></div><p>Other forms of <code>onKeyPress()</code> include one to track which phase was triggered, so you could use this code to track only when a key has been released:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onKeyPress</span><span class="token punctuation">(</span>phases<span class="token punctuation">:</span> <span class="token punctuation">.</span>up<span class="token punctuation">)</span> <span class="token punctuation">{</span> press <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Received </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">press<span class="token punctuation">.</span>characters</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">.</span>handled</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There&#39;s a variant that responds only to certain kinds of keys being pressed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onKeyPress</span><span class="token punctuation">(</span>characters<span class="token punctuation">:</span> <span class="token punctuation">.</span>alphanumerics<span class="token punctuation">)</span> <span class="token punctuation">{</span> press <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Received </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">press<span class="token punctuation">.</span>characters</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">.</span>handled</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And there&#39;s even a variant that responds to specific characters being pressed, provided either as a list of built-in constants or characters. So, this will listen for people frantically mashing keys to quit Vim:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onKeyPress</span><span class="token punctuation">(</span>keys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>escape<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;w&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;q&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> press <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Received </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">press<span class="token punctuation">.</span>characters</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">.</span>handled</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),_={class:"hint-container details"},x=s("summary",null,"Similar solutions…",-1);function S(p,q){const t=o("VPCard"),c=o("FontIcon");return k(),r("div",null,[s("h1",w,[s("a",m,[s("span",null,d(p.$frontmatter.title)+" 관련",1)])]),n(t,a(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,g,n(t,a(e({title:"How to detect and respond to key press events | SwiftUI by Example",desc:"How to detect and respond to key press events",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-detect-and-respond-to-key-press-events",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,s("blockquote",null,[s("p",null,[s("a",y,[n(c,{icon:"fas fa-file-zipper"}),u("Download this as an Xcode project")])])]),b,s("details",_,[x,n(t,a(e({title:"How to respond to view lifecycle events: onAppear() and onDisappear() | SwiftUI by Example",desc:"How to respond to view lifecycle events: onAppear() and onDisappear()",link:"/hackingwithswift.com/swiftui/how-to-respond-to-view-lifecycle-events-onappear-and-ondisappear.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"How to detect the user hovering over a view | SwiftUI by Example",desc:"How to detect the user hovering over a view",link:"/hackingwithswift.com/swiftui/how-to-detect-the-user-hovering-over-a-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"How to detect the location of a tap inside a view | SwiftUI by Example",desc:"How to detect the location of a tap inside a view",link:"/hackingwithswift.com/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const U=l(h,[["render",S],["__file","how-to-detect-and-respond-to-key-press-events.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-detect-and-respond-to-key-press-events.html","title":"How to detect and respond to key press events","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to detect and respond to key press events","description":"Article(s) > How to detect and respond to key press events","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to detect and respond to key press events"},{"property":"og:description","content":"How to detect and respond to key press events"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-and-respond-to-key-press-events.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-and-respond-to-key-press-events.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to detect and respond to key press events"}],["meta",{"property":"og:description","content":"Article(s) > How to detect and respond to key press events"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-detect-and-respond-to-key-press-events-1~dark.gif"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to detect and respond to key press events\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-detect-and-respond-to-key-press-events-1~dark.gif\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.43,"words":729},"filePathRelative":"hackingwithswift.com/swiftui/how-to-detect-and-respond-to-key-press-events.md","excerpt":"\\n"}');export{U as comp,T as data};
