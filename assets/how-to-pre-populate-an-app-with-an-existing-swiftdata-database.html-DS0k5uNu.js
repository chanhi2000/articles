import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,t as l,e as a,n as t,g as e,f as c,r as u,o as r}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),w=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Preload an app with a SwiftData database means create all the data beforehand, then shipping the pre-made SwiftData store in your project. This is Apple&#39;s preferred approach to seeding an app with default data, but it does take a fair amount of work to set up.</p><p>If you want to ship a fully formed SwiftData store, the only approach you have is to create it yourself separately ahead of time. This might be hidden away in your app using a <code>#DEBUG</code> check so it&#39;s available only when running from Xcode, or it might be a wholly separate application.</p><p>As an example, you might create an app specifically to let you customize then build the database you want to ship. This might be on macOS or iOS; either work.</p><p>That might sound straightforward, but there&#39;s a significant speed bump in the plan: SwiftData uses a high-performance database mode called &quot;write-ahead logging&quot;, which means it may or may not write all your data into a single database you can copy into another app.</p><p>The good news is that we can disable write-ahead logging. The <em>bad</em> news is that we can&#39;t do it from SwiftData – we need to use Core Data. So, this means you need to recreate your SwiftData models in the Core Data model editor, then write a small amount of Core Data code to write and export your data.</p><p>If that hasn&#39;t put you off, let&#39;s begin. First you&#39;d define your model in both your App Store app and your data creation app – the former using SwiftData, and the latter using Core Data.</p><p>As an example, in SwiftData we might use something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the separate database creation app, that would mean adding a new Data Model called &quot;Model&quot;, creating a &quot;User&quot; entity inside there, then giving it a single &quot;name&quot; property with the type String.</p><p>Once that&#39;s done, replace your default <code>ContentView</code> code with this – I&#39;ve added comments throughout explaining each step:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Create Data&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Load our data model</span></span>
<span class="line">        <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token class-name">NSPersistentContainer</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Model&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Write to a specific store filename, for easier deletion and copying.</span></span>
<span class="line">        <span class="token keyword">let</span> storeURL <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span>documentsDirectory<span class="token punctuation">.</span><span class="token function">appending</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;users.store&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> description <span class="token operator">=</span> container<span class="token punctuation">.</span>persistentStoreDescriptions<span class="token punctuation">.</span>first <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Delete all existing data.</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> storeURL<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Make Core Data write to our new store URL.</span></span>
<span class="line">            description<span class="token punctuation">.</span>url <span class="token operator">=</span> storeURL</span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Force WAL mode off.</span></span>
<span class="line">            description<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;DELETE&quot;</span></span> <span class="token keyword">as</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> forPragmaNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;journal_mode&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        container<span class="token punctuation">.</span>loadPersistentStores <span class="token punctuation">{</span> description<span class="token punctuation">,</span> error <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// Add all your pre-fill data here.</span></span>
<span class="line">                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10_000</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> container<span class="token punctuation">.</span>viewContext<span class="token punctuation">)</span></span>
<span class="line">                    user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">                    container<span class="token punctuation">.</span>viewContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// Ensure all our changes are fully saved.</span></span>
<span class="line">                <span class="token keyword">try</span> container<span class="token punctuation">.</span>viewContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// Adjust this to the actual location where you want the file to be saved.</span></span>
<span class="line">                <span class="token keyword">let</span> destination <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>filePath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;/Users/twostraws/Desktop/users.store&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">copyItem</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> storeURL<span class="token punctuation">,</span> to<span class="token punctuation">:</span> destination<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to create data: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That does a number of things:</p><ol><li>It sets our store name to be users.store, so we can find it easily.</li><li>It deletes that file if it exists already.</li><li>It then forces write-ahead logging to be disabled, meaning that all data is written straight to the SQLite file.</li><li>It inserts 10,000 example <code>User</code> objects – obviously that&#39;s where you&#39;d insert your own custom data.</li><li>It triggers a full save, to make sure all our data is written to disk.</li><li>It then copies users.store to a URL of your choosing, ready to be placed into your finished, App Store app. (Note: If you&#39;re using an iOS app, using <code>URL.desktopDirectory</code> won&#39;t work, which is why I&#39;ve used the full path in the code.)</li></ol><p>Make sure you change the URL to your actual desktop, then run that project and try it out. Yyou should end up with the file &quot;users.store&quot; on your desktop.</p><p>That completes the work from your data creation app – now it&#39;s over to the actual app you want to ship to the App Store.</p><p>The first step is to copy users.store into your actual app project.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Make sure you add the file to your app&#39;s target, so it&#39;s included in the build.</p></div><p>Next, we need to modify your <code>App</code> struct so that you load a model container from that custom file, and use that with SwiftUI:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ProductionApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> container<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">modelContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> storeURL <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;users&quot;</span></span><span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;store&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to find users.store&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> storeURL<span class="token punctuation">)</span></span>
<span class="line">            container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to create model container: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now you can go ahead and query your data freely, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Query</span> <span class="token keyword">var</span> users<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token punctuation">{</span> user <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Users&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, we can treat the data just like a regular SwiftData store – just don&#39;t try to make changes to it, because we&#39;re reading from our app&#39;s bundle, rather than something directly modifiable.</p>`,23);function g(p,b){const s=u("VPCard");return r(),i("div",null,[n("h1",k,[n("a",m,[n("span",null,l(p.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,v,a(s,t(e({title:"How to pre-populate an app with an existing SwiftData database | SwiftData by Example",desc:"How to pre-populate an app with an existing SwiftData database",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-pre-populate-an-app-with-an-existing-swiftdata-database",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const S=o(d,[["render",g],["__file","how-to-pre-populate-an-app-with-an-existing-swiftdata-database.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-pre-populate-an-app-with-an-existing-swiftdata-database.html","title":"How to pre-populate an app with an existing SwiftData database","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to pre-populate an app with an existing SwiftData database","description":"Article(s) > How to pre-populate an app with an existing SwiftData database","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to pre-populate an app with an existing SwiftData database"},{"property":"og:description","content":"How to pre-populate an app with an existing SwiftData database"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-pre-populate-an-app-with-an-existing-swiftdata-database.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-pre-populate-an-app-with-an-existing-swiftdata-database.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to pre-populate an app with an existing SwiftData database"}],["meta",{"property":"og:description","content":"Article(s) > How to pre-populate an app with an existing SwiftData database"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to pre-populate an app with an existing SwiftData database\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.45,"words":1036},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-pre-populate-an-app-with-an-existing-swiftdata-database.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{S as comp,x as data};
