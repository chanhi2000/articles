import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as u,g as m,w as a,f as h,r as t,o as k,d as o}from"./app-BgNevrm5.js";const b={},v={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},w=n("hr",null,null,-1),f=h(`<p>Now that we have our <code>Students</code> table created, it’s time to start inserting data into the database. In this section, we’ll cover how to insert both single and multiple records using Python and SQLite, and how to avoid common security issues like SQL injection by using parameterized queries.</p><hr><h2 id="how-to-insert-a-single-record" tabindex="-1"><a class="header-anchor" href="#how-to-insert-a-single-record"><span>How to Insert a Single Record</span></a></h2><p>To insert data into the database, we use the <code>INSERT INTO</code> SQL command. Let’s start by inserting a single record into our <code>Students</code> table.</p><p>Here’s the basic SQL syntax for inserting a single record:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Students <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;johndoe@example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>However, instead of writing SQL directly in our Python script with hardcoded values, we’ll use parameterized queries to make our code more secure and flexible. Parameterized queries help prevent SQL injection, a common attack where malicious users can manipulate the SQL query by passing harmful input.</p><p>Here’s how we can insert a single record into the <code>Students</code> table using a parameterized query:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Use &#39;with&#39; to open and close the connection automatically</span></span>
<span class="line"><span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">    cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Insert a record into the Students table</span></span>
<span class="line">    insert_query <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">    INSERT INTO Students (name, age, email) </span>
<span class="line">    VALUES (?, ?, ?);</span>
<span class="line">    &#39;&#39;&#39;</span></span>
<span class="line">    student_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&#39;jane@example.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_query<span class="token punctuation">,</span> student_data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Commit the changes automatically</span></span>
<span class="line">    connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># No need to call connection.close(); it&#39;s done automatically!</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Record inserted successfully!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>?</code> placeholders represent the values to be inserted into the table. The actual values are passed as a tuple (<code>student_data</code>) in the <code>cursor.execute()</code> method.</p><h2 id="how-to-insert-multiple-records" tabindex="-1"><a class="header-anchor" href="#how-to-insert-multiple-records"><span>How to Insert Multiple Records</span></a></h2><p>If you want to insert multiple records at once, you can use the <code>executemany()</code> method in Python. This method takes a list of tuples, where each tuple represents one record.</p><p>To make our example more dynamic, we can use the <code>Faker</code> library to generate random student data. This is useful for testing and simulating real-world scenarios.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker</span>
<span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Initialize Faker</span></span>
<span class="line">fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;en_IN&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Use &#39;with&#39; to open and close the connection automatically</span></span>
<span class="line"><span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">    cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Insert a record into the Students table</span></span>
<span class="line">    insert_query <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">    INSERT INTO Students (name, age, email) </span>
<span class="line">    VALUES (?, ?, ?);</span>
<span class="line">    &#39;&#39;&#39;</span></span>
<span class="line">    students_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fake<span class="token punctuation">.</span>random_int<span class="token punctuation">(</span></span>
<span class="line">        <span class="token builtin">min</span><span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fake<span class="token punctuation">.</span>email<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Execute the query for multiple records</span></span>
<span class="line">    cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>insert_query<span class="token punctuation">,</span> students_data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Commit the changes</span></span>
<span class="line">    connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Print confirmation message</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Fake student records inserted successfully!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this code:</p><ul><li><code>Faker()</code> generates random names, ages, and emails for students. Passing the locale(<code>[‘en_IN’]</code>) is optional.</li><li><code>cursor.executemany()</code>: This method allows us to insert multiple records at once, making the code more efficient.</li><li><code>students_data</code>: A list of tuples where each tuple represents one student’s data.</li></ul><hr><h2 id="how-to-handle-common-issues-sql-injection" tabindex="-1"><a class="header-anchor" href="#how-to-handle-common-issues-sql-injection"><span>How to Handle Common Issues: SQL Injection</span></a></h2><p>SQL injection is a security vulnerability where attackers can insert or manipulate SQL queries by providing harmful input. For example, an attacker might try to inject code like <code>&#39;; DROP TABLE Students; --</code> to delete the table.</p><p>By using parameterized queries (as demonstrated above), we avoid this issue. The <code>?</code> placeholders in parameterized queries ensure that input values are treated as data, not as part of the SQL command. This makes it impossible for malicious code to be executed.</p>`,20);function _(i,S){const l=t("VPCard"),e=t("router-link"),p=t("SiteInfo");return k(),r("div",null,[n("h1",v,[n("a",g,[n("span",null,d(i.$frontmatter.title)+" 관련",1)])]),s(l,u(m({title:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",link:"/freecodecamp.org/work-with-sqlite-in-python-handbook/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[s(e,{to:"#how-to-insert-a-single-record"},{default:a(()=>[o("How to Insert a Single Record")]),_:1})]),n("li",null,[s(e,{to:"#how-to-insert-multiple-records"},{default:a(()=>[o("How to Insert Multiple Records")]),_:1})]),n("li",null,[s(e,{to:"#how-to-handle-common-issues-sql-injection"},{default:a(()=>[o("How to Handle Common Issues: SQL Injection")]),_:1})])])]),w,s(p,{name:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",url:"https://freecodecamp.org/news/work-with-sqlite-in-python-handbook/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}),f])}const H=c(b,[["render",_],["__file","how-to-insert-data-into-a-table.html.vue"]]),T=JSON.parse('{"path":"/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-insert-data-into-a-table.html","title":"How to Insert Data into a Table","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to Insert Data into a Table","description":"Article(s) > (4/11) How to Work with SQLite in Python – A Handbook for Beginners","category":["Python","SQLite","Article(s)"],"tag":["blog","freecodecamp.org","py","python","sqlite"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > (4/11) How to Work with SQLite in Python – A Handbook for Beginners"},{"property":"og:description","content":"How to Insert Data into a Table"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-insert-data-into-a-table.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-insert-data-into-a-table.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Insert Data into a Table"}],["meta",{"property":"og:description","content":"Article(s) > (4/11) How to Work with SQLite in Python – A Handbook for Beginners"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"name":"twitter:image:alt","content":"How to Insert Data into a Table"}],["meta",{"property":"article:author","content":"Ashutosh Krishna"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"sqlite"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Insert Data into a Table\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Krishna\\"}]}"]],"date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Ashutosh Krishna","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"},"headers":[{"level":2,"title":"How to Insert a Single Record","slug":"how-to-insert-a-single-record","link":"#how-to-insert-a-single-record","children":[]},{"level":2,"title":"How to Insert Multiple Records","slug":"how-to-insert-multiple-records","link":"#how-to-insert-multiple-records","children":[]},{"level":2,"title":"How to Handle Common Issues: SQL Injection","slug":"how-to-handle-common-issues-sql-injection","link":"#how-to-handle-common-issues-sql-injection","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":2.62,"words":787},"filePathRelative":"freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-insert-data-into-a-table.md","localizedDate":"2024년 10월 2일","excerpt":"\\n","copyright":{"author":"Ashutosh Krishna"}}');export{H as comp,T as data};
