import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as a,n as m,g as h,w as t,d as s,f as g,r as p,o as v}from"./app-BgNevrm5.js";const f={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},x=n("hr",null,null,-1),S=g(`<p>React.js is 11 years old, and it has become one of the most popular JavaScript libraries out there.</p><p>And now, React is transitioning from version 18 to version 19. So hold onto your hats, React enthusiasts 🎩. React 19 has recently landed, and it’s a game-changer.</p><p>But before you start worrying about a steep learning curve, here’s some great news: React 19 isn’t about adding complexity – it’s about removing it.</p><p>In this guide, you’ll learn how this new version will simplify your coding life and turbocharge your React projects.</p><p>Excited to try out React 19? 🤩 While it&#39;s still in the canary stage, you can start experimenting with it by installing the canary version today. This update promises a smoother experience by automating what used to be manual optimizations.</p><hr><h2 id="react-compiler-the-magic-behind-the-scenes" tabindex="-1"><a class="header-anchor" href="#react-compiler-the-magic-behind-the-scenes"><span>React Compiler: The Magic Behind the Scenes</span></a></h2><p>The star of React 19 is its new compiler. 🎉 This compiler transforms your React code into plain JavaScript, which boosts performance and, even better, frees you from constantly tweaking performance manually.</p><p>To optimize our React applications, we use some inbuilt methods like <code>useMemo</code> or <code>useCallback</code>. This tells React not to compile the code again if the inputs don’t change.</p><p>But if you forget to apply memoization, it results in wasting React resources and computational power. To deal with this, React 19 introduced React Compiler.</p><p>Say goodbye to manual optimizations and hello to cleaner code:</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><p>The new compiler turns React code into optimized JavaScript, removing the need for manual optimizations like memoization.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token comment">// No need for useCallback/useMemo</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Optimized!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="no-more-memoization-hooks" tabindex="-1"><a class="header-anchor" href="#no-more-memoization-hooks"><span>No More Memoization Hooks</span></a></h2><p>Remember the days of juggling between <code>useCallback</code>, <code>useMemo</code>, and <code>memo</code> to optimize performance? 😅 With React 19, those days are over. The new compiler optimizes your code behind the scenes, so you can drop these hooks and focus on writing beautiful, clean React components.</p><p>Memoization solves the complex calculation problems inside React, resulting in application optimization and performance improvements.</p><p>Previously, to apply Memoziation you had to use the <code>useMemo</code> hook. Here’s what that looked like in code:</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><ul><li>The <code>expensiveCalculation</code> the function is computationally heavy, but using <code>useMemo</code>, it&#39;s only recalculated when <code>count</code> changes.</li><li>The input field can be updated without triggering a recalculation of <code>expensiveCalculation</code>, which optimizes performance.</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token comment">//React 18 </span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ExpensiveComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>input<span class="token punctuation">,</span> setInput<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Memoize expensive calculation</span></span>
<span class="line">  <span class="token keyword">const</span> expensiveCalculation <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Calculating...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      sum <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Recalculate only when \`count\` changes</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Expensive Calculation: </span><span class="token punctuation">{</span>expensiveCalculation<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment Count (</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text">)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> </span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> </span>
<span class="line">        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>input<span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setInput</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Type something<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ExpensiveComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now with the compiler in React 19, this is no longer required. You can just write your code and React will apply the memoziation.</p><p>Look at this code example:</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><p>you no longer need to use <code>useCallback</code> or <code>useMemo</code> – React 19 automatically handles optimizations.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token comment">// No need for manual memoization React 19</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="no-forwardref-simplified-ref-handling" tabindex="-1"><a class="header-anchor" href="#no-forwardref-simplified-ref-handling"><span>No <code>forwardRef</code>: Simplified Ref Handling</span></a></h2><p>Using <code>forwardRef</code> to pass refs around used to be a bit of a chore. 😓 But in React 19, you can pass refs just like any other prop. This streamlines your component code and makes ref handling a breeze. 🧹</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> innerRef <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>innerRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>forwardRef</code> is no longer required – instead, refs are passed like regular props.</p></div><hr><h2 id="the-new-use-hook-a-game-changer" tabindex="-1"><a class="header-anchor" href="#the-new-use-hook-a-game-changer"><span>The New <code>use()</code> Hook: A Game Changer</span></a></h2><p>The versatile new <code>use()</code> hook replaces multiple hooks, such as <code>useEffect</code> for data fetching as well as <code>useContext</code> and <code>useState</code> for consuming context data. It simplifies your code by handling promises and context with a single, elegant solution.</p><p>Look at this code example:</p><div class="hint-container note"><p class="hint-container-title">Code Explanation</p><ul><li><code>useEffect</code> is triggered after the component mounts to initiate data fetching.</li><li>We maintain <code>loading</code>, <code>data</code>, and <code>error</code> states to manage and display the appropriate UI.</li><li>Once the data is fetched, the state updates, triggering a re-render to display the data.</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">DataFetchingComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Error: </span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Data:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> DataFetchingComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now with the help of the new <code>use()</code> hook in React 19, data fetching becomes easier and you don’t need to depend on state management hooks like <code>useState()</code> anymore.</p><p>Here is an example:</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><ul><li><strong>Suspense and</strong> <code>use()</code>: When you use <code>use()</code>, it suspends the component rendering until the promise resolves. If an error occurs, it can also trigger a <code>Suspense</code> error boundary.</li><li><strong>No need for</strong> <code>useEffect</code>: There&#39;s no need to manually manage data fetching with side effects, as React handles it under the hood.</li><li><strong>Error and loading states</strong>: These can now be managed globally using <code>Suspense</code> error boundaries without manually tracking states like <code>loading</code> or <code>error</code>.</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Function to fetch data</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to fetch data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">DataFetchingComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// \`use()\` suspends the component until the promise resolves</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Data:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> DataFetchingComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="fetch-data-with-use-vs-useeffect" tabindex="-1"><a class="header-anchor" href="#fetch-data-with-use-vs-useeffect"><span>Fetch Data with <code>use()</code> vs. <code>useEffect</code></span></a></h3><p>Fetching data used to require a bit of boilerplate with <code>useEffect</code>. With <code>use()</code>, you just resolve the promise and use React Suspense for a clean, easy data-fetching experience. 🧼 This means less code and more focus on what matters.</p><h3 id="use-context-with-use" tabindex="-1"><a class="header-anchor" href="#use-context-with-use"><span>Use Context with <code>use()</code></span></a></h3><p>Handling context data has also become more straightforward. The new <code>use()</code> hook can now consume context directly, eliminating the need for <code>useContext</code> and making context management more intuitive. 🎯</p><hr><h2 id="directives-a-fresh-approach" tabindex="-1"><a class="header-anchor" href="#directives-a-fresh-approach"><span>Directives: A Fresh Approach</span></a></h2><p>If you’ve been using Next.js, you might have seen directives already. 🌐 React 19 introduces directives to simplify component configuration. Use <code>use client</code> for client-side components and <code>use server</code> for server-side ones. It’s as easy as adding a string at the top of your file:</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><p>Use <code>use client</code> and <code>use server</code> to declare client-side or server-side components.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ClientComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Client Side</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="actions-streamlined-form-handling" tabindex="-1"><a class="header-anchor" href="#actions-streamlined-form-handling"><span>Actions: Streamlined Form Handling</span></a></h2><p>Forms just got a major upgrade with actions. 💥 Actions are functions connected to form submissions that can run on either the server or client side. This means cleaner code and a smoother form-handling process.</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><p>Actions handle form submissions, running on the client or server.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token parameter">formData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">handleSubmit</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="client-actions-a-practical-example" tabindex="-1"><a class="header-anchor" href="#client-actions-a-practical-example"><span>Client Actions: A Practical Example</span></a></h3><p>Client actions are great for immediate feedback. For example, alerting users with their input values has never been simpler. Just use <code>use client</code> and connect the form action to the form’s action prop. Easy peasy! 🥳</p><hr><h2 id="useformstatus-managing-form-state" tabindex="-1"><a class="header-anchor" href="#useformstatus-managing-form-state"><span><code>useFormStatus()</code>: Managing Form State</span></a></h2><p>Keep track of your form submissions with the <code>useFormStatus()</code> hook. 🕒 It helps manage form states like disabling the submit button while the form is pending. This is a must-have for smooth user experiences.</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><p><code>useFormStatus()</code> tracks form submission states, like disabling a button during submission.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> pending <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFormStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pending<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="useformstate-stateful-form-actions" tabindex="-1"><a class="header-anchor" href="#useformstate-stateful-form-actions"><span><code>useFormState()</code>: Stateful Form Actions</span></a></h2><p>We now have <code>useFormState()</code>, which is a new hook for managing form state. 🎛️ It’s similar to <code>useState</code> but works with form actions, allowing you to access both previous state and submitted data. It’s perfect for scenarios like adding items to a cart.</p><p>I feel <code>useFormState()</code> is closely associated with the features in the React Hook Form library, as its working features are mostly similar.</p><p>Here is a code example to help you understand it better:</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><ol><li><strong>Import Hooks</strong>: We import <code>useForm</code> and <code>useFormState</code> from <code>react-hook-form</code>.</li><li><strong>Setup Form</strong>: <ul><li><code>useForm</code>: This hook initializes the form methods, including <code>register</code>, <code>handleSubmit</code>, and <code>control</code>.</li><li><code>useFormState</code>: We use this hook to extract form-state properties like <code>isSubmitting</code>, <code>isDirty</code>, and <code>isValid</code>.</li></ul></li><li><strong>Register Inputs</strong>: We register each input field using the <code>register</code> function, specifying any validation rules (for example <code>required</code>).</li><li><strong>Handle Submission</strong>: The <code>onSubmit</code> function handles the form submission, where you can perform your desired actions with the form data.</li><li><strong>Form State Info</strong>: We display the form&#39;s current state (whether it&#39;s dirty or submitted) below the form.</li></ol><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useForm<span class="token punctuation">,</span> useFormState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-hook-form&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MyForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> register<span class="token punctuation">,</span> handleSubmit<span class="token punctuation">,</span> control <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> isSubmitting<span class="token punctuation">,</span> isDirty<span class="token punctuation">,</span> isValid <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFormState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> control <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span>onSubmit<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">First Name:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lastName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Last Name:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;lastName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isSubmitting <span class="token operator">||</span> <span class="token operator">!</span>isValid<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Submit</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Form is </span><span class="token punctuation">{</span>isDirty <span class="token operator">?</span> <span class="token string">&#39;dirty&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pristine&#39;</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submitting: </span><span class="token punctuation">{</span>isSubmitting <span class="token operator">?</span> <span class="token string">&#39;Yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;No&#39;</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> MyForm<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="key-features-of-useformstate" tabindex="-1"><a class="header-anchor" href="#key-features-of-useformstate"><span>Key Features of <code>useFormState</code></span></a></h3><ul><li><strong>Performance</strong>: <code>useFormState</code> only re-renders when the specific fields it&#39;s monitoring change, making it efficient.</li><li><strong>Controlled State</strong>: You can easily manage and observe the form&#39;s state without writing boilerplate code for handling changes and validations.</li></ul><hr><h2 id="useoptimistic-enhancing-user-experience" tabindex="-1"><a class="header-anchor" href="#useoptimistic-enhancing-user-experience"><span><code>useOptimistic()</code>: Enhancing User Experience</span></a></h2><p>For real-time applications, the <code>useOptimistic()</code> hook is helpful. 💬 It allows for optimistic updates, making your app feel snappy by updating the UI instantly and syncing with the server in the background.</p><div class="hint-container note"><p class="hint-container-title">Code explanation</p><p>Enables optimistic UI updates before syncing with the server.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>optimisticState<span class="token punctuation">,</span> setOptimistic<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useOptimistic</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2>`,65),j=n("p",null,"If you’re ready to streamline your React projects, embrace the future with React 19 and make your development experience smoother and more enjoyable. 🌟",-1),R={href:"https://x.com/prankurpandeyy",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"prankurpandeyy",-1),C={href:"https://linkedin.com/in/prankurpandeyy",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"prankurpandeyy",-1),E={href:"https://prankurpandeyy.netlify.app",target:"_blank",rel:"noopener noreferrer"};function N(c,A){const i=p("VPCard"),e=p("router-link"),l=p("SiteInfo"),u=p("RouteLink"),o=p("FontIcon");return v(),d("div",null,[n("h1",b,[n("a",y,[n("span",null,k(c.$frontmatter.title)+" 관련",1)])]),a(i,m(h({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[a(e,{to:"#react-compiler-the-magic-behind-the-scenes"},{default:t(()=>[s("React Compiler: The Magic Behind the Scenes")]),_:1})]),n("li",null,[a(e,{to:"#no-more-memoization-hooks"},{default:t(()=>[s("No More Memoization Hooks")]),_:1})]),n("li",null,[a(e,{to:"#no-forwardref-simplified-ref-handling"},{default:t(()=>[s("No forwardRef: Simplified Ref Handling")]),_:1})]),n("li",null,[a(e,{to:"#the-new-use-hook-a-game-changer"},{default:t(()=>[s("The New use() Hook: A Game Changer")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#fetch-data-with-use-vs-useeffect"},{default:t(()=>[s("Fetch Data with use() vs. useEffect")]),_:1})]),n("li",null,[a(e,{to:"#use-context-with-use"},{default:t(()=>[s("Use Context with use()")]),_:1})])])]),n("li",null,[a(e,{to:"#directives-a-fresh-approach"},{default:t(()=>[s("Directives: A Fresh Approach")]),_:1})]),n("li",null,[a(e,{to:"#actions-streamlined-form-handling"},{default:t(()=>[s("Actions: Streamlined Form Handling")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#client-actions-a-practical-example"},{default:t(()=>[s("Client Actions: A Practical Example")]),_:1})])])]),n("li",null,[a(e,{to:"#useformstatus-managing-form-state"},{default:t(()=>[s("useFormStatus(): Managing Form State")]),_:1})]),n("li",null,[a(e,{to:"#useformstate-stateful-form-actions"},{default:t(()=>[s("useFormState(): Stateful Form Actions")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#key-features-of-useformstate"},{default:t(()=>[s("Key Features of useFormState")]),_:1})])])]),n("li",null,[a(e,{to:"#useoptimistic-enhancing-user-experience"},{default:t(()=>[s("useOptimistic(): Enhancing User Experience")]),_:1})]),n("li",null,[a(e,{to:"#conclusion"},{default:t(()=>[s("Conclusion")]),_:1})])])]),x,a(l,{name:"New React 19 Features You Should Know –  Explained with Code Examples",desc:"React.js is 11 years old, and it has become one of the most popular JavaScript libraries out there. And now, React is transitioning from version 18 to version 19. So hold onto your hats, React enthusiasts 🎩. React 19 has recently landed, and it’s a ...",url:"https://freecodecamp.org/news/new-react-19-features-you-should-know-with-code-examples/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727367514092/a75164cd-1e2e-4b0d-8c2e-5d000cee01f0.png"}),S,n("p",null,[s("React 19 is here to simplify your coding experience and enhance performance. 🎉 To dive deep into all these features and more, check out my recent "),a(u,{to:"/freecodecamp.org/learn-react-hooks-with-example-code.html"},{default:t(()=>[s("article")]),_:1}),s(" about React Hooks.")]),j,n("ul",null,[n("li",null,[n("a",R,[s("Follow Me on X ("),a(o,{icon:"fa-brands fa-x-twitter"}),F,s(")")])]),n("li",null,[n("a",C,[s("Follow me on Linkedin ("),a(o,{icon:"fa-brands fa-linkedin"}),_,s(")")])]),n("li",null,[n("a",E,[a(o,{icon:"fas fa-globe"}),s("Look at my Portfolio here")])])])])}const M=r(f,[["render",N],["__file","new-react-19-features-you-should-know-with-code-examples.html.vue"]]),D=JSON.parse('{"path":"/freecodecamp.org/new-react-19-features-you-should-know-with-code-examples.html","title":"New React 19 Features You Should Know –  Explained with Code Examples","lang":"en-US","frontmatter":{"lang":"en-US","title":"New React 19 Features You Should Know –  Explained with Code Examples","description":"Article(s) > New React 19 Features You Should Know –  Explained with Code Examples","icon":"fa-brands fa-react","category":["Article(s)","Node.js","React.js"],"tag":["blog","freecodecamp.org","node","nodejs","node-js","react","reactjs","react-js"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > New React 19 Features You Should Know –  Explained with Code Examples"},{"property":"og:description","content":"New React 19 Features You Should Know –  Explained with Code Examples"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/new-react-19-features-you-should-know-with-code-examples.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/new-react-19-features-you-should-know-with-code-examples.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"New React 19 Features You Should Know –  Explained with Code Examples"}],["meta",{"property":"og:description","content":"Article(s) > New React 19 Features You Should Know –  Explained with Code Examples"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727367514092/a75164cd-1e2e-4b0d-8c2e-5d000cee01f0.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727367514092/a75164cd-1e2e-4b0d-8c2e-5d000cee01f0.png"}],["meta",{"name":"twitter:image:alt","content":"New React 19 Features You Should Know –  Explained with Code Examples"}],["meta",{"property":"article:author","content":"Prankur Pandey"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:published_time","content":"2024-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"New React 19 Features You Should Know –  Explained with Code Examples\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727367514092/a75164cd-1e2e-4b0d-8c2e-5d000cee01f0.png\\"],\\"datePublished\\":\\"2024-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Prankur Pandey\\"}]}"]],"prev":"/programming/js-react/articles/README.md","date":"2024-09-30T00:00:00.000Z","isOriginal":false,"author":"Prankur Pandey","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727367514092/a75164cd-1e2e-4b0d-8c2e-5d000cee01f0.png"},"headers":[{"level":2,"title":"React Compiler: The Magic Behind the Scenes","slug":"react-compiler-the-magic-behind-the-scenes","link":"#react-compiler-the-magic-behind-the-scenes","children":[]},{"level":2,"title":"No More Memoization Hooks","slug":"no-more-memoization-hooks","link":"#no-more-memoization-hooks","children":[]},{"level":2,"title":"No forwardRef: Simplified Ref Handling","slug":"no-forwardref-simplified-ref-handling","link":"#no-forwardref-simplified-ref-handling","children":[]},{"level":2,"title":"The New use() Hook: A Game Changer","slug":"the-new-use-hook-a-game-changer","link":"#the-new-use-hook-a-game-changer","children":[{"level":3,"title":"Fetch Data with use() vs. useEffect","slug":"fetch-data-with-use-vs-useeffect","link":"#fetch-data-with-use-vs-useeffect","children":[]},{"level":3,"title":"Use Context with use()","slug":"use-context-with-use","link":"#use-context-with-use","children":[]}]},{"level":2,"title":"Directives: A Fresh Approach","slug":"directives-a-fresh-approach","link":"#directives-a-fresh-approach","children":[]},{"level":2,"title":"Actions: Streamlined Form Handling","slug":"actions-streamlined-form-handling","link":"#actions-streamlined-form-handling","children":[{"level":3,"title":"Client Actions: A Practical Example","slug":"client-actions-a-practical-example","link":"#client-actions-a-practical-example","children":[]}]},{"level":2,"title":"useFormStatus(): Managing Form State","slug":"useformstatus-managing-form-state","link":"#useformstatus-managing-form-state","children":[]},{"level":2,"title":"useFormState(): Stateful Form Actions","slug":"useformstate-stateful-form-actions","link":"#useformstate-stateful-form-actions","children":[{"level":3,"title":"Key Features of useFormState","slug":"key-features-of-useformstate","link":"#key-features-of-useformstate","children":[]}]},{"level":2,"title":"useOptimistic(): Enhancing User Experience","slug":"useoptimistic-enhancing-user-experience","link":"#useoptimistic-enhancing-user-experience","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.55,"words":1964},"filePathRelative":"freecodecamp.org/new-react-19-features-you-should-know-with-code-examples.md","localizedDate":"September 30, 2024","excerpt":"\\n","copyright":{"author":"Prankur Pandey"}}');export{M as comp,D as data};
