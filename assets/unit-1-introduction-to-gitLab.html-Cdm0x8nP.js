import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as e,t as m,e as n,n as b,g,w as s,d as t,f as i,r as l,o as f}from"./app-BgNevrm5.js";const v={},k={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},_=e("hr",null,null,-1),L=e("h2",{id:"welcome",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#welcome"},[e("span",null,"Welcome")])],-1),x=e("ul",null,[e("li",null,"This course is for people new to DevOps who want to use GitLab to build, test and deploy their software"),e("li",null,"You will get hands-on experience building pipelines with GitLab CI and deploying software to AWS")],-1),G=i(`<hr><h2 id="your-first-gitlab-project" tabindex="-1"><a class="header-anchor" href="#your-first-gitlab-project"><span>Your first GitLab project</span></a></h2><ul><li>we will be using GitLab.com in this course</li><li>create a free GitLab.com account</li><li>by default, you will get a free trial, and your account will be downgraded to a free one after 30 days</li><li>change the theme: <code>[Profile]</code> &gt; <code>[Preferences]</code> &gt; <code>[Syntax highlighting theme]</code> &gt; <code>[Monokai]</code></li><li>Enable <em>Render whitespace characters in the Web IDE</em></li><li>GitLab CI pipelines are defined in a file called <code>.gitlab-ci.yml</code></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">test</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span> echo &quot;Hello world&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>to run your pipeline using the GitLab.com infrastructure, you need to verify your account with a credit card</li><li>validation troubleshooting: <ul><li>Validation is stuck. Nothing happens. If the interface is stuck or loading after 2-3 minutes of waiting, open a new tab and return to your main project page. If you don&#39;t see the message that you need to validate your account, it could mean that the validation was successful.</li></ul></li></ul>`,5),j={class:"hint-container info"},q=e("p",{class:"hint-container-title"},"📚 Resources",-1),C=e("li",null,[e("a",{href:"https://medium.com/devops-with-valentine/2021-how-to-your-ssh-key-for-gitlab-on-windows-10-587579192be0?sk=b836675d967a923ea81d911d73702629",target:"_blank",rel:"noopener noreferrer"},"How to set up your SSH key for GitLab on Windows 10")],-1),I=e("li",null,[e("a",{href:"https://medium.com/devops-with-valentine/2021-how-to-setup-your-ssh-key-for-gitlab-on-macos-dfccec6904fb?sk=fe992efb74d7bd794cf76bb8a26f0437",target:"_blank",rel:"noopener noreferrer"},"How to set up your SSH key for GitLab on macOS")],-1),D=e("li",null,[e("a",{href:"https://medium.com/devops-with-valentine/2021-how-to-your-ssh-key-for-gitlab-on-linux-1b94e2a3a49a?sk=1bca4bdb5c879f29be839aa42623113d",target:"_blank",rel:"noopener noreferrer"},"How to set up your SSH key for GitLab on Linux")],-1),S={href:"https://www.youtube.com/watch?v=4lxvVj7wlZw",target:"_blank",rel:"noopener noreferrer"},W=e("li",null,[e("a",{href:"https://medium.com/devops-with-valentine/how-to-configure-your-own-gitlab-runner-with-a-docker-executor-on-aws-ec2-d76c7be0660d?sk=fcb49b94811d5daeb5eb182e0afe467f",target:"_blank",rel:"noopener noreferrer"},"How to Configure your own GitLab Runner with a Docker Executor on AWS EC2")],-1),R=e("li",null,[e("a",{href:"https://medium.com/devops-with-valentine/setup-gitlab-ci-runner-with-docker-executor-on-windows-10-11-c58dafba9191?sk=b550a70c0a7a60f1a3250a53145a3541",target:"_blank",rel:"noopener noreferrer"},"How to Configure your own GitLab Runner with a Docker Executor on Windows 10 or Windows 11")],-1),V=i('<hr><h2 id="your-first-pipeline" tabindex="-1"><a class="header-anchor" href="#your-first-pipeline"><span>Your first pipeline</span></a></h2><ul><li>when we build and ship software, we need to follow a series of steps</li><li>we define the GitLab CI pipeline using YAML</li><li>a job can execute one or multiple commands</li><li><code>mkdir build</code> - creates a new folder called <code>build</code></li><li><code>touch file.txt</code> - creates a new file called <code>file.txt</code></li><li><code>&gt;&gt;</code> is called a redirection operator and appends the output from a previous command to a file</li><li><code>cat</code> can be used for displaying the contents of a file</li><li>use Linux Alpine for this job because it is a very lightweight distribution</li><li>if no stage is defined in the job config, the <em>test</em> stage will be assigned</li><li>a pipeline is composed of a series of jobs organized in stages</li></ul>',3),O={class:"hint-container important"},P=e("p",{class:"hint-container-title"},"Pipeline after this lecture",-1),Y=e("code",null,".gitlab-ci.yml",-1),A=i(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">build laptop</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Building a laptop&quot;</span>
<span class="line">    <span class="token punctuation">-</span> mkdir build</span>
<span class="line">    <span class="token punctuation">-</span> touch build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Mainboard&quot; <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> cat build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Keyboard&quot; <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> cat build/computer.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=i('<hr><h2 id="help-my-pipeline-is-not-working" tabindex="-1"><a class="header-anchor" href="#help-my-pipeline-is-not-working"><span>Help, my pipeline is not working</span></a></h2><ul><li>here are some common mistakes that lead to errors in the jobs: <ul><li>no space after <code>-</code>, like <code>-echo &quot;Foo&quot;</code></li><li>bad indentation</li><li>forgetting to add column <code>:</code> after stages: , build: , script:</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">📚 Resources</p><ul><li><a href="https://medium.com/devops-with-valentine/top-10-most-common-errors-in-gitlab-ci-ce5d206e8c03?sk=0b57f50bea597d3d97736fc90dac9d51" target="_blank" rel="noopener noreferrer">Top 10 Most Common Errors In GitLab CI Pipelines</a></li></ul></div><hr><h2 id="what-is-yaml" tabindex="-1"><a class="header-anchor" href="#what-is-yaml"><span>What is YAML?</span></a></h2><ul><li>you need to know some YAML basics to write GitLab CI pipelines</li><li>YAML is somewhat similar to JSON or XML</li><li>XML, JSON and YAML, and human-readable data interchange formats</li><li>YAML is being often used for storing configurations</li></ul><hr><h2 id="what-is-a-shell" tabindex="-1"><a class="header-anchor" href="#what-is-a-shell"><span>What is a shell?</span></a></h2><ul><li>we typically run commands such as <code>echo</code>, <code>touch</code>, <code>mkdir</code>, <code>cat</code> and so on through a command-line interface or CLI</li><li>to automate the building &amp; releasing of software, we rely on tools that have no UI, so we need to use the CLI</li></ul><div class="hint-container info"><p class="hint-container-title">📚 Resources</p><ul><li><a href="https://fixme" target="_blank" rel="noopener noreferrer">How to setup a Linux environment on Windows</a></li></ul></div><hr><h2 id="gitlab-architecture" tabindex="-1"><a class="header-anchor" href="#gitlab-architecture"><span>GitLab architecture</span></a></h2><ul><li>at a minimum, the GitLab architecture contains the GitLab Server (also known as the coordinator) and a GitLab Runner</li><li>the GitLab server manages the execution of the pipeline and its jobs and stores the results</li><li>when a job needs to be executed, the GitLab server will find a runner to run the job</li><li>a runner is a simple program that executes a job</li><li>a working GitLab CI setup must have at least one runner, but there are often more of them to help distribute the load</li><li>there can also be specific runners that have a particular software or hardware configuration (this is outside of the scope of this course)</li><li>this is a simplified overview of the steps involved when a job is executed: <ul><li>the GitLab server (coordinator) locates a GitLab Runner and sends instructions for running the job</li><li>the GitLab Runner will pull the Docker image specified in the job configuration (or the default image if no Docker image is specified)</li><li>the GitLab Runner will start the Docker container</li><li>the GitLab Runner will get the files stored in the Git repository</li><li>the GitLab Runner run the commands from the <code>script</code> keyword inside the Docker container</li><li>the GitLab Runner report back to the GitLab server (coordinator) the results of the job execution</li><li>the GitLab Runner will terminate the Docker container</li></ul></li></ul>',14),B=i('<blockquote><p>Docker in 100 Seconds</p></blockquote><div class="hint-container info"><p class="hint-container-title">📚 Resources</p><ul><li><a href="https://docs.docker.com/get-started/overview" target="_blank" rel="noopener noreferrer">What is Docker</a></li></ul></div><hr><h2 id="pipeline-stages" tabindex="-1"><a class="header-anchor" href="#pipeline-stages"><span>Pipeline stages</span></a></h2><ul><li>by default, a job will be assigned to the <em>Test</em> stage</li><li>if two or more jobs belong to the same stage, they will be executed in parallel</li><li>the <code>stages:</code> keyword allows us to define the stages of the pipeline</li><li>the keyword <code>stage:</code> allows us to associate a job with a stage</li></ul>',5),E={class:"hint-container important"},H=e("p",{class:"hint-container-title"},"Pipeline after this lecture",-1),T=e("code",null,".gitlab-ci.yml",-1),U=i(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">stages</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> build</span>
<span class="line">  <span class="token punctuation">-</span> test</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">build laptop</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine</span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Building a laptop&quot;</span>
<span class="line">    <span class="token punctuation">-</span> mkdir build</span>
<span class="line">    <span class="token punctuation">-</span> touch build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Mainboard&quot; <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> cat build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Keyboard&quot; <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> build/computer.txt</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">test laptop</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine</span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> test <span class="token punctuation">-</span>f build/computer.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N=i(`<hr><h2 id="why-do-pipelines-fail" tabindex="-1"><a class="header-anchor" href="#why-do-pipelines-fail"><span>Why do pipelines fail?</span></a></h2><ul><li>CLI programs indicate if their execution was successful or not by returning an exit code</li><li>an exit code 0 will indicate that a program has been executed successfully</li><li>any other exit code, which can be from 1 to 255, indicates failure</li><li>if GitLab detects a non-zero exit code, the job execution stops</li><li><strong>Highly important tip:</strong> reading the job logs from top to bottom is KEY to understanding WHY a job has failed</li></ul><hr><h2 id="job-artifacts" tabindex="-1"><a class="header-anchor" href="#job-artifacts"><span>Job artifacts</span></a></h2><ul><li>every job is executed in a separate container, so by default, no files are shared</li><li>to save the build results, we need to define the file(s) or folders as artifacts</li><li>in GitLab, we do this by using the artifacts keyword:</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">build laptop</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">...</span></span>
<span class="line">  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),z={class:"hint-container important"},Q=e("p",{class:"hint-container-title"},"Pipeline after this lecture",-1),J=e("code",null,".gitlab-ci.yml",-1),K=i(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">stages</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> build</span>
<span class="line">  <span class="token punctuation">-</span> test</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">build laptop</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine</span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Building a laptop&quot;</span>
<span class="line">    <span class="token punctuation">-</span> mkdir build</span>
<span class="line">    <span class="token punctuation">-</span> touch build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Mainboard&quot; <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> cat build/computer.txt</span>
<span class="line">    <span class="token punctuation">-</span> echo &quot;Keyboard&quot; <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> build/computer.txt</span>
<span class="line">  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> build</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">test laptop</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine</span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> test <span class="token punctuation">-</span>f build/computer.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),X=i(`<hr><h2 id="testing-the-build" tabindex="-1"><a class="header-anchor" href="#testing-the-build"><span>Testing the build</span></a></h2><ul><li>our goal is to automate both the build process and the test process</li><li>currently, we are only testing the content of the file by downloading the job artifacts or by using the <code>cat</code> command</li><li>to automate the testing process, we will use the <code>grep</code> command</li><li><code>grep</code> allows us to search for a specific string in a file.</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">        <span class="token punctuation">-</span> grep &quot;Display&quot; build/computer.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>tests play a very important role in automation</li><li>you need to &quot;test&quot; the tests, to ensure that they will <strong>fail</strong> if needed</li></ul><hr><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables"><span>Variables</span></a></h2><ul><li>we prefer to use variables instead of repeating a string in the pipeline configuration</li><li>variables can be defined in scripts or using the <code>variables:</code> keyword</li><li>to reference the variable, we use the dollar sign before it</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">variables</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">BUILD_FILE_NAME</span><span class="token punctuation">:</span> laptop.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>variables can be defined locally in the job or globally for all jobs</li><li>when using spaces or some special characters, you may need to put the entire value between quotes</li></ul><hr><h2 id="what-is-devops" tabindex="-1"><a class="header-anchor" href="#what-is-devops"><span>What is DevOps</span></a></h2><ul><li>DevOps is not a standard and does not have an universally agreed definition</li><li>DevOps is not a standard or a tool, but a set of practices</li><li>DevOps uses automation to that help us build successful Products</li><li>DevOps requires a different mindset and works really well with Agile &amp; Scrum</li></ul><div class="hint-container info"><p class="hint-container-title">📚 Resources</p><ul><li><a href="https://skl.sh/3LciAkr" target="_blank" rel="noopener noreferrer">Introduction to Agile &amp; Scrum</a></li></ul></div>`,14);function F(p,Z){const u=l("VPCard"),a=l("router-link"),c=l("SiteInfo"),r=l("VidStack"),o=l("FontIcon");return f(),h("div",null,[e("h1",k,[e("a",y,[e("span",null,m(p.$frontmatter.title)+" 관련",1)])]),n(u,b(g({title:"DevOps with GitLab CI Course",desc:"GitLab CI/CD can automatically build, test, deploy, and monitor your applications. We just published a full course on the freeCodeCamp.org YouTube channel that will teach you how to use GitLab CI. Valentin Despa developed this course. Valentin is an ...",link:"/freecodecamp.org/devops-with-gitlab-ci-course/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),e("nav",w,[e("ul",null,[e("li",null,[n(a,{to:"#welcome"},{default:s(()=>[t("Welcome")]),_:1})]),e("li",null,[n(a,{to:"#your-first-gitlab-project"},{default:s(()=>[t("Your first GitLab project")]),_:1})]),e("li",null,[n(a,{to:"#your-first-pipeline"},{default:s(()=>[t("Your first pipeline")]),_:1})]),e("li",null,[n(a,{to:"#help-my-pipeline-is-not-working"},{default:s(()=>[t("Help, my pipeline is not working")]),_:1})]),e("li",null,[n(a,{to:"#what-is-yaml"},{default:s(()=>[t("What is YAML?")]),_:1})]),e("li",null,[n(a,{to:"#what-is-a-shell"},{default:s(()=>[t("What is a shell?")]),_:1})]),e("li",null,[n(a,{to:"#gitlab-architecture"},{default:s(()=>[t("GitLab architecture")]),_:1})]),e("li",null,[n(a,{to:"#pipeline-stages"},{default:s(()=>[t("Pipeline stages")]),_:1})]),e("li",null,[n(a,{to:"#why-do-pipelines-fail"},{default:s(()=>[t("Why do pipelines fail?")]),_:1})]),e("li",null,[n(a,{to:"#job-artifacts"},{default:s(()=>[t("Job artifacts")]),_:1})]),e("li",null,[n(a,{to:"#testing-the-build"},{default:s(()=>[t("Testing the build")]),_:1})]),e("li",null,[n(a,{to:"#variables"},{default:s(()=>[t("Variables")]),_:1})]),e("li",null,[n(a,{to:"#what-is-devops"},{default:s(()=>[t("What is DevOps")]),_:1})])])]),_,n(c,{name:"DevOps with GitLab CI Course",desc:"GitLab CI/CD can automatically build, test, deploy, and monitor your applications. We just published a full course on the freeCodeCamp.org YouTube channel that will teach you how to use GitLab CI. Valentin Despa developed this course. Valentin is an ...",url:"https://freecodecamp.org/news/devops-with-gitlab-ci-course/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://freecodecamp.org/news/content/images/size/w2000/2022/03/qomm1soQ.png"}),n(r,{src:"youtube/PGyhBwLyK2U"}),L,x,n(c,{name:"Valentin Despa | @vdespa",desc:"Learn more about agile software development using tools such as Postman for API testing, Gitlab CI for supporting your DevOps cycle.",url:"https://youtube.com/@vdespa",logo:"https://yt3.googleusercontent.com/ytc/AIdro_k3wuQ16azlOzGNXVilbhqr5icxEpE8375cgvdGNdUVzg=s160-c-k-c0x00ffffff-no-rj",preview:"https://yt3.googleusercontent.com/nh7QPdZk9RdSl2fdGBBS_atkXmvgrBXUi8N7b9JpBVXJxl3p_1evC0UGNWq3PR-mTSRmO3iyBQ=w1060-fcrop64=1,00005a57ffffa5a8-k-c0xffffffff-no-nd-rj"}),G,e("div",j,[q,e("ul",null,[C,I,D,e("li",null,[e("a",S,[n(o,{icon:"fa-brands fa-youtube"}),t("Git for GitLab (Beginner's FULL COURSE)")])]),W,R])]),V,e("div",O,[P,e("blockquote",null,[n(o,{icon:"iconfont icon-gitlab"}),t(),Y]),A]),M,n(r,{src:"youtube/Gjnup-PuquQ"}),B,e("div",E,[H,e("blockquote",null,[n(o,{icon:"iconfont icon-gitlab"}),t(),T]),U]),N,e("div",z,[Q,e("blockquote",null,[n(o,{icon:"iconfont icon-gitlab"}),J]),K]),X])}const ne=d(v,[["render",F],["__file","unit-1-introduction-to-gitLab.html.vue"]]),te=JSON.parse('{"path":"/freecodecamp.org/devops-with-gitlab-ci-course/unit-1-introduction-to-gitLab.html","title":"Unit 1: Introduction to GitLab","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Unit 1: Introduction to GitLab","description":"(1/5) DevOps with GitLab CI Course","category":["DevOps","Gitlab","Youtube"],"tag":["blog","freecodecamp.org","devops","gitlab","scm","@vdespa","yaml","ci","cd","cicd","youtube","crashcourse"],"head":[[{"meta":null},{"property":"og:title","content":"(1/5) DevOps with GitLab CI Course"},{"property":"og:description","content":"Unit 1: Introduction to GitLab"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/devops-with-gitlab-ci-course/unit-1-introduction-to-gitLab.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/devops-with-gitlab-ci-course/unit-1-introduction-to-gitLab.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Unit 1: Introduction to GitLab"}],["meta",{"property":"og:description","content":"(1/5) DevOps with GitLab CI Course"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://freecodecamp.org/news/content/images/size/w2000/2022/03/qomm1soQ.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://freecodecamp.org/news/content/images/size/w2000/2022/03/qomm1soQ.png"}],["meta",{"name":"twitter:image:alt","content":"Unit 1: Introduction to GitLab"}],["meta",{"property":"article:author","content":"Valentin Despa"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"gitlab"}],["meta",{"property":"article:tag","content":"scm"}],["meta",{"property":"article:tag","content":"@vdespa"}],["meta",{"property":"article:tag","content":"yaml"}],["meta",{"property":"article:tag","content":"ci"}],["meta",{"property":"article:tag","content":"cd"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"youtube"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:published_time","content":"2022-03-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Unit 1: Introduction to GitLab\\",\\"image\\":[\\"https://freecodecamp.org/news/content/images/size/w2000/2022/03/qomm1soQ.png\\"],\\"datePublished\\":\\"2022-03-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Valentin Despa\\"}]}"]],"date":"2022-03-02T00:00:00.000Z","isOriginal":false,"author":"Valentin Despa","cover":"https://freecodecamp.org/news/content/images/size/w2000/2022/03/qomm1soQ.png"},"headers":[{"level":2,"title":"Welcome","slug":"welcome","link":"#welcome","children":[]},{"level":2,"title":"Your first GitLab project","slug":"your-first-gitlab-project","link":"#your-first-gitlab-project","children":[]},{"level":2,"title":"Your first pipeline","slug":"your-first-pipeline","link":"#your-first-pipeline","children":[]},{"level":2,"title":"Help, my pipeline is not working","slug":"help-my-pipeline-is-not-working","link":"#help-my-pipeline-is-not-working","children":[]},{"level":2,"title":"What is YAML?","slug":"what-is-yaml","link":"#what-is-yaml","children":[]},{"level":2,"title":"What is a shell?","slug":"what-is-a-shell","link":"#what-is-a-shell","children":[]},{"level":2,"title":"GitLab architecture","slug":"gitlab-architecture","link":"#gitlab-architecture","children":[]},{"level":2,"title":"Pipeline stages","slug":"pipeline-stages","link":"#pipeline-stages","children":[]},{"level":2,"title":"Why do pipelines fail?","slug":"why-do-pipelines-fail","link":"#why-do-pipelines-fail","children":[]},{"level":2,"title":"Job artifacts","slug":"job-artifacts","link":"#job-artifacts","children":[]},{"level":2,"title":"Testing the build","slug":"testing-the-build","link":"#testing-the-build","children":[]},{"level":2,"title":"Variables","slug":"variables","link":"#variables","children":[]},{"level":2,"title":"What is DevOps","slug":"what-is-devops","link":"#what-is-devops","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.55,"words":1665},"filePathRelative":"freecodecamp.org/devops-with-gitlab-ci-course/unit-1-introduction-to-gitLab.md","localizedDate":"2022년 3월 2일","excerpt":"\\n","copyright":{"author":"Valentin Despa"}}');export{ne as comp,te as data};
