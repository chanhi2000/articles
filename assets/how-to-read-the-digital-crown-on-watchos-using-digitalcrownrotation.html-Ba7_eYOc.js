import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as d,e as t,n as o,g as e,f as c,r as i,o as u}from"./app-BgNevrm5.js";const h={},w={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},m=n("nav",{class:"table-of-contents"},[n("ul")],-1),k=n("hr",null,null,-1),f=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI exposes the Digital Crown to our app with two modifiers, both of which must be used in order to use the crown as input for our app. The first is <code>focusable()</code>, which should be true when you want the view in question to be able to receive Digital Crown updates, and <code>digitalCrownRotation()</code>, which creates a binding between the Digital Crown and a property of your choosing.</p><p>Hereâ€™s a trivial example to get you started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> scrollAmount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Scroll: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">scrollAmount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">focusable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">digitalCrownRotation</span><span class="token punctuation">(</span>$scrollAmount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b=c(`<p>That will scroll from negative infinity to plus infinity, showing the current scroll value in a text view.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you put <code>focusable()</code> after <code>digitalCrownRotation()</code> youâ€™ll find it no longer works.</p></div><p>The <code>digitalCrownRotation()</code> modifier has a couple of other forms to give you more control over how it behaves. For example, the longest variety lets us:</p><ol><li><code>from</code> and <code>through</code> set a range for the scroll.</li><li><code>by</code> sets a step amount, controlling how much to change each time the crown turns</li><li><code>sensitivity</code> determines how much the crown needs to be moved to trigger a change</li><li><code>isContinuous</code> determines whether the value wraps around when it reaches the minimum or maximum, or whether it just stops at those bounds.</li><li><code>isHapticFeedbackEnabled</code> determines whether haptic feedback is triggered on turns.</li></ol><p>For example, this modifier steps through from 1 through 5 by 0.1 increments, with a low sensitivity, wrapping around from start to finish, with haptic feedback:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">digitalCrownRotation</span><span class="token punctuation">(</span>$scrollAmount<span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> through<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> sensitivity<span class="token punctuation">:</span> <span class="token punctuation">.</span>low<span class="token punctuation">,</span> isContinuous<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> isHapticFeedbackEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),v={class:"hint-container details"},y=n("summary",null,"Similar solutionsâ€¦",-1);function C(r,_){const a=i("VPCard"),s=i("VidStack");return u(),p("div",null,[n("h1",w,[n("a",g,[n("span",null,d(r.$frontmatter.title)+" ê´€ë ¨",1)])]),t(a,o(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,k,t(a,o(e({title:"How to read the Digital Crown on watchOS using digitalCrownRotation() | SwiftUI by Example",desc:"How to read the Digital Crown on watchOS using digitalCrownRotation()",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,t(s,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation-1~dark.mp4"}),b,t(s,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation-2~dark.mp4"}),n("details",v,[y,t(a,o(e({title:"How to make carousel lists on watchOS | SwiftUI by Example",desc:"How to make carousel lists on watchOS",link:"/hackingwithswift.com/swiftui/how-to-make-carousel-lists-on-watchos.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,o(e({title:"How to create a date picker and read values from it | SwiftUI by Example",desc:"How to create a date picker and read values from it",link:"/hackingwithswift.com/swiftui/how-to-create-a-date-picker-and-read-values-from-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,o(e({title:"How to make VoiceOver read characters individually | SwiftUI by Example",desc:"How to make VoiceOver read characters individually",link:"/hackingwithswift.com/swiftui/how-to-make-voiceover-read-characters-individually.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,o(e({title:"How to create a segmented control and read values from it | SwiftUI by Example",desc:"How to create a segmented control and read values from it",link:"/hackingwithswift.com/swiftui/how-to-create-a-segmented-control-and-read-values-from-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,o(e({title:"How to read the red, green, and blue values from a Color | SwiftUI by Example",desc:"How to read the red, green, and blue values from a Color",link:"/hackingwithswift.com/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const x=l(h,[["render",C],["__file","how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation.html","title":"How to read the Digital Crown on watchOS using digitalCrownRotation()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to read the Digital Crown on watchOS using digitalCrownRotation()","description":"Article(s) > How to read the Digital Crown on watchOS using digitalCrownRotation()","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to read the Digital Crown on watchOS using digitalCrownRotation()"},{"property":"og:description","content":"How to read the Digital Crown on watchOS using digitalCrownRotation()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"How to read the Digital Crown on watchOS using digitalCrownRotation()"}],["meta",{"property":"og:description","content":"Article(s) > How to read the Digital Crown on watchOS using digitalCrownRotation()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to read the Digital Crown on watchOS using digitalCrownRotation()\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.32,"words":696},"filePathRelative":"hackingwithswift.com/swiftui/how-to-read-the-digital-crown-on-watchos-using-digitalcrownrotation.md","excerpt":"\\n"}');export{x as comp,R as data};
