import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as u,e as n,n as a,g as t,d as i,a as d,f as k,r as c,o as g}from"./app-BgNevrm5.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},w=e("nav",{class:"table-of-contents"},[e("ul")],-1),b=e("hr",null,null,-1),y=e("blockquote",null,[e("p",null,"Available from Swift 5.5")],-1),v={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"apple/swift-evolution",-1),_=e("code",null,"async let",-1),C=k(`<p>To demonstrate this, we could create a struct that has three different types of properties that will come from three different async functions:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">UserData</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> highScores<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getHighScores</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Eric&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Maeve&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Otis&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we wanted to create a <code>User</code> instance from all three of those values, <code>async let</code> is the easiest way – it run each function concurrently, wait for all three to finish, then use them to create our object.</p><p>Here’s how it looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">let</span> scores <span class="token operator">=</span> <span class="token function">getHighScores</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">let</span> friends <span class="token operator">=</span> <span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">UserData</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> username<span class="token punctuation">,</span> friends<span class="token punctuation">:</span> friends<span class="token punctuation">,</span> highScores<span class="token punctuation">:</span> scores<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, my name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, and I have </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> friends!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>You can only use <code>async let</code> if you are already in an async context, and if you don’t explicitly await the result of an <code>async let</code> Swift will implicitly wait for it when exiting its scope.</p></div><p>When working with throwing functions, you <em>don’t</em> need to use <code>try</code> with <code>async let</code> – that can automatically be pushed back to where you await the result. Similarly, the <code>await</code> keyword is also implied, so rather than typing <code>try await someFunction()</code> with an <code>async let</code> you can just write <code>someFunction()</code>.</p><p>To demonstrate this, we could write an async function to recursively calculate numbers in the Fibonacci sequence. This approach is hopelessly naive because without memoization we’re just repeating vast amounts of work, so to avoid causing everything to grind to a halt we’re going to limit the input range from 0 to 22:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">NumberError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> outOfRange</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fibonacci</span><span class="token punctuation">(</span>of number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> number <span class="token operator">&gt;</span> <span class="token number">22</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token class-name">NumberError</span><span class="token punctuation">.</span>outOfRange</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> number <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> number <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token keyword">await</span> first <span class="token operator">+</span> second</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code the recursive calls to <code>fibonacci(of:)</code> are implicitly <code>try await fibonacci(of:)</code>, but we can leave them off and handle them directly on the following line.</p>`,10),x={class:"hint-container details"},q=e("summary",null,"Other Changes in Swift 5.5",-1),I={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-4-to-5-5.playground.zip",target:"_blank",rel:"noopener noreferrer"};function A(p,E){const s=c("VPCard"),o=c("FontIcon");return g(),r("div",null,[e("h1",f,[e("a",m,[e("span",null,u(p.$frontmatter.title)+" 관련",1)])]),n(s,a(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,n(s,a(t({title:"async let bindings | Changes in Swift 5.5",desc:"async let bindings",link:"https://hackingwithswift.com/swift/5.5/async-let-bindings",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,e("p",null,[e("a",v,[i("SE-0317 ("),n(o,{icon:"iconfont icon-github"}),S,i(")")]),i(" introduced the ability to create and await child tasks using the simple syntax "),_,i(". This is particularly useful as an alternative to task groups where you’re dealing with heterogeneous result types – i.e., if you want tasks in a group to return different kinds of data.")]),C,e("details",x,[q,n(s,a(t({title:"Async await | Changes in Swift 5.5",desc:"Async await",link:"/hackingwithswift.com/swift/5.5/async-await.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Async sequences | Changes in Swift 5.5",desc:"Async sequences",link:"/hackingwithswift.com/swift/5.5/async-sequences.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Effectful read-only properties | Changes in Swift 5.5",desc:"Effectful read-only properties",link:"/hackingwithswift.com/swift/5.5/effectful-read-only-properties.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Structured concurrency | Changes in Swift 5.5",desc:"Structured concurrency",link:"/hackingwithswift.com/swift/5.5/structured-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "async let bindings | Changes in Swift 5.5",
  "desc": "async let bindings",
  "link": "/hackingwithswift.com/swift/5.5/async-let-bindings.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(s,a(t({title:"Continuations for interfacing async tasks with synchronous code | Changes in Swift 5.5",desc:"Continuations for interfacing async tasks with synchronous code",link:"/hackingwithswift.com/swift/5.5/continuations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Actors | Changes in Swift 5.5",desc:"Actors",link:"/hackingwithswift.com/swift/5.5/actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Global actors | Changes in Swift 5.5",desc:"Global actors",link:"/hackingwithswift.com/swift/5.5/global-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Sendable and @Sendable closures | Changes in Swift 5.5",desc:"Sendable and @Sendable closures",link:"/hackingwithswift.com/swift/5.5/sendable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"if for postfix member expressions | Changes in Swift 5.5",desc:"if for postfix member expressions",link:"/hackingwithswift.com/swift/5.5/postfix-if.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Interchangeable use of CGFloat and Double types | Changes in Swift 5.5",desc:"Interchangeable use of CGFloat and Double types",link:"/hackingwithswift.com/swift/5.5/interchangeable-cgfloat-double.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Codable synthesis for enums with associated values | Changes in Swift 5.5",desc:"Codable synthesis for enums with associated values",link:"/hackingwithswift.com/swift/5.5/codable-enums.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"lazy now works in local contexts | Changes in Swift 5.5",desc:"lazy now works in local contexts",link:"/hackingwithswift.com/swift/5.5/local-lazy.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Extending property wrappers to function and closure parameters | Changes in Swift 5.5",desc:"Extending property wrappers to function and closure parameters",link:"/hackingwithswift.com/swift/5.5/property-wrapper-function-parameters.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,a(t({title:"Extending static member lookup in generic contexts | Changes in Swift 5.5",desc:"Extending static member lookup in generic contexts",link:"/hackingwithswift.com/swift/5.5/static-member-generic.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e("p",null,[e("a",I,[n(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.5 playground")])])])])}const T=l(h,[["render",A],["__file","async-let-bindings.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swift/5.5/async-let-bindings.html","title":"async let bindings","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"async let bindings","description":"Article(s) > async let bindings","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.5"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > async let bindings"},{"property":"og:description","content":"async let bindings"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.5/async-let-bindings.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.5/async-let-bindings.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"async let bindings"}],["meta",{"property":"og:description","content":"Article(s) > async let bindings"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.5"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"async let bindings\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.3,"words":991},"filePathRelative":"hackingwithswift.com/swift/5.5/async-let-bindings.md","excerpt":"\\n"}');export{T as comp,D as data};
