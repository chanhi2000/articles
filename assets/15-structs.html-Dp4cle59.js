import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as u,e as n,n as e,g as i,w as d,f as h,r as t,o as g,d as k}from"./app-BgNevrm5.js";const m={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},v=s("hr",null,null,-1),b=h(`<p>Structs are complex data types, meaning that they are made up of multiple values. You then create an instance of the struct and fill in its values, then you can pass it around as a single value in your code. For example, we could define a <code>Person</code> struct type that contains two properties: <code>clothes</code> and <code>shoes</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> clothes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> shoes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you define a struct, Swift makes them very easy to create because it automatically generates what&#39;s called a memberwise initializer. In plain speak, it means you create the struct by passing in initial values for its two properties, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> taylor <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>clothes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;T-shirts&quot;</span></span><span class="token punctuation">,</span> shoes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sneakers&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> other <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>clothes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;short skirts&quot;</span></span><span class="token punctuation">,</span> shoes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;high heels&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/structs-1@2x.png" alt="Initializing two  structs by telling Swift their clothes and shoes.&quot;" tabindex="0" loading="lazy"><figcaption>Initializing two <code>Person</code> structs by telling Swift their clothes and shoes.&quot;</figcaption></figure><p>Once you have created an instance of a struct, you can read its properties just by writing the name of the struct, a period, then the property you want to read:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>taylor<span class="token punctuation">.</span>clothes<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>shoes<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/structs-2@2x.png" alt="Accessing the  and  propeties of our  structs.&quot;" tabindex="0" loading="lazy"><figcaption>Accessing the <code>clothes</code> and <code>shoes</code> propeties of our <code>Person</code> structs.&quot;</figcaption></figure><p>If you assign one struct to another, Swift copies it behind the scenes so that it is a complete, standalone duplicate of the original. Well, that&#39;s not strictly true: Swift uses a technique called &quot;copy on write&quot; which means it only actually copies your data if you try to change it.</p><p>To help you see how struct copies work, put this into your playground:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> clothes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> shoes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> taylor <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>clothes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;T-shirts&quot;</span></span><span class="token punctuation">,</span> shoes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sneakers&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> other <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>clothes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;short skirts&quot;</span></span><span class="token punctuation">,</span> shoes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;high heels&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> taylorCopy <span class="token operator">=</span> taylor</span>
<span class="line">taylorCopy<span class="token punctuation">.</span>shoes <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;flip flops&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>taylor<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>taylorCopy<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/structs-3@2x.png" alt="Modifying  does not change the original Taylor Swift.&quot;" tabindex="0" loading="lazy"><figcaption>Modifying <code>taylorCopy</code> does not change the original Taylor Swift.&quot;</figcaption></figure><p>That creates two <code>Person</code> structs, then creates a third one called <code>taylorCopy</code> as a copy of <code>taylor</code>. What happens next is the interesting part: the code changes <code>taylorCopy</code>, and prints both it and <code>taylor</code>. If you look in your results pane (you might need to resize it to fit) you&#39;ll see that the copy has a different value to the original: changing one did not change the other.</p><hr><h2 id="functions-inside-structs" tabindex="-1"><a class="header-anchor" href="#functions-inside-structs"><span>Functions inside structs</span></a></h2><p>You can place functions inside structs, and in fact it’s a good idea to do so for all functions that read or change data inside the struct. For example, we could add a function to our <code>Person</code> struct to describe what they are wearing, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> clothes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> shoes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I like wearing </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">clothes</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> with </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">shoes</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/structs-4@2x.png" alt="Calling &#39;s  method.&quot;" tabindex="0" loading="lazy"><figcaption>Calling <code>Person</code>&#39;s <code>describe</code> method.&quot;</figcaption></figure><p>There’s one more thing you ought to know but can&#39;t see in that code: when you write a function inside a struct, it&#39;s called a <em>method</em> instead. In Swift you write <code>func</code> whether it&#39;s a function or a method, but the distinction is preserved when you talk about them.</p>`,19);function S(o,x){const a=t("VPCard"),c=t("router-link"),p=t("VidStack");return g(),r("div",null,[s("h1",f,[s("a",w,[s("span",null,u(o.$frontmatter.title)+" 관련",1)])]),n(a,e(i({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s("nav",y,[s("ul",null,[s("li",null,[n(c,{to:"#functions-inside-structs"},{default:d(()=>[k("Functions inside structs")]),_:1})])])]),v,n(a,e(i({title:"Structs | Hacking with iOS",desc:"Structs",link:"https://hackingwithswift.com/read/0/15/structs",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n(p,{src:"youtube/d13uCPrmEXM"}),b])}const P=l(m,[["render",S],["__file","15-structs.html.vue"]]),C=JSON.parse('{"path":"/hackingwithswift.com/read/00/15-structs.html","title":"Structs","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Structs","description":"Article(s) > Structs","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Structs"},{"property":"og:description","content":"Structs"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/15-structs.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/15-structs.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Structs"}],["meta",{"property":"og:description","content":"Article(s) > Structs"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/structs-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Structs\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/structs-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/structs-2@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/structs-3@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/structs-4@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[{"level":2,"title":"Functions inside structs","slug":"functions-inside-structs","link":"#functions-inside-structs","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.05,"words":616},"filePathRelative":"hackingwithswift.com/read/00/15-structs.md","excerpt":"\\n"}');export{P as comp,C as data};
