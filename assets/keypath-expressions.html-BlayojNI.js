import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as u,e as n,n as e,g as t,d as i,a as d,f as h,r as p,o as k}from"./app-BgNevrm5.js";const m={},f={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},w=s("nav",{class:"table-of-contents"},[s("ul")],-1),v=s("hr",null,null,-1),b=s("blockquote",null,[s("p",null,"Available from Swift 5.2")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"apple/swift-evolution",-1),x=h(`<p>The Evolution proposal describes this as being able to use “<code>\\Root.value</code> wherever functions of <code>(Root) -&gt; Value</code> are allowed”, but what it means is that if previously you sent a Car into a method and got back its license plate, you can now use <code>Car.licensePlate</code> instead.</p><p>This is best understood as an example, so here’s a <code>User</code> type that defines four properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> bestFriend<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> canVote<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        age <span class="token operator">&gt;=</span> <span class="token number">18</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could create some instance of that struct and put them into an array, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> eric <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Eric Effiong&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> bestFriend<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Otis Milburn&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> maeve <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Maeve Wiley&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> bestFriend<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> otis <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Otis Milburn&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span> bestFriend<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Eric Effiong&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>eric<span class="token punctuation">,</span> maeve<span class="token punctuation">,</span> otis<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now for the important part: if you want to get an array of all the users names, you can do so by using a key path like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> userNames <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>userNames<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Previously you would have had to write a closure to retrieve the name by hand, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> oldUserNames <span class="token operator">=</span> users<span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>name <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This same approach works elsewhere – anywhere where previously you would have received a value and passed back one of its properties, you can now use a key path instead. For example, this will return all users who can vote:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> voters <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>canVote<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And this will return the best friends for all users who have one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> bestFriends <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">compactMap</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>bestFriend<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,13),S={class:"hint-container details"},C=s("summary",null,"Other Changes in Swift 5.2",-1),K={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-1-to-5-2.playground.zip",target:"_blank",rel:"noopener noreferrer"};function N(l,q){const a=p("VPCard"),o=p("FontIcon");return k(),r("div",null,[s("h1",f,[s("a",g,[s("span",null,u(l.$frontmatter.title)+" 관련",1)])]),n(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,v,n(a,e(t({title:"Key path expressions as functions | Changes in Swift 5.2",desc:"Key path expressions as functions",link:"https://hackingwithswift.com/swift/5.2/keypath-expressions",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,s("p",null,[s("a",y,[i("SE-0249 ("),n(o,{icon:"iconfont icon-github"}),_,i(")")]),i(" introduced a marvelous shortcut that allows us to use keypaths in a handful of specific circumstances.")]),x,s("details",S,[C,d(` 
\`\`\`component VPCard
{
  "title": "Key path expressions as functions | Changes in Swift 5.2",
  "desc": "Key path expressions as functions",
  "link": "/hackingwithswift.com/swift/5.2/keypath-expressions.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(a,e(t({title:"Callable values of user-defined nominal types | Changes in Swift 5.2",desc:"Callable values of user-defined nominal types",link:"/hackingwithswift.com/swift/5.2/callasfunction.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"Subscripts can now declare default arguments | Changes in Swift 5.2",desc:"Subscripts can now declare default arguments",link:"/hackingwithswift.com/swift/5.2/subscript-default-arguments.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"Lazy filtering order is now reversed | Changes in Swift 5.2",desc:"Lazy filtering order is now reversed",link:"/hackingwithswift.com/swift/5.2/lazy-filtering.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"New and improved diagnostics | Changes in Swift 5.2",desc:"New and improved diagnostics",link:"/hackingwithswift.com/swift/5.2/new-diagnostics.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s("p",null,[s("a",K,[n(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.2 playground")])])])])}const F=c(m,[["render",N],["__file","keypath-expressions.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/swift/5.2/keypath-expressions.html","title":"Key path expressions as functions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Key path expressions as functions","description":"Article(s) > Key path expressions as functions","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.2"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Key path expressions as functions"},{"property":"og:description","content":"Key path expressions as functions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.2/keypath-expressions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.2/keypath-expressions.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Key path expressions as functions"}],["meta",{"property":"og:description","content":"Article(s) > Key path expressions as functions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.2"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Key path expressions as functions\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swift/5.3/spm-improvements.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.96,"words":587},"filePathRelative":"hackingwithswift.com/swift/5.2/keypath-expressions.md","excerpt":"\\n"}');export{F as comp,A as data};
