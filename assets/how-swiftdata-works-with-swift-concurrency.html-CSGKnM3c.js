import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as t,t as s,e as o,n as a,g as i,f as l,r as h,o as w}from"./app-BgNevrm5.js";const d={},f={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},p={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},m=t("nav",{class:"table-of-contents"},[t("ul")],-1),u=t("hr",null,null,-1),y=l('<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData has fairly simple rules with Swift&#39;s concurrency system, and the absolute least you need to know is that <code>ModelContainer</code> and <code>PersistentIdentifier</code> are both sendable, whereas model objects and model contexts are not.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>I highly recommend you enable Xcode&#39;s complete concurrency checking. This means going to your target&#39;s build settings and setting Strict Concurrency Checking to Complete, so Xcode flags data races as warnings or errors.</p></div><p>Beyond those basics, there are a handful of specific things to know:</p><ul><li>You can create many <code>ModelContext</code> instances from a single, shared <code>ModelContainer</code>, across any number of actors. The correct approach is to send your model container into your actor, then create a local model context there.</li><li>When you want to transfer a model object from one actor to another, you should send its <code>id</code> property (a <code>PersistentIdentifier</code> instance) then load it locally on the other actor. Do not attempt to send a model instance directly between actors.</li><li>If you create a model context inside a <code>Task</code>, you <em>must</em> call <code>save()</code> explicitly in order to write your chance, even when autosave is enabled for that context ‚Äì autosave may not have a chance to run before the context is discarded.</li><li>All SwiftData calls happen synchronously with the exception of <code>enumerate()</code>, which uses a callback for individual objects. This means SwiftData only ever works with data that is synced to your local data store, even when there are further changes waiting in iCloud.</li><li>If you&#39;re using SwiftData with MVVM, <code>@Observable</code> does not automatically imply <code>@MainActor</code>. While you <em>can</em> update your SwiftUI views from an <code>@Observable</code> object running on a background actor, chances are your animations won&#39;t work quite right. I&#39;d suggest using <code>@Observable @MainActor</code> to avoid this problem.</li></ul>',5);function g(c,k){const e=h("VPCard");return w(),r("div",null,[t("h1",f,[t("a",p,[t("span",null,s(c.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),o(e,a(i({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,u,o(e,a(i({title:"How SwiftData works with Swift concurrency | SwiftData by Example",desc:"How SwiftData works with Swift concurrency",link:"https://hackingwithswift.com/quick-start/swiftdata/how-swiftdata-works-with-swift-concurrency",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y])}const v=n(d,[["render",g],["__file","how-swiftdata-works-with-swift-concurrency.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-swiftdata-works-with-swift-concurrency.html","title":"How SwiftData works with Swift concurrency","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How SwiftData works with Swift concurrency","description":"Article(s) > How SwiftData works with Swift concurrency","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How SwiftData works with Swift concurrency"},{"property":"og:description","content":"How SwiftData works with Swift concurrency"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-swiftdata-works-with-swift-concurrency.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-swiftdata-works-with-swift-concurrency.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How SwiftData works with Swift concurrency"}],["meta",{"property":"og:description","content":"Article(s) > How SwiftData works with Swift concurrency"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How SwiftData works with Swift concurrency\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.42,"words":426},"filePathRelative":"hackingwithswift.com/swiftdata/how-swiftdata-works-with-swift-concurrency.md","localizedDate":"2023ÎÖÑ 9Ïõî 30Ïùº","excerpt":"\\n"}');export{v as comp,_ as data};
