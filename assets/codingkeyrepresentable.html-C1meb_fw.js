import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as t,g as e,d as o,a as u,f as k,r as c,o as g}from"./app-BgNevrm5.js";const h={},w={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.6")],-1),v={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0320-codingkeyrepresentable.md",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"apple/swift-evolution",-1),_=n("code",null,"CodingKeyRepresentable",-1),C=n("code",null,"String",-1),q=n("code",null,"Int",-1),D=k(`<p>To understand why this is important, you first need to see the behavior without <code>CodingKeyRepresentable</code> in place. As an example, this old code uses enum cases for keys in a dictionary, then encodes it to JSON and prints out the resulting string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">OldSettings</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> name</span>
<span class="line">    <span class="token keyword">case</span> twitter</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> oldDict<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">OldSettings</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">,</span> <span class="token punctuation">.</span>twitter<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> oldData <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>oldDict<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> oldData<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although the enum has a <code>String</code> raw value, because the dictionary keys aren’t <code>String</code> or <code>Int</code> the resulting string will be <code>&quot;twitter&quot;,&quot;@twostraws&quot;,&quot;name&quot;,&quot;Paul&quot;]</code> – four separate string values, rather than something that is obviously key/value pairs. Swift is smart enough to recognize this in decoding, and will match alternating strings inside each pair to the original enum keys and string values, but this isn’t helpful if you want to send the JSON to a server.</p><p>The new <code>CodingKeyRepresentable</code> resolves this, allowing the new dictionary keys to be written correctly. However, as this changes the way your <code>Codable</code> JSON is written, you must explicitly add <code>CodingKeyRepresentable</code> conformance to get the new behavior, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">NewSettings</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">CodingKeyRepresentable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> name</span>
<span class="line">    <span class="token keyword">case</span> twitter</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> newDict<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NewSettings</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">,</span> <span class="token punctuation">.</span>twitter<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> newData <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>newDict<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> newData<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print <code>{&quot;twitter&quot;:&quot;@twostraws&quot;,&quot;name&quot;:&quot;Paul”}</code>, which is much more useful outside of Swift.</p><p>If you’re using custom structs as your keys, you can also conform to <code>CodingKeyRepresentable</code> and provide your own methods for converting your data into a string.</p>`,7),A={class:"hint-container details"},I=n("summary",null,"Other Changes in Swift 5.6",-1),K={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-5-to-5-6.playground.zip",target:"_blank",rel:"noopener noreferrer"};function N(l,P){const a=c("VPCard"),i=c("FontIcon");return g(),r("div",null,[n("h1",w,[n("a",m,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,y,s(a,t(e({title:"Allow coding of non String/Int keyed Dictionary into a KeyedContainer | Changes in Swift 5.6",desc:"Allow coding of non String/Int keyed Dictionary into a KeyedContainer",link:"https://hackingwithswift.com/swift/5.6/codingkeyrepresentable",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",v,[o("SE-0320 ("),s(i,{icon:"iconfont icon-github"}),S,o(")")]),o(" introduces a new "),_,o(" protocol that allows dictionaries with keys that aren’t a plain "),C,o(" or "),q,o(" to be encoded as keyed containers rather than unkeyed containers.")]),D,n("details",A,[I,s(a,t(e({title:"Introduce existential any | Changes in Swift 5.6",desc:"Introduce existential any",link:"/hackingwithswift.com/swift/5.6/existential-any.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Type placeholders | Changes in Swift 5.6",desc:"Type placeholders",link:"/hackingwithswift.com/swift/5.6/type-placeholders.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),u(` 
\`\`\`component VPCard
{
  "title": "Allow coding of non String/Int keyed Dictionary into a KeyedContainer | Changes in Swift 5.6",
  "desc": "Allow coding of non String/Int keyed Dictionary into a KeyedContainer",
  "link": "/hackingwithswift.com/swift/5.6/codingkeyrepresentable.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Unavailability condition | Changes in Swift 5.6",desc:"Unavailability condition",link:"/hackingwithswift.com/swift/5.6/unavailable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"More concurrency changes | Changes in Swift 5.6",desc:"More concurrency changes",link:"/hackingwithswift.com/swift/5.6/preconcurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Plugins for Swift Package Manager | Changes in Swift 5.6",desc:"Plugins for Swift Package Manager",link:"/hackingwithswift.com/swift/5.6/swiftpm-plugins.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",K,[s(i,{icon:"fas fa-file-zipper"}),o("Download Swift 5.6 playground")])])])])}const T=p(h,[["render",N],["__file","codingkeyrepresentable.html.vue"]]),O=JSON.parse('{"path":"/hackingwithswift.com/swift/5.6/codingkeyrepresentable.html","title":"Allow coding of non String/Int keyed Dictionary into a KeyedContainer","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Allow coding of non String/Int keyed Dictionary into a KeyedContainer","description":"Article(s) > Allow coding of non String/Int keyed Dictionary into a KeyedContainer","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.6"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Allow coding of non String/Int keyed Dictionary into a KeyedContainer"},{"property":"og:description","content":"Allow coding of non String/Int keyed Dictionary into a KeyedContainer"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.6/codingkeyrepresentable.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.6/codingkeyrepresentable.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Allow coding of non String/Int keyed Dictionary into a KeyedContainer"}],["meta",{"property":"og:description","content":"Article(s) > Allow coding of non String/Int keyed Dictionary into a KeyedContainer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.6"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Allow coding of non String/Int keyed Dictionary into a KeyedContainer\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.13,"words":640},"filePathRelative":"hackingwithswift.com/swift/5.6/codingkeyrepresentable.md","excerpt":"\\n"}');export{T as comp,O as data};
