import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as s,t as c,e as a,n as e,g as t,f as i,r as u,o as r}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=s("nav",{class:"table-of-contents"},[s("ul")],-1),h=s("hr",null,null,-1),w=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData’s default delete rule for relationships is <code>.nullify</code>, which means for example that if you have an <code>School</code> object with many <code>Student</code> objects as a relationship, then deleting the school will leave the students intact in your data store. That might make sense in some places, but you can also specify a <code>.cascade</code> delete rule, meaning that all related objects will be deleted when the parent object is deleted.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you have multi-tier relations with cascade delete rules, SwiftData will continue deleting all the way down.</p></div><p>For example, if you have a <code>House</code> model with an array of <code>Room</code> objects, it would make sense to delete all the rooms when the house is deleted.</p><p>There are two ways of writing this. When dealing with a cascade delete rule, the smartest and simplest approach is to specify the inverse relationship by hand, allowing us to make one side of the relationship non-optional, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> address<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>deleteRule<span class="token punctuation">:</span> <span class="token punctuation">.</span>cascade<span class="token punctuation">,</span> inverse<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Room</span><span class="token punctuation">.</span>house<span class="token punctuation">)</span> <span class="token keyword">var</span> rooms<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Room</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> rooms<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Room</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>rooms <span class="token operator">=</span> rooms</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Room</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> house<span class="token punctuation">:</span> <span class="token class-name">House</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>house<span class="token punctuation">:</span> <span class="token class-name">House</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>house <span class="token operator">=</span> house</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you’d prefer to have SwiftData infer the inverse relationship for you, you should skip the <code>inverse</code> parameter for your relationship then make the other property optional, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> address<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>deleteRule<span class="token punctuation">:</span> <span class="token punctuation">.</span>cascade<span class="token punctuation">)</span> <span class="token keyword">var</span> rooms<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Room</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> rooms<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Room</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>rooms <span class="token operator">=</span> rooms</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Room</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> house<span class="token punctuation">:</span> <span class="token class-name">House</span><span class="token operator">?</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>house<span class="token punctuation">:</span> <span class="token class-name">House</span><span class="token operator">?</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>house <span class="token operator">=</span> house</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember, the name “cascade delete” means that multi-level relationships automatically delete all the way down the chain. For example, if we said that a school has many students and each student has many exam results, then gave each of those relationships a cascade delete rule, then deleting the school would delete all the students and all their exam results in one go.</p><p>Here’s how that looks in Swift:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>deleteRule<span class="token punctuation">:</span> <span class="token punctuation">.</span>cascade<span class="token punctuation">,</span> inverse<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Student</span><span class="token punctuation">.</span>school<span class="token punctuation">)</span> <span class="token keyword">var</span> students<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Student</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> students<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Student</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>students <span class="token operator">=</span> students</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> school<span class="token punctuation">:</span> <span class="token class-name">School</span></span>
<span class="line">    <span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>deleteRule<span class="token punctuation">:</span> <span class="token punctuation">.</span>cascade<span class="token punctuation">)</span> <span class="token keyword">var</span> results<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Result</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> school<span class="token punctuation">:</span> <span class="token class-name">School</span><span class="token punctuation">,</span> results<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Result</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>results <span class="token operator">=</span> results</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> subject<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> grade<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>subject<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function b(p,g){const n=u("VPCard");return r(),o("div",null,[s("h1",k,[s("a",m,[s("span",null,c(p.$frontmatter.title)+" 관련",1)])]),a(n,e(t({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,h,a(n,e(t({title:"How to create cascade deletes using relationships | SwiftData by Example",desc:"How to create cascade deletes using relationships",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-create-cascade-deletes-using-relationships",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const S=l(d,[["render",b],["__file","how-to-create-cascade-deletes-using-relationships.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-create-cascade-deletes-using-relationships.html","title":"How to create cascade deletes using relationships","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create cascade deletes using relationships","description":"Article(s) > How to create cascade deletes using relationships","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create cascade deletes using relationships"},{"property":"og:description","content":"How to create cascade deletes using relationships"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-cascade-deletes-using-relationships.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-cascade-deletes-using-relationships.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create cascade deletes using relationships"}],["meta",{"property":"og:description","content":"Article(s) > How to create cascade deletes using relationships"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create cascade deletes using relationships\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.84,"words":553},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-create-cascade-deletes-using-relationships.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{S as comp,R as data};
