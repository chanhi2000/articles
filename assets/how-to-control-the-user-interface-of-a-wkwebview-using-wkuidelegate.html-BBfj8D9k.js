import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as e,t as c,e as i,n as a,g as n,a as t,r as w,o as h}from"./app-BgNevrm5.js";const g={},u={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},p={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},m=e("nav",{class:"table-of-contents"},[e("ul")],-1),f=e("hr",null,null,-1),d=e("blockquote",null,[e("p",null,"Available from iOS 10.0")],-1),b=e("details",{class:"hint-container details"},[e("summary",null,"Similar solutions‚Ä¶"),t(`
/example-code/wkwebview/how-to-control-the-sites-a-wkwebview-can-visit-using-wknavigationdelegate">How to control the sites a WKWebView can visit using WKNavigationDelegate 
/quick-start/swiftui/how-to-create-multi-column-lists-using-table">How to create multi-column lists using Table 
/example-code/wkwebview/whats-the-difference-between-uiwebview-and-wkwebview">What's the difference between UIWebView and WKWebView? 
/example-code/wkwebview/how-to-monitor-wkwebview-page-load-progress-using-key-value-observing">How to monitor WKWebView page load progress using key-value observing 
/example-code/uikit/how-to-load-a-html-string-into-a-wkwebview-or-uiwebview-loadhtmlstring">How to load a HTML string into a WKWebView or UIWebView: loadHTMLString()</a>
`)],-1);function W(r,k){const o=w("VPCard");return h(),s("div",null,[e("h1",u,[e("a",p,[e("span",null,c(r.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),i(o,a(n({title:"WKWebView - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/wkwebview/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,f,i(o,a(n({title:"How to control the user interface of a WKWebView using WKUIDelegate | WKWebView - free Swift example code",desc:"How to control the user interface of a WKWebView using WKUIDelegate",link:"https://hackingwithswift.com/example-code/wkwebview/how-to-control-the-user-interface-of-a-wkwebview-using-wkuidelegate",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),d,t(" TODO: ÏûëÏÑ± "),t(' \nBy default `WKWebView` works sort of like Safari, albeit in a single view rather than having tabs. If you want something more advanced ‚Äì being able to monitor opening and closing windows, override behavior for JavaScript user interface, and so on ‚Äì then the `WKUIDelegate` protocol is for you.\n\nFirst, make your view controller conform to it by adding `WKUIDelegate` to its list of protocols. Second, assign your view controller to the `uiDelegate` property of your web view:\n\n```swift\nyourWebView.uiDelegate = self\n```\n\nFinally, implement whichever of the optional methods of `WKUIDelegate` takes your interest. For example, you can make `WKWebView` show a custom alert controller when any web page uses the `alert()` JavaScript function:\n\n```swift\nfunc webView(_ webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping () -> Void) {\n    let ac = UIAlertController(title: "Hey, listen!", message: message, preferredStyle: .alert)\n    ac.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))\n    present(ac, animated: true)\n    completionHandler()\n}\n```\n\nThere‚Äôs also `runJavaScriptConfirmPanelWithMessage` for showing confirm and deny UI, `runJavaScriptTextInputPanelWithPrompt` for requesting user text input, and so on. \n\n**Note:** You *must* call the completion handler. JavaScript‚Äôs alerts are blocking, which means JavaScript execution will not continue until the alert finishes. As a result, WebKit will complain if you don‚Äôt let it know when you‚Äôre done.\n\n'),b])}const K=l(g,[["render",W],["__file","how-to-control-the-user-interface-of-a-wkwebview-using-wkuidelegate.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/example-code/wkwebview/how-to-control-the-user-interface-of-a-wkwebview-using-wkuidelegate.html","title":"How to control the user interface of a WKWebView using WKUIDelegate","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to control the user interface of a WKWebView using WKUIDelegate","description":"Article(s) > How to control the user interface of a WKWebView using WKUIDelegate","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-10.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to control the user interface of a WKWebView using WKUIDelegate"},{"property":"og:description","content":"How to control the user interface of a WKWebView using WKUIDelegate"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/wkwebview/how-to-control-the-user-interface-of-a-wkwebview-using-wkuidelegate.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/wkwebview/how-to-control-the-user-interface-of-a-wkwebview-using-wkuidelegate.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to control the user interface of a WKWebView using WKUIDelegate"}],["meta",{"property":"og:description","content":"Article(s) > How to control the user interface of a WKWebView using WKUIDelegate"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-10.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to control the user interface of a WKWebView using WKUIDelegate\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.72,"words":515},"filePathRelative":"hackingwithswift.com/example-code/wkwebview/how-to-control-the-user-interface-of-a-wkwebview-using-wkuidelegate.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{K as comp,V as data};
