import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as s,t as u,e as n,n as d,g as h,w as a,f as k,r as p,o as m,d as t}from"./app-BgNevrm5.js";const g={},v={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},y=s("hr",null,null,-1),w=k(`<p>The <strong>PUT</strong> method is used to update or replace an existing resource on the server. It sends data to the server and tells it to create a new resource if none exists or replace the current one if it does. The key idea with PUT is that you are telling the server exactly what the resource should look like.</p><p>For example, imagine a user profile on a website. If you use PUT to update your profile, the server will replace the entire profile with the new data you provide. Every part of the profile will match exactly what you send, so if some details are missing, they will be overwritten with the new data.</p><hr><h2 id="example-of-a-put-request" tabindex="-1"><a class="header-anchor" href="#example-of-a-put-request"><span>Example of a PUT Request</span></a></h2><p>Here’s an example of a PUT request using the Fetch API to update user data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> updatedProfile <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;john_doe_updated&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;john_updated@example.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/users/123&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>updatedProfile<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Updated:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the PUT request updates the user profile with new data. The profile will be replaced with <code>username</code>, <code>email</code>, and <code>age</code> values. If any data is missing, such as <code>phoneNumber</code>, it will be removed from the profile.</p><hr><h2 id="when-to-use-put" tabindex="-1"><a class="header-anchor" href="#when-to-use-put"><span>When to Use PUT</span></a></h2><p>PUT is mainly used when you want to update or replace a resource with specific, complete data. Here are some common situations where PUT is appropriate:</p><h3 id="_1-updating-a-resource" tabindex="-1"><a class="header-anchor" href="#_1-updating-a-resource"><span>1. Updating a Resource</span></a></h3><p>When you need to make changes to an existing resource, PUT is used to send a new version of the entire resource. For example, updating a blog post, product details, or user information would require sending a complete replacement of the resource using PUT.</p><div class="hint-container info"><p class="hint-container-title">Example</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">        <span class="token keyword">const</span> updatedPost <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;New Title for My Blog&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;Updated blog content here...&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/blog/45&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>updatedPost<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_2-creating-a-resource-if-none-exists" tabindex="-1"><a class="header-anchor" href="#_2-creating-a-resource-if-none-exists"><span>2. Creating a Resource if None Exists</span></a></h3><p>If you send a PUT request to a specific URL that doesn&#39;t have a resource yet, the server will create one using the data you provide. This is useful when you&#39;re working with resources that need to be fully defined upfront.</p><div class="hint-container info"><p class="hint-container-title">Example of creating a product if it doesn’t exist</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> newProduct <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;New Sneakers&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">59.99</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">&#39;Footwear&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/products/101&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newProduct<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_3-working-with-apis" tabindex="-1"><a class="header-anchor" href="#_3-working-with-apis"><span>3. Working with APIs</span></a></h3><p>When interacting with APIs, PUT is often used when you need to make updates to a resource like a user profile, product details, or any other structured data. For example, a to-do list app might allow you to use PUT to update an existing task with new information.</p><div class="hint-container info"><p class="hint-container-title">Example of updating a task</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> updatedTask <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Updated Task Title&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/tasks/67&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>updatedTask<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="put-vs-post-key-differences" tabindex="-1"><a class="header-anchor" href="#put-vs-post-key-differences"><span>PUT vs. POST: Key Differences</span></a></h2><p>Though both PUT and POST can send data to a server, they have different purposes and behaviors:</p><h3 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose"><span>Purpose:</span></a></h3><ul><li><strong>PUT</strong>: Primarily used for updating or replacing an existing resource. If the resource doesn’t exist, PUT can also create it.</li><li><strong>POST</strong>: Mainly used to create new resources or submit data that needs to be processed. POST doesn’t replace existing resources but adds new ones.</li></ul><h3 id="data-handling" tabindex="-1"><a class="header-anchor" href="#data-handling"><span>Data Handling:</span></a></h3><ul><li><strong>PUT</strong>: Replaces the entire resource with the new data. If a part of the resource is missing in the request, that part gets removed or replaced.</li><li><strong>POST</strong>: Adds or updates resources without replacing the entire thing. For example, when submitting a form, POST adds new data to the server without deleting what’s already there.</li></ul><h3 id="idempotence" tabindex="-1"><a class="header-anchor" href="#idempotence"><span>Idempotence:</span></a></h3><ul><li><strong>PUT</strong>: Is idempotent, so sending the same PUT request multiple times will always result in the same outcome. No matter how many times you update a resource using PUT, the result will be the same.</li><li><strong>POST</strong>: Is not idempotent, so submitting the same POST request multiple times could create duplicate resources or have different results.</li></ul><h3 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases"><span>Use Cases:</span></a></h3><ul><li><strong>PUT</strong>: Best used for updates and full replacements of resources. For instance, if you’re updating product details in an online store, PUT ensures that all the details are replaced with the new ones you send.</li><li><strong>POST</strong>: Suited for creating new entries or sending data that requires processing. For example, submitting an online order or filling out a contact form uses POST.</li></ul>`,29);function T(o,P){const i=p("VPCard"),e=p("router-link"),l=p("SiteInfo");return m(),c("div",null,[s("h1",v,[s("a",f,[s("span",null,u(o.$frontmatter.title)+" 관련",1)])]),n(i,d(h({title:"Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples",desc:"When you interact with websites or apps, a lot happens behind the scenes. A key part of this process is how your browser or app talks to a server. HTTPS methods define what action needs to happen – it could be fetching data, sending information, or m...",link:"/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),s("nav",b,[s("ul",null,[s("li",null,[n(e,{to:"#example-of-a-put-request"},{default:a(()=>[t("Example of a PUT Request")]),_:1})]),s("li",null,[n(e,{to:"#when-to-use-put"},{default:a(()=>[t("When to Use PUT")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#_1-updating-a-resource"},{default:a(()=>[t("1. Updating a Resource")]),_:1})]),s("li",null,[n(e,{to:"#_2-creating-a-resource-if-none-exists"},{default:a(()=>[t("2. Creating a Resource if None Exists")]),_:1})]),s("li",null,[n(e,{to:"#_3-working-with-apis"},{default:a(()=>[t("3. Working with APIs")]),_:1})])])]),s("li",null,[n(e,{to:"#put-vs-post-key-differences"},{default:a(()=>[t("PUT vs. POST: Key Differences")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#purpose"},{default:a(()=>[t("Purpose:")]),_:1})]),s("li",null,[n(e,{to:"#data-handling"},{default:a(()=>[t("Data Handling:")]),_:1})]),s("li",null,[n(e,{to:"#idempotence"},{default:a(()=>[t("Idempotence:")]),_:1})]),s("li",null,[n(e,{to:"#use-cases"},{default:a(()=>[t("Use Cases:")]),_:1})])])])])]),y,n(l,{name:"Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples",desc:"When you interact with websites or apps, a lot happens behind the scenes. A key part of this process is how your browser or app talks to a server. HTTPS methods define what action needs to happen – it could be fetching data, sending information, or m...",url:"https://freecodecamp.org/news/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}),w])}const U=r(g,[["render",T],["__file","put-method.html.vue"]]),E=JSON.parse('{"path":"/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/put-method.html","title":"PUT Method","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"PUT Method","description":"Article(s) > (3/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples","category":["JavaScript","Article(s)"],"tag":["blog","freecodecamp.org","js","javascript"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > (3/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples"},{"property":"og:description","content":"PUT Method"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/put-method.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/put-method.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"PUT Method"}],["meta",{"property":"og:description","content":"Article(s) > (3/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"name":"twitter:image:alt","content":"PUT Method"}],["meta",{"property":"article:author","content":"Ashutosh Krishna"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PUT Method\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Krishna\\"}]}"]],"date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Ashutosh Krishna","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"},"headers":[{"level":2,"title":"Example of a PUT Request","slug":"example-of-a-put-request","link":"#example-of-a-put-request","children":[]},{"level":2,"title":"When to Use PUT","slug":"when-to-use-put","link":"#when-to-use-put","children":[{"level":3,"title":"1. Updating a Resource","slug":"_1-updating-a-resource","link":"#_1-updating-a-resource","children":[]},{"level":3,"title":"2. Creating a Resource if None Exists","slug":"_2-creating-a-resource-if-none-exists","link":"#_2-creating-a-resource-if-none-exists","children":[]},{"level":3,"title":"3. Working with APIs","slug":"_3-working-with-apis","link":"#_3-working-with-apis","children":[]}]},{"level":2,"title":"PUT vs. POST: Key Differences","slug":"put-vs-post-key-differences","link":"#put-vs-post-key-differences","children":[{"level":3,"title":"Purpose:","slug":"purpose","link":"#purpose","children":[]},{"level":3,"title":"Data Handling:","slug":"data-handling","link":"#data-handling","children":[]},{"level":3,"title":"Idempotence:","slug":"idempotence","link":"#idempotence","children":[]},{"level":3,"title":"Use Cases:","slug":"use-cases","link":"#use-cases","children":[]}]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":3.33,"words":999},"filePathRelative":"freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/put-method.md","localizedDate":"2024년 10월 2일","excerpt":"\\n","copyright":{"author":"Ashutosh Krishna"}}');export{U as comp,E as data};
