import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as n,t as v,e as s,n as m,g as h,w as e,d as a,f as o,r as p,o as b}from"./app-BgNevrm5.js";const g={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},V=n("hr",null,null,-1),_=n("p",null,"Validation is an essential cross-cutting concern that you need to solve in your application. You want to ensure the request is valid before you consider processing it.",-1),R=n("p",null,"Another important question you need to answer is how you approach different types of validation. For example, I consider input and business validation differently, and each deserves a specific solution.",-1),x={href:"https://github.com/jbogard/MediatR",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"jbogard/MediatR",-1),T={href:"https://docs.fluentvalidation.net/en/latest/index.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs",target:"_blank",rel:"noopener noreferrer"},A=o(`<p>Here&#39;s what I&#39;m going to talk about in this week&#39;s newsletter:</p><ul><li>Standard validation approach</li><li>Input vs business validation</li><li>Separating validation logic</li><li>Generic <code>ValidationBehavior</code></li></ul><p>Let&#39;s dive in.</p><hr><h2 id="the-standard-command-validation-approach" tabindex="-1"><a class="header-anchor" href="#the-standard-command-validation-approach"><span>The Standard Command Validation Approach</span></a></h2><p>The standard way of implementing validation is right before processing the command. The validation is tightly coupled to the command handler, which could be problematic.</p><p>I find this approach difficult to maintain as the complexity of the validation increases. Each change to the validation logic also touches the handler, and the handler itself can grow out of control.</p><p>It also makes it harder to differentiate between input and <em>business</em> validation.</p><p>Here&#39;s an example <code>ShipOrderCommandHandler</code> that checks if the <code>ShippingAddress.Country</code> is one of the supported countries:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ShipOrderCommandHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequestHandler<span class="token punctuation">&lt;</span>ShipOrderCommand<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOrderRepository</span> _orderRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IShippingService</span> _shippingService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ShipmentSettings</span> _shipmentSettings<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ShipOrderCommand</span> command<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_shipmentSettings</span>
<span class="line">                <span class="token punctuation">.</span>SupportedCountries</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>ShippingAddress<span class="token punctuation">.</span>Country<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ShipOrderCommand<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> _orderRepository<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _shippingService<span class="token punctuation">.</span><span class="token function">ShipTo</span><span class="token punctuation">(</span></span>
<span class="line">            command<span class="token punctuation">.</span>ShippingAddress<span class="token punctuation">,</span></span>
<span class="line">            command<span class="token punctuation">.</span>ShippingMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What if we can separate command validation and command handling?</p><hr><h2 id="input-validation-and-business-validation" tabindex="-1"><a class="header-anchor" href="#input-validation-and-business-validation"><span>Input Validation and Business Validation</span></a></h2><p>I mentioned input and <em>business</em> validation in the previous section.</p><p>Here&#39;s how I consider them to be different:</p><ul><li><strong>Input validation</strong> - We only validate that the command is <em>processable</em>. These are simple validations, such as checking for <code>null</code> values, empty strings, etc.</li><li><strong>Business validation</strong> - We validate the command to satisfy the business rules. This includes checking the system state for required preconditions before processing the command.</li></ul><p>Another way to compare them is cheap vs. expensive. Input validation is usually cheap to execute and can be done in memory. While business validation involves reading state and is slower.</p><p>So, input validation sits at the entry point of the use case before handling the request. After it completes, we have a <em>valid</em> command. And this is a rule I always follow - an invalid command should never reach the handler.</p><hr><h2 id="input-validation-with-fluentvalidation" tabindex="-1"><a class="header-anchor" href="#input-validation-with-fluentvalidation"><span>Input Validation With FluentValidation</span></a></h2>`,20),C={href:"https://docs.fluentvalidation.net/en/latest/index.html",target:"_blank",rel:"noopener noreferrer"},q=o(`<p>Here&#39;s the <code>ShipOrderCommand</code> that we want to validate:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">record</span> <span class="token class-name">ShipOrderCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequest</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ShippingMethod <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Address</span> ShippingAddress <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M={href:"https://github.com/FluentValidation/FluentValidation",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"FluentValidation/FluentValidation",-1),E=n("code",null,"AbstractValidator<T>",-1),j=n("code",null,"RuleFor",-1),P=o(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ShipOrderCommandValidator</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AbstractValidator<span class="token punctuation">&lt;</span>ShipOrderCommand<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ShipOrderCommandValidator</span><span class="token punctuation">(</span><span class="token class-name">ShipmentSettings</span> settings<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>command <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span><span class="token string">&quot;The order identifier can&#39;t be empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>command <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span>ShippingMethod<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span><span class="token string">&quot;The shipping method can&#39;t be empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>command <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span>ShippingAddress<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">NotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span><span class="token string">&quot;The shipping address can&#39;t be empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>command <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span>ShippingAddress<span class="token punctuation">.</span>Country<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>country <span class="token operator">=&gt;</span> settings<span class="token punctuation">.</span>SupportedCountries<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span><span class="token string">&quot;The shipping country isn&#39;t supported.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),O=n("em",null,"Validator",-1),B=o(`<p>To automatically register all validators from an assembly, you need to call the <code>AddValidatorsFromAssembly</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">services<span class="token punctuation">.</span><span class="token function">AddValidatorsFromAssembly</span><span class="token punctuation">(</span>ApplicationAssembly<span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="running-validation-from-the-use-case" tabindex="-1"><a class="header-anchor" href="#running-validation-from-the-use-case"><span>Running Validation From the Use Case</span></a></h2><p>To run the <code>ShipOrderCommandValidator</code>, you can use the <code>IValidator&lt;T&gt;</code> service and inject it from the constructor.</p><p>The validator exposes a few methods you can call, like <code>Validate</code>, <code>ValidateAsync</code>, or <code>ValidateAndThrow</code>.</p><p>The <code>Validate</code> method returns a <code>ValidationResult</code> object which contains two properties:</p><ul><li><code>IsValid</code>: a boolean flag saying whether the validation succeeded</li><li><code>Errors</code>: a collection of <code>ValidationFailure</code> objects containing any validation failures</li></ul><p>Alternatively, calling the <code>ValidateAndThrow</code> method throws a <code>ValidationException</code> if validation fails.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ShipOrderCommandHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequestHandler<span class="token punctuation">&lt;</span>ShipOrderCommand<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOrderRepository</span> _orderRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IShippingService</span> _shippingService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IValidator<span class="token punctuation">&lt;</span>ShipOrderCommand<span class="token punctuation">&gt;</span></span> _validator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ShipOrderCommand</span> command<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _validator<span class="token punctuation">.</span><span class="token function">ValidateAndThrow</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> _orderRepository<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _shippingService<span class="token punctuation">.</span><span class="token function">ShipTo</span><span class="token punctuation">(</span></span>
<span class="line">            command<span class="token punctuation">.</span>ShippingAddress<span class="token punctuation">,</span></span>
<span class="line">            command<span class="token punctuation">.</span>ShippingMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach forces you to define an explicit dependency on <code>IValidator</code> in every command handler.</p><p>What if we can implement this cross-cutting concern in a more generic way?</p><hr><h2 id="mediatr-validation-pipeline" tabindex="-1"><a class="header-anchor" href="#mediatr-validation-pipeline"><span>MediatR Validation Pipeline</span></a></h2><p>Here&#39;s a complete implementation of a <code>ValidationBehavior</code> using FluentValidation and MediatR&#39;s <code>IPipelineBehavior</code>.</p><p>The <code>ValidationBehavior</code> acts as a middleware for the request pipeline and performs validation. If the validation fails, it will throw a custom <code>ValidationException</code> with a collection of <code>ValidationError</code> objects.</p><p>I also want to highlight the use of <code>ValidateAsync</code>, which allows you to define asynchronous validation rules. You must call the <code>ValidateAsync</code> method if you have asynchronous rules. Otherwise, the validator will throw an exception.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ValidationBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPipelineBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TRequest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommandBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IValidator<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _validators<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ValidationBehavior</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IValidator<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> validators<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _validators <span class="token operator">=</span> validators<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">TRequest</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">RequestHandlerDelegate<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationContext<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> validationFailures <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span></span>
<span class="line">            _validators<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>validator <span class="token operator">=&gt;</span> validator<span class="token punctuation">.</span><span class="token function">ValidateAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> errors <span class="token operator">=</span> validationFailures</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>validationResult <span class="token operator">=&gt;</span> <span class="token operator">!</span>validationResult<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>validationResult <span class="token operator">=&gt;</span> validationResult<span class="token punctuation">.</span>Errors<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>validationFailure <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationError</span><span class="token punctuation">(</span></span>
<span class="line">                validationFailure<span class="token punctuation">.</span>PropertyName<span class="token punctuation">,</span></span>
<span class="line">                validationFailure<span class="token punctuation">.</span>ErrorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exceptions<span class="token punctuation">.</span>ValidationException</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don&#39;t forget to register the <code>ValidationBehavior</code> with MediatR by calling <code>AddOpenBehavior</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span>config <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterServicesFromAssemblyContaining</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationAssembly<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    config<span class="token punctuation">.</span><span class="token function">AddOpenBehavior</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="handling-validation-exceptions" tabindex="-1"><a class="header-anchor" href="#handling-validation-exceptions"><span>Handling Validation Exceptions</span></a></h2><p>Here&#39;s a custom <code>ValidationExceptionHandlingMiddleware</code> middleware that only handles the custom <code>ValidationException</code>. It converts the exception to a <code>ProblemDetails</code> response and includes any validation errors.</p><p>You can easily expand this to be a generic global exception handler.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ValidationExceptionHandlingMiddleware</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ValidationExceptionHandlingMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _next <span class="token operator">=</span> next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exceptions<span class="token punctuation">.</span>ValidationException</span> exception<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> problemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Status <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">,</span></span>
<span class="line">                Type <span class="token operator">=</span> <span class="token string">&quot;ValidationFailure&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Title <span class="token operator">=</span> <span class="token string">&quot;Validation error&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Detail <span class="token operator">=</span> <span class="token string">&quot;One or more validation errors has occurred&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>exception<span class="token punctuation">.</span>Errors <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                problemDetails<span class="token punctuation">.</span>Extensions<span class="token punctuation">[</span><span class="token string">&quot;errors&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> exception<span class="token punctuation">.</span>Errors<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsJsonAsync</span><span class="token punctuation">(</span>problemDetails<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You also need to include the middleware in the request pipeline by calling <code>UseMiddleware</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExceptionHandlingMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>This implementation of <code>ValidationBehavior</code> is something I use in real projects, and it works incredibly well. If I don&#39;t want to throw an exception, I can update the <code>ValidationBehavior</code> to return a result object instead.</p><p>How do you apply this if you&#39;re not using MediatR?</p><p>I&#39;m using an <code>IPipelineBehavior</code>, which allows me to implement a <em>middleware</em> wrapping each request.</p>`,32),H=n("p",null,"Hope this was valuable.",-1),W=n("p",null,"Stay awesome!",-1);function D(c,N){const d=p("VPCard"),t=p("router-link"),u=p("SiteInfo"),i=p("FontIcon"),l=p("RouteLink");return b(),k("div",null,[n("h1",y,[n("a",w,[n("span",null,v(c.$frontmatter.title)+" 관련",1)])]),s(d,m(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[s(t,{to:"#the-standard-command-validation-approach"},{default:e(()=>[a("The Standard Command Validation Approach")]),_:1})]),n("li",null,[s(t,{to:"#input-validation-and-business-validation"},{default:e(()=>[a("Input Validation and Business Validation")]),_:1})]),n("li",null,[s(t,{to:"#input-validation-with-fluentvalidation"},{default:e(()=>[a("Input Validation With FluentValidation")]),_:1})]),n("li",null,[s(t,{to:"#running-validation-from-the-use-case"},{default:e(()=>[a("Running Validation From the Use Case")]),_:1})]),n("li",null,[s(t,{to:"#mediatr-validation-pipeline"},{default:e(()=>[a("MediatR Validation Pipeline")]),_:1})]),n("li",null,[s(t,{to:"#handling-validation-exceptions"},{default:e(()=>[a("Handling Validation Exceptions")]),_:1})]),n("li",null,[s(t,{to:"#takeaway"},{default:e(()=>[a("Takeaway")]),_:1})])])]),V,s(u,{name:"CQRS Validation with MediatR Pipeline and FluentValidation",desc:"Validation is an essential cross-cutting concern that you need to solve in your application. You want to ensure the request is valid before you consider processing it. Another important question you need to answer is how you approach different types of validation. For example, I consider input and business validation differently, and each deserves a specific solution. I want to show you an elegant solution for validation using MediatR and FluentValidation. If you aren't using CQRS with MediatR, don't worry. Everything I explain about validation can easily be adapted to other paradigms.",url:"https://milanjovanovic.tech/blog/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_057.png"}),_,R,n("p",null,[a("I want to show you an elegant solution for validation using "),n("a",x,[a("MediatR ("),s(i,{icon:"iconfont icon-github"}),S,a(")")]),a(" and "),n("a",T,[s(i,{icon:"fas fa-globe"}),a("FluentValidation")]),a(".")]),n("p",null,[a("If you aren't using "),n("a",I,[s(i,{icon:"fa-brands fa-microsoft"}),a("CQRS")]),a(" with MediatR, don't worry. Everything I explain about validation can easily be adapted to other paradigms.")]),A,n("p",null,[n("a",C,[s(i,{icon:"fas fa-globe"}),a("FluentValidation")]),a(" is an excellent validation library for .NET, which uses a fluent interface and lambda expressions for building strongly typed validation rules.")]),q,n("p",null,[a("To implement a validator with "),n("a",M,[a("FluentValidation ("),s(i,{icon:"iconfont icon-github"}),F,a(")")]),a(", you create a class that inherits from the "),E,a(" base class. Then, you can add the validation rules from the constructor using "),j,a(":")]),P,n("p",null,[a("The naming convention I like to use is the name of the command and append "),O,a(". You can also enforce this by writing "),s(l,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:e(()=>[a("architecture tests.")]),_:1})]),B,n("p",null,[a("So, all you need is a way to implement middleware and place your validation inside. And I like having options, so here are "),s(l,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:e(()=>[a("three ways to create middleware in ASP.NET Core.")]),_:1})]),H,W])}const Y=r(g,[["render",D],["__file","cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.html.vue"]]),U=JSON.parse('{"path":"/milanjovanovic.tech/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.html","title":"CQRS Validation with MediatR Pipeline and FluentValidation","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"CQRS Validation with MediatR Pipeline and FluentValidation","description":"Article(s) > CQRS Validation with MediatR Pipeline and FluentValidation","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > CQRS Validation with MediatR Pipeline and FluentValidation"},{"property":"og:description","content":"CQRS Validation with MediatR Pipeline and FluentValidation"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"CQRS Validation with MediatR Pipeline and FluentValidation"}],["meta",{"property":"og:description","content":"Article(s) > CQRS Validation with MediatR Pipeline and FluentValidation"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_057.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_057.png"}],["meta",{"name":"twitter:image:alt","content":"CQRS Validation with MediatR Pipeline and FluentValidation"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CQRS Validation with MediatR Pipeline and FluentValidation\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_057.png\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2023-09-30T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_057.png"},"headers":[{"level":2,"title":"The Standard Command Validation Approach","slug":"the-standard-command-validation-approach","link":"#the-standard-command-validation-approach","children":[]},{"level":2,"title":"Input Validation and Business Validation","slug":"input-validation-and-business-validation","link":"#input-validation-and-business-validation","children":[]},{"level":2,"title":"Input Validation With FluentValidation","slug":"input-validation-with-fluentvalidation","link":"#input-validation-with-fluentvalidation","children":[]},{"level":2,"title":"Running Validation From the Use Case","slug":"running-validation-from-the-use-case","link":"#running-validation-from-the-use-case","children":[]},{"level":2,"title":"MediatR Validation Pipeline","slug":"mediatr-validation-pipeline","link":"#mediatr-validation-pipeline","children":[]},{"level":2,"title":"Handling Validation Exceptions","slug":"handling-validation-exceptions","link":"#handling-validation-exceptions","children":[]},{"level":2,"title":"Takeaway","slug":"takeaway","link":"#takeaway","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.81,"words":1444},"filePathRelative":"milanjovanovic.tech/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.md","localizedDate":"2023년 9월 30일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{Y as comp,U as data};
