import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,t as h,e as o,n,g as i,d as e,f as d,r,o as u}from"./app-BgNevrm5.js";const m={},g={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},w=t("nav",{class:"table-of-contents"},[t("ul")],-1),y=t("hr",null,null,-1),b=t("p",null,[e("This has been the longest technique project by a long way, but I think you've learned a lot about the importance of good unit testing. We also managed to cover some functional programming techniques, discussed private setters, used functions as parameters, and even tried "),t("code",null,"NSCountedSet"),e(", so I hope you're happy with the result!")],-1),k=t("code",null,"Project39UITests.swift",-1),_=t("code",null,"class Project39UITests: XCTestCase",-1),v=t("kbd",null,"Cmd",-1),S=t("kbd",null,"U",-1),x=d("<p>Third, and most impressively, you can run all your tests on Xcode Server, which is the beginning of continuous integration: every time you commit a code change to source control, Xcode Server can pull down those changes, build the app, and run the full suite of tests. If you&#39;re working in a team, Xcode can produce a visual display of tests that are passing and failing, which is either motivational or depressing depending on your workplace!</p><p>If you&#39;d like to take this app further, you should concentrate on testing. Can you write a test that verifies there are 55 table rows when the user filters by words that appear 1000 or more times? Can you write a test that ensures something sensible happens if the cancel button is pressed? Can you write a performance test to ensure <code>applyUserFilter()</code> doesn&#39;t get any slower?</p><p>There&#39;s also a bug in the code that you ought to be able to fix easily: if the user enters nothing into the filter text box, <code>applyUserFilter()</code> gets called with an empty string as its parameter and no results will be shown. It&#39;s down to you to think up a better solution: is it better to pretend Cancel was tapped instead? Or perhaps consider an empty string to mean &quot;show all words&quot;? It&#39;s your project now, so please choose what you think best.</p><p>Keep in mind that testing is only part of a sensible code review process. Yes, Xcode Server can check out your code and automatically validate that tests pass, but it is not a substitute for actual human interaction â€“ looking through each other&#39;s code, and providing constructive criticism. Taking the time to read someone else&#39;s code, then encouraging and supporting them as they improve it, is a key developer skill â€“ remember, code review is where mistakes get rubbed <em>out</em>, not rubbed <em>in</em>.</p>",4);function W(s,C){const a=r("VPCard"),c=r("FontIcon");return u(),p("div",null,[t("h1",g,[t("a",f,[t("span",null,h(s.$frontmatter.title)+" ê´€ë ¨",1)])]),o(a,n(i({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,y,o(a,n(i({title:"Wrap up | Hacking with iOS",desc:"Wrap up",link:"https://hackingwithswift.com/read/39/9/wrap-up",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,t("p",null,[e("Now that the full suite of tests are complete, you have three options ahead of you. First, you can run all the tests in a file by clicking the diamond (or green checkmark) next to the name of the test class. So, in "),o(c,{icon:"fa-brands fa-swift"}),k,e(" look in the gutter next to "),_,e(" and click that. Second, you can run all the tests in your entire project by pressing "),v,e("+"),S,e(". Give it a few moments to run, then you'll get a complete report.")]),x])}const T=l(m,[["render",W],["__file","09-wrap-up.html.vue"]]),O=JSON.parse('{"path":"/hackingwithswift.com/read/39/09-wrap-up.html","title":"Wrap up","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Wrap up","description":"Article(s) > Wrap up","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Wrap up"},{"property":"og:description","content":"Wrap up"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/39/09-wrap-up.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/39/09-wrap-up.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Wrap up"}],["meta",{"property":"og:description","content":"Article(s) > Wrap up"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Wrap up\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/read/README.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.96,"words":588},"filePathRelative":"hackingwithswift.com/read/39/09-wrap-up.md","excerpt":"\\n"}');export{T as comp,O as data};
