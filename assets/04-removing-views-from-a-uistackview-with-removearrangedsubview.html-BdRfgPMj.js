import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as e,t as r,e as a,n as s,g as t,f as l,r as p,o as d}from"./app-BgNevrm5.js";const u={},w={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=e("nav",{class:"table-of-contents"},[e("ul")],-1),h=e("hr",null,null,-1),k=l(`<p>That was a long chapter, and I hope you learned a lot. But you deserve a break, so I have some good news: it&#39;s trivial to remove views from a UIStackView. Heck, at its simplest it&#39;s just a matter of telling <code>removeArrangedSubview()</code> which view you don’t want then removing that view from its superview – the others are automatically resized and re-arranged to fill the space.</p><p>However, using <code>removeArrangedSubview()</code> <em>doesn’t</em> remove the view altogether – it keeps the view in memory, which is helpful if you plan to re-add it later on because you can avoid recreating it. Here, though, we actually want to remove the web view and destroy it entirely, and that can be done with a call to <code>removeFromSuperview()</code> instead.</p><p>In this particular project, we need to do a little more:</p><ul><li>We want the delete button to work only if there&#39;s a web view selected.</li><li>We want to find the location of the active web view inside the stack view, then remove it.</li><li>If there are now no more web views, we want to call <code>setDefaultTitle()</code> to reset the user interface.</li><li>We need to find whatever web view immediately follows the one that was removed.</li><li>We then make that the new selected web view, highlighting it in blue.</li></ul><p>We already pointed the delete button at a method called <code>deleteWebView()</code>, so all you need to do is plug this in. I&#39;ve added comments to make sure it&#39;s all clear:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">deleteWebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// safely unwrap our webview</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> webView <span class="token operator">=</span> activeWebView <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> stackView<span class="token punctuation">.</span>arrangedSubviews<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> webView<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// We found the webview – remove it from the stack view and destroy it</span></span>
<span class="line">            webView<span class="token punctuation">.</span><span class="token function">removeFromSuperview</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> stackView<span class="token punctuation">.</span>arrangedSubviews<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// go back to our default UI</span></span>
<span class="line">                <span class="token function">setDefaultTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// convert the Index value into an integer</span></span>
<span class="line">                <span class="token keyword">var</span> currentIndex <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// if that was the last web view in the stack, go back one</span></span>
<span class="line">                <span class="token keyword">if</span> currentIndex <span class="token operator">==</span> stackView<span class="token punctuation">.</span>arrangedSubviews<span class="token punctuation">.</span>count <span class="token punctuation">{</span></span>
<span class="line">                    currentIndex <span class="token operator">=</span> stackView<span class="token punctuation">.</span>arrangedSubviews<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// find the web view at the new index and select it</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token keyword">let</span> newSelectedWebView <span class="token operator">=</span> stackView<span class="token punctuation">.</span>arrangedSubviews<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">WKWebView</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">selectWebView</span><span class="token punctuation">(</span>newSelectedWebView<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, although the act of removing a view from a <code>UIStackView</code> is just a matter of calling either <code>removeArrangedSubview()</code> or <code>removeFromSuperview()</code> depending on whether you want to use it again, we need to do a little more to make sure the user interface updates correctly.</p><p>The last thing we&#39;re going to do is talk about multitasking on iPad, and add a few user interface clean ups to make the project complete…</p>`,8);function g(i,b){const n=p("VPCard");return d(),c("div",null,[e("h1",w,[e("a",m,[e("span",null,r(i.$frontmatter.title)+" 관련",1)])]),a(n,s(t({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,h,a(n,s(t({title:"Removing views from a UIStackView with removeArrangedSubview() | Hacking with iOS",desc:"Removing views from a UIStackView with removeArrangedSubview()",link:"https://hackingwithswift.com/read/31/4/removing-views-from-a-uistackview-with-removearrangedsubview",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k])}const S=o(u,[["render",g],["__file","04-removing-views-from-a-uistackview-with-removearrangedsubview.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/read/31/04-removing-views-from-a-uistackview-with-removearrangedsubview.html","title":"Removing views from a UIStackView with removeArrangedSubview()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Removing views from a UIStackView with removeArrangedSubview()","description":"Article(s) > Removing views from a UIStackView with removeArrangedSubview()","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Removing views from a UIStackView with removeArrangedSubview()"},{"property":"og:description","content":"Removing views from a UIStackView with removeArrangedSubview()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/31/04-removing-views-from-a-uistackview-with-removearrangedsubview.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/31/04-removing-views-from-a-uistackview-with-removearrangedsubview.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Removing views from a UIStackView with removeArrangedSubview()"}],["meta",{"property":"og:description","content":"Article(s) > Removing views from a UIStackView with removeArrangedSubview()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Removing views from a UIStackView with removeArrangedSubview()\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.93,"words":578},"filePathRelative":"hackingwithswift.com/read/31/04-removing-views-from-a-uistackview-with-removearrangedsubview.md","excerpt":"\\n"}');export{S as comp,V as data};
