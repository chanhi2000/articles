import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as e,g as t,d as o,a as d,f as m,r as i,o as k}from"./app-BgNevrm5.js";const f={},h={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.2")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),C=n("code",null,"callAsFunction()",-1),S=m(`<p>For example, we could create a <code>Dice</code> struct that has properties for <code>lowerBound</code> and <code>upperBound</code>, then add <code>callAsFunction</code> so that every time you call a dice value you get a random roll:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Dice</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> lowerBound<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">var</span> upperBound<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">callAsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">(</span>lowerBound<span class="token operator">...</span>upperBound<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> d6 <span class="token operator">=</span> <span class="token class-name">Dice</span><span class="token punctuation">(</span>lowerBound<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> upperBound<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> roll1 <span class="token operator">=</span> <span class="token function">d6</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>roll1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print a random number from 1 through 6, and it’s identical to just using <code>callAsFunction()</code> directly. For example, we could call it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> d12 <span class="token operator">=</span> <span class="token class-name">Dice</span><span class="token punctuation">(</span>lowerBound<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> upperBound<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> roll2 <span class="token operator">=</span> d12<span class="token punctuation">.</span><span class="token function">callAsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>roll2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift automatically adapts your call sites based on how <code>callAsFunction()</code> is defined. For example, you can add as many parameters as you want, you can control the return value, and you can even mark methods as <code>mutating</code> if needed.</p><p>For example, this creates a <code>StepCounter</code> struct that tracks how far someone has walked and reports back whether they reached their target of 10,000 steps:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">StepCounter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> steps <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">callAsFunction</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        steps <span class="token operator">+=</span> count</span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>steps<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> steps <span class="token operator">&gt;</span> <span class="token number">10_000</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> steps <span class="token operator">=</span> <span class="token class-name">StepCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> targetReached <span class="token operator">=</span> <span class="token function">steps</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For more advanced usage, <code>callAsFunction()</code> supports both <code>throws</code> and <code>rethrows</code>, and you can even define multiple <code>callAsFunction()</code> methods on a single type – Swift will choose the correct one depending on the call site, just like regular overloading.</p>`,8),A={class:"hint-container details"},F=n("summary",null,"Other Changes in Swift 5.2",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-1-to-5-2.playground.zip",target:"_blank",rel:"noopener noreferrer"};function B(c,I){const a=i("VPCard"),l=i("FontIcon");return k(),r("div",null,[n("h1",h,[n("a",g,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,v,s(a,e(t({title:"Callable values of user-defined nominal types | Changes in Swift 5.2",desc:"Callable values of user-defined nominal types",link:"https://hackingwithswift.com/swift/5.2/callasfunction",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",y,[o("SE-0253 ("),s(l,{icon:"iconfont icon-github"}),_,o(")")]),o(" introduced statically callable values to Swift, which is a fancy way of saying that you can now call a value directly if its type implements a method named "),C,o(". You don’t need to conform to any special protocol to make this behavior work; you just need to add that method to your type.")]),S,n("details",A,[F,s(a,e(t({title:"Key path expressions as functions | Changes in Swift 5.2",desc:"Key path expressions as functions",link:"/hackingwithswift.com/swift/5.2/keypath-expressions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Callable values of user-defined nominal types | Changes in Swift 5.2",
  "desc": "Callable values of user-defined nominal types",
  "link": "/hackingwithswift.com/swift/5.2/callasfunction.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,e(t({title:"Subscripts can now declare default arguments | Changes in Swift 5.2",desc:"Subscripts can now declare default arguments",link:"/hackingwithswift.com/swift/5.2/subscript-default-arguments.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Lazy filtering order is now reversed | Changes in Swift 5.2",desc:"Lazy filtering order is now reversed",link:"/hackingwithswift.com/swift/5.2/lazy-filtering.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"New and improved diagnostics | Changes in Swift 5.2",desc:"New and improved diagnostics",link:"/hackingwithswift.com/swift/5.2/new-diagnostics.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[s(l,{icon:"fas fa-file-zipper"}),o("Download Swift 5.2 playground")])])])])}const j=p(f,[["render",B],["__file","callasfunction.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swift/5.2/callasfunction.html","title":"Callable values of user-defined nominal types","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Callable values of user-defined nominal types","description":"Article(s) > Callable values of user-defined nominal types","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.2"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Callable values of user-defined nominal types"},{"property":"og:description","content":"Callable values of user-defined nominal types"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.2/callasfunction.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.2/callasfunction.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Callable values of user-defined nominal types"}],["meta",{"property":"og:description","content":"Article(s) > Callable values of user-defined nominal types"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.2"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Callable values of user-defined nominal types\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"hackingwithswift.com/swift/5.2/callasfunction.md","excerpt":"\\n"}');export{j as comp,D as data};
