import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as t,g as e,d as i,a as k,f as l,r as p,o as m}from"./app-BgNevrm5.js";const h={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),v=l(`<blockquote><p>Available from Swift 3.0</p></blockquote><p>When Swift went open source in December 2015, its shiny new API guideliness contained three fateful words: &quot;omit needless words.&quot; This introduced another huge raft of breaking changes in Swift 3, because it means that method names that contain self-evident words now have those words removed.</p><p>Let&#39;s look at some simple examples first. First, Swift 2.2:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> blue <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span><span class="token function">blueColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> min <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">minElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">attributedString<span class="token punctuation">.</span><span class="token function">appendAttributedString</span><span class="token punctuation">(</span>anotherString<span class="token punctuation">)</span></span>
<span class="line">names<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Jane&quot;</span></span><span class="token punctuation">,</span> atIndex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">UIDevice</span><span class="token punctuation">.</span><span class="token function">currentDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can you identify the needless words? When you&#39;re working with <code>UIColor</code>, of course blue is going to be a color, so saying <code>blueColor()</code> is needless. When you append one attributed string to another, do you really need to specify that it&#39;s an attributed string you&#39;re appending as opposed to an elephant? And why should it be a method – surely a color should be a property!</p><p>Here is that same code in Swift 3:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> blue <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>blue</span>
<span class="line"><span class="token keyword">let</span> min <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">attributedString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>anotherString<span class="token punctuation">)</span></span>
<span class="line">names<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Jane&quot;</span></span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">UIDevice</span><span class="token punctuation">.</span>current</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, this makes method names significantly shorter!</p><p>This change has particularly affected strings, which had repetition all over the place. The best way to demonstrate this is to show before and after code side-by-side, so in the code below the first line of each pair is Swift 2.2 and the second is Swift 3.0:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token string-literal"><span class="token string">&quot;  Hello  &quot;</span></span><span class="token punctuation">.</span><span class="token function">stringByTrimmingCharactersInSet</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">whitespaceAndNewlineCharacterSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;  Hello  &quot;</span></span><span class="token punctuation">.</span><span class="token function">trimmingCharacters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whitespacesAndNewlines<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">.</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ayl&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ayl&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;1,2,3,4,5&quot;</span></span><span class="token punctuation">.</span><span class="token function">componentsSeparatedByString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;,&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;1,2,3,4,5&quot;</span></span><span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span>separatedBy<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;,&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">myPath<span class="token punctuation">.</span><span class="token function">stringByAppendingPathComponent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;file.txt&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">myPath<span class="token punctuation">.</span><span class="token function">appendingPathComponent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;file.txt&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">.</span><span class="token function">stringByReplacingOccurrencesOfString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> withString<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Goodbye&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">.</span><span class="token function">replacingOccurrences</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Goodbye&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">.</span><span class="token function">substringFromIndex</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">.</span>capitalizedString</span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">.</span>capitalized</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p><code>capitalized</code> is still a property, but <code>lowercaseString</code> and <code>uppercaseString</code> have been transmogrified into the methods <code>lowercased()</code> and <code>uppercased()</code>.</p></div><p>I&#39;ve chosen the examples so far because the jump to Swift 3 isn&#39;t vast, but there are quite a few changes that were significant enough to make my brain hit a speedbump – usually when the resulting method is so short that it wasn&#39;t immediately obvious what it was.</p><p>For example, look at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">dismiss</span><span class="token punctuation">(</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,14),y={href:"https://en.wikipedia.org/wiki/Stockholm_syndrome",target:"_blank",rel:"noopener noreferrer"},q=l(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">dismissViewControllerAnimated</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In fact, the <code>completion: nil</code> part is optional now, so you could even write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">dismiss</span><span class="token punctuation">(</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A similar change happened to <code>prepareForSegue()</code>, which now looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">prepare</span><span class="token punctuation">(</span><span class="token keyword">for</span> segue<span class="token punctuation">:</span> <span class="token class-name">UIStoryboardSegue</span><span class="token punctuation">,</span> sender<span class="token punctuation">:</span> <span class="token class-name">AnyObject</span><span class="token operator">?</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,5),S={class:"hint-container details"},_=n("summary",null,"Changes in Swift 3.0",-1),C={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-2-2-to-3-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function x(c,A){const a=p("VPCard"),o=p("FontIcon");return m(),u("div",null,[n("h1",g,[n("a",f,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,s(a,t(e({title:"Omit needless words | Changes in Swift 3.0",desc:"Omit needless words",link:"https://hackingwithswift.com/swift/3.0/omit-needless-words",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("p",null,[i(`When I first saw that, I blanked: "dismiss what?" That's partly a result of the `),n("a",y,[s(o,{icon:"fa-brands fa-wikipedia-w"}),i("Stockholm syndrome")]),i(" that's inevitable having programmed for iOS for so long, but once you learn to reverse the parameter label change and re-add the needless words, you can see it's equivalent to this code in Swift 2.2:")]),q,n("details",S,[_,s(a,t(e({title:"All function parameters have labels unless you request otherwise | Changes in Swift 3.0",desc:"All function parameters have labels unless you request otherwise",link:"/hackingwithswift.com/swift/3.0/function-parameters.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k(` 
\`\`\`component VPCard
{
  "title": "Omit needless words | Changes in Swift 3.0",
  "desc": "Omit needless words",
  "link": "/hackingwithswift.com/swift/3.0/omit-needless-words.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"UpperCamelCase has been replaced with lowerCamelCase for enums and properties | Changes in Swift 3.0",desc:"UpperCamelCase has been replaced with lowerCamelCase for enums and properties",link:"/hackingwithswift.com/swift/3.0/lower-camel-case.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Swifty importing of C functions | Changes in Swift 3.0",desc:"Swifty importing of C functions",link:"/hackingwithswift.com/swift/3.0/c-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Verbs and nouns | Changes in Swift 3.0",desc:"Verbs and nouns",link:"/hackingwithswift.com/swift/3.0/verbs-and-nouns.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",C,[s(o,{icon:"fas fa-file-zipper"}),i("Download Swift 3.0 playground")])])])])}const H=r(h,[["render",x],["__file","omit-needless-words.html.vue"]]),P=JSON.parse('{"path":"/hackingwithswift.com/swift/3.0/omit-needless-words.html","title":"Omit needless words","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Omit needless words","description":"Article(s) > Omit needless words","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-3.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Omit needless words"},{"property":"og:description","content":"Omit needless words"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/3.0/omit-needless-words.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/3.0/omit-needless-words.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Omit needless words"}],["meta",{"property":"og:description","content":"Article(s) > Omit needless words"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-3.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Omit needless words\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.56,"words":767},"filePathRelative":"hackingwithswift.com/swift/3.0/omit-needless-words.md","excerpt":"\\n"}');export{H as comp,P as data};
