import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as t,n as s,g as a,d as o,a as d,f as m,r as c,o as h}from"./app-BgNevrm5.js";const f={},k={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),y=n("blockquote",null,[n("p",null,"Available from Swift 5.8")],-1),v={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0376-function-back-deployment.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),S=n("code",null,"@backDeployed",-1),C=m(`<p>On the surface this sounds like a fantastic way for Apple to make some new features retroactively available in earlier operating systems, but I donâ€™t think itâ€™s some kind of silver bullet â€“ <code>@backDeployed</code> applies only to functions, methods, subscripts, and computed properties, so while it might work great for smaller API changes such as the <code>fontDesign()</code> modifier introduced in iOS 16.1, it wouldnâ€™t work for any code that requires new types to be used, such as the new <code>scrollBounceBehavior()</code> modifier that relies on a new <code>ScrollBounceBehavior</code> struct.</p><p>As an example, iOS 16.4 introduced a <code>monospaced(_ isActive:)</code> variant for <code>Text</code>. If this were using <code>@backDeployed</code>, the SwiftUI team might ensure the modifier is available to whatever earliest version of SwiftUI supports the implementation code they actually need, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@backDeployed</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> iOS <span class="token number">16.4</span><span class="token punctuation">,</span> macOS <span class="token number">13.3</span><span class="token punctuation">,</span> tvOS <span class="token number">16.4</span><span class="token punctuation">,</span> watchOS <span class="token number">9.4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token attribute atrule">@available</span><span class="token punctuation">(</span>iOS <span class="token number">14.0</span><span class="token punctuation">,</span> macOS <span class="token number">11</span><span class="token punctuation">,</span> tvOS <span class="token number">14.0</span><span class="token punctuation">,</span> watchOS <span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">monospaced</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> isActive<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Implementation here&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At runtime, Swift will use the systemâ€™s copy of SwiftUI if it has that modifier already, otherwise using the back-deployed version back to iOS 14.0 and similar.</p>`,4),A={class:"hint-container details"},O=n("summary",null,"Other Changes in Swift 5.8",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-7-to-5-8.playground.zip",target:"_blank",rel:"noopener noreferrer"};function F(l,I){const e=c("VPCard"),i=c("FontIcon");return h(),r("div",null,[n("h1",k,[n("a",w,[n("span",null,u(l.$frontmatter.title)+" ê´€ë ¨",1)])]),t(e,s(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,b,t(e,s(a({title:"Function back deployment | Changes in Swift 5.8",desc:"Function back deployment",link:"https://hackingwithswift.com/swift/5.8/function-back-deployment",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("p",null,[n("a",v,[o("SE-0376 ("),t(i,{icon:"iconfont icon-github"}),_,o(")")]),o(" adds a new "),S,o(" attribute that makes it possible to allow new APIs to be used on older versions of frameworks. It works by writing the code for a function into your appâ€™s binary then performing a runtime check: if your user is on a suitably new version of the operating system then the systemâ€™s own version of the function will be used, otherwise the version copied into your appâ€™s binary will be used instead.")]),C,n("details",A,[O,t(e,s(a({title:"Lift all limitations on variables in result builders | Changes in Swift 5.8",desc:"Lift all limitations on variables in result builders",link:"/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Function back deployment | Changes in Swift 5.8",
  "desc": "Function back deployment",
  "link": "/hackingwithswift.com/swift/5.8/function-back-deployment.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),t(e,s(a({title:"Allow implicit self for weak self captures, after self is unwrapped | Changes in Swift 5.8",desc:"Allow implicit self for weak self captures, after self is unwrapped",link:"/hackingwithswift.com/swift/5.8/implicit-self-weak-capture.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(e,s(a({title:"Concise magic file names | Changes in Swift 5.8",desc:"Concise magic file names",link:"/hackingwithswift.com/swift/5.8/concise-magic-file-names.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(e,s(a({title:"Opening existential arguments to optional parameters | Changes in Swift 5.8",desc:"Opening existential arguments to optional parameters",link:"/hackingwithswift.com/swift/5.8/opening-existential-optional.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(e,s(a({title:"Collection downcasts in cast patterns are now supported | Changes in Swift 5.8",desc:"Collection downcasts in cast patterns are now supported",link:"/hackingwithswift.com/swift/5.8/collection-downcasts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[t(i,{icon:"fas fa-file-zipper"}),o("Download Swift 5.8 playground")])])])])}const P=p(f,[["render",F],["__file","function-back-deployment.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/swift/5.8/function-back-deployment.html","title":"Function back deployment","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Function back deployment","description":"Article(s) > Function back deployment","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.8"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Function back deployment"},{"property":"og:description","content":"Function back deployment"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/function-back-deployment.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.8/function-back-deployment.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Function back deployment"}],["meta",{"property":"og:description","content":"Article(s) > Function back deployment"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.8"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function back deployment\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.1,"words":630},"filePathRelative":"hackingwithswift.com/swift/5.8/function-back-deployment.md","excerpt":"\\n"}');export{P as comp,V as data};
