import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as e,t as r,e as a,n as o,g as s,f as l,r as h,o as d}from"./app-BgNevrm5.js";const f={},p={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},u={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},m=e("nav",{class:"table-of-contents"},[e("ul")],-1),w=e("hr",null,null,-1),y=l('<blockquote><p>Updated for Xcode 15</p></blockquote><p>Swift provides four concrete nominal types for defining custom objects: actors, classes, structs, and enums. Each of these works a little differently from the others, but the first three might seem similar so it‚Äôs worth spending a little time clarifying what they have in common and where their differences are.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Ultimately, which you use depends on the exact context you‚Äôre working in, and you will need them all at some point.</p></div><p>Actors:</p><ol><li>Are reference types, so are good for shared mutable state.</li><li>Can have properties, methods, initializers, and subscripts.</li><li>Do not support inheritance.</li><li>Automatically conform to the <code>Actor</code> protocol.</li><li>Automatically conform to the <code>AnyObject</code> protocol, and can therefore conform to <code>Identifiable</code> without adding an explicit <code>id</code> property.</li><li>Can have a deinitializer.</li><li>Cannot have their public properties and methods directly accessed externally; we must use <code>await</code>.</li><li>Can execute only one method at a time, regardless of how they are accessed.</li></ol><p>Classes:</p><ol><li>Are reference types, so are good for shared mutable state.</li><li>Can have properties, methods, initializers, and subscripts.</li><li>Support inheritance.</li><li>Cannot conform to the <code>Actor</code> protocol.</li><li>Automatically conform to the <code>AnyObject</code> protocol, and can therefore conform to <code>Identifiable</code> without adding an explicit <code>id</code> property.</li><li>Can have a deinitializer.</li><li>Can have their public properties and methods directly accessed externally.</li><li>Can potentially be executing severals methods at a time.</li></ol><p>Structs:</p><ol><li>Are value types, so are copied rather than shared.</li><li>Can have properties, methods, initializers, and subscripts.</li><li>Do not support inheritance.</li><li>Cannot conform to the <code>Actor</code> protocol.</li><li>Cannot conform to the <code>AnyObject</code> protocol; if you want to add <code>Identifiable</code> conformance you must add an <code>id</code> property yourself.</li><li>Cannot have a deinitializer.</li><li>Can have their public properties and methods directly accessed externally.</li><li>Can potentially be executing severals methods at a time.</li></ol><p>You might think the advantages of actors are such that they should be used everywhere classes are currently used, but that is a bad idea. Not only do you lose the ability for inheritance, but you‚Äôll also cause a huge amount of pain for yourself because every single external property access needs to use <code>await</code>.</p><p>However, there are certainly places where actors are a natural fit. For example, if you were previously creating serial queues to handle specific workflows, they can be replaced almost entirely with actors ‚Äì while also benefiting from increased safety and performance. So, if you have some work that absolutely must work one at a time, such as accessing a database, then trying converting it into something like a database actor.</p><p>There is one area in particular where using actors rather than classes is going to cause problems, so I really can‚Äôt say this clearly enough:</p><p><strong>Do not use actors for your SwiftUI data models.</strong> You should use a class that conforms to the <code>ObservableObject</code> protocol instead. If needed, you can optionally also mark that class with <code>@MainActor</code> to ensure it does any UI work safely, but keep in mind that using <code>@StateObject</code> or <code>@ObservedObject</code> automatically makes a view‚Äôs code run on the main actor. If you desperately need to be able to carve off some async work safely, you can create a sibling actor ‚Äì a separate actor that does not use <code>@MainActor</code>, but does not directly update the UI.</p>',13),g={class:"hint-container details"},b=e("summary",null,"Similar solutions‚Ä¶",-1);function k(c,v){const t=h("VPCard");return d(),i("div",null,[e("h1",p,[e("a",u,[e("span",null,r(c.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(t,o(s({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,w,a(t,o(s({title:"What‚Äôs the difference between actors, classes, and structs? | Swift Concurrency by Example",desc:"What‚Äôs the difference between actors, classes, and structs?",link:"https://hackingwithswift.com/quick-start/whats-the-difference-between-actors-classes-and-structs",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,e("details",g,[b,a(t,o(s({title:"What‚Äôs the difference between async let, tasks, and task groups? | Swift Concurrency by Example",desc:"What‚Äôs the difference between async let, tasks, and task groups?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-async-let-tasks-and-task-groups.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,o(s({title:"What is an actor and why does Swift have them? | Swift Concurrency by Example",desc:"What is an actor and why does Swift have them?",link:"/hackingwithswift.com/concurrency/what-is-an-actor-and-why-does-swift-have-them.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,o(s({title:"What‚Äôs the difference between a task and a detached task? | Swift Concurrency by Example",desc:"What‚Äôs the difference between a task and a detached task?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-a-task-and-a-detached-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,o(s({title:"What‚Äôs the difference between Sequence, AsyncSequence, and AsyncStream? | Swift Concurrency by Example",desc:"What‚Äôs the difference between Sequence, AsyncSequence, and AsyncStream?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-sequence-asyncsequence-and-asyncstream.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,o(s({title:"What‚Äôs the difference between await and async let? | Swift Concurrency by Example",desc:"What‚Äôs the difference between await and async let?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-await-and-async-let.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const C=n(f,[["render",k],["__file","whats-the-difference-between-actors-classes-and-structs.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/concurrency/whats-the-difference-between-actors-classes-and-structs.html","title":"What‚Äôs the difference between actors, classes, and structs?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What‚Äôs the difference between actors, classes, and structs?","description":"Article(s) > What‚Äôs the difference between actors, classes, and structs?","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What‚Äôs the difference between actors, classes, and structs?"},{"property":"og:description","content":"What‚Äôs the difference between actors, classes, and structs?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/whats-the-difference-between-actors-classes-and-structs.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/whats-the-difference-between-actors-classes-and-structs.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"What‚Äôs the difference between actors, classes, and structs?"}],["meta",{"property":"og:description","content":"Article(s) > What‚Äôs the difference between actors, classes, and structs?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What‚Äôs the difference between actors, classes, and structs?\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.2,"words":959},"filePathRelative":"hackingwithswift.com/concurrency/whats-the-difference-between-actors-classes-and-structs.md","localizedDate":"2021ÎÖÑ 11Ïõî 28Ïùº","excerpt":"\\n"}');export{C as comp,S as data};
