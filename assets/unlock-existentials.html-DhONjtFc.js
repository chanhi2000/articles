import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as d,e as n,n as s,g as a,d as i,a as u,f as h,r as l,o as f}from"./app-BgNevrm5.js";const m={},k={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},w=e("nav",{class:"table-of-contents"},[e("ul")],-1),b=e("hr",null,null,-1),y=e("blockquote",null,[e("p",null,"Available from Swift 5.7")],-1),v={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"apple/swift-evolution",-1),x=e("code",null,"Self",-1),_=h(`<p>In simple terms, this means the following code becomes legal:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstName<span class="token punctuation">:</span> any <span class="token class-name">Equatable</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> lastName<span class="token punctuation">:</span> any <span class="token class-name">Equatable</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hudson&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Equatable</code> is a protocol with <code>Self</code> requirements, which means it provides functionality that refers to the specific type that adopts it. For example, <code>Int</code> conforms to <code>Equatable</code>, so when we say <code>4 == 4</code> we’re actually running a function that accepts two integers and returns true if they match.</p><p>Swift <em>could</em> implement this functionality using a function similar to <code>func ==(first: Int, second: Int) -&gt; Bool</code>, but that wouldn’t scale well – they would need to write dozens of such functions to handle Booleans, strings, arrays, and so on. So, instead the <code>Equatable</code> protocol has a requirement like this: <code>func ==(lhs: Self, rhs: Self) -&gt; Bool</code>. In English, that means “you need to be able to accept two instances of the same type and tell me if they are the same.” That might be two integers, two strings, two Booleans, or two of any other type that conforms to <code>Equatable</code>.</p><p>To avoid this problem and similar ones, any time <code>Self</code> appeared in a protocol before Swift 5.7 the compiler would simply not allow us to use it in code such as this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tvShow<span class="token punctuation">:</span> <span class="token punctuation">[</span>any <span class="token class-name">Equatable</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Brooklyn&quot;</span></span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>From Swift 5.7 onwards, this code <em>is</em> allowed, and now the restrictions are pushed back to situations where you attempt to use the type in a place where Swift must actually enforce its restrictions. This means we <em>can’t</em> write <code>firstName == lastName</code> because as I said <code>==</code> must be sure it has two instances of the same type in order to work, and by using <code>any Equatable</code> we’re hiding the exact types of our data.</p><p>However, what we have gained is the ability to do runtime checks on our data to identify specifically what we’re working with. In the case of our mixed array, we could write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> item <span class="token keyword">in</span> tvShow <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> item <span class="token operator">=</span> item <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found string: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">item</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">let</span> item <span class="token operator">=</span> item <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found integer: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">item</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or in the case of our two strings, we could use this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> firstName <span class="token operator">=</span> firstName <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">let</span> lastName <span class="token operator">=</span> lastName <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>firstName <span class="token operator">==</span> lastName<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key to understanding what this change does is remembering that it allow us to use these protocol more freely, as long as we don’t do anything that specifically needs to knows about the internals of the type. So, we could write code to check whether all items in any sequence conform to the <code>Identifiable</code> protocol:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">canBeIdentified</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> any <span class="token class-name">Sequence</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    input<span class="token punctuation">.</span>allSatisfy <span class="token punctuation">{</span> <span class="token short-argument">$0</span> <span class="token keyword">is</span> any <span class="token class-name">Identifiable</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),q={class:"hint-container details"},C=e("summary",null,"Other Changes in Swift 5.7",-1),I={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-6-to-5-7.playground.zip",target:"_blank",rel:"noopener noreferrer"};function N(c,E){const t=l("VPCard"),o=l("FontIcon");return f(),r("div",null,[e("h1",k,[e("a",g,[e("span",null,d(c.$frontmatter.title)+" 관련",1)])]),n(t,s(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,n(t,s(a({title:"Unlock existentials for all protocols | Changes in Swift 5.7",desc:"Unlock existentials for all protocols",link:"https://hackingwithswift.com/swift/5.7/unlock-existentials",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,e("p",null,[e("a",v,[i("SE-0309 ("),n(o,{icon:"iconfont icon-github"}),S,i(")")]),i(" significantly loosens Swift’s ban on using protocols as types when they have "),x,i(" or associated type requirements, moving to a model where only specific properties or methods are off limits based on what they do.")]),_,e("details",q,[C,n(t,s(a({title:"if let shorthand for unwrapping optionals | Changes in Swift 5.7",desc:"if let shorthand for unwrapping optionals",link:"/hackingwithswift.com/swift/5.7/if-let-shorthand.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Multi-statement closure type inference | Changes in Swift 5.7",desc:"Multi-statement closure type inference",link:"/hackingwithswift.com/swift/5.7/multi-statement-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Clock, Instant, and Duration | Changes in Swift 5.7",desc:"Clock, Instant, and Duration",link:"/hackingwithswift.com/swift/5.7/clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Regular expressions | Changes in Swift 5.7",desc:"Regular expressions",link:"/hackingwithswift.com/swift/5.7/regexes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Type inference from default expressions | Changes in Swift 5.7",desc:"Type inference from default expressions",link:"/hackingwithswift.com/swift/5.7/default-type-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Concurrency in top-level code | Changes in Swift 5.7",desc:"Concurrency in top-level code",link:"/hackingwithswift.com/swift/5.7/top-level-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Opaque parameter declarations | Changes in Swift 5.7",desc:"Opaque parameter declarations",link:"/hackingwithswift.com/swift/5.7/opaque-parameter-declarations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Structural opaque result types | Changes in Swift 5.7",desc:"Structural opaque result types",link:"/hackingwithswift.com/swift/5.7/structural-opaque-result-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),u(` 
\`\`\`component VPCard
{
  "title": "Unlock existentials for all protocols | Changes in Swift 5.7",
  "desc": "Unlock existentials for all protocols",
  "link": "/hackingwithswift.com/swift/5.7/unlock-existentials.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(t,s(a({title:"Lightweight same-type requirements for primary associated types | Changes in Swift 5.7",desc:"Lightweight same-type requirements for primary associated types",link:"/hackingwithswift.com/swift/5.7/primary-associated-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Constrained existential types | Changes in Swift 5.7",desc:"Constrained existential types",link:"/hackingwithswift.com/swift/5.7/constrained-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Distributed actor isolation | Changes in Swift 5.7",desc:"Distributed actor isolation",link:"/hackingwithswift.com/swift/5.7/distributed-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"buildPartialBlock for result builders | Changes in Swift 5.7",desc:"buildPartialBlock for result builders",link:"/hackingwithswift.com/swift/5.7/buildpartialblock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Implicitly opened existentials | Changes in Swift 5.7",desc:"Implicitly opened existentials",link:"/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Unavailable from async attribute | Changes in Swift 5.7",desc:"Unavailable from async attribute",link:"/hackingwithswift.com/swift/5.7/noasync.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e("p",null,[e("a",I,[n(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.7 playground")])])])])}const T=p(m,[["render",N],["__file","unlock-existentials.html.vue"]]),P=JSON.parse('{"path":"/hackingwithswift.com/swift/5.7/unlock-existentials.html","title":"Unlock existentials for all protocols","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Unlock existentials for all protocols","description":"Article(s) > Unlock existentials for all protocols","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.7"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Unlock existentials for all protocols"},{"property":"og:description","content":"Unlock existentials for all protocols"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/unlock-existentials.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/unlock-existentials.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Unlock existentials for all protocols"}],["meta",{"property":"og:description","content":"Article(s) > Unlock existentials for all protocols"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.7"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Unlock existentials for all protocols\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.57,"words":1072},"filePathRelative":"hackingwithswift.com/swift/5.7/unlock-existentials.md","excerpt":"\\n"}');export{T as comp,P as data};
