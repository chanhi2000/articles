import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as a,n as e,g as o,d as s,f as c,r as p,o as m}from"./app-BgNevrm5.js";const k={},w={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Updated for Xcode 15")],-1),b=n("p",null,"If you create a new project and check both SwiftUI and Core Data, Xcode does a pretty good job of getting you towards a working configuration. Specifically, it:",-1),y=n("code",null,"YourProjectName.xcdatamodeld",-1),C=n("code",null,"Persistence.swift",-1),x=n("li",null,[s("Injects the context into the initial content view’s environment using the "),n("code",null,"managedObjectContext"),s(" key.")],-1),_=n("li",null,[s("Provides sample code in "),n("code",null,"ContentView"),s(" to create, read, and delete example data.")],-1),S=c('<p>That provides for us the complete ability to use Core Data fetch requests from within SwiftUI.</p><p>However, if you <em>didn’t</em> use the Core Data template or you’re just curious what the Core Data template does for us, it’s worth covering briefly the steps it takes to set up support in your apps. I’m also going to provide you with some sample data to work with so you can try out subsequent chapters in this book.</p><p>The first step is to create a Core Data model by pressing <kbd>Cmd</kbd>+<kbd>N</kbd> to make a new file, then choosing Data Model. The name of this model matters, because it will be used in your code shortly. Unless you plan to use a complex Core Data configuration, naming your model Main is fine – that’s the name I’ll be using here. Once you have your model, you can go ahead and create any entities you want to use in your app.</p><p>For example purposes we need some consistent data to work with so that I can give you meaningful code to work. So, open your xcdatamodeld file and create an entity called ProgrammingLanguage that has two string attributes: “name” and “creator”. Obviously you don’t need to have exactly this entity and attribute collection, so just mentally replace my examples with your own Core Data setup as you go.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-configure-core-data-to-work-with-swiftui-1~dark@2x.png" alt="A table showing the ProgrammingLanguage entity with String attributes “creator” and “name”." tabindex="0" loading="lazy"><figcaption>A table showing the ProgrammingLanguage entity with String attributes “creator” and “name”.</figcaption></figure><p>Second, you need somewhere to load and manage your Core Data configuration. Apple’s template does this with a <code>PersistenceController</code> singleton, which is a nice solution because it does just enough to get Core Data up and running while also providing the ability to make preview contexts for SwiftUI.</p>',6),I=n("code",null,"PersistenceController.swift",-1),D=c(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">PersistenceController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// A singleton for our entire app to use</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">PersistenceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Storage for Core Data</span></span>
<span class="line">    <span class="token keyword">let</span> container<span class="token punctuation">:</span> <span class="token class-name">NSPersistentContainer</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// A test configuration for SwiftUI previews</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> preview<span class="token punctuation">:</span> <span class="token class-name">PersistenceController</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token class-name">PersistenceController</span><span class="token punctuation">(</span>inMemory<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Create 10 example programming languages.</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token class-name">ProgrammingLanguage</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> controller<span class="token punctuation">.</span>container<span class="token punctuation">.</span>viewContext<span class="token punctuation">)</span></span>
<span class="line">            language<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Example Language 1&quot;</span></span></span>
<span class="line">            language<span class="token punctuation">.</span>creator <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;A. Programmer&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> controller</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// An initializer to load Core Data, optionally able</span></span>
<span class="line">    <span class="token comment">// to use an in-memory store.</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>inMemory<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// If you didn&#39;t name your model Main you&#39;ll need</span></span>
<span class="line">        <span class="token comment">// to change this name below.</span></span>
<span class="line">        container <span class="token operator">=</span> <span class="token class-name">NSPersistentContainer</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Main&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> inMemory <span class="token punctuation">{</span></span>
<span class="line">            container<span class="token punctuation">.</span>persistentStoreDescriptions<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;/dev/null&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        container<span class="token punctuation">.</span>loadPersistentStores <span class="token punctuation">{</span> description<span class="token punctuation">,</span> error <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">let</span> error <span class="token operator">=</span> error <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Error: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The in-memory store part of that code is important, because when you configure Core Data to save information into memory rather than disk it means all the changes you make get thrown away when your program ends.</p><p>Third, add a <code>save()</code> method to your <code>PersistenceController</code> class so that it checks whether the context has changes and commits them if needed.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> context <span class="token operator">=</span> container<span class="token punctuation">.</span>viewContext</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> context<span class="token punctuation">.</span>hasChanges <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> context<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Show some error here</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fourth, you need to inject the managed object context for your Core Data container into the SwiftUI environment.</p>`,5),U=n("code",null,"YourProjectNameApp.swift",-1),P=c(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> persistenceController <span class="token operator">=</span> <span class="token class-name">PersistenceController</span><span class="token punctuation">.</span>shared</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And then use the <code>environment()</code> modifier to attach your new Core Data view context to the <code>managedObjectContext</code> key in the environment:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>managedObjectContext<span class="token punctuation">,</span> persistenceController<span class="token punctuation">.</span>container<span class="token punctuation">.</span>viewContext<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The final step is optional, but recommended: when your app moves to the background, you should call the <code>save()</code> method we wrote a moment ago so that Core Data saves your changes permanently.</p><p>In SwiftUI this is done by adding a property to our app struct to monitor the scene phase:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>scenePhase<span class="token punctuation">)</span> <span class="token keyword">var</span> scenePhase</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then you can watch for that changing and call <code>save()</code> every time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>managedObjectContext<span class="token punctuation">,</span> persistenceController<span class="token punctuation">.</span>container<span class="token punctuation">.</span>viewContext<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> scenePhase<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">    persistenceController<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Done!</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>those instructions matter!</p></div><p>To avoid confusion, I want to repeat that the instructions above are important for setting up a useful Core Data environment for SwiftUI. <strong>All subsequent Core Data chapters assume you have followed the instructions above.</strong></p>`,11),j={class:"hint-container details"},q=n("summary",null,"Similar solutions…",-1);function A(l,H){const t=p("VPCard"),i=p("FontIcon");return m(),u("div",null,[n("h1",w,[n("a",h,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),a(t,e(o({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,f,a(t,e(o({title:"How to configure Core Data to work with SwiftUI | SwiftUI by Example",desc:"How to configure Core Data to work with SwiftUI",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-configure-core-data-to-work-with-swiftui",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,b,n("ol",null,[n("li",null,[s("Creates an empty "),a(i,{icon:"iconfont icon-xcode"}),y,s(" model file with an example configuration.")]),n("li",null,[s("Adds a "),a(i,{icon:"fa-brands fa-swift"}),C,s(" file that wraps up Core Data neatly in one place.")]),x,_]),S,n("p",null,[s("So, make a new file called "),a(i,{icon:"fa-brands fa-swift"}),I,s(" and give it this code:")]),D,n("p",null,[s("This takes two smaller steps, both in the "),a(i,{icon:"fa-brands fa-swift"}),U,s(" file. First, give your app struct a property to store the persistence controller:")]),P,n("details",j,[q,a(t,e(o({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,e(o({title:"Introduction to using Core Data with SwiftUI | SwiftUI by Example",desc:"Introduction to using Core Data with SwiftUI",link:"/hackingwithswift.com/swiftui/introduction-to-using-core-data-with-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,e(o({title:"How to delete Core Data objects from SwiftUI views | SwiftUI by Example",desc:"How to delete Core Data objects from SwiftUI views",link:"/hackingwithswift.com/swiftui/how-to-delete-core-data-objects-from-swiftui-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,e(o({title:"How to add Core Data objects from SwiftUI views | SwiftUI by Example",desc:"How to add Core Data objects from SwiftUI views",link:"/hackingwithswift.com/swiftui/how-to-add-core-data-objects-from-swiftui-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,e(o({title:"How to create a Core Data fetch request using @FetchRequest | SwiftUI by Example",desc:"How to create a Core Data fetch request using @FetchRequest",link:"/hackingwithswift.com/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const N=r(k,[["render",A],["__file","how-to-configure-core-data-to-work-with-swiftui.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-configure-core-data-to-work-with-swiftui.html","title":"How to configure Core Data to work with SwiftUI","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to configure Core Data to work with SwiftUI","description":"Article(s) > How to configure Core Data to work with SwiftUI","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to configure Core Data to work with SwiftUI"},{"property":"og:description","content":"How to configure Core Data to work with SwiftUI"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-configure-core-data-to-work-with-swiftui.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-configure-core-data-to-work-with-swiftui.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to configure Core Data to work with SwiftUI"}],["meta",{"property":"og:description","content":"Article(s) > How to configure Core Data to work with SwiftUI"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-configure-core-data-to-work-with-swiftui-1~dark@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to configure Core Data to work with SwiftUI\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-configure-core-data-to-work-with-swiftui-1~dark@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.97,"words":1192},"filePathRelative":"hackingwithswift.com/swiftui/how-to-configure-core-data-to-work-with-swiftui.md","excerpt":"\\n"}');export{N as comp,R as data};
