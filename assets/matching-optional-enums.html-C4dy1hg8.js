import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as i,t as r,e as n,n as s,g as a,a as g,d as u,f as m,r as e,o as h}from"./app-BgNevrm5.js";const d={},f={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},k=i("nav",{class:"table-of-contents"},[i("ul")],-1),v=i("hr",null,null,-1),b=m(`<blockquote><p>Available from Swift 5.1</p></blockquote><p>Swift has always been smart enough to handle switch/case pattern matching between optionals and non-optionals for strings and integers, but before Swift 5.1 that wasn‚Äôt extended to enums.</p><p>Well, in Swift 5.1 we can now use switch/case pattern matching to match optional enums with non-optionals, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">BuildStatus</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> starting</span>
<span class="line">    <span class="token keyword">case</span> inProgress</span>
<span class="line">    <span class="token keyword">case</span> complete</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> status<span class="token punctuation">:</span> <span class="token class-name">BuildStatus</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token punctuation">.</span>inProgress</span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> status <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>inProgress<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Build is starting‚Ä¶&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>complete<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Build is complete!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Some other build status&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift is able to compare the optional enum directly with the non-optional cases, so that code will print ‚ÄúBuild is starting‚Ä¶‚Äù</p>`,5),y={class:"hint-container details"},_=i("summary",null,"Other Changes in Swift 5.1",-1),S={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-0-to-5-1.playground.zip",target:"_blank",rel:"noopener noreferrer"};function C(o,M){const t=e("VPCard"),l=e("FontIcon");return h(),p("div",null,[i("h1",f,[i("a",w,[i("span",null,r(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(t,s(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,v,n(t,s(a({title:"Matching optional enums against non-optionals | Changes in Swift 5.1",desc:"Matching optional enums against non-optionals",link:"https://hackingwithswift.com/swift/5.1/matching-optional-enums",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,i("details",y,[_,n(t,s(a({title:"Improvements to synthesized memberwise initializers | Changes in Swift 5.1",desc:"Improvements to synthesized memberwise initializers",link:"/hackingwithswift.com/swift/5.1/improved-memberwise-initializers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Implicit returns from single-expression functions | Changes in Swift 5.1",desc:"Implicit returns from single-expression functions",link:"/hackingwithswift.com/swift/5.1/implicit-returns.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Universal Self | Changes in Swift 5.1",desc:"Universal Self",link:"/hackingwithswift.com/swift/5.1/universal-self.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Opaque return types | Changes in Swift 5.1",desc:"Opaque return types",link:"/hackingwithswift.com/swift/5.1/opaque-return-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Static and class subscripts | Changes in Swift 5.1",desc:"Static and class subscripts",link:"/hackingwithswift.com/swift/5.1/static-subscripts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Warnings for ambiguous none cases | Changes in Swift 5.1",desc:"Warnings for ambiguous none cases",link:"/hackingwithswift.com/swift/5.1/ambiguous-none-enum.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g(` 
\`\`\`component VPCard
{
  "title": "Matching optional enums against non-optionals | Changes in Swift 5.1",
  "desc": "Matching optional enums against non-optionals",
  "link": "/hackingwithswift.com/swift/5.1/matching-optional-enums.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(t,s(a({title:"Ordered collection diffing | Changes in Swift 5.1",desc:"Ordered collection diffing",link:"/hackingwithswift.com/swift/5.1/ordered-collection-diffing.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Creating uninitialized arrays | Changes in Swift 5.1",desc:"Creating uninitialized arrays",link:"/hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),i("p",null,[i("a",S,[n(l,{icon:"fas fa-file-zipper"}),u("Download Swift 5.1 playground")])])])])}const x=c(d,[["render",C],["__file","matching-optional-enums.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/swift/5.1/matching-optional-enums.html","title":"Matching optional enums against non-optionals","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Matching optional enums against non-optionals","description":"Article(s) > Matching optional enums against non-optionals","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.1"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Matching optional enums against non-optionals"},{"property":"og:description","content":"Matching optional enums against non-optionals"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.1/matching-optional-enums.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.1/matching-optional-enums.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Matching optional enums against non-optionals"}],["meta",{"property":"og:description","content":"Article(s) > Matching optional enums against non-optionals"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.1"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Matching optional enums against non-optionals\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.72,"words":515},"filePathRelative":"hackingwithswift.com/swift/5.1/matching-optional-enums.md","excerpt":"\\n"}');export{x as comp,B as data};
