import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as n,t as i,e as a,n as t,g as e,f as l,r as u,o as r}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),h=n("hr",null,null,-1),w=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>At its simplest form, saving a SwiftData object takes three steps: creating it, inserting into your model context, then calling <code>save()</code> on that context. The latter task is usually automatic because autosave is enabled by default on the main model context, but there are a couple of extra things to be aware of to make sure your data stays safe.</p><p>First, all SwiftData objects have an <code>id</code> property that unique identifies them, however before the object has been saved for the first time that identifier will be <em>temporary</em>. So, if we had a <code>House</code> model with an <code>address</code> property, this would print two completely different values:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> house <span class="token operator">=</span> <span class="token class-name">House</span><span class="token punctuation">(</span>address<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;10 Downing Street, London&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means if you want to use the ID for something specific – e.g. if you’re indexing the identifier with Spotlight so you can open your app straight to the object – you should always make sure it’s saved before reading the <code>id</code> property. You can identify a temporary identifier because its a UUID that starts with a lowercase “t”, like this: <strong>x-coredata:///House/t532017E6-0165-4434-ABE4-EFC0797B99F48</strong>.</p><p>Second, if you have autosave turned off you need to trigger the save manually. This has advantages and disadvantages, so you should use it carefully.</p><p>Handling saves manually makes discardable editing significantly easier because you can call <code>rollback()</code> rather than <code>save()</code> if the user wants to discard changes, rather than storing all their changes in local variables.</p><p>However, it makes life more <em>difficult</em> because of the way SwiftData resolves explicit relationship data:</p><ul><li>If you use an array on one side of your relationship and an optional on the other, SwiftData will correctly infer the relationship and keep both sides in sync even without calling <code>save()</code> on the context.</li><li>If you use a non-optional on the other side, you must specify the delete rule manually <em>and call <code>save()</code> when inserting the data</em>, otherwise SwiftData won’t refresh the relationship until application is relaunched – even if you call <code>save()</code> at a later date, and even if you create and run a new <code>FetchDescriptor</code> from scratch.</li></ul><p>It’s my view that this is a bug with SwiftData, so hopefully it will go away. You can check it yourself by creating models like these:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>deleteRule<span class="token punctuation">:</span> <span class="token punctuation">.</span>cascade<span class="token punctuation">,</span> inverse<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Student</span><span class="token punctuation">.</span>school<span class="token punctuation">)</span> <span class="token keyword">var</span> students<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Student</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> students<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Student</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>students <span class="token operator">=</span> students</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> school<span class="token punctuation">:</span> <span class="token class-name">School</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> school<span class="token punctuation">:</span> <span class="token class-name">School</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now create your SwiftData container with autosave disabled, and try it out with a SwiftUI view such as this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext</span>
<span class="line">    <span class="token attribute atrule">@Query</span> <span class="token keyword">var</span> schools<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">School</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token attribute atrule">@Query</span> <span class="token keyword">var</span> students<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Student</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">List</span><span class="token punctuation">(</span>schools<span class="token punctuation">)</span> <span class="token punctuation">{</span> school <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span>school<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span>school<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;, &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">List</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span> <span class="token punctuation">{</span> student <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>school<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Create&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> create<span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Save&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> hogwarts <span class="token operator">=</span> <span class="token class-name">School</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hogwarts&quot;</span></span><span class="token punctuation">,</span> students<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> harry <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Harry&quot;</span></span><span class="token punctuation">,</span> school<span class="token punctuation">:</span> hogwarts<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>hogwarts<span class="token punctuation">)</span></span>
<span class="line">        modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>harry<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//        try? modelContext.save()</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That has a commented-out call to <code>save()</code> inside the <code>create()</code> method, and instead saves the context from a separate Save button. Right now (as of iOS 17.0) this fails – you’ll see Harry listed as going to Hogwarts in the second list and Hogwarts showing no students in the first list, but if you press Save then relaunch the app you’ll see it’s displayed correctly. If you then try uncommenting the <code>save()</code> call inside <code>create()</code>, everything is displayed correctly without a relaunch.</p>`,14);function b(p,f){const s=u("VPCard");return r(),c("div",null,[n("h1",k,[n("a",m,[n("span",null,i(p.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,h,a(s,t(e({title:"How to save a SwiftData object | SwiftData by Example",desc:"How to save a SwiftData object",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-save-a-swiftdata-object",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const S=o(d,[["render",b],["__file","how-to-save-a-swiftdata-object.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-save-a-swiftdata-object.html","title":"How to save a SwiftData object","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to save a SwiftData object","description":"Article(s) > How to save a SwiftData object","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to save a SwiftData object"},{"property":"og:description","content":"How to save a SwiftData object"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-save-a-swiftdata-object.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-save-a-swiftdata-object.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to save a SwiftData object"}],["meta",{"property":"og:description","content":"Article(s) > How to save a SwiftData object"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-10-31T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to save a SwiftData object\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-10-31T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.49,"words":746},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-save-a-swiftdata-object.md","localizedDate":"2023년 10월 31일","excerpt":"\\n"}');export{S as comp,x as data};
