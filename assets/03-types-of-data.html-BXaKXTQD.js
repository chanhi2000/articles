import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as a,t as h,e,n as l,g as r,w as t,f as g,r as n,o as m,d as i}from"./app-BgNevrm5.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},v=a("hr",null,null,-1),k=g(`<p>There are lots of kinds of data, and Swift handles them all individually. You already saw one of the most important types when you assigned some text to a variable, but in Swift this is called a <code>String</code> – literally a string of characters.</p><p>Strings can be long (e.g. a million letters or more), short (e.g. 10 letters) or even empty (no letters), it doesn&#39;t matter: they are all strings in Swift&#39;s eyes, and all work the same. Swift knows that <code>name</code> should hold a string because you assign a string to it when you create it: &quot;Tim McGraw&quot;. If you were to rewrite your code to this it would stop working:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name</span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-1@2x.png" alt="Playground with error “Found an unexpected second identifier...”" tabindex="0" loading="lazy"><figcaption>Playground with error “Found an unexpected second identifier...”</figcaption></figure><p>At this point you have two options: either create your variable and give it an initial value on one line of code, or use what&#39;s called a type annotation, which is where you tell Swift what data type the variable will hold later on, even though you aren&#39;t giving it a value right now.</p><p>You&#39;ve already seen how the first option looks, so let&#39;s look at the second: type annotations. We know that <code>name</code> is going to be a string, so we can tell Swift that by writing a colon then <code>String</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>some people like to put a space before and after the colon, making <code>var name : String</code>, but they are <em>wrong</em> and you should try to avoid mentioning their wrongness in polite company.</p></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-2@2x.png" alt="A String type annotation" tabindex="0" loading="lazy"><figcaption>A String type annotation</figcaption></figure><p>The lesson here is that Swift always wants to know what type of data every variable or constant will hold. Always. You can&#39;t escape it, and that&#39;s a good thing because it provides something called type safety – if you say &quot;this will hold a string&quot; then later try and put a rabbit in there, Swift will refuse.</p><p>We can try this out now by introducing another important data type, called <code>Int</code>, which is short for &quot;integer.&quot; Integers are round numbers like 3, 30, 300, or -16777216. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-3@2x.png" alt="Playground with String and Integer type variables." tabindex="0" loading="lazy"><figcaption>Playground with String and Integer type variables.</figcaption></figure><p>That declares one variable to be a string and one to be an integer. Note how both <code>String</code> and <code>Int</code> have capital letters at the start, whereas <code>name</code> and <code>age</code> do not – this is the standard coding convention in Swift. A coding convention is something that doesn&#39;t matter to Swift (you can write your names how you like!) but does matter to other developers. In this case, data types start with a capital letter, whereas variables and constants do not.</p><p>Now that we have variables of two different types, you can see type safety in action. Try writing this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">name <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-4@2x.png" alt="Errors from assigning String to Int and the other way around." tabindex="0" loading="lazy"><figcaption>Errors from assigning String to Int and the other way around.</figcaption></figure><p>In that code, you&#39;re trying to put an integer into a string variable, and a string into an integer variable – and, thankfully, Xcode will throw up errors. You might think this is pedantic, but it&#39;s actually quite helpful: you make a promise that a variable will hold one particular type of data, and Xcode will enforce that throughout your work.</p><p><strong>Before you go on, please delete those two lines of code causing the error, otherwise nothing in your playground will work going forward!</strong></p><hr><h2 id="float-and-double" tabindex="-1"><a class="header-anchor" href="#float-and-double"><span>Float and Double</span></a></h2><p>Let&#39;s look at two more data types, called <code>Float</code> and <code>Double</code>. This is Swift&#39;s way of storing numbers with a fractional component, such as 3.1, 3.141, 3.1415926, and -16777216.5. There are two data types for this because you get to choose how much accuracy you want, but most of the time it doesn&#39;t matter so the official Apple recommendation is always to use <code>Double</code> because it has the highest accuracy.</p><p>Try putting this into your playground:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> latitude<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line">latitude <span class="token operator">=</span> <span class="token number">36.166667</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> longitude<span class="token punctuation">:</span> <span class="token class-name">Float</span></span>
<span class="line">longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">86.783333</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-5@2x.png" alt="Double and Float variables.  has a 3 missing off the end in the printout." tabindex="0" loading="lazy"><figcaption>Double and Float variables. <code>longitude</code> has a 3 missing off the end in the printout.</figcaption></figure><p>You can see both numbers appear on the right, but look carefully because there&#39;s a tiny discrepancy. We said that <code>longitude</code> should be equal to -86.783333, but in the results pane you&#39;ll see -86.78333 – it&#39;s missing one last 3 on the end. Now, you might well say, &quot;what does 0.000003 matter among friends?&quot; but this is ably demonstrating what I was saying about accuracy.</p><p>Because these playgrounds update as you type, we can try things out so you can see exactly how <code>Float</code> and <code>Double</code> differ. Try changing the code to be this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> longitude<span class="token punctuation">:</span> <span class="token class-name">Float</span></span>
<span class="line">longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">86.783333</span></span>
<span class="line">longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">186.783333</span></span>
<span class="line">longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1286.783333</span></span>
<span class="line">longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12386.783333</span></span>
<span class="line">longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123486.783333</span></span>
<span class="line">longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1234586.783333</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-6@2x.png" alt="Printouts of various Float values. The input gets longer, but the output is shortened to always be the same length." tabindex="0" loading="lazy"><figcaption>Printouts of various Float values. The input gets longer, but the output is shortened to always be the same length.</figcaption></figure><p>That&#39;s adding increasing numbers before the decimal point, while keeping the same amount of numbers after. But if you look in the results pane you&#39;ll notice that as you add more numbers before the point, Swift is removing numbers after. This is because it has limited space in which to store your number, so it&#39;s storing the most important part first – being off by 1,000,000 is a big thing, whereas being off by 0.000003 is less so.</p><p>Now try changing the <code>Float</code> to be a <code>Double</code> and you&#39;ll see Swift prints the correct number out every time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> longitude<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-7@2x.png" alt="Printouts of various Double values. The input and output both get longer." tabindex="0" loading="lazy"><figcaption>Printouts of various Double values. The input and output both get longer.</figcaption></figure><p>This is because, again, <code>Double</code> has twice the accuracy of <code>Float</code> so it doesn&#39;t need to cut your number to fit. Doubles still have limits, though – if you were to try a massive number like 123456789.123456789 you would see it gets cut down to 123456789.1234568.</p><hr><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean"><span>Boolean</span></a></h2><p>Swift has a built-in data type that can store whether a value is true or false, called a <code>Bool</code>, short for Boolean. Bools don&#39;t have space for &quot;maybe&quot; or &quot;perhaps&quot;, only absolutes: true or false. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> stayOutTooLate<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line">stayOutTooLate <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> nothingInBrain<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line">nothingInBrain <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> missABeat<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line">missABeat <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/types-of-data-8@2x.png" alt="Printouts of various Boolean values." tabindex="0" loading="lazy"><figcaption>Printouts of various Boolean values.</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You’ll notice these variables are written in a very particular way: we don’t write <code>MissABeat</code>, <code>missabeat</code>, or other such variations, but instead make the initial letter lowercase then capitalize the first letter of the second and subsequent words. This is called “camel case” because it looks a bit like the humps of a camel, and it’s used to make it easier to read words in variable names.</p></div><hr><h2 id="using-type-annotations-wisely" tabindex="-1"><a class="header-anchor" href="#using-type-annotations-wisely"><span>Using type annotations wisely</span></a></h2><p>As you&#39;ve learned, there are two ways to tell Swift what type of data a variable holds: assign a value when you create the variable, or use a type annotation. If you have a choice, the first is always preferable because it&#39;s clearer. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>…is preferred to:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This applies to all data types. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"><span class="token keyword">var</span> longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">86.783333</span></span>
<span class="line"><span class="token keyword">var</span> nothingInBrain <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This technique is called <em>type inference</em>, because Swift can infer what data type should be used for a variable by looking at the type of data you want to put in there. When it comes to numbers like -86.783333, Swift will always infer a <code>Double</code> rather than a <code>Float</code>.</p><p>For the sake of completeness, I should add that it&#39;s possible to specify a data type and provide a value at the same time, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,51);function x(p,S){const o=n("VPCard"),s=n("router-link"),c=n("VidStack");return m(),u("div",null,[a("h1",w,[a("a",b,[a("span",null,h(p.$frontmatter.title)+" 관련",1)])]),e(o,l(r({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),a("nav",y,[a("ul",null,[a("li",null,[e(s,{to:"#float-and-double"},{default:t(()=>[i("Float and Double")]),_:1})]),a("li",null,[e(s,{to:"#boolean"},{default:t(()=>[i("Boolean")]),_:1})]),a("li",null,[e(s,{to:"#using-type-annotations-wisely"},{default:t(()=>[i("Using type annotations wisely")]),_:1})])])]),v,e(o,l(r({title:"Types of Data | Hacking with iOS",desc:"Types of Data",link:"https://hackingwithswift.com/read/0/3/types-of-data",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),e(c,{src:"youtube/dwrlqKaMUt4"}),k])}const q=d(f,[["render",x],["__file","03-types-of-data.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/read/00/03-types-of-data.html","title":"Types of Data","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Types of Data","description":"Article(s) > Types of Data","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Types of Data"},{"property":"og:description","content":"Types of Data"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/03-types-of-data.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/03-types-of-data.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Types of Data"}],["meta",{"property":"og:description","content":"Article(s) > Types of Data"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/types-of-data-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Types of Data\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/types-of-data-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/types-of-data-2@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/types-of-data-3@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/types-of-data-4@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/types-of-data-5@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/types-of-data-6@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/types-of-data-7@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/types-of-data-8@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[{"level":2,"title":"Float and Double","slug":"float-and-double","link":"#float-and-double","children":[]},{"level":2,"title":"Boolean","slug":"boolean","link":"#boolean","children":[]},{"level":2,"title":"Using type annotations wisely","slug":"using-type-annotations-wisely","link":"#using-type-annotations-wisely","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.86,"words":1457},"filePathRelative":"hackingwithswift.com/read/00/03-types-of-data.md","excerpt":"\\n"}');export{q as comp,D as data};
