import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,b as s,t as v,e as a,n as h,g as m,w as t,d as n,f as o,r as p,o as b}from"./app-BgNevrm5.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},H={class:"table-of-contents"},_=s("hr",null,null,-1),A={href:"https://learn.microsoft.com/en-us/dotnet/api/system.net.http.delegatinghandler?view=net-8.0",target:"_blank",rel:"noopener noreferrer"},T=s("code",null,"HttpClient",-1),q=s("p",null,"But, an important aspect here is that middleware works with incoming HTTP requests to your API. Delegating handlers work with outgoing requests.",-1),C={href:"https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-8.0",target:"_blank",rel:"noopener noreferrer"},D=s("code",null,"HttpClient",-1),S=s("code",null,"HttpClient",-1),x={href:"https://learn.microsoft.com/en-us/dotnet/api/system.net.http.delegatinghandler?view=net-8.0",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"DelegatingHandler",-1),R=o(`<ul><li>Logging</li><li>Resiliency</li><li>Authentication</li></ul><hr><h2 id="configuring-an-httpclient" tabindex="-1"><a class="header-anchor" href="#configuring-an-httpclient"><span>Configuring an HttpClient</span></a></h2><p>Here&#39;s a very simple application that:</p><ul><li>Configures the <code>GitHubService</code> class as a typed HTTP client</li><li>Sets the <code>HttpClient.BaseAddress</code> to point to the GitHub API</li><li>Exposes an endpoint that retrieves a GitHub user by their username</li></ul><p>We&#39;re going to extend the <code>GitHubService</code> behavior using delegating handlers.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>httpClient <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    httpClient<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;api/users/{username}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">GitHubService</span> gitHubService<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token keyword">await</span> gitHubService<span class="token punctuation">.</span><span class="token function">GetByUsernameAsync</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),E=s("code",null,"GitHubService",-1),j=s("code",null,"HttpClient",-1),I=s("code",null,"HttpClient",-1),M=s("code",null,"HttpClient",-1),G=s("code",null,"IHttpClientFactory",-1),L=s("code",null,"HttpClient",-1),N=o(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubService</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span> client<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetByUsernameAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="logging-http-requests-using-delegating-handlers" tabindex="-1"><a class="header-anchor" href="#logging-http-requests-using-delegating-handlers"><span>Logging HTTP Requests Using Delegating Handlers</span></a></h2><p>Let&#39;s start with a simple example. We will add logging before and after sending an HTTP request. For this, we will to create a custom delegating handler - <code>LoggingDelegatingHandler</code>.</p><p>The custom delegating handler implements the <code>DelegatingHandler</code> base class. Then, you can override the <code>SendAsync</code> method to introduce additional behavior.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingDelegatingHandler</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>LoggingDelegatingHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> DelegatingHandler</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Before HTTP request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            result<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;After HTTP request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">&quot;HTTP request failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">throw</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You also need to register the <code>LoggingDelegatingHandler</code> with dependency injection. Delegating handlers must be registered as <strong>transient</strong> services.</p><p>The <code>AddHttpMessageHandler</code> method adds the <code>LoggingDelegatingHandler</code> as a delegating handler for the <code>GitHubService</code>. Any HTTP request sent using the <code>GitHubService</code> will first go through the <code>LoggingDelegatingHandler</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line highlighted">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LoggingDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>httpClient <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    httpClient<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpMessageHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LoggingDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s see what else we can do.</p><hr><h2 id="adding-resiliency-with-delegating-handlers" tabindex="-1"><a class="header-anchor" href="#adding-resiliency-with-delegating-handlers"><span>Adding Resiliency With Delegating Handlers</span></a></h2>`,12),W={href:"https://learn.microsoft.com/en-us/dotnet/core/resilience/?tabs=dotnet-cli",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"RetryDelegatingHandler",-1),U={href:"https://github.com/App-vNext/Polly",target:"_blank",rel:"noopener noreferrer"},O=s("code",null,"App-vNext/Polly",-1),V=s("code",null,"AsyncRetryPolicy",-1),F=o(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryDelegatingHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DelegatingHandler</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">AsyncRetryPolicy<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> _retryPolicy <span class="token operator">=</span></span>
<span class="line">        Policy<span class="token operator">&lt;</span>HttpResponseMessage<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpRequestException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">RetryAsync</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> policyResult <span class="token operator">=</span> <span class="token keyword">await</span> _retryPolicy<span class="token punctuation">.</span><span class="token function">ExecuteAndCaptureAsync</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>policyResult<span class="token punctuation">.</span>Outcome <span class="token operator">==</span> OutcomeType<span class="token punctuation">.</span>Failure<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestException</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;Something went wrong&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                policyResult<span class="token punctuation">.</span>FinalException<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> policyResult<span class="token punctuation">.</span>Result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You also need to register the <code>RetryDelegatingHandler</code> with dependency injection. Also, remember to configure it as a message handler. In this example, I&#39;m chaining two delegating handlers together, and they will run one after another.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line highlighted">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RetryDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>httpClient <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    httpClient<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpMessageHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LoggingDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpMessageHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RetryDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="solving-authentication-with-delegating-handlers" tabindex="-1"><a class="header-anchor" href="#solving-authentication-with-delegating-handlers"><span>Solving Authentication With Delegating Handlers</span></a></h2><p>Authentication is a cross-cutting concern you will have to solve in any microservices application. A common use case for delegating handlers is adding the <code>Authorization</code> header before sending an HTTP request.</p><p>For example, the GitHub API requires an access token to be present for authenticating incoming requests. The <code>AuthenticationDelegatingHandler</code> class adds the <code>Authorization</code> header value from the <code>GitHubOptions</code>. Another requirement is specifying the <code>User-Agent</code> header, which is set from the app configuration.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationDelegatingHandler</span><span class="token punctuation">(</span><span class="token class-name">IOptions<span class="token punctuation">&lt;</span>GitHubOptions<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> DelegatingHandler</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>AccessToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>UserAgent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don&#39;t forget to configure the <code>AuthenticationDelegatingHandler</code> with the <code>GitHubService</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line highlighted">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthenticationDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>httpClient <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    httpClient<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpMessageHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LoggingDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpMessageHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RetryDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpMessageHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthenticationDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),K=s("code",null,"KeyCloakAuthorizationDelegatingHandler",-1),z={href:"https://keycloak.org/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://oauth.net/2/",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://oauth.com/oauth2-servers/access-tokens/client-credentials/",target:"_blank",rel:"noopener noreferrer"},Z=o(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyCloakAuthorizationDelegatingHandler</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IOptions<span class="token punctuation">&lt;</span>KeycloakOptions<span class="token punctuation">&gt;</span></span> keycloakOptions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> DelegatingHandler</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> authToken <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetAccessTokenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationHeaderValue</span><span class="token punctuation">(</span></span>
<span class="line">            JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span></span>
<span class="line">            authToken<span class="token punctuation">.</span>AccessToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> httpResponseMessage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span></span>
<span class="line">            request<span class="token punctuation">,</span></span>
<span class="line">            cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        httpResponseMessage<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> httpResponseMessage<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>AuthToken<span class="token punctuation">&gt;</span></span> <span class="token function">GetAccessTokenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> <span class="token keyword">params</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> _keycloakOptions<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>AdminClientId<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;client_secret&quot;</span><span class="token punctuation">,</span> _keycloakOptions<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>AdminClientSecret<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;scope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;openid email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;grant_type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;client_credentials&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormUrlEncodedContent</span><span class="token punctuation">(</span><span class="token keyword">params</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span></span>
<span class="line">            HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span>_keycloakOptions<span class="token punctuation">.</span>TokenUrl<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Content <span class="token operator">=</span> content</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReadFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthToken<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span></span>
<span class="line">               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApplicationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Delegating handlers give you a powerful mechanism to extend the behavior when sending requests with an <code>HttpClient</code>. You can use delegating handlers to solve cross-cutting concerns, similar to how you would use middleware.</p><p>Here are a few ideas on how you could use delegating handlers:</p><ul><li>Logging before and after sending HTTP requests</li><li>Introducing resilience policies (retry, fallback)</li><li>Validating the HTTP request content</li><li>Authenticating with an external API</li></ul><p>I&#39;m sure you can come up with a few use cases yourself.</p>`,7),$={href:"https://youtu.be/_u6v4D6qgDI",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://youtu.be/_u6v4D6qgDI",target:"_blank",rel:"noopener noreferrer"},X=s("p",null,"Thanks for reading, and stay awesome!",-1);function nn(c,sn){const u=p("VPCard"),i=p("router-link"),r=p("SiteInfo"),e=p("FontIcon"),l=p("RouteLink"),d=p("VidStack");return b(),g("div",null,[s("h1",w,[s("a",f,[s("span",null,v(c.$frontmatter.title)+" 관련",1)])]),a(u,h(m({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",H,[s("ul",null,[s("li",null,[a(i,{to:"#configuring-an-httpclient"},{default:t(()=>[n("Configuring an HttpClient")]),_:1})]),s("li",null,[a(i,{to:"#logging-http-requests-using-delegating-handlers"},{default:t(()=>[n("Logging HTTP Requests Using Delegating Handlers")]),_:1})]),s("li",null,[a(i,{to:"#adding-resiliency-with-delegating-handlers"},{default:t(()=>[n("Adding Resiliency With Delegating Handlers")]),_:1})]),s("li",null,[a(i,{to:"#solving-authentication-with-delegating-handlers"},{default:t(()=>[n("Solving Authentication With Delegating Handlers")]),_:1})]),s("li",null,[a(i,{to:"#takeaway"},{default:t(()=>[n("Takeaway")]),_:1})])])]),_,a(r,{name:"Extending HttpClient With Delegating Handlers in ASP.NET Core",desc:"Delegating handlers are like ASP.NET Core middleware. Except they work with the HttpClient. I'll show you how to work with delegating handlers",url:"https://milanjovanovic.tech/blog/extending-httpclient-with-delegating-handlers-in-aspnetcore/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_072.png"}),s("p",null,[s("a",A,[a(e,{icon:"fa-brands fa-microsoft"}),n("Delegating handlers")]),n(" are like "),a(l,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:t(()=>[n("ASP.NET Core middleware")]),_:1}),n(". Except they work with the "),a(l,{to:"/milanjovanovic.tech/the-right-way-to-use-httpclient-in-dotnet.html"},{default:t(()=>[T]),_:1}),n(". The ASP.NET Core request pipeline allows you to introduce custom behavior with "),a(l,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:t(()=>[n("middleware")]),_:1}),n(". You can solve many cross-cutting concerns using middleware — logging, tracing, validation, authentication, authorization, etc.")]),q,s("p",null,[s("a",C,[a(e,{icon:"fa-brands fa-microsoft"}),D]),n(" is my preferred way of sending HTTP requests in ASP.NET Core. It's straightforward to use and solves most of my use cases. You can use delegating handlers to extend the "),S,n(" with behavior before or after sending an HTTP request.")]),s("p",null,[n("Today, I want to show you how to use a "),s("a",x,[a(e,{icon:"fa-brands fa-microsoft"}),P]),n(" to introduce:")]),R,s("p",null,[n("The "),E,n(" class is a "),a(l,{to:"/milanjovanovic.tech/the-right-way-to-use-httpclient-in-dotnet.html#replacing-named-clients-with-typed-clients"},{default:t(()=>[n("typed client")]),_:1}),n(" implementation. Typed clients allow you to expose a strongly typed API and hide the "),j,n(". The runtime takes care of providing a configured "),I,n(" instance through dependency injection. You also don't have to think about disposing of the "),M,n(". It's resolved from an underlying "),G,n(" that manages the "),L,n(" lifetime.")]),N,s("p",null,[n("Building "),s("a",W,[a(e,{icon:"fa-brands fa-microsoft"}),n("resilient")]),n(" applications is an important requirement for cloud development.")]),s("p",null,[n("The "),B,n(" class uses "),s("a",U,[n("Polly ("),a(e,{icon:"iconfont icon-github"}),O,n(")")]),n(" to create an "),V,n(". The retry policy wraps the HTTP request and retries it in case of a transient failure.")]),F,s("p",null,[n("Here's a more involved authentication example using the "),K,n(". This is a delegating handler that acquires the access token from "),s("a",z,[a(e,{icon:"fas fa-globe"}),n("Keycloak")]),n(". Keycloak is an open-source identity and access management service.")]),s("p",null,[n("I used Keycloak as the identity provider in my "),a(l,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:t(()=>[n("Pragmatic Clean Architecture")]),_:1}),n(" course.")]),s("p",null,[n("The delegating handler in this example uses an "),s("a",J,[a(e,{icon:"fas fa-globe"}),n("OAuth 2.0")]),n(),s("a",Y,[a(e,{icon:"fas fa-globe"}),n("client credentials")]),n(" grant flow to obtain an access token. This grant is used when applications request an access token to access their own resources, not on behalf of a user.")]),Z,s("p",null,[n("I made a video showing how to "),s("a",$,[a(e,{icon:"fa-brands fa-youtube"}),n("implement delegating handlers")]),n(", and you can "),s("a",Q,[a(e,{icon:"fa-brands fa-youtube"}),n("watch it here.")])]),a(d,{src:"youtube/_u6v4D6qgDI"}),X])}const tn=k(y,[["render",nn],["__file","extending-httpclient-with-delegating-handlers-in-aspnetcore.html.vue"]]),pn=JSON.parse('{"path":"/milanjovanovic.tech/extending-httpclient-with-delegating-handlers-in-aspnetcore.html","title":"Extending HttpClient With Delegating Handlers in ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Extending HttpClient With Delegating Handlers in ASP.NET Core","description":"Article(s) > Extending HttpClient With Delegating Handlers in ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Extending HttpClient With Delegating Handlers in ASP.NET Core"},{"property":"og:description","content":"Extending HttpClient With Delegating Handlers in ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/extending-httpclient-with-delegating-handlers-in-aspnetcore.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/extending-httpclient-with-delegating-handlers-in-aspnetcore.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Extending HttpClient With Delegating Handlers in ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Extending HttpClient With Delegating Handlers in ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_072.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_072.png"}],["meta",{"name":"twitter:image:alt","content":"Extending HttpClient With Delegating Handlers in ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2024-01-13T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Extending HttpClient With Delegating Handlers in ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_072.png\\"],\\"datePublished\\":\\"2024-01-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2024-01-13T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_072.png"},"headers":[{"level":2,"title":"Configuring an HttpClient","slug":"configuring-an-httpclient","link":"#configuring-an-httpclient","children":[]},{"level":2,"title":"Logging HTTP Requests Using Delegating Handlers","slug":"logging-http-requests-using-delegating-handlers","link":"#logging-http-requests-using-delegating-handlers","children":[]},{"level":2,"title":"Adding Resiliency With Delegating Handlers","slug":"adding-resiliency-with-delegating-handlers","link":"#adding-resiliency-with-delegating-handlers","children":[]},{"level":2,"title":"Solving Authentication With Delegating Handlers","slug":"solving-authentication-with-delegating-handlers","link":"#solving-authentication-with-delegating-handlers","children":[]},{"level":2,"title":"Takeaway","slug":"takeaway","link":"#takeaway","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.46,"words":1339},"filePathRelative":"milanjovanovic.tech/extending-httpclient-with-delegating-handlers-in-aspnetcore.md","localizedDate":"2024년 1월 13일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{tn as comp,pn as data};
