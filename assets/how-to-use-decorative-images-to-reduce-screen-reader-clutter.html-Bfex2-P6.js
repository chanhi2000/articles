import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,t as c,e as o,n as i,g as a,f as l,r as d,o as u}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},p=e("nav",{class:"table-of-contents"},[e("ul")],-1),w=e("hr",null,null,-1),f=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI automatically uses the names of your images for screen reader labels, which is helpful if you have image names like “Photo of Paul Hudson” or “Hacking with Swift logo.” However, some images aren’t meant to be read because they are merely <em>decorative</em> – they don’t convey information that isn’t already elsewhere on the screen, or are instead just there to make the user interface look more attractive.</p><p>If you create these images using something like <code>Image(&quot;star&quot;)</code> the screen reader will read them out as part of its standard UI pass. A better idea is to create them using using the <code>Image(decorative:)</code> initializer, which tells SwiftUI the image shouldn’t be exposed to the screen reader:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span>decorative<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;star&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Once you’ve built your user interface it’s worth doing a final check over using VoiceOver to make sure you have marked your images correctly – the last thing you want is the screen reader speaking out weird internal filenames that you thought were only used in your code!</p>`,5),v={class:"hint-container details"},k=e("summary",null,"Similar solutions…",-1);function y(r,b){const t=d("VPCard");return u(),n("div",null,[e("h1",m,[e("a",g,[e("span",null,c(r.$frontmatter.title)+" 관련",1)])]),o(t,i(a({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),p,w,o(t,i(a({title:"How to use decorative images to reduce screen reader clutter | SwiftUI by Example",desc:"How to use decorative images to reduce screen reader clutter",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-use-decorative-images-to-reduce-screen-reader-clutter",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,e("details",v,[k,o(t,i(a({title:"How to reduce animations when requested | SwiftUI by Example",desc:"How to reduce animations when requested",link:"/hackingwithswift.com/swiftui/how-to-reduce-animations-when-requested.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),o(t,i(a({title:"How to detect the Reduce Motion accessibility setting | SwiftUI by Example",desc:"How to detect the Reduce Motion accessibility setting",link:"/hackingwithswift.com/swiftui/how-to-detect-the-reduce-motion-accessibility-setting.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),o(t,i(a({title:"Displaying a detail screen with NavigationLink | SwiftUI by Example",desc:"Displaying a detail screen with NavigationLink",link:"/hackingwithswift.com/swiftui/displaying-a-detail-screen-with-navigationlink.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),o(t,i(a({title:"How to present a full screen modal view using fullScreenCover() | SwiftUI by Example",desc:"How to present a full screen modal view using fullScreenCover()",link:"/hackingwithswift.com/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),o(t,i(a({title:"How to disable the overlay color for images inside Button and NavigationLink | SwiftUI by Example",desc:"How to disable the overlay color for images inside Button and NavigationLink",link:"/hackingwithswift.com/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const S=s(h,[["render",y],["__file","how-to-use-decorative-images-to-reduce-screen-reader-clutter.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-use-decorative-images-to-reduce-screen-reader-clutter.html","title":"How to use decorative images to reduce screen reader clutter","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use decorative images to reduce screen reader clutter","description":"Article(s) > How to use decorative images to reduce screen reader clutter","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use decorative images to reduce screen reader clutter"},{"property":"og:description","content":"How to use decorative images to reduce screen reader clutter"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-decorative-images-to-reduce-screen-reader-clutter.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-decorative-images-to-reduce-screen-reader-clutter.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use decorative images to reduce screen reader clutter"}],["meta",{"property":"og:description","content":"Article(s) > How to use decorative images to reduce screen reader clutter"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use decorative images to reduce screen reader clutter\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.83,"words":550},"filePathRelative":"hackingwithswift.com/swiftui/how-to-use-decorative-images-to-reduce-screen-reader-clutter.md","excerpt":"\\n"}');export{S as comp,x as data};
