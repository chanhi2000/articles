import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as u,e as n,n as e,g as o,d as a,w as d,f as h,r as i,o as k}from"./app-BgNevrm5.js";const m={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=s("nav",{class:"table-of-contents"},[s("ul")],-1),v=s("hr",null,null,-1),y=h(`<p>Put simply, a predicate is a filter: you specify the criteria you want to match, and Core Data will ensure that only matching objects get returned. The best way to learn about predicates is by example, so I&#39;ve created three examples below that demonstrate various different filters. We&#39;ll be adding a fourth one in the next chapter once you&#39;ve learned a bit more.</p><p>First, add this new property to the <code>ViewController</code> class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> commitPredicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I&#39;ve made that an optional <code>NSPredicate</code> because that&#39;s exactly what our fetch request takes: either a valid predicate that specifies a filter, or <code>nil</code> to mean &quot;no filter.&quot;</p><p>Find your <code>loadSavedData()</code> method and add this line just below where the <code>sortDescriptors</code> property is set:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">request<span class="token punctuation">.</span>predicate <span class="token operator">=</span> commitPredicate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With that property in place, all we need to do is set it to whatever predicate we want before calling <code>loadSavedData()</code> again to refresh the list of objects. The easiest way to do this is by adding a new method called <code>changeFilter()</code>, which we&#39;ll use to show an action sheet for the user to choose from.</p><p>First we need to add a button to the navigation bar that will call this method, so put this code into <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">navigationItem<span class="token punctuation">.</span>rightBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Filter&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>changeFilter<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And here&#39;s an initial version of that new method for you to add to your view controller:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">changeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Filter commits…&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>actionSheet<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 1</span></span>
<span class="line">    <span class="token comment">// 2</span></span>
<span class="line">    <span class="token comment">// 3</span></span>
<span class="line">    <span class="token comment">// 4</span></span>
<span class="line"></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;ll be replacing the four comments one by one as you learn about predicates.</p><p>Let&#39;s start with something easy: matching an exact string. If we wanted to find commits with the message &quot;I fixed a bug in Swift&quot; – the kind of commit message that is frowned upon because it&#39;s not very descriptive! – you would write a predicate like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">commitPredicate <span class="token operator">=</span> <span class="token class-name">NSPredicate</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;message == &#39;I fixed a bug in Swift&#39;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That means &quot;make sure the message attribute is equal to this exact string.&quot; Typing an exact string like that is OK because you know what you&#39;re doing, but please don&#39;t ever use string interpolation to inject user values into a predicate. If you want to filter using a variable, use this syntax instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> filter <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;I fixed a bug in Swift&quot;</span></span></span>
<span class="line">commitPredicate <span class="token operator">=</span> <span class="token class-name">NSPredicate</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;message == %@&quot;</span></span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>%@</code> will be instantly recognizable to anyone who has used Objective-C before, and it means &quot;place the contents of a variable here, whatever data type it is.&quot; In our case, the value of <code>filter</code> will go in there, and will do so safely regardless of its value.</p><p>Like I said, &quot;I fixed a bug in Swift&quot; isn&#39;t the kind of commit message you&#39;ll see in your data, so == isn&#39;t really a helpful operator for our app. So let&#39;s write a real predicate that will be useful: put this in place of the <code>// 1</code> comment in the <code>changeFilter()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Show only fixes&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>commitPredicate <span class="token operator">=</span> <span class="token class-name">NSPredicate</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;message CONTAINS[c] &#39;fix&#39;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">loadSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>CONTAINS[c]</code> part is an operator, just like ==, except it&#39;s much more useful for our app. The <code>CONTAINS</code> part will ensure this predicate matches only objects that contain a string somewhere in their message – in our case, that&#39;s the text &quot;fix&quot;. The <code>[c]</code> part is predicate-speak for &quot;case-insensitive&quot;, which means it will match &quot;FIX&quot;, &quot;Fix&quot;, &quot;fix&quot; and so on. Note that we need to use <code>self.</code> twice inside the closure to make capturing explicit.</p><p>Another useful string operator is <code>BEGINSWITH</code>, which works just like <code>CONTAINS</code> except the matching text must be at the start of a string. To make this second example more exciting, I&#39;m also going to introduce the <code>NOT</code> keyword, which flips the match around: this action below will match only objects that <em>don&#39;t</em> begin with &#39;Merge pull request&#39;. Put this in place of the <code>// 2</code> comment:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Ignore Pull Requests&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>commitPredicate <span class="token operator">=</span> <span class="token class-name">NSPredicate</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;NOT message BEGINSWITH &#39;Merge pull request&#39;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">loadSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For a third and final predicate, let&#39;s try filtering on the &quot;date&quot; attribute. This is the <code>Date</code> data type, and Core Data is smart enough to let us compare that date to any other date inside a predicate. In this example, which should go in place of the <code>// 3</code> comment, we&#39;re going to request only commits that took place 43,200 seconds ago, which is equivalent to half a day:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Show only recent&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">let</span> twelveHoursAgo <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addingTimeInterval</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">43200</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>commitPredicate <span class="token operator">=</span> <span class="token class-name">NSPredicate</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;date &gt; %@&quot;</span></span><span class="token punctuation">,</span> twelveHoursAgo <span class="token keyword">as</span> <span class="token class-name">NSDate</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">loadSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, we’ve hit a small date problem: Core Data wants to work with the old <code>NSDate</code> type from Objective-C, so we typecast using <code>as</code> to keep it happy. Once that’s done, the magic <code>%@</code> will work with Core Data to ensure the <code>NSDate</code> is used correctly in the query.</p><p>For the final comment, <code>// 4</code>, we&#39;re just going to set <code>commitPredicate</code> to be <code>nil</code> so that all commits are shown again:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Show all commits&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>commitPredicate <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">loadSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it! <code>NSPredicate</code> uses syntax that is new to you so you might find it a bit daunting at first, but it really isn&#39;t very hard once you have a few examples to work from, and it does offer a huge amount of power to your apps.</p>`,28);function b(p,q){const t=i("VPCard"),c=i("RouteLink");return k(),r("div",null,[s("h1",g,[s("a",w,[s("span",null,u(p.$frontmatter.title)+" 관련",1)])]),n(t,e(o({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,v,n(t,e(o({title:"Adding Core Data entity relationships: lightweight vs heavyweight migration | Hacking with iOS",desc:"Adding Core Data entity relationships: lightweight vs heavyweight migration",link:"https://hackingwithswift.com/read/38/8/adding-core-data-entity-relationships-lightweight-vs-heavyweight-migration",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s("p",null,[a("Predicates are one of the most powerful features of Core Data, but they are actually useful in lots of other places too so if you master them here you'll learn a whole new skill that can be used elsewhere. For example, if you already completed "),n(c,{to:"/hackingwithswift.com/read/33/overview.html"},{default:d(()=>[a("project 33")]),_:1}),a(" you'll have seen how predicates let us find iCloud objects by reference.")]),y])}const A=l(m,[["render",b],["__file","07-examples-of-using-nspredicate-to-filter-nsfetchrequest.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/read/38/07-examples-of-using-nspredicate-to-filter-nsfetchrequest.html","title":"Adding Core Data entity relationships: lightweight vs heavyweight migration","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Adding Core Data entity relationships: lightweight vs heavyweight migration","description":"Article(s) > Adding Core Data entity relationships: lightweight vs heavyweight migration","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Adding Core Data entity relationships: lightweight vs heavyweight migration"},{"property":"og:description","content":"Adding Core Data entity relationships: lightweight vs heavyweight migration"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/38/08-adding-core-data-entity-relationships-lightweight-vs-heavyweight-migration.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/38/07-examples-of-using-nspredicate-to-filter-nsfetchrequest.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Adding Core Data entity relationships: lightweight vs heavyweight migration"}],["meta",{"property":"og:description","content":"Article(s) > Adding Core Data entity relationships: lightweight vs heavyweight migration"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Adding Core Data entity relationships: lightweight vs heavyweight migration\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.97,"words":1190},"filePathRelative":"hackingwithswift.com/read/38/07-examples-of-using-nspredicate-to-filter-nsfetchrequest.md","excerpt":"\\n"}');export{A as comp,I as data};
