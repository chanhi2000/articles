import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as d,e as t,n,g as o,d as a,w as u,f as h,r as i,o as m}from"./app-BgNevrm5.js";const g={},k={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w=e("nav",{class:"table-of-contents"},[e("ul")],-1),v=e("hr",null,null,-1),f=e("p",null,"Let's take our misdirection up a notch by adding some falling, spinning stars behind the cards. Again, these do nothing other than misdirect your friends while also giving me a chance to squeeze some new learning into you.",-1),b=e("code",null,"SKEmitterNode",-1),C=h(`<p>Fortunately, iOS has one, and in fact it even predates <code>SKEmitterNode</code>: <code>CAEmitterLayer</code>. From its name you should already be able to tell that it&#39;s a subclass of <code>CALayer</code>, which in turn means you need to use <code>CGColor</code> rather than <code>UIColor</code> and <code>CGImage</code> rather than <code>UIImage</code>. However, I should add that <code>CAEmitterLayer</code> isn&#39;t quite a beautifully polished as <code>SKEmitterNode</code> – it has no WYSIWYG editor, for example, so you need to do everything in code.</p><p>Each <code>CAEmitterLayer</code> defines the position, shape, size and rendering mode of a particle system, but it doesn&#39;t actually define any particles – that&#39;s handled by a separate class, called <code>CAEmitterCell</code>. You can create as many emitter cells as you want, then assign them to your emitter layer to have them all fire from the same position.</p><p>There are <em>lots</em> of properties you can set on emitter cells, and without a WYSIWYG editor you&#39;re basically stuck reading the documentation to find them all. To give you a jump start, I&#39;m going to use quite a few to make our particle system:</p><ul><li>The <code>birthRate</code> property sets how many particles to create every second.</li><li>The <code>lifetime</code> property sets how long each particle should live, in seconds.</li><li>The <code>velocity</code> property sets the base movement speed for each particle.</li><li>The <code>velocityRange</code> property sets how much velocity variation there can be.</li><li>The <code>emissionLongitude</code> property sets the direction particles are fired.</li><li>The <code>spinRange</code> property sets how much spin variation there can be between particles.</li><li>The <code>scale</code> property sets how large particles should be, where 1.0 is full size.</li><li>The <code>scaleRange</code> property sets how much size variation there can be between particles.</li><li>The <code>color</code> property sets the color to be applied to each particle.</li><li>The <code>alphaSpeed</code> property sets how fast particles should be faded out (or in) over their lifetime.</li><li>The <code>contents</code> property assigns a <code>CGImage</code> to be used as the image.</li></ul><p>Broadly speaking, each property has &quot;Speed&quot; and &quot;Range&quot; counterparts, where &quot;speed&quot; dictates how much the value changes over time, and &quot;range&quot; dictates how much variation there is in the initial value. So, <code>scale</code> also has <code>scaleSpeed</code> and <code>scaleRange</code> alongside it.</p><p>Alongside those cell properties, we&#39;re also going to give the particle system some basic properties: we want to position it at the horizontal center of our view and just off the top, we want it to be shaped like a line so that particles are created across the width of the view, we want it to be as wide as the view but only one point high, and, as a bonus, we want it to use additive rendering so that overlapping particles get brighter.</p><p>Now that you know how it all works, please add this method to the <code>ViewController</code> class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createParticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> particleEmitter <span class="token operator">=</span> <span class="token class-name">CAEmitterLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    particleEmitter<span class="token punctuation">.</span>emitterPosition <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    particleEmitter<span class="token punctuation">.</span>emitterShape <span class="token operator">=</span> <span class="token punctuation">.</span>line</span>
<span class="line">    particleEmitter<span class="token punctuation">.</span>emitterSize <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    particleEmitter<span class="token punctuation">.</span>renderMode <span class="token operator">=</span> <span class="token punctuation">.</span>additive</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token class-name">CAEmitterCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cell<span class="token punctuation">.</span>birthRate <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">    cell<span class="token punctuation">.</span>lifetime <span class="token operator">=</span> <span class="token number">5.0</span></span>
<span class="line">    cell<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">    cell<span class="token punctuation">.</span>velocityRange <span class="token operator">=</span> <span class="token number">50</span></span>
<span class="line">    cell<span class="token punctuation">.</span>emissionLongitude <span class="token operator">=</span> <span class="token punctuation">.</span>pi</span>
<span class="line">    cell<span class="token punctuation">.</span>spinRange <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">    cell<span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="line">    cell<span class="token punctuation">.</span>scaleRange <span class="token operator">=</span> <span class="token number">0.25</span></span>
<span class="line">    cell<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">(</span>white<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cgColor</span>
<span class="line">    cell<span class="token punctuation">.</span>alphaSpeed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.025</span></span>
<span class="line">    cell<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;particle&quot;</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>cgImage</span>
<span class="line">    particleEmitter<span class="token punctuation">.</span>emitterCells <span class="token operator">=</span> <span class="token punctuation">[</span>cell<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    gradientView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span>particleEmitter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that I&#39;m adding the particle emitter as a sublayer of the <code>gradientView</code> view. This is important, because it ensures the stars always go behind the cards. You will also need to a call to <code>createParticles()</code> to the view controller&#39;s <code>viewDidLoad()</code> method, just before the call to <code>loadCards()</code>.</p><p>Go ahead and run the project now and I think you&#39;ll find the effect quite pleasing – it&#39;s subtle, yes, but again it&#39;s just enough to distract users into thinking maybe, just maybe, the position of the stars tells you where the green star card is.</p><figure><img src="https://hackingwithswift.com/img/books/hws/37-4@2x.png" alt="With a color-shifting background gradient and falling stars your users will have no idea what&#39;s going on" tabindex="0" loading="lazy"><figcaption>With a color-shifting background gradient and falling stars your users will have no idea what&#39;s going on</figcaption></figure>`,11);function _(c,E){const s=i("VPCard"),p=i("RouteLink");return m(),r("div",null,[e("h1",k,[e("a",y,[e("span",null,d(c.$frontmatter.title)+" 관련",1)])]),t(s,n(o({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,v,t(s,n(o({title:"Creating a particle system using CAEmitterLayer | Hacking with iOS",desc:"Creating a particle system using CAEmitterLayer",link:"https://hackingwithswift.com/read/37/5/creating-a-particle-system-using-caemitterlayer",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,e("p",null,[a("We first met particle systems "),t(p,{to:"/hackingwithswift.com/read/11/overview.html"},{default:u(()=>[a("in project 11")]),_:1}),a(" when we covered "),b,a(". That's a fast and easy way to create particle systems in SpriteKit, but we're not in SpriteKit now so we need an alternative.")]),C])}const L=l(g,[["render",_],["__file","05-creating-a-particle-system-using-caemitterlayer.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/read/37/05-creating-a-particle-system-using-caemitterlayer.html","title":"Creating a particle system using CAEmitterLayer","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Creating a particle system using CAEmitterLayer","description":"Article(s) > Creating a particle system using CAEmitterLayer","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Creating a particle system using CAEmitterLayer"},{"property":"og:description","content":"Creating a particle system using CAEmitterLayer"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/37/05-creating-a-particle-system-using-caemitterlayer.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/37/05-creating-a-particle-system-using-caemitterlayer.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Creating a particle system using CAEmitterLayer"}],["meta",{"property":"og:description","content":"Article(s) > Creating a particle system using CAEmitterLayer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/37-4@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating a particle system using CAEmitterLayer\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/37-4@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.89,"words":867},"filePathRelative":"hackingwithswift.com/read/37/05-creating-a-particle-system-using-caemitterlayer.md","excerpt":"\\n"}');export{L as comp,R as data};
