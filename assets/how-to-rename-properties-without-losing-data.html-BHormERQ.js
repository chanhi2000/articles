import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as p,e,n,g as s,f as c,r,o as d}from"./app-BgNevrm5.js";const m={},u={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),w=t("hr",null,null,-1),f=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData is able to handle us renaming model properties through an automatic lightweight migration, however you do need to use the <code>@Attribute</code> macro to tell it the original name of the property.</p><p>For example, you might start off with a <code>User</code> model such as this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, you might later decide that <code>fullName</code> would have been a better name for the property. That&#39;s where the <code>@Attribute</code> macro comes in, because it lets you specify the original name used for the property so that SwiftData can move from old to new on your behalf. Here&#39;s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Attribute</span><span class="token punctuation">(</span>originalName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">var</span> fullName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That tells SwiftData to use the <code>fullName</code> property going forward, but if it finds an older model version using <code>name</code> it will be upgraded automatically ‚Äì it will be renamed for us to the new name without any further intervention from us.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you change the property name <em>without</em> using <code>Attribute(originalName:)</code>, SwiftData will consider the old and new properties to be different things in your schema, and so it won&#39;t migrate between the two. If you want to discard the old data and create a new property then go for it, but if you want to avoid data loss make sure to use <code>@Attribute</code>.</p></div>`,8);function k(i,v){const a=r("VPCard");return d(),l("div",null,[t("h1",u,[t("a",h,[t("span",null,p(i.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e(a,n(s({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,w,e(a,n(s({title:"Lightweight vs complex migrations | SwiftData by Example",desc:"Lightweight vs complex migrations",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-rename-properties-without-losing-data",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f])}const _=o(m,[["render",k],["__file","how-to-rename-properties-without-losing-data.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-rename-properties-without-losing-data.html","title":"Lightweight vs complex migrations","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Lightweight vs complex migrations","description":"Article(s) > Lightweight vs complex migrations","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Lightweight vs complex migrations"},{"property":"og:description","content":"Lightweight vs complex migrations"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-rename-properties-without-losing-data.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-rename-properties-without-losing-data.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Lightweight vs complex migrations"}],["meta",{"property":"og:description","content":"Article(s) > Lightweight vs complex migrations"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lightweight vs complex migrations\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-rename-properties-without-losing-data.md","localizedDate":"2023ÎÖÑ 9Ïõî 30Ïùº","excerpt":"\\n"}');export{_ as comp,x as data};
