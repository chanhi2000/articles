import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as i,g as r,d as t,f as a,r as l,o as h}from"./app-BgNevrm5.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),y=a(`<p>Running the <code>allWords</code> array through <code>filter()</code> solved the problem of empty lines in the array, but there are still two more problems we need to address: duplicate words, and that pesky &quot;Detail&quot; text in the detail text label.</p><p>Well, we&#39;re going to fix two of them right now, at the same time. And, for the first time in this series, I&#39;m going to have you write some bad code. Trust me: this will all become clear shortly, and it will be corrected.</p><p>Our app is going to show the number of times each word is used inside Shakespeare&#39;s comedies. To do that, we need to calculate how often each word appears, so we&#39;re going to add a new property to <code>PlayData</code> to store that calculation. Please add this now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> wordCounts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That dictionary will hold a string as its key (e.g. &quot;yonder&quot;) and a number as its value (e.g. 14), so that we can check the frequency of any word whenever we need to.</p><p>Our <code>init()</code> method already splits all the text up into words, but we need to add some new code to add the counting. This is fairly straightforward to write: loop through every word in the <code>allWords</code> array, add one to its <code>wordCounts</code> count if we have it, or set its count to 1 if we don&#39;t have it.</p>`,6),b=n("code",null,"init()",-1),v=n("code",null,"PlayData.swift",-1),_=n("code",null,"filter()",-1),q=a(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> word <span class="token keyword">in</span> allWords <span class="token punctuation">{</span></span>
<span class="line">    wordCounts<span class="token punctuation">[</span>word<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That uses an important dictionary subscript method that provides the default value of 0 if the key doesn’t exist. When reading keys it’s common to use nil coalescing instead – e.g. <code>let count = wordCount[word] ?? 0</code> – but when <em>modifying</em> like we’re doing here having that default value is useful.</p><p>Once that loop completes, <code>wordCounts</code> will contain every word that is used in the plays, as well as its frequency. Because we&#39;re using words as the dictionary keys, each word can appear only once in the dictionary. This means we can instantly remove duplicates from <code>wordCounts</code> by creating a new array from its keys.</p><p>Add this code just after the previous loop:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">allWords <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>wordCounts<span class="token punctuation">.</span>keys<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,5),C=n("code",null,"testAllWordsLoaded()",-1),x=n("code",null,"allWords",-1),A=n("code",null,"Project39Tests.swift",-1),T=a(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>playData<span class="token punctuation">.</span>allWords<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">18440</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;allWords was not 18440&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That&#39;s the first of two problems down: every word now appears only once in the table, and you can run the app now to verify that.</p>`,2),S=n("code",null,"wordCounts",-1),j=n("code",null,"ViewController.swift",-1),D=n("code",null,"cellForRowAt",-1),P=a(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">cell<span class="token punctuation">.</span>detailTextLabel<span class="token operator">!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">playData<span class="token punctuation">.</span>wordCounts<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token operator">!</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you run the app now you&#39;ll see every word now has its count next to it – that wasn&#39;t so hard, was it?</p><figure><img src="https://hackingwithswift.com/img/books/hws/39-8@2x.png" alt="Using our word counting code, we can now show frequency next to every word in the plays." tabindex="0" loading="lazy"><figcaption>Using our word counting code, we can now show frequency next to every word in the plays.</figcaption></figure>`,3),W=n("code",null,"Project39Tests.swift",-1),O=a(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testWordCountsAreCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> playData <span class="token operator">=</span> <span class="token class-name">PlayData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>playData<span class="token punctuation">.</span>wordCounts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;home&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Home does not appear 174 times&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>playData<span class="token punctuation">.</span>wordCounts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;fun&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Fun does not appear 4 times&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>playData<span class="token punctuation">.</span>wordCounts<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;mortal&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Mortal does not appear 41 times&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That test should pass, which is great. But more importantly it provides a fail-safe for future work: in the next chapter we&#39;re going to rewrite our word counting code, and this test will ensure we don&#39;t break anything while we work.</p>`,2);function R(c,B){const o=l("VPCard"),e=l("FontIcon");return h(),u("div",null,[n("h1",w,[n("a",m,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(o,i(r({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,f,s(o,i(r({title:"Counting unique strings in an array | Hacking with iOS",desc:"Counting unique strings in an array",link:"https://hackingwithswift.com/read/39/4/counting-unique-strings-in-an-array",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),y,n("p",null,[t("Modify the "),b,t(" method in "),s(e,{icon:"fa-brands fa-swift"}),v,t(" so that this code appears after the call to "),_,t(":")]),q,n("p",null,[t("Our app has taken a leap towards its end goal, but we also just broke our test: now that we show each word only once, our "),C,t(" test will fail because there are substantially fewer strings in the "),x,t(". So, please go to "),s(e,{icon:"fa-brands fa-swift"}),A,t(" and amend it one last time:")]),T,n("p",null,[t('The last problem is to fix the detail text label so that it says how many times a word is used rather than just "Detail". With our new '),S,t(" dictionary we can fix this in just one line of code in "),s(e,{icon:"fa-brands fa-swift"}),j,t(" – add this line to "),D,t(" just before the return line:")]),P,n("p",null,[t(`Before we're done, let's add another test to make sure our word counting code doesn't break in the future. Have a look through the table to find some words that interest you, and note down their frequencies. I chose "home" (174 times), "fun" (4 times), and "mortal" (41 times), but you're welcome to choose any words that interest you. Switch to `),s(e,{icon:"fa-brands fa-swift"}),W,t(" and add a new test:")]),O])}const V=p(g,[["render",R],["__file","04-counting-unique-strings-in-an-array.html.vue"]]),N=JSON.parse('{"path":"/hackingwithswift.com/read/39/04-counting-unique-strings-in-an-array.html","title":"Counting unique strings in an array","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Counting unique strings in an array","description":"Article(s) > Counting unique strings in an array","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Counting unique strings in an array"},{"property":"og:description","content":"Counting unique strings in an array"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/39/04-counting-unique-strings-in-an-array.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/39/04-counting-unique-strings-in-an-array.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Counting unique strings in an array"}],["meta",{"property":"og:description","content":"Article(s) > Counting unique strings in an array"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/39-8@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Counting unique strings in an array\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/39-8@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.98,"words":893},"filePathRelative":"hackingwithswift.com/read/39/04-counting-unique-strings-in-an-array.md","excerpt":"\\n"}');export{V as comp,N as data};
