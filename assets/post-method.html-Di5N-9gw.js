import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as d,g as h,w as e,f as m,r as o,o as k,d as t}from"./app-BgNevrm5.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},y=n("hr",null,null,-1),T=m(`<p>The POST method is used to send data to a server. Unlike the GET method, which only retrieves data, POST allows you to submit information that the server can use to process or store. POST is commonly used in forms, where users input data such as usernames, passwords, or contact details.</p><p>When a POST request is made, the data is sent in the body of the request rather than in the URL. This makes POST ideal for sending larger or more sensitive information, such as passwords, because the data is hidden and doesn’t appear in the browser&#39;s address bar.</p><p>For example, when you sign up for a website or submit a comment on a blog, the POST method is used to send your information to the server, which processes it and stores it in a database.</p><hr><h2 id="example-of-a-post-request" tabindex="-1"><a class="header-anchor" href="#example-of-a-post-request"><span>Example of a POST Request</span></a></h2><p>Here’s an example of a POST request using the Fetch API to send form data to a server:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;john_doe&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;mypassword123&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Success:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the POST request sends <code>username</code> and <code>password</code> as JSON data in the body of the request, making it a secure way to handle sensitive information like passwords.</p><hr><h2 id="differences-between-get-and-post" tabindex="-1"><a class="header-anchor" href="#differences-between-get-and-post"><span>Differences Between GET and POST</span></a></h2><p>Although GET and POST are used to communicate with a server, they serve different purposes and handle data in different ways:</p><h3 id="data-transmission" tabindex="-1"><a class="header-anchor" href="#data-transmission"><span>Data Transmission:</span></a></h3><ul><li><strong>GET</strong>: Data is included in the URL, making it visible in the address bar. This limits how much data can be sent.</li><li><strong>POST</strong>: Data is sent in the body of the request, which allows for sending larger amounts of information. This also keeps sensitive information hidden from the URL.</li></ul><h3 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose"><span>Purpose:</span></a></h3><ul><li><strong>GET</strong>: Used for retrieving data. It doesn’t change or modify anything on the server.</li><li><strong>POST</strong>: Used to send data that may change or add to the server&#39;s resources, such as adding a new user to a database or submitting a form.</li></ul><h3 id="caching" tabindex="-1"><a class="header-anchor" href="#caching"><span>Caching:</span></a></h3><ul><li><strong>GET</strong>: GET requests can be cached. This means that the browser may save the response, making future requests faster.</li><li><strong>POST</strong>: POST requests are not cached, as they often involve new or updated data that shouldn&#39;t be reused.</li></ul><h3 id="idempotence" tabindex="-1"><a class="header-anchor" href="#idempotence"><span>Idempotence:</span></a></h3><ul><li><strong>GET</strong>: Sending the same GET request multiple times doesn’t change the result. It will return the same data every time.</li><li><strong>POST</strong>: Sending the same POST request multiple times may result in different outcomes. For example, submitting a form twice could create duplicate entries.</li></ul><hr><h2 id="common-scenarios-for-using-post" tabindex="-1"><a class="header-anchor" href="#common-scenarios-for-using-post"><span>Common Scenarios for Using POST</span></a></h2><p>POST is ideal in situations where you need to send data to the server, often for processing or storage. Here are some common use cases:</p><h3 id="_1-submitting-forms" tabindex="-1"><a class="header-anchor" href="#_1-submitting-forms"><span>1. Submitting Forms</span></a></h3><p>Whenever you fill out and submit a form online, such as signing up for a newsletter or entering your details in a registration form, the POST method is used to send that information to the server. The server then processes the data, stores it, or performs another action based on it.</p><div class="hint-container info"><p class="hint-container-title">Example</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/register<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_2-user-authentication" tabindex="-1"><a class="header-anchor" href="#_2-user-authentication"><span>2. User Authentication</span></a></h3><p>When you log in to a website using a username and password, POST is often used to send your credentials securely to the server. The server checks the information and grants access to your account if the credentials match.</p><h3 id="_3-uploading-files" tabindex="-1"><a class="header-anchor" href="#_3-uploading-files"><span>3. Uploading Files</span></a></h3><p>POST is also used for uploading files, such as images, documents, or videos. Since the POST method allows sending large amounts of data, it’s perfect for uploading files that need to be processed or stored on the server.</p><div class="hint-container info"><p class="hint-container-title">Example using a form for file uploads</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Upload File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_4-creating-new-resources" tabindex="-1"><a class="header-anchor" href="#_4-creating-new-resources"><span>4. Creating New Resources</span></a></h3><p>POST is often used in APIs to create new resources. For example, when you add a new product to an online store, the POST method is used to send the product details to the server, which adds the product to the store&#39;s database.</p><div class="hint-container info"><p class="hint-container-title">Example of sending product data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;New Sneakers&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">59.99</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">&#39;Footwear&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/api/products&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Product added:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_5-sending-data-to-an-api" tabindex="-1"><a class="header-anchor" href="#_5-sending-data-to-an-api"><span>5. Sending Data to an API</span></a></h3><p>POST is widely used in APIs when you need to send data that will be processed or stored. For example, an app that tracks your fitness progress may use POST to send your workout details to a server, where it’s stored and analyzed.</p><h3 id="_6-making-purchases-online" tabindex="-1"><a class="header-anchor" href="#_6-making-purchases-online"><span>6. Making Purchases Online</span></a></h3><p>When you make an online purchase, POST is used to send the payment details to the server for processing. The server processes the transaction and updates the system with your order information.</p>`,37);function w(p,P){const i=o("VPCard"),a=o("router-link"),l=o("SiteInfo");return k(),r("div",null,[n("h1",f,[n("a",v,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),s(i,d(h({title:"Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples",desc:"When you interact with websites or apps, a lot happens behind the scenes. A key part of this process is how your browser or app talks to a server. HTTPS methods define what action needs to happen – it could be fetching data, sending information, or m...",link:"/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),n("nav",b,[n("ul",null,[n("li",null,[s(a,{to:"#example-of-a-post-request"},{default:e(()=>[t("Example of a POST Request")]),_:1})]),n("li",null,[s(a,{to:"#differences-between-get-and-post"},{default:e(()=>[t("Differences Between GET and POST")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#data-transmission"},{default:e(()=>[t("Data Transmission:")]),_:1})]),n("li",null,[s(a,{to:"#purpose"},{default:e(()=>[t("Purpose:")]),_:1})]),n("li",null,[s(a,{to:"#caching"},{default:e(()=>[t("Caching:")]),_:1})]),n("li",null,[s(a,{to:"#idempotence"},{default:e(()=>[t("Idempotence:")]),_:1})])])]),n("li",null,[s(a,{to:"#common-scenarios-for-using-post"},{default:e(()=>[t("Common Scenarios for Using POST")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#_1-submitting-forms"},{default:e(()=>[t("1. Submitting Forms")]),_:1})]),n("li",null,[s(a,{to:"#_2-user-authentication"},{default:e(()=>[t("2. User Authentication")]),_:1})]),n("li",null,[s(a,{to:"#_3-uploading-files"},{default:e(()=>[t("3. Uploading Files")]),_:1})]),n("li",null,[s(a,{to:"#_4-creating-new-resources"},{default:e(()=>[t("4. Creating New Resources")]),_:1})]),n("li",null,[s(a,{to:"#_5-sending-data-to-an-api"},{default:e(()=>[t("5. Sending Data to an API")]),_:1})]),n("li",null,[s(a,{to:"#_6-making-purchases-online"},{default:e(()=>[t("6. Making Purchases Online")]),_:1})])])])])]),y,s(l,{name:"Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples",desc:"When you interact with websites or apps, a lot happens behind the scenes. A key part of this process is how your browser or app talks to a server. HTTPS methods define what action needs to happen – it could be fetching data, sending information, or m...",url:"https://freecodecamp.org/news/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}),T])}const q=c(g,[["render",w],["__file","post-method.html.vue"]]),x=JSON.parse('{"path":"/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/post-method.html","title":"POST Method","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"POST Method","description":"Article(s) > (2/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples","category":["JavaScript","Article(s)"],"tag":["blog","freecodecamp.org","js","javascript"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > (2/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples"},{"property":"og:description","content":"POST Method"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/post-method.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/post-method.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"POST Method"}],["meta",{"property":"og:description","content":"Article(s) > (2/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"name":"twitter:image:alt","content":"POST Method"}],["meta",{"property":"article:author","content":"Ashutosh Krishna"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"POST Method\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Krishna\\"}]}"]],"date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Ashutosh Krishna","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"},"headers":[{"level":2,"title":"Example of a POST Request","slug":"example-of-a-post-request","link":"#example-of-a-post-request","children":[]},{"level":2,"title":"Differences Between GET and POST","slug":"differences-between-get-and-post","link":"#differences-between-get-and-post","children":[{"level":3,"title":"Data Transmission:","slug":"data-transmission","link":"#data-transmission","children":[]},{"level":3,"title":"Purpose:","slug":"purpose","link":"#purpose","children":[]},{"level":3,"title":"Caching:","slug":"caching","link":"#caching","children":[]},{"level":3,"title":"Idempotence:","slug":"idempotence","link":"#idempotence","children":[]}]},{"level":2,"title":"Common Scenarios for Using POST","slug":"common-scenarios-for-using-post","link":"#common-scenarios-for-using-post","children":[{"level":3,"title":"1. Submitting Forms","slug":"_1-submitting-forms","link":"#_1-submitting-forms","children":[]},{"level":3,"title":"2. User Authentication","slug":"_2-user-authentication","link":"#_2-user-authentication","children":[]},{"level":3,"title":"3. Uploading Files","slug":"_3-uploading-files","link":"#_3-uploading-files","children":[]},{"level":3,"title":"4. Creating New Resources","slug":"_4-creating-new-resources","link":"#_4-creating-new-resources","children":[]},{"level":3,"title":"5. Sending Data to an API","slug":"_5-sending-data-to-an-api","link":"#_5-sending-data-to-an-api","children":[]},{"level":3,"title":"6. Making Purchases Online","slug":"_6-making-purchases-online","link":"#_6-making-purchases-online","children":[]}]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":3.66,"words":1098},"filePathRelative":"freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/post-method.md","localizedDate":"2024년 10월 2일","excerpt":"\\n","copyright":{"author":"Ashutosh Krishna"}}');export{q as comp,x as data};
