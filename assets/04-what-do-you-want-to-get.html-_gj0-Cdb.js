import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as p,e,n as o,g as a,f as u,r as s,o as h}from"./app-BgNevrm5.js";const d={},g={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},w=t("nav",{class:"table-of-contents"},[t("ul")],-1),f=t("hr",null,null,-1),y=u(`<p>Inside the Extension group in the project navigator is a file called Info.plist. You have one for your app too, and in fact all apps have one. This plist (that&#39;s short for property list, remember) contains metadata about apps and extensions: what language is it, what version number is it, and so on.</p><p>For extensions, this plist also describes what data you are willing to accept and how it should be processed. Look for the key marked NSExtension and open its disclosure indicator: you should see NSExtensionAttributes, NSExtensionMainStoryboard and NSExtensionPointIdentifier. It&#39;s that first one we care about, because it modifies the way our extension behaves.</p><p>Open up the disclosure arrow for NSExtensionAttributes and you should see NSExtensionActivationRule, then String, then TRUEPREDICATE. Change String to be Dictionary, then open <em>its</em> disclosure arrow and click the small + button to the left of ‚ÄúDictionary‚Äù, and when it asks you for a key name change &quot;New item&quot; to be &quot;NSExtensionActivationSupportsWebPageWithMaxCount&quot;. You can leave the new item as a string (it doesn&#39;t really matter), but change its value to be 1 ‚Äì that&#39;s the empty space just to the right of String.</p><p>Adding this value to the dictionary means that we only want to receive web pages ‚Äì we aren&#39;t interested in images or other data types.</p><p>Now select the NSExtensionAttributes line itself, and click the + button that appears next to the word Dictionary. Replace &quot;New item&quot; with &quot;NSExtensionJavaScriptPreprocessingFile&quot;, then give it the value &quot;Action&quot;. This tells iOS that when our extension is called, we need to run the JavaScript preprocessing file called Action.js, which will be in our app bundle. Make sure you type &quot;Action&quot; and not &quot;Action.js&quot;, because iOS will append the &quot;.js&quot; itself.</p><p>In the picture below you can see how your extension&#39;s property list should look. Make sure you enter the key names precisely, because there is no room for error.</p><figure><img src="https://hackingwithswift.com/img/books/hws/19-1@2x.png" alt="This is how your extension&#39;s property list should look." tabindex="0" loading="lazy"><figcaption>This is how your extension&#39;s property list should look.</figcaption></figure><p>I say &quot;will be&quot; rather than &quot;is&quot; because we haven&#39;t actually created this file yet. Right-click on your extension&#39;s Info.plist file and choose New File. When you&#39;re asked what template you want, choose iOS &gt; Other &gt; Empty, then name it Action.js, and put this text into it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token class-name">Action</span> <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Action</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">run<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">finalize<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token class-name">ExtensionPreprocessingJS</span> <span class="token operator">=</span> new <span class="token class-name">Action</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is a book about Swift, not a book about JavaScript, so I&#39;m afraid I don&#39;t intend to explain what that code does except for two things:</p><ul><li>There are two functions: <code>run()</code> and <code>finalize()</code>. The first is called before your extension is run, and the other is called after.</li><li>Apple expects the code to be exactly like this, so you shouldn&#39;t change it other than to fill in the <code>run()</code> and <code>finalize()</code> functions.</li></ul><p>Even now, after all this hacking around, your extension <em>still</em> isn&#39;t ready to run, and I can only apologize ‚Äì I told you it was complicated!</p><figure><img src="https://hackingwithswift.com/img/books/hws/19-4@2x.png" alt="Your Action.js file needs to be in the Copy Bundle Resources build phase of your extension." tabindex="0" loading="lazy"><figcaption>Your Action.js file needs to be in the Copy Bundle Resources build phase of your extension.</figcaption></figure><p><strong>Having problems?</strong> One reader reported that Xcode had tried to compile Action.js rather than copy it into the project, which will cause problems when you try to run the extension.</p><p>If you&#39;re worried that this might have happened to you, it&#39;s easy enough to check: choose your project from the Project Navigator, then choose your extension from the list of targets ‚Äì it&#39;s just called Extension if you followed my instructions so far. Now choose the Build Phases tab and open up Compile Sources and Copy Bundle Resources.</p><p>If things have worked correctly you should see Action.js under Copy Bundle Resources and <em>not</em> Compile Sources. If this isn&#39;t the case, you can just drag it to move.</p>`,16);function k(i,b){const n=s("VPCard"),c=s("VidStack");return h(),l("div",null,[t("h1",g,[t("a",m,[t("span",null,p(i.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e(n,o(a({title:"Hacking with iOS ‚Äì learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,f,e(n,o(a({title:"What do you want to get? | Hacking with iOS",desc:"What do you want to get?",link:"https://hackingwithswift.com/read/19/4/what-do-you-want-to-get",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),e(c,{src:"youtube/s5Q8tgU2BJU"}),y])}const S=r(d,[["render",k],["__file","04-what-do-you-want-to-get.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/read/19/04-what-do-you-want-to-get.html","title":"What do you want to get?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What do you want to get?","description":"Article(s) > What do you want to get?","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What do you want to get?"},{"property":"og:description","content":"What do you want to get?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/19/04-what-do-you-want-to-get.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/19/04-what-do-you-want-to-get.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"What do you want to get?"}],["meta",{"property":"og:description","content":"Article(s) > What do you want to get?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/19-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What do you want to get?\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/19-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/19-4@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.64,"words":791},"filePathRelative":"hackingwithswift.com/read/19/04-what-do-you-want-to-get.md","excerpt":"\\n"}');export{S as comp,_ as data};
