import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,t as c,e as n,n as o,g as i,a as e,r as s,o as h}from"./app-BgNevrm5.js";const w={},u={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),m=t("hr",null,null,-1),d=t("blockquote",null,[t("p",null,"Available from iOS 7.0")],-1),y=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),e(`
/example-code/language/optional-vs-implicitly-unwrapped-optional-whats-the-difference">Optional vs implicitly unwrapped optional: what‚Äôs the difference? 
/example-code/language/when-is-it-safe-to-force-unwrap-optionals">When is it safe to force unwrap optionals? 
/example-code/testing/how-to-check-and-unwrap-optionals-in-tests-using-xctunwrap">How to check and unwrap optionals in tests using XCTUnwrap() 
/example-code/language/what-is-an-optional-value-in-swift">What is an optional value in Swift? 
/example-code/language/what-is-optional-chaining">What is optional chaining?</a>
`)],-1);function k(l,S){const a=s("VPCard");return h(),p("div",null,[t("h1",u,[t("a",f,[t("span",null,c(l.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(a,o(i({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,m,n(a,o(i({title:"How to unwrap an optional in Swift | Language - free Swift example code",desc:"How to unwrap an optional in Swift",link:"https://hackingwithswift.com/example-code/language/how-to-unwrap-an-optional-in-swift",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),d,e(" TODO: ÏûëÏÑ± "),e(` 
Optional values are a central concept in Swift, although admittedly they can be a little hard to understand at first. Put simply, an optional value is one that may or may not exist, which means Swift won't let you use it by accident ‚Äì you need to either check whether it has a value and unwrap it, or force unwrap. Of the two options the first is definitely preferable, because it's significantly safer.

To check whether an optional has a value then unwrap it all in one, you should use \`if let\` syntax, like this:

\`\`\`swift
// fetch an example optional string
let optionalString = fetchOptionalString()

// now unwrap it
if let unwrapped = optionalString {
    print(unwrapped)
}
\`\`\`

In that example, the \`print(unwrapped)\` line will only be executed if \`optionalString\` has a value. If that line is reached, you can know for sure that \`unwrapped\` has a value that you can use, which makes that code safe.

`),y])}const b=r(w,[["render",k],["__file","how-to-unwrap-an-optional-in-swift.html.vue"]]),v=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/how-to-unwrap-an-optional-in-swift.html","title":"How to unwrap an optional in Swift","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to unwrap an optional in Swift","description":"Article(s) > How to unwrap an optional in Swift","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-7.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to unwrap an optional in Swift"},{"property":"og:description","content":"How to unwrap an optional in Swift"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-unwrap-an-optional-in-swift.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-unwrap-an-optional-in-swift.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to unwrap an optional in Swift"}],["meta",{"property":"og:description","content":"Article(s) > How to unwrap an optional in Swift"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-7.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to unwrap an optional in Swift\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.36,"words":407},"filePathRelative":"hackingwithswift.com/example-code/language/how-to-unwrap-an-optional-in-swift.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{b as comp,v as data};
