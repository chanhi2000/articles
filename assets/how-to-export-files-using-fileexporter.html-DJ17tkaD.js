import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as u,e as n,n as a,g as e,f as i,r as o,o as d}from"./app-BgNevrm5.js";const m={},k={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w=s("nav",{class:"table-of-contents"},[s("ul")],-1),f=s("hr",null,null,-1),g=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI has a <code>fileExporter()</code> modifier that lets us export files from our app to anywhere the user wants – any folder in iCloud, or on their local device.</p><p>Using it takes several steps, because you must first have created a document type that your app is able to work with. I’m going to presume you’ve already done that so we can focus on <code>fileExporter()</code>, but if you <strong>haven’t</strong> already created a document type see the end of this article – I’ll provide an example there.</p><p>First, you need some state to track when you want the exporter UI to show or not. This is a simple Boolean, so you’d use something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingExporter <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The next step is to add the <code>fileExporter()</code> modifier somewhere to your view hierarchy, passing in the Boolean state you just created, the document you want to export, and content type the document has.</p><p>Helpfully, the document parameter is <strong>optional</strong>, so you don’t need to have this set at all times. However, in order for the exporter UI to appear the document must be set <strong>and</strong> your state Boolean must have be true – you need both.</p><p>When the export operation completes, the file exporter will run a callback function of your choosing, passing in a <code>Result</code> object that either contains the URL where the file was saved or an error.</p><p>So, you would add this kind of modifier to your view hierarchy:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">fileExporter</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $showingExporter<span class="token punctuation">,</span> document<span class="token punctuation">:</span> yourDocument<span class="token punctuation">,</span> contentType<span class="token punctuation">:</span> <span class="token punctuation">.</span>plainText<span class="token punctuation">)</span> <span class="token punctuation">{</span> result <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">switch</span> result <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">let</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Saved to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">url</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token keyword">let</span> error<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>I used <code>.plainText</code> for my content type, but that should match one of the content types you’ve set on your document type.</p></div>`,11),v=i(`<p>That’s all it takes to export a file, but just in case you’re missing this I want to provide an example document type that can be used here.</p><p>First, you’ll need to add a new import so that you can declare which content types your document can be used as:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">UniformTypeIdentifiers</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And now you need to create some sort of type that conforms to the <code>FileDocument</code> protocol. This doesn’t take much, but you do need to tell SwiftUI how to load and save files, and also give it an initializer able to create new instances as needed.</p><p>Here’s an example, with comments to explain what it all does:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">TextFile</span><span class="token punctuation">:</span> <span class="token class-name">FileDocument</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// tell the system we support only plain text</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> readableContentTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">UTType</span><span class="token punctuation">.</span>plainText<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// by default our document is empty</span></span>
<span class="line">    <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// a simple initializer that creates new, empty documents</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>initialText<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        text <span class="token operator">=</span> initialText</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// this initializer loads data that has been saved previously</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">ReadConfiguration</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> configuration<span class="token punctuation">.</span>file<span class="token punctuation">.</span>regularFileContents <span class="token punctuation">{</span></span>
<span class="line">            text <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// this will be called when the system wants to write our data to disk</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">fileWrapper</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">WriteConfiguration</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">FileWrapper</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>utf8<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">FileWrapper</span><span class="token punctuation">(</span>regularFileWithContents<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),y={class:"hint-container details"},b=s("summary",null,"Similar solutions…",-1);function x(p,_){const t=o("VPCard"),l=o("VidStack");return d(),r("div",null,[s("h1",k,[s("a",h,[s("span",null,u(p.$frontmatter.title)+" 관련",1)])]),n(t,a(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,f,n(t,a(e({title:"How to export files using fileExporter() | SwiftUI by Example",desc:"How to export files using fileExporter()",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-export-files-using-fileexporter",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n(l,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-export-files-using-fileexporter-1~dark.mp4"}),v,s("details",y,[b,n(t,a(e({title:"How to create multi-column lists using Table | SwiftUI by Example",desc:"How to create multi-column lists using Table",link:"/hackingwithswift.com/swiftui/how-to-create-multi-column-lists-using-table.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"How to add advanced text styling using AttributedString | SwiftUI by Example",desc:"How to add advanced text styling using AttributedString",link:"/hackingwithswift.com/swiftui/how-to-add-advanced-text-styling-using-attributedstring.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,a(e({title:"How to convert a SwiftUI view to an image | SwiftUI by Example",desc:"How to convert a SwiftUI view to an image",link:"/hackingwithswift.com/swiftui/how-to-convert-a-swiftui-view-to-an-image.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const U=c(m,[["render",x],["__file","how-to-export-files-using-fileexporter.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-export-files-using-fileexporter.html","title":"How to export files using fileExporter()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to export files using fileExporter()","description":"Article(s) > How to export files using fileExporter()","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to export files using fileExporter()"},{"property":"og:description","content":"How to export files using fileExporter()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-export-files-using-fileexporter.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-export-files-using-fileexporter.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to export files using fileExporter()"}],["meta",{"property":"og:description","content":"Article(s) > How to export files using fileExporter()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to export files using fileExporter()\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.81,"words":843},"filePathRelative":"hackingwithswift.com/swiftui/how-to-export-files-using-fileexporter.md","excerpt":"\\n"}');export{U as comp,I as data};
