import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as a,t as h,e as n,n as o,g as l,d as t,f as c,r as e,o as m}from"./app-BgNevrm5.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},g=a("nav",{class:"table-of-contents"},[a("ul")],-1),v=a("hr",null,null,-1),y=a("blockquote",null,[a("p",null,"Updated for Xcode 15")],-1),b=a("p",null,"The best way to start any new project is to define your data model, because once that's correct you normally find the rest of the app flows smoothly from there.",-1),_=a("p",null,"In SwiftData all our models are created using code – we can kiss goodbye to the Core Data model editor UI in Xcode, because now everything is described in pure Swift.",-1),D=a("code",null,"Destination.swift",-1),S=c(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Destination</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> details<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> date<span class="token punctuation">:</span> <span class="token class-name">Date</span></span>
<span class="line">    <span class="token keyword">var</span> priority<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>We&#39;ll be using numbers between 1 and 3 for the priority.</p></div><p>Yes, that’s a class, just like we had with Core Data. That’s intentional, because even though we’re a big fan of structs in Swift we ultimately still need a way to share data between various parts of our app, and classes do that.</p><p>Because it’s a class we need to provide an initializer for it. If you just start typing <code>i</code> somewhere in the class it will prompt you to complete the full initializer. So, you should get this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Destination</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> details<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> date<span class="token punctuation">:</span> <span class="token class-name">Date</span></span>
<span class="line">    <span class="token keyword">var</span> priority<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> details<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> date<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">,</span> priority<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>details <span class="token operator">=</span> details</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I&#39;m a big fan of providing default values wherever they make sense. When creating a new, empty destination then all the values would be empty apart from priority, which we&#39;ll give a value of 2 by default – not low, not high, just in the middle.</p><p>So, modify your initializer to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> details<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> date<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> priority<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>So far this is all pretty standard Swift, but now it’s time to bring in SwiftData. This takes exactly three steps:</p>`,9),x=a("code",null,"import SwiftData",-1),T=a("code",null,"Destination.swift",-1),j=a("code",null,"iTourApp.swift",-1),A=a("li",null,[t("Add the "),a("code",null,"@Model"),t(" macro before "),a("code",null,"class Destination"),t(".")],-1),C=a("code",null,"WindowGroup",-1),I=a("code",null,"iTourApp.swift",-1),P=a("code",null,".modelContainer(for: Destination.self)",-1),V=c("<p>That’s it: those three changes, all of which are trivial, give us a complete SwiftData stack.</p><p>The first one is just a matter of adding an <code>import</code> statement in two files so we can access all SwiftData&#39;s functionality, but the other two are very interesting.</p><p>The <code>@Model</code> macro tells SwiftData that we want to be able to load and save <code>Destination</code> objects using a SwiftData database. This adds a whole bunch of functionality behind the scenes so that SwiftData can detect when we change individual properties inside a <code>Destination</code> object and make sure they automatically get saved, but it also does clever things like lazy loading data to save memory.</p><p>As for the <code>modelContainer()</code> modifier, this tells SwiftData that we want to:</p><ol><li>Create the storage for our <code>Destination</code> object, or load it if it was created previously.</li><li>Use that storage all our data inside the window group, which is our entire app.</li></ol><p>If you&#39;ve used Core Data before, this model container is equivalent to an <code>NSPersistentContainer</code>, but it also doubles as an <code>NSPersistentCloudKitContainer</code> if you have iCloud enabled for your app.</p><p>You can run the app now if you want, but you won&#39;t see much because we haven&#39;t written any UI code yet. Let&#39;s do that next…</p>",7);function q(p,N){const i=e("VPCard"),r=e("VidStack"),s=e("FontIcon");return m(),u("div",null,[a("h1",w,[a("a",k,[a("span",null,h(p.$frontmatter.title)+" 관련",1)])]),n(i,o(l({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,v,n(i,o(l({title:"Defining a data model with SwiftData | SwiftData by Example",desc:"Defining a data model with SwiftData",link:"https://hackingwithswift.com/quick-start/swiftdata/defining-a-data-model-with-swiftdata",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n(r,{src:"youtube/kiFQevfpuKQ"}),b,_,a("p",null,[t("For this project we’re going to create a simple model to describe one destination, so create a new Swift file called "),n(s,{icon:"fa-brands fa-swift"}),D,t(" and give it this code:")]),S,a("ol",null,[a("li",null,[t("Add "),x,t(" to the top of both "),n(s,{icon:"fa-brands fa-swift"}),T,t(" and "),n(s,{icon:"fa-brands fa-swift"}),j,t(".")]),A,a("li",null,[t("Add this modifier to your "),C,t(" in "),n(s,{icon:"fa-brands fa-swift"}),I,t(": "),P])]),V])}const R=d(f,[["render",q],["__file","defining-a-data-model-with-swiftdata.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/defining-a-data-model-with-swiftdata.html","title":"Defining a data model with SwiftData","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Defining a data model with SwiftData","description":"Article(s) > Defining a data model with SwiftData","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Defining a data model with SwiftData"},{"property":"og:description","content":"Defining a data model with SwiftData"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/defining-a-data-model-with-swiftdata.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/defining-a-data-model-with-swiftdata.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Defining a data model with SwiftData"}],["meta",{"property":"og:description","content":"Article(s) > Defining a data model with SwiftData"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Defining a data model with SwiftData\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.45,"words":736},"filePathRelative":"hackingwithswift.com/swiftdata/defining-a-data-model-with-swiftdata.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{R as comp,E as data};
