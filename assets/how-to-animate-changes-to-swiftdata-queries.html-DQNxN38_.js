import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,t as r,e,n,g as s,f as p,r as l,o as u}from"./app-BgNevrm5.js";const d={},h={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},w=t("nav",{class:"table-of-contents"},[t("ul")],-1),g=t("hr",null,null,-1),f=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData&#39;s <code>@Query</code> macro comes with a built-in <code>animation</code> parameter, which can be used by itself or alongside other options such as sorting and filtering. If you don&#39;t specify any animation then changes to your query will appear immediately, but if you want them to animate smoothly then specify any other value.</p><p>For example, if we had a <code>User</code> model with results being shown in a SwiftUI <code>List</code>, we could make those changes slide into position correctly like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">User</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> animation<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token keyword">var</span> users<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Exactly what animation happens depends on how your data is changing and what platform your code is running on. For example, rows you&#39;re adding might fade in, rows you&#39;re deleting might fade out, and other rows might slide to their new location.</p><p>Things are slightly trickier if you want <em>conditional</em> animations ‚Äì if you want to animate some changes but not others. Here you might find it easier to apply the <code>animation()</code> modifier to your list rather than to your <code>@Query</code> property, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> users<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With this approach you can at least adjust the animation dynamically based on other properties, like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span>isLoaded <span class="token operator">?</span> <span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> users<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It might seem like this latter approach is going to be more CPU-intensive because of the <code>Equatable</code> check, but I haven&#39;t found much difference between the two even with tens of thousands of objects.</p>`,10);function k(o,y){const a=l("VPCard");return u(),c("div",null,[t("h1",h,[t("a",m,[t("span",null,r(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e(a,n(s({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,g,e(a,n(s({title:"How to animate changes to SwiftData queries | SwiftData by Example",desc:"How to animate changes to SwiftData queries",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-animate-changes-to-swiftdata-queries",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f])}const _=i(d,[["render",k],["__file","how-to-animate-changes-to-swiftdata-queries.html.vue"]]),q=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-animate-changes-to-swiftdata-queries.html","title":"How to animate changes to SwiftData queries","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to animate changes to SwiftData queries","description":"Article(s) > How to animate changes to SwiftData queries","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to animate changes to SwiftData queries"},{"property":"og:description","content":"How to animate changes to SwiftData queries"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-animate-changes-to-swiftdata-queries.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-animate-changes-to-swiftdata-queries.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to animate changes to SwiftData queries"}],["meta",{"property":"og:description","content":"Article(s) > How to animate changes to SwiftData queries"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-26T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to animate changes to SwiftData queries\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-26T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.28,"words":384},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-animate-changes-to-swiftdata-queries.md","localizedDate":"2023ÎÖÑ 9Ïõî 26Ïùº","excerpt":"\\n"}');export{_ as comp,q as data};
