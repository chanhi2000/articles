import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as p,g as c,d as e,f as t,r as i,o as k}from"./app-BgNevrm5.js";const m={},h={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),v=t(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><code>AsyncSequence</code> has implementations of many of the same methods that come with <code>Sequence</code>, but <em>how</em> they operate varies: some return a single value that fulfills your request, such as requesting the first value from the async sequence, and others return a new kind of async sequence, such as filtering values as they arrive.</p><p>This distinction in turn affects how they are called: returning a single value requires you to await at the call site, whereas returning a new async sequence requires you to await later on when you’re reading values from the new sequence.</p><p>To demonstrate this difference, let’s try out a few common operations, starting with a call to <code>map()</code>. Mapping an async sequence creates a new async sequence with the type <code>AsyncMapSequence</code>, which stores both your original async sequence and also the transformation function you want to use. So, instead of waiting for all elements to be returned and transforming them at once, you’ve effectively put the transformation into a chain of work: rather than fetching an item and sending it back, the sequence now fetches an item, transforms it, <em>then</em> sends it back.</p><p>So, we could map over the lines from a <code>URL</code> to make each line uppercase, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">shoutQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/quotes.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> uppercaseLines <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>localizedUppercase<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> line <span class="token keyword">in</span> uppercaseLines <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">shoutQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),g={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-1.zip",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>This also works for converting between types using <code>map()</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Quote</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/quotes.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> quotes <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> quote <span class="token keyword">in</span> quotes <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span>text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">printQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-2.zip",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>Alternatively, we could use <code>filter()</code> to check every line with a predicate, and process only those that pass. Using our quotes, we could print only anonymous quotes like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printAnonymousQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/quotes.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> anonymousQuotes <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> line <span class="token keyword">in</span> anonymousQuotes <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">printAnonymousQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-3.zip",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>Or we could use <code>prefix()</code> to read just the first five values from an async sequence:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printTopQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/quotes.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> topQuotes <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> line <span class="token keyword">in</span> topQuotes <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">printTopQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-4.zip",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p>And of course you can also combine these together in varying ways depending on what result you want. For example, this will filter for anonymous quotes, pick out the first five, then make them uppercase:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/quotes.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> anonymousQuotes <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> topAnonymousQuotes <span class="token operator">=</span> anonymousQuotes<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> shoutingTopAnonymousQuotes <span class="token operator">=</span> topAnonymousQuotes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>localizedUppercase<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> line <span class="token keyword">in</span> shoutingTopAnonymousQuotes <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">printQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-5.zip",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>Just like using a regular <code>Sequence</code>, the order you apply these transformations matters – putting <code>prefix()</code> before <code>filter()</code> will pick out the first five quotes <em>then</em> select only the ones that are anonymous, which might produce fewer results.</p><p>Each of these transformation methods returns a new type specific to what the method does, so calling <code>map()</code> returns an <code>AsyncMapSequence</code>, calling <code>filter()</code> returns an <code>AsyncFilterSequence</code>, and calling <code>prefix()</code> returns an <code>AsyncPrefixSequence</code>.</p><p>When you stack multiple transformations together – for example, a filter, then a prefix, then a map, as in our previous example – this will inevitably produce a fairly complex return type, so if you intend to send back one of the complex async sequences you should consider an opaque return type like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">AsyncSequence</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/quotes.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> anonymousQuotes <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> topAnonymousQuotes <span class="token operator">=</span> anonymousQuotes<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> shoutingTopAnonymousQuotes <span class="token operator">=</span> topAnonymousQuotes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>localizedUppercase<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> shoutingTopAnonymousQuotes</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> quote <span class="token keyword">in</span> result <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Error fetching quotes&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),H={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-6.zip",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>All the transformations so far have created new async sequences and so we haven’t needed to use them with <code>await</code>, but many also produce a single value. These <em>must</em> use <code>await</code> in order to suspend until all parts of the sequence have been returned, and may also need to use <code>try</code> if the sequence is throwing.</p><p>For example, <code>allSatisfy()</code> will check whether all elements in an async sequence pass a predicate of your choosing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">checkQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/quotes.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> noShortQuotes <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>allSatisfy <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>noShortQuotes<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">checkQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),U={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-7.zip",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="hint-container important"><p class="hint-container-title">Important</p><p>As with regular sequences, in order to return a correct value <code>allSatisfy()</code> must have fetched every value in the sequence first, and therefore using it with an infinite sequence will never return a value. The same is true of other similar functions, such as <code>min()</code>, <code>max()</code>, and <code>reduce()</code>, so be careful.</p></div><p>You can of course combine methods that create new async sequences and return a single value, for example to fetch lots of random numbers, convert them to integers, then find the largest:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printHighestNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/random-numbers.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> highest <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span><span class="token function">compactMap</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Highest number: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">highest</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;No number was the highest.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">printHighestNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),D={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-8.zip",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>Or to sum all the numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">sumRandomNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/random-numbers.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span><span class="token function">compactMap</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Sum of numbers: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">sum</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">sumRandomNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),L={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more-9.zip",target:"_blank",rel:"noopener noreferrer"},C={class:"hint-container details"},M=n("summary",null,"Similar solutions…",-1);function N(l,X){const o=i("VPCard"),a=i("FontIcon");return k(),r("div",null,[n("h1",h,[n("a",f,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(o,p(c({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,y,s(o,p(c({title:"How to manipulate an AsyncSequence using map(), filter(), and more | Swift Concurrency by Example",desc:"How to manipulate an AsyncSequence using map(), filter(), and more",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("blockquote",null,[n("p",null,[n("a",g,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),b,n("blockquote",null,[n("p",null,[n("a",q,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),_,n("blockquote",null,[n("p",null,[n("a",S,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),x,n("blockquote",null,[n("p",null,[n("a",A,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),Q,n("blockquote",null,[n("p",null,[n("a",j,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),z,n("blockquote",null,[n("p",null,[n("a",H,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),R,n("blockquote",null,[n("p",null,[n("a",U,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),T,n("blockquote",null,[n("p",null,[n("a",D,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),E,n("blockquote",null,[n("p",null,[n("a",L,[s(a,{icon:"fas fa-file-zipper"}),e("Download this as an Xcode project")])])]),n("details",C,[M,s(o,p(c({title:"How to create a custom AsyncSequence | Swift Concurrency by Example",desc:"How to create a custom AsyncSequence",link:"/hackingwithswift.com/concurrency/how-to-create-a-custom-asyncsequence.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(o,p(c({title:"What’s the difference between Sequence, AsyncSequence, and AsyncStream? | Swift Concurrency by Example",desc:"What’s the difference between Sequence, AsyncSequence, and AsyncStream?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-sequence-asyncsequence-and-asyncstream.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(o,p(c({title:"How to loop over an AsyncSequence using for await | Swift Concurrency by Example",desc:"How to loop over an AsyncSequence using for await",link:"/hackingwithswift.com/concurrency/how-to-loop-over-an-asyncsequence-using-for-await.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(o,p(c({title:"How to convert an AsyncSequence into a Sequence | Swift Concurrency by Example",desc:"How to convert an AsyncSequence into a Sequence",link:"/hackingwithswift.com/concurrency/how-to-convert-an-asyncsequence-into-a-sequence.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(o,p(c({title:"Understanding threads and queues | Swift Concurrency by Example",desc:"Understanding threads and queues",link:"/hackingwithswift.com/concurrency/understanding-threads-and-queues.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const V=u(m,[["render",N],["__file","how-to-manipulate-an-asyncsequence-using-map-filter-and-more.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more.html","title":"How to manipulate an AsyncSequence using map(), filter(), and more","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to manipulate an AsyncSequence using map(), filter(), and more","description":"Article(s) > How to manipulate an AsyncSequence using map(), filter(), and more","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to manipulate an AsyncSequence using map(), filter(), and more"},{"property":"og:description","content":"How to manipulate an AsyncSequence using map(), filter(), and more"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to manipulate an AsyncSequence using map(), filter(), and more"}],["meta",{"property":"og:description","content":"Article(s) > How to manipulate an AsyncSequence using map(), filter(), and more"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to manipulate an AsyncSequence using map(), filter(), and more\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.85,"words":1454},"filePathRelative":"hackingwithswift.com/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{V as comp,B as data};
