import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as a,t as r,e as t,n as o,g as i,r as l,o as d}from"./app-BgNevrm5.js";const h={},p={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},g=a("blockquote",null,[a("p",null,"Found 8 articles in the Swift Knowledge Base for this category.")],-1);function u(n,f){const e=l("VPCard");return d(),c("div",null,[a("h1",p,[a("a",m,[a("span",null,r(n.$frontmatter.title)+" ê´€ë ¨",1)])]),t(e,o(i({title:"Testing - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"https://hackingwithswift.com/example-code/testing",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,t(e,o(i({title:"How to benchmark app launch time using XCTOSSignpostMetric.applicationLaunch",desc:"Optimizing your applicationâ€™s launch time helps ensure users spend more time using your app and less time staring at your launch screen, and helpfully Xcode comes with a built-in way to help us measure and monitor that time: <code>XCTOSSignpostMetric.applicationLaunch</code>....",link:"/hackingwithswift.com/example-code/testing/how-to-benchmark-app-launch-time-using-xctossignpostmetricapplicationlaunch.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(e,o(i({title:"How to check and unwrap optionals in tests using XCTUnwrap()",desc:"When writing tests, itâ€™s common to want to unwrap an optional before checking it for a particular value. <code>XCTUnwrap()</code> does exactly that for us: it attempts to unwrap the optional, but will throw an error (and thus fail the test) if the optional is nil....",link:"/hackingwithswift.com/example-code/testing/how-to-check-and-unwrap-optionals-in-tests-using-xctunwrap.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(e,o(i({title:"How to do conditional test tear down using addTeardownBlock()",desc:"All <code>XCTestCase</code> subclasses have access to <code>setUp()</code> and <code>tearDown()</code> instance methods, plus <code>setUp()</code> and <code>tearDown()</code> class methods for one-time setup and tear down. But sometimes you need to add <em>conditional</em> tear down code: if your test creates a resource that must be destroyed, you can add that as an additional tear down step using the <code>addTeardownBlock()</code> method....",link:"/hackingwithswift.com/example-code/testing/how-to-do-conditional-test-tear-down-using-addteardownblock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(e,o(i({title:"How to do one-time setup for your tests",desc:"When you create a default <code>XCTestCase</code> using Xcode youâ€™ll get default <code>setUp()</code> and <code>tearDown()</code> methods like these:...",link:"/hackingwithswift.com/example-code/testing/how-to-do-one-time-setup-for-your-tests.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(e,o(i({title:"How to set baselines for your performance tests",desc:"All performance tests in Xcode can have baselines attached to them, which are stored results that you consider representative of your appâ€™s performance as things stand. The baseline is useful because it gives Xcode a measuring point for all other changes you make: if you accidentally change your code so that it runs slower, Xcode will consider your performance test to be a failure....",link:"/hackingwithswift.com/example-code/testing/how-to-set-baselines-for-your-performance-tests.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(e,o(i({title:"How to test asynchronous functions using expectation()",desc:"<code>XCTestCase</code> has the built-in ability to work with asynchronous code using a system of expectations. First, you create one of more instances of <code>XCTestExpectation</code> using the <code>expectation()</code> method, then you run your asynchronous code, and finally you call <code>waitForExpectations()</code> so the test doesnâ€™t end prematurely. ...",link:"/hackingwithswift.com/example-code/testing/how-to-test-asynchronous-functions-using-expectation.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(e,o(i({title:"How to test throwing functions",desc:"One of the many brilliant features of Swiftâ€™s error handling system is its ability to throw errors during tests and have them considered as failures. That is, if you mark your test using <code>throws</code> you run any throwing code inside that test and if it throws an error the test will be marked as a failure....",link:"/hackingwithswift.com/example-code/testing/how-to-test-throwing-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(e,o(i({title:"How to write performance tests using measure()",desc:"Performance tests let you check how fast your code runs, but more importantly it lets you check how fast your code runs <em>over time</em> â€“ you can spot performance changes as your code evolves....",link:"/hackingwithswift.com/example-code/testing/how-to-write-performance-tests-using-measure.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16)])}const k=s(h,[["render",u],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/hackingwithswift.com/example-code/testing/","title":"Testing - free Swift example code","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Testing - free Swift example code","description":"Article(s) > Testing - free Swift example code","icon":"fa-brands fa-swift","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Testing - free Swift example code"},{"property":"og:description","content":"Testing - free Swift example code"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/testing/"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/testing/"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Testing - free Swift example code"}],["meta",{"property":"og:description","content":"Article(s) > Testing - free Swift example code"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Testing - free Swift example code\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.53,"words":760},"filePathRelative":"hackingwithswift.com/example-code/testing/README.md","excerpt":"\\n"}');export{k as comp,b as data};
