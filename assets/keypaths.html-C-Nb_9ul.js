import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as a,n as e,g as t,d as o,a as d,f as h,r as p,o as k}from"./app-BgNevrm5.js";const m={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),w=h(`<blockquote><p>Available from Swift 4.0</p></blockquote><p>One of the most loved features of Objective-C is its ability to reference a property dynamically rather than directly – that is, to be able to say &quot;given object X, here is the property I&#39;d like to read&quot; without actually reading it. These references, called <em>keypaths</em>, are distinct from direct property accesses because they don&#39;t actually read or write the value, they just stash it away for use later on.</p><p>If you&#39;ve never used keypaths before, let me show you an analogy of how they work using regular Swift methods. We&#39;re going to define a struct called <code>Starship</code> and a struct called <code>Crew</code>, then create one instance of each:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// an example struct</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Crew</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> rank<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// another example struct, this time with a method</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Starship</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> maxWarp<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line">    <span class="token keyword">var</span> captain<span class="token punctuation">:</span> <span class="token class-name">Crew</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">goToMaximumWarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is now travelling at warp </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">maxWarp</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// create instances of those two structs</span></span>
<span class="line"><span class="token keyword">let</span> janeway <span class="token operator">=</span> <span class="token class-name">Crew</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Kathryn Janeway&quot;</span></span><span class="token punctuation">,</span> rank<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Captain&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> voyager <span class="token operator">=</span> <span class="token class-name">Starship</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Voyager&quot;</span></span><span class="token punctuation">,</span> maxWarp<span class="token punctuation">:</span> <span class="token number">9.975</span><span class="token punctuation">,</span> captain<span class="token punctuation">:</span> janeway<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// grab a reference to the \`goToMaximumWarp()\` method</span></span>
<span class="line"><span class="token keyword">let</span> enterWarp <span class="token operator">=</span> voyager<span class="token punctuation">.</span>goToMaximumWarp</span>
<span class="line"></span>
<span class="line"><span class="token comment">// call that reference</span></span>
<span class="line"><span class="token function">enterWarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because functions are first-class types in Swift, the last two lines are able to create a reference to the <code>goToMaximumWarp()</code> method called <code>enterWarp</code>, then call that later on whenever we want to. The problem is, you can&#39;t do the same thing for properties – you can&#39;t say &quot;create a reference to the captain&#39;s name property that I can check when the inevitable mutiny happens,&quot; because Swift will just read the property directly and you&#39;ll just get its original value.</p><p>This is fixed with keypaths: they are <em>uninvoked references to properties</em> just like our <code>enterWarp()</code> code. If you invoke the reference now you get the current value, but if you invoke the reference later you get the latest value. You can dig through any number of properties, and Swift uses its type inference to ensure you get the correct type back.</p><p>The Swift Evolution community spent quite a while discussing the correct syntax for keypaths because it needed to be something visually different from other Swift code, and the syntax they ended up with uses backslashes: <code>\\Starship.name</code>, <code>\\Starship.maxWarp</code>, and <code>\\Starship.captain.name</code>. You can assign those two to a variable then use them whenever you want, on any <code>Starship</code> instance. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> nameKeyPath <span class="token operator">=</span> <span class="token punctuation">\\</span><span class="token class-name">Starship</span><span class="token punctuation">.</span>name</span>
<span class="line"><span class="token keyword">let</span> maxWarpKeyPath <span class="token operator">=</span> <span class="token punctuation">\\</span><span class="token class-name">Starship</span><span class="token punctuation">.</span>maxWarp</span>
<span class="line"><span class="token keyword">let</span> captainName <span class="token operator">=</span> <span class="token punctuation">\\</span><span class="token class-name">Starship</span><span class="token punctuation">.</span>captain<span class="token punctuation">.</span>name</span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> starshipName <span class="token operator">=</span> voyager<span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> nameKeyPath<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> starshipMaxWarp <span class="token operator">=</span> voyager<span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> maxWarpKeyPath<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> starshipCaptain <span class="token operator">=</span> voyager<span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> captainName<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will make <code>starshipName</code> a string and <code>starshipMaxWarp</code> a double, because Swift is able to infer the types correctly. The third example there even goes into the property of a property, and Swift still figures it out correctly.</p>`,9),b={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0161-key-paths.md",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"apple/swift-evolution",-1),_={class:"hint-container details"},x=n("summary",null,"Other Changes in Swift 4.0",-1),C={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-3-1-to-4-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function I(c,W){const s=p("VPCard"),i=p("FontIcon");return k(),r("div",null,[n("h1",g,[n("a",f,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),a(s,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,y,a(s,e(t({title:"Improved keypaths for key-value coding | Changes in Swift 4.0",desc:"Improved keypaths for key-value coding",link:"https://hackingwithswift.com/swift/4.0/keypaths",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,n("p",null,[o("Future plans for this include being able to access array indexes and to create keypaths from strings at runtime – for more information see "),n("a",b,[o("the Swift Evolution proposal for this new feature ("),a(i,{icon:"iconfont icon-github"}),S,o(")")]),o(".")]),n("details",_,[x,a(s,e(t({title:"Encoding and decoding data using Codable | Changes in Swift 4.0",desc:"Encoding and decoding data using Codable",link:"/hackingwithswift.com/swift/4.0/codable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"Multi-line string literals | Changes in Swift 4.0",desc:"Multi-line string literals",link:"/hackingwithswift.com/swift/4.0/multiline-strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Improved keypaths for key-value coding | Changes in Swift 4.0",
  "desc": "Improved keypaths for key-value coding",
  "link": "/hackingwithswift.com/swift/4.0/keypaths.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),a(s,e(t({title:"Improved dictionary functionality | Changes in Swift 4.0",desc:"Improved dictionary functionality",link:"/hackingwithswift.com/swift/4.0/dictionaries.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"Strings are collections again | Changes in Swift 4.0",desc:"Strings are collections again",link:"/hackingwithswift.com/swift/4.0/strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"One-sided ranges | Changes in Swift 4.0",desc:"One-sided ranges",link:"/hackingwithswift.com/swift/4.0/one-sided-ranges.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",C,[a(i,{icon:"fas fa-file-zipper"}),o("Download Swift 4.0 playground")])])])])}const P=l(m,[["render",I],["__file","keypaths.html.vue"]]),j=JSON.parse('{"path":"/hackingwithswift.com/swift/4.0/keypaths.html","title":"Improved keypaths for key-value coding","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Improved keypaths for key-value coding","description":"Article(s) > Improved keypaths for key-value coding","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Improved keypaths for key-value coding"},{"property":"og:description","content":"Improved keypaths for key-value coding"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.0/keypaths.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.0/keypaths.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Improved keypaths for key-value coding"}],["meta",{"property":"og:description","content":"Article(s) > Improved keypaths for key-value coding"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Improved keypaths for key-value coding\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.74,"words":823},"filePathRelative":"hackingwithswift.com/swift/4.0/keypaths.md","excerpt":"\\n"}');export{P as comp,j as data};
