import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,t as u,e as s,n as e,g as t,f as r,r as o,o as d}from"./app-BgNevrm5.js";const h={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},b=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),f=r(`<p>You&#39;re not going to get rich out of red rectangles, so let&#39;s use balls instead. Take the box code out (everything after <code>let location =</code> in <code>touchesBegan()</code>) and replace it with this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> ball <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;ballRed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">ball<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>circleOfRadius<span class="token punctuation">:</span> ball<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span></span>
<span class="line">ball<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>restitution <span class="token operator">=</span> <span class="token number">0.4</span></span>
<span class="line">ball<span class="token punctuation">.</span>position <span class="token operator">=</span> location</span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>ball<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are two new things there. First, we&#39;re using the <code>circleOfRadius</code> initializer for <code>SKPhysicsBody</code> to add circular physics to this ball, because using rectangles would look strange. Second, we&#39;re giving the ball&#39;s physics body a restitution (bounciness) level of 0.4, where values are from 0 to 1.</p><p>Note: the physics body of a node is optional, because it might not exist. We know it exists because we just created it, so it’s not uncommon to see <code>physicsBody!</code> to force unwrap the optional.</p><p>When you run the game now, you&#39;ll be able to tap on the screen to drop bouncy balls. It&#39;s fractionally more interesting, but let&#39;s face it: this is still a dreadful game.</p><p>To make it more exciting we&#39;re going to add something for the balls to bounce off. In the Content folder I provided you with is a picture called &quot;bouncer.png&quot;, so we&#39;re going to place that in the game now.</p><p>Just before the end of the <code>didMove(to:)</code> method, add this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> bouncer <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;bouncer&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">bouncer<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">bouncer<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>circleOfRadius<span class="token punctuation">:</span> bouncer<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span></span>
<span class="line">bouncer<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>bouncer<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There&#39;s a new data type in there called <code>CGPoint</code>, but, like <code>CGSize</code>, it&#39;s very simple: it just holds X/Y co-ordinates. Remember, SpriteKit&#39;s positions start from the center of nodes, so X:512 Y:0 means &quot;centered horizontally on the bottom edge of the scene.&quot;</p><p>Also new is the <code>isDynamic</code> property of a physics body. When this is true, the object will be moved by the physics simulator based on gravity and collisions. When it&#39;s false (as we&#39;re setting it) the object will still collide with other things, but it won&#39;t ever be moved as a result.</p><p>Using this code, the bouncer node will be placed on the screen and your balls can collide with it – but it won&#39;t move. Give it a try now.</p><p>Adding a bouncer took five lines of code, but our game needs more than one bouncer. In fact, I want five of them, evenly distributed across the screen. Now, you <em>could</em> just copy and paste the code five times then change the positions, but I hope you realize there&#39;s a better way: creating a method that does all the work, then calling that method each time we want a bouncer.</p><p>The method code itself is nearly identical to what you just wrote, with the only change being that we need to position the box at the <code>CGPoint</code> specified as a parameter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">makeBouncer</span><span class="token punctuation">(</span>at position<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> bouncer <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;bouncer&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    bouncer<span class="token punctuation">.</span>position <span class="token operator">=</span> position</span>
<span class="line">    bouncer<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>circleOfRadius<span class="token punctuation">:</span> bouncer<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span></span>
<span class="line">    bouncer<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>bouncer<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that method in place, you can place a bouncer in one line of code: just call <code>makeBouncer(at:)</code> with a position, and it will be placed and given a non-dynamic physics body automatically.</p><p>You might have noticed that the parameter to <code>makeBouncer(at:)</code> has two names: <code>at</code> and <code>position</code>. This isn’t required, but it makes your code more readable: the first name is the one you use when <em>calling</em> the method, and the second name is the one you use <em>inside</em> the method. That is, you write <code>makeBouncer(at:)</code> to call it, but inside the method the parameter is named <code>position</code> rather than <code>at</code>. This is identical to <code>cellForRowAt indexPath</code> in table views.</p><p>To show this off, delete the bouncer code from <code>didMove(to:)</code>, and replace it with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">makeBouncer</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">makeBouncer</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">makeBouncer</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">makeBouncer</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">768</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">makeBouncer</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the game now you&#39;ll see five bouncers evenly spread across the screen, and the balls you drop bounce off any of them. It&#39;s still not a game, but we&#39;re getting there. Now to add something between the bouncers…</p>`,19);function y(i,w){const a=o("VPCard"),c=o("VidStack");return d(),l("div",null,[n("h1",k,[n("a",m,[n("span",null,u(i.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,g,s(a,e(t({title:"Bouncing balls: circleOfRadius | Hacking with iOS",desc:"Bouncing balls: circleOfRadius",link:"https://hackingwithswift.com/read/11/3/03-bouncing-balls-circleofradius",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(c,{src:"youtube/f-qio_g_D2Y"}),f])}const _=p(h,[["render",y],["__file","03-bouncing-balls-circleofradius.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/read/11/03-bouncing-balls-circleofradius.html","title":"Bouncing balls: circleOfRadius","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Bouncing balls: circleOfRadius","description":"Article(s) > Bouncing balls: circleOfRadius","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Bouncing balls: circleOfRadius"},{"property":"og:description","content":"Bouncing balls: circleOfRadius"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/11/03-bouncing-balls-circleofradius.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/11/03-bouncing-balls-circleofradius.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Bouncing balls: circleOfRadius"}],["meta",{"property":"og:description","content":"Article(s) > Bouncing balls: circleOfRadius"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bouncing balls: circleOfRadius\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"hackingwithswift.com/read/11/03-bouncing-balls-circleofradius.md","excerpt":"\\n"}');export{_ as comp,S as data};
