import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as t,g as e,d as i,f as c,r as l,o as m}from"./app-BgNevrm5.js";const k={},h={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),w=c(`<blockquote><p>Available from Swift 5.4</p></blockquote><p>From Swift 5.4 onwards it’s possible to create a local variable by calling a function of the same name. That might sound obscure, but it’s actually a problem we hit all the time.</p><p>For example, this creates a struct with a <code>color(forRow:)</code> method, which gets called and assigned to a local variable called <code>color</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Table</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">color</span><span class="token punctuation">(</span>forRow row<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> row<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;red&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;black&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">printRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>count <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token function">color</span><span class="token punctuation">(</span>forRow<span class="token punctuation">:</span> i<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">color</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> table <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">table<span class="token punctuation">.</span><span class="token function">printRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That kind of usage is only allowed from Swift 5.4 and later. In earlier versions of Swift, it would create a circular reference because Swift couldn’t distinguish between the local <code>color</code> constant and the <code>color(forRow:)</code> method it was calling – you would have seen the error “Variable used within its own initial value”.</p><p>This usually resulted in us either using <code>self.color(forRow: 1989)</code> to make it clear we mean the method call, or just naming the local value something else such as <code>colorForRow</code>.</p>`,6),b={href:"https://github.com/apple/swift/blob/main/test/Sema/diag_variable_used_in_initial.swift",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"apple/swift",-1),_=c(`<p>This change also allows us to make local copies of properties and global variables. For example, we can take a copy of a <code>username</code> property that is also called <code>username</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">suggestAlternativeUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> username <span class="token operator">=</span> username</span>
<span class="line">        username <span class="token operator">+=</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token operator">...</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> username</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span><span class="token function">suggestAlternativeUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because this also applies to global variables, that same code works just fine even without the struct in place:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taytay&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">suggestAlternativeUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> username <span class="token operator">=</span> username</span>
<span class="line">    username <span class="token operator">+=</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token operator">...</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> username</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">suggestAlternativeUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),S={class:"hint-container details"},C=n("summary",null,"Other Changes in Swift 5.4",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-3-to-5-4.playground.zip",target:"_blank",rel:"noopener noreferrer"};function R(p,q){const a=l("VPCard"),o=l("FontIcon");return m(),u("div",null,[n("h1",h,[n("a",f,[n("span",null,d(p.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,v,s(a,t(e({title:"Creating variables that call a function of the same name | Changes in Swift 5.4",desc:"Creating variables that call a function of the same name",link:"https://hackingwithswift.com/swift/5.4/local-variables-same-name",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,n("p",null,[i("Fortunately Swift 5.4 "),n("a",b,[i("resolves this ("),s(o,{icon:"iconfont icon-github"}),y,i(")")]),i(" and allows us to use the more natural naming.")]),_,n("details",S,[C,s(a,t(e({title:"Improved implicit member syntax | Changes in Swift 5.4",desc:"Improved implicit member syntax",link:"/hackingwithswift.com/swift/5.4/improved-implicit-member-syntax.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Multiple variadic parameters in functions | Changes in Swift 5.4",desc:"Multiple variadic parameters in functions",link:"/hackingwithswift.com/swift/5.4/multiple-variadic-parameters-in-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Local functions now support overloading | Changes in Swift 5.4",desc:"Local functions now support overloading",link:"/hackingwithswift.com/swift/5.4/local-functions-now-support-overloading.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Creating variables that call a function of the same name | Changes in Swift 5.4",desc:"Creating variables that call a function of the same name",link:"/hackingwithswift.com/swift/5.4/local-variables-same-name.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Result builders | Changes in Swift 5.4",desc:"Result builders",link:"/hackingwithswift.com/swift/5.4/result-builders.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Property wrappers are now supported for local variables | Changes in Swift 5.4",desc:"Property wrappers are now supported for local variables",link:"/hackingwithswift.com/swift/5.4/local-property-wrappers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Packages can now declare executable targets | Changes in Swift 5.4",desc:"Packages can now declare executable targets",link:"/hackingwithswift.com/swift/5.4/spm-executable-targets.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[s(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.4 playground")])])])])}const I=r(k,[["render",R],["__file","local-variables-same-name.html.vue"]]),P=JSON.parse('{"path":"/hackingwithswift.com/swift/5.4/local-variables-same-name.html","title":"Creating variables that call a function of the same name","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Creating variables that call a function of the same name","description":"Article(s) > Creating variables that call a function of the same name","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.4"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Creating variables that call a function of the same name"},{"property":"og:description","content":"Creating variables that call a function of the same name"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.4/local-variables-same-name.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.4/local-variables-same-name.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Creating variables that call a function of the same name"}],["meta",{"property":"og:description","content":"Article(s) > Creating variables that call a function of the same name"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.4"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating variables that call a function of the same name\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.36,"words":707},"filePathRelative":"hackingwithswift.com/swift/5.4/local-variables-same-name.md","excerpt":"\\n"}');export{I as comp,P as data};
