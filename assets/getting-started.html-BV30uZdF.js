import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,b as e,t as v,e as n,n as _,g as f,w as a,f as l,r,o as k,d as t}from"./app-BgNevrm5.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},x=e("hr",null,null,-1),q=l(`<h2 id="application-architecture" tabindex="-1"><a class="header-anchor" href="#application-architecture"><span>Application Architecture</span></a></h2><p>It is now time to look at the application architecture. The objective is to establish endpoints that serve film-related information to clients. For the sake of clarity and separation of concerns, I&#39;ve chosen to adopt a straightforward Repository Pattern.</p><p>Below is a snapshot of how the architectural pieces will fit together when you are done. The Resources class takes on the responsibility of delivering database-derived content to clients. However, this class refrains from conducting the actual database interactions; instead, this task is entrusted to the Repository. This architectural approach neatly segregates the data layer from the other facets of our application.</p><p><img src="https://lh7-us.googleusercontent.com/-asmOZjUcW5xxmKDziOx8rbzwWyRPbG8qgVuG_0JaRQoHfVhW1RZ0IQG5CMS-kT75J38jL-iGxWDghTwJgj0daYnmMloYV-J71OgiFQ08SI1cF46z8dtdQTY_S0jH8KphQcs74WRPANekiQWuodoxjY" alt="system architecture" loading="lazy"> This translates to the following file hierarchy in your project folder once you are done:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">quarkus-tutorial </span>
<span class="line">  |- src</span>
<span class="line">  |   |- main</span>
<span class="line">  |   |   |- java</span>
<span class="line">  |   |   |     |- com.freecodecamp.app</span>
<span class="line">  |   |   |     |   |- FilmResource.java</span>
<span class="line">  |   |   |     |   |- model</span>
<span class="line">  |   |   |     |      |- Film.java</span>
<span class="line">  |   |   |     |      |- Actor.java</span>
<span class="line">  |   |   |     |   |- repository</span>
<span class="line">  |   |   |     |     |- FilmRepository.java</span>
<span class="line">  |   |   |- resources</span>
<span class="line">  |   |   |     |   |- application.properties</span>
<span class="line">|- src</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World!</span></a></h2><p>To grasp the rhythm of development with Quarkus, let&#39;s begin with crafting a classic &quot;Hello World&quot; endpoint.</p><p>Start by establishing the <code>FilmResource</code> class, positioned a tier above your data model package:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilmResource</span> <span class="token punctuation">{</span> </span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@GET</span></span>
<span class="line">  <span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>@Path</code> annotation ensures that your Resteasy servlet is kick-started as the application launches and open the endpoint <code>/hello</code> for requests.</p><hr><h2 id="running-in-quarkus-dev-mode" tabindex="-1"><a class="header-anchor" href="#running-in-quarkus-dev-mode"><span>Running in Quarkus Dev Mode</span></a></h2><p>With a simple endpoint in place, I suggest you start the application to validate the functionality and enjoy the experience of the Quarkus dev mode. Use the following command to fire up the app in your terminal:</p>`,14),Q=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"quarkus dev"),t(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),S=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"gradlew quarkusDev"),t(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),T=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"mvn quarkus:dev"),t(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),R=l(`<p>When your application starts you should be greeted by the Quarkus prompt, indicating that your app is running on the default port 8080 and that live coding has been activated.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Listening for transport dt_socket at address: 5005</span>
<span class="line">__  ____  __  _____   ___  __ ____  ______</span>
<span class="line"> --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/</span>
<span class="line"> -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\\ \\</span>
<span class="line">--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/</span>
<span class="line">2023-08-14 14:14:01,731 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-tutorial 1.0.0-SNAPSHOT on JVM (powered by Quarkus 3.1.3.Final) started in 2.210s. Listening on: http://localhost:8080</span>
<span class="line">2023-08-14 14:14:01,733 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can now visit <a href="http://localhost:8080/hello" target="_blank" rel="noopener noreferrer">http://localhost:8080/hello</a> to confirm that you are greeted by the expected response “Hello world!”.</p><p>If this is your first time using the Quarkus dev mode seize the opportunity and make a duplicate of your first endpoint. A minor tweak, even as small as a single character, will suffice to set it apart from the original. Next, tap the <kbd>s</kbd> key in your terminal to swiftly restart the application. The restart takes place in the blink of an eye, granting you access to your new endpoint moments later in the browser. @tab This dynamic approach prevents the dreaded scenario of accumulating changes only to realize that the application is non-operational upon compiling. You also no longer need to endure lengthy compilation times when iterating over small tweaks to algorithms or code snippets. It&#39;s a really swift and agile method for interactive development.</p><p>Before we move on, here are a few basic commands that are good to know:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[s] - Force restart</span>
<span class="line">[h] - Display help</span>
<span class="line">[q] - Quit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function A(c,G){const p=r("VPCard"),o=r("router-link"),d=r("SiteInfo"),u=r("VidStack"),h=r("Tabs");return k(),g("div",null,[e("h1",y,[e("a",w,[e("span",null,v(c.$frontmatter.title)+" 관련",1)])]),n(p,_(f({title:"Get started with Quarkus and JPAStreamer",desc:"In the world of software development, innovation often arrives in the form of powerful tools that transform the way we build applications - enter Quarkus, a development platform that's reshaping the Java landscape.  If you are new...",link:"/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),e("nav",j,[e("ul",null,[e("li",null,[n(o,{to:"#application-architecture"},{default:a(()=>[t("Application Architecture")]),_:1})]),e("li",null,[n(o,{to:"#hello-world"},{default:a(()=>[t("Hello World!")]),_:1})]),e("li",null,[n(o,{to:"#running-in-quarkus-dev-mode"},{default:a(()=>[t("Running in Quarkus Dev Mode")]),_:1})])])]),x,n(d,{name:"Get started with Quarkus and JPAStreamer",desc:"In the world of software development, innovation often arrives in the form of powerful tools that transform the way we build applications - enter Quarkus, a development platform that's reshaping the Java landscape.  If you are new...",url:"https://freecodecamp.org/news/get-started-with-quarkus-and-jpastreamer-2/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"}),n(u,{src:"youtube/KZnQ5R8Kd4I"}),q,n(h,{id:"45",data:[{id:"quarkus"},{id:"gradlew"},{id:"mvn"}],active:0},{title0:a(({value:s,isActive:i})=>[t("quarkus")]),title1:a(({value:s,isActive:i})=>[t("gradlew")]),title2:a(({value:s,isActive:i})=>[t("mvn")]),tab0:a(({value:s,isActive:i})=>[Q]),tab1:a(({value:s,isActive:i})=>[S]),tab2:a(({value:s,isActive:i})=>[T]),_:1}),R])}const I=m(b,[["render",A],["__file","getting-started.html.vue"]]),W=JSON.parse('{"path":"/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/getting-started.html","title":"2. Getting Started","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"2. Getting Started","description":"(2/5) Get started with Quarkus and JPAStreamer","category":["Java","Quarkus","Youtube"],"tag":["blog","freecodecamp.org","java","jdk","jdk8","stream","quarkus","jpa","jpastreamer","youtube","crashcourse"],"head":[[{"meta":null},{"property":"og:title","content":"(2/5) Get started with Quarkus and JPAStreamer"},{"property":"og:description","content":"2. Getting Started"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/getting-started.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/getting-started.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"2. Getting Started"}],["meta",{"property":"og:description","content":"(2/5) Get started with Quarkus and JPAStreamer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"}],["meta",{"name":"twitter:image:alt","content":"2. Getting Started"}],["meta",{"property":"article:author","content":"Julia Gustafsson"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"quarkus"}],["meta",{"property":"article:tag","content":"jpa"}],["meta",{"property":"article:tag","content":"jpastreamer"}],["meta",{"property":"article:tag","content":"youtube"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:published_time","content":"2023-11-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Getting Started\\",\\"image\\":[\\"https://lh7-us.googleusercontent.com/-asmOZjUcW5xxmKDziOx8rbzwWyRPbG8qgVuG_0JaRQoHfVhW1RZ0IQG5CMS-kT75J38jL-iGxWDghTwJgj0daYnmMloYV-J71OgiFQ08SI1cF46z8dtdQTY_S0jH8KphQcs74WRPANekiQWuodoxjY\\"],\\"datePublished\\":\\"2023-11-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Julia Gustafsson\\"}]}"]],"date":"2023-11-03T00:00:00.000Z","isOriginal":false,"author":"Julia Gustafsson","cover":"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"},"headers":[{"level":2,"title":"Application Architecture","slug":"application-architecture","link":"#application-architecture","children":[]},{"level":2,"title":"Hello World!","slug":"hello-world","link":"#hello-world","children":[]},{"level":2,"title":"Running in Quarkus Dev Mode","slug":"running-in-quarkus-dev-mode","link":"#running-in-quarkus-dev-mode","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.63,"words":789},"filePathRelative":"freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/getting-started.md","localizedDate":"2023년 11월 3일","excerpt":"\\n","copyright":{"author":"Julia Gustafsson"}}');export{I as comp,W as data};
