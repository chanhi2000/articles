import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as e,t as b,e as s,n as a,g as n,d as l,f as i,r as o,o as m}from"./app-BgNevrm5.js";const h={},w={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},v=e("nav",{class:"table-of-contents"},[e("ul")],-1),g=e("hr",null,null,-1),f=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>When using observed objects there are three key things we need to work with: the <code>ObservableObject</code> protocol is used with some sort of class that can store data, the <code>@ObservedObject</code> property wrapper is used inside a view to store an observable object instance, and the <code>@Published</code> property wrapper is added to any properties inside an observed object that should cause views to update when they change.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>It is really important that you use <code>@ObservedObject</code> only with views that were passed in from elsewhere. You should <em>not</em> use this property wrapper to create the initial instance of an observable object – that&#39;s what <code>@StateObject</code> is for.</p></div><p>As an example, here&#39;s a <code>UserProgress</code> class that conforms to <code>ObservableObject</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">UserProgress</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),j={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects-1.zip",target:"_blank",rel:"noopener noreferrer"},y=i(`<p>I know that doesn&#39;t look like much code, but that&#39;s because SwiftUI is doing a remarkable amount on our behalf! There are two things that matter in there:</p><ol><li>The <code>ObservableObject</code> conformance allows instances of this class to be used inside views, so that when important changes happen the view will reload.</li><li>The <code>@Published</code> property wrapper tells SwiftUI that changes to <code>score</code> should trigger view reloads.</li></ol><p>We can use that <code>UserProgress</code> class with code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">UserProgress</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">InnerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> progress<span class="token punctuation">:</span> <span class="token class-name">UserProgress</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Increase Score&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            progress<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> progress <span class="token operator">=</span> <span class="token class-name">UserProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your score is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">progress<span class="token punctuation">.</span>score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">InnerView</span><span class="token punctuation">(</span>progress<span class="token punctuation">:</span> progress<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),O={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects-1.zip",target:"_blank",rel:"noopener noreferrer"},x=i("<p>As you can see, other than using the <code>@ObservedObject</code> property wrapper with <code>progress</code>, everything else more or less looks the same – SwiftUI takes care of all the implementation details for us.</p><p>There is <em>one</em> important difference, though: the <code>progress</code> property isn&#39;t declared as private. This is because bound objects can be used by more than one view, so it&#39;s common to share it openly.</p><p>Remember, please do <em>not</em> use <code>@ObservedObject</code> to create instances of your object. If that&#39;s what you want to do, use <code>@StateObject</code> instead.</p>",3),_={class:"hint-container details"},S=e("summary",null,"Similar solutions…",-1);function I(p,U){const t=o("VPCard"),c=o("FontIcon"),r=o("VidStack");return m(),u("div",null,[e("h1",w,[e("a",k,[e("span",null,b(p.$frontmatter.title)+" 관련",1)])]),s(t,a(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,g,s(t,a(n({title:"How to use @ObservedObject to manage state from external objects | SwiftUI by Example",desc:"How to use @ObservedObject to manage state from external objects",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,e("blockquote",null,[e("p",null,[e("a",j,[s(c,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),s(r,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects-1~dark.mp4"}),y,e("blockquote",null,[e("p",null,[e("a",O,[s(c,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),s(r,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects-1~dark.mp4"}),x,e("details",_,[S,s(t,a(n({title:"What's the difference between @ObservedObject, @State, and @EnvironmentObject? | SwiftUI by Example",desc:"What's the difference between @ObservedObject, @State, and @EnvironmentObject?",link:"/hackingwithswift.com/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"How to use @StateObject to create and monitor external objects | SwiftUI by Example",desc:"How to use @StateObject to create and monitor external objects",link:"/hackingwithswift.com/swiftui/how-to-use-stateobject-to-create-and-monitor-external-objects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"What is the @ObservedObject property wrapper? | SwiftUI by Example",desc:"What is the @ObservedObject property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-observedobject-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"Observable objects, environment objects, and @Published | SwiftUI by Example",desc:"Observable objects, environment objects, and @Published",link:"/hackingwithswift.com/swiftui/observable-objects-environment-objects-and-published.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"How to fix “Referencing initializer 'init(wrappedValue:)' on 'ObservedObject' requires that 'SomeType' conform to 'ObservableObject'” | SwiftUI by Example",desc:"How to fix “Referencing initializer 'init(wrappedValue:)' on 'ObservedObject' requires that 'SomeType' conform to 'ObservableObject'”",link:"/hackingwithswift.com/swiftui/how-to-fix-referencing-initializer-initwrappedvalue-on-observedobject-requires-that-sometype-conform-to-observableobject.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const H=d(h,[["render",I],["__file","how-to-use-observedobject-to-manage-state-from-external-objects.html.vue"]]),q=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.html","title":"How to use @ObservedObject to manage state from external objects","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use @ObservedObject to manage state from external objects","description":"Article(s) > How to use @ObservedObject to manage state from external objects","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use @ObservedObject to manage state from external objects"},{"property":"og:description","content":"How to use @ObservedObject to manage state from external objects"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use @ObservedObject to manage state from external objects"}],["meta",{"property":"og:description","content":"Article(s) > How to use @ObservedObject to manage state from external objects"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use @ObservedObject to manage state from external objects\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.7,"words":809},"filePathRelative":"hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.md","excerpt":"\\n"}');export{H as comp,q as data};
