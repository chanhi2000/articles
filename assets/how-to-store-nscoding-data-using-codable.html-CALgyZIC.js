import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as e,t as l,e as n,n as a,g as i,a as t,r as d,o as g}from"./app-BgNevrm5.js";const h={},p={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},u=e("nav",{class:"table-of-contents"},[e("ul")],-1),w=e("hr",null,null,-1),f=e("blockquote",null,[e("p",null,"Available from iOS 8.0")],-1),y=e("details",{class:"hint-container details"},[e("summary",null,"Similar solutions‚Ä¶"),t(`
/quick-start/swiftui/all-swiftui-property-wrappers-explained-and-compared">All SwiftUI property wrappers explained and compared 
/quick-start/concurrency/how-to-store-continuations-to-be-resumed-later">How to store continuations to be resumed later 
/example-code/system/how-to-store-userdefaults-options-in-icloud">How to store UserDefaults options in iCloud 
/quick-start/swiftui/how-to-store-views-as-properties">How to store views as properties 
/example-code/language/how-to-use-codable-to-load-and-save-custom-data-types">How to use Codable to load and save custom data types</a>
`)],-1);function C(r,b){const o=d("VPCard");return g(),c("div",null,[e("h1",p,[e("a",m,[e("span",null,l(r.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(o,a(i({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),u,w,n(o,a(i({title:"How to store NSCoding data using Codable | Language - free Swift example code",desc:"How to store NSCoding data using Codable",link:"https://hackingwithswift.com/example-code/language/how-to-store-nscoding-data-using-codable",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,t(" TODO: ÏûëÏÑ± "),t(' \nBroadly speaking, `NSCoding` is the Objective-C way of archiving data and `Codable` is the Swift way. However, that doesn‚Äôt mean the two can‚Äôt work together ‚Äì with a little work you can save any `NSCoding` data right inside `Codable`, which is helpful because many Apple types such as `UIColor` and `UIImage` conform to `NSCoding` but not `Codable`.\n\nHere‚Äôs a simple struct as an example:\n\n```swift\nstruct Person {\n    var name: String\n    var favoriteColor: UIColor\n}\n```\n\nThat stores one `Codable` type (the string) and one `NSCoding` type (the color), and we‚Äôre going to make them all work through `Codable` using `JSONEncoder`.\n\nThis takes four steps:\n\n1. Creating an extension on `Person` where we‚Äôll put our `Codable` functionality.\n<li>Creating custom coding keys to describe what data is saved.\n<li>Creating an `init(from:)` method that converts raw data back into a `UIColor`.\n<li>Creating an `encode(to:)` method that converts a `UIColor` into raw data, which `Codable` can then base-64 encode.\n\nStart by adding the extension to `Person`:\n\n```swift\nextension Person: Codable {\n\n}\n```\n\nThat will stop your code from compiling because Swift knows `UIColor` isn‚Äôt compatible with `Codable`. So, let‚Äôs move on to step two: adding custom coding keys. Put this inside the extension:\n\n```swift\nenum CodingKeys: String, CodingKey {\n    case name\n    case favoriteColor\n}\n```\n\nThose are just the same coding keys we‚Äôd get by default, but because we‚Äôre going to be encoding and decoding things by hand we need to declare them explicitly.\n\nStep three is to create an `init(from:)` method that can read raw data and convert it to a `UIColor`. This will used `NSKeyedUnarchiver` just like regular `NSCoding` code. Add this to the extension:\n\n```swift\ninit(from decoder: Decoder) throws {\n    let container = try decoder.container(keyedBy: CodingKeys.self)\n\n    name = try container.decode(String.self, forKey: .name)\n\n    let colorData = try container.decode(Data.self, forKey: .favoriteColor)\n    favoriteColor = try NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(colorData) as? UIColor ?? UIColor.black\n}\n```\n\nThe last step is to create an `encode(to:)` method that does the opposite ‚Äì it takes a `UIColor` and converts it to data using `NSKeyedArchiver`. Put this inside the extension:\n\n```swift\nfunc encode(to encoder: Encoder) throws {\n    var container = encoder.container(keyedBy: CodingKeys.self)\n    try container.encode(name, forKey: .name)\n\n    let colorData = try NSKeyedArchiver.archivedData(withRootObject: favoriteColor, requiringSecureCoding: false)\n    try container.encode(colorData, forKey: .favoriteColor)\n}\n```\n\nThat‚Äôs all the work done ‚Äì by converting our `UIColor` into a `Data`, `Codable` can take care of the rest.\n\nIf you want to try it out, here‚Äôs some sample code:\n\n```swift\nlet taylor = Person(name: "Taylor Swift", favoriteColor: .blue)\nlet encoder = JSONEncoder()\n\ndo {\n    let encoded = try encoder.encode(taylor)\n    let str = String(decoding: encoded, as: UTF8.self)\n    print(str)\n} catch {\n    print(error.localizedDescription)\n}\n```\n\n'),y])}const v=s(h,[["render",C],["__file","how-to-store-nscoding-data-using-codable.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/how-to-store-nscoding-data-using-codable.html","title":"How to store NSCoding data using Codable","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to store NSCoding data using Codable","description":"Article(s) > How to store NSCoding data using Codable","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-8.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to store NSCoding data using Codable"},{"property":"og:description","content":"How to store NSCoding data using Codable"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-store-nscoding-data-using-codable.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-store-nscoding-data-using-codable.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to store NSCoding data using Codable"}],["meta",{"property":"og:description","content":"Article(s) > How to store NSCoding data using Codable"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-8.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to store NSCoding data using Codable\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.32,"words":696},"filePathRelative":"hackingwithswift.com/example-code/language/how-to-store-nscoding-data-using-codable.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{v as comp,x as data};
