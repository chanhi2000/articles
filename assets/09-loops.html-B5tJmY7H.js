import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as n,t as d,e as s,n as i,g as l,w as t,f as g,r as o,o as h,d as e}from"./app-BgNevrm5.js";const m={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=n("hr",null,null,-1),y=g(`<p>Computers are great at doing boring tasks billions of times in the time it took you to read this sentence. When it comes to repeating tasks in code, you can either copy and paste your code multiple times, or you can use <em>loops</em> – simple programming constructs that repeat a block of code for as long as a condition is true.</p><p>To demonstrate this, I want to introduce you to a special debugging function called <code>print()</code>: you give it some text to print, and it will print it. If you&#39;re running in a playground like we are, you&#39;ll see your text appear in the results window. If you&#39;re running a real app in Xcode, you&#39;ll see your text appear in Xcode&#39;s log window. Either way, <code>print()</code> is a great way to get a sneak peek at the contents of a variable.</p><p>Take a look at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;4 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;6 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">6</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;7 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">7</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;8 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;9 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">9</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;10 x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-1@2x.png" alt="Printing out the ten times table with ten statements." tabindex="0" loading="lazy"><figcaption>Printing out the ten times table with ten statements.</figcaption></figure><p>When it has finished running, you&#39;ll have the 10 times table in your playground results pane. But it&#39;s hardly efficient code, and in fact a much cleaner way is to loop over a range of numbers using what&#39;s called the closed range operator, which is three periods in a row: <code>...</code></p><p>Using the closed range operator, we could re-write that whole thing in three lines:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x 10 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i <span class="token operator">*</span> <span class="token number">10</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-2@2x.png" alt="Printing out the ten times table with a for loop." tabindex="0" loading="lazy"><figcaption>Printing out the ten times table with a for loop.</figcaption></figure><p>The results pane just shows &quot;(10 times)&quot; for our loop, meaning that the loop was run 10 times. If you want to know what the loop actually did, click the square immediately to the right of “(10 times). You&#39;ll see a box saying &quot;10 x 10 is 100&quot; appear inside your code, and if you right-click on that you should see the option “Value History”. Click on that now, and you should see all the printed values over time.</p><figure><img src="https://hackingwithswift.com/img/books/hws/loops-3@2x.png" alt="Viewing a Playground&#39;s Value History." tabindex="0" loading="lazy"><figcaption>Viewing a Playground&#39;s Value History.</figcaption></figure><p>What the loop does is count from 1 to 10 (including 1 and 10), assigns that number to the constant <code>i</code>, then runs the block of code inside the braces.</p><p>If you don&#39;t need to know what number you&#39;re on, you can use an underscore instead. For example, we could print some Taylor Swift lyrics like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Fakers gonna&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    str <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; fake&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-4@2x.png" alt="Appending “fake” five times with a for loop." tabindex="0" loading="lazy"><figcaption>Appending “fake” five times with a for loop.</figcaption></figure><p>That will print &quot;Fakers gonna fake fake fake fake fake&quot; by adding to the string each time the loop goes around.</p><p>If Swift doesn’t have to assign each number to a variable each time the loop goes around, it can run your code a little faster. As a result, if you write <code>for i in…</code> then don’t use <code>i</code>, Xcode will suggest you change it to <code>_</code>.</p><p>There&#39;s a variant of the closed range operator called the half open range operator, and they are easily confused. The half open range operator looks like <code>..&lt;</code> and counts from one number up to and <em>excluding</em> another. For example, <code>1..&lt;5</code> will count 1, 2, 3, 4.</p><figure><img src="https://hackingwithswift.com/img/books/hws/loops-5@2x.png" alt="Using a half open range operator to stop before five." tabindex="0" loading="lazy"><figcaption>Using a half open range operator to stop before five.</figcaption></figure><hr><h2 id="looping-over-arrays" tabindex="-1"><a class="header-anchor" href="#looping-over-arrays"><span>Looping over arrays</span></a></h2><p>Swift provides a very simple way to loop over all the elements in an array. Because Swift already knows what kind of data your array holds, it will go through every element in the array, assign it to a constant you name, then run a block of your code. For example, we could print out a list of great songs like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Shake it Off&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;You Belong with Me&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Look What You Made Me Do&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> song <span class="token keyword">in</span> songs <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;My favorite song is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">song</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-6@2x.png" alt="Looping over an array with a for loop." tabindex="0" loading="lazy"><figcaption>Looping over an array with a for loop.</figcaption></figure><p>You can also use the <code>for i in</code> loop construct to loop through arrays, because you can use that constant to index into an array. We could even use it to index into two arrays, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;players&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;haters&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;heart-breakers&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;fakers&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;play&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;hate&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;break&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;fake&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">people<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> gonna </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">actions<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-7@2x.png" alt="Iterating over two arrays&#39; contents by index." tabindex="0" loading="lazy"><figcaption>Iterating over two arrays&#39; contents by index.</figcaption></figure><p>You might wonder what use the half open range operator has, but it&#39;s particularly useful for working with arrays because they count from zero. So, rather than counting from 0 up to and including 3, we could count from 0 up to and <em>excluding</em> the number of items in an array.</p><div class="hint-container note"><p class="hint-container-title">Remember</p><p>they count from zero, so if they have 4 items the maximum index is 3, which is why we need to use <em>excluding</em> for the loop.</p></div><p>To count how many items are in an array, use <code>someArray.count</code>. So, we could rewrite our code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;players&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;haters&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;heart-breakers&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;fakers&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;play&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;hate&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;break&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;fake&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>people<span class="token punctuation">.</span>count <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">people<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> gonna </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">actions<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-8@2x.png" alt="Looping over two arrays with a half open range." tabindex="0" loading="lazy"><figcaption>Looping over two arrays with a half open range.</figcaption></figure><hr><h2 id="inner-loops" tabindex="-1"><a class="header-anchor" href="#inner-loops"><span>Inner loops</span></a></h2><p>You can put loops inside loops if you want, and even loops inside loops inside loops – although you might suddenly find you&#39;re doing something 10 million times, so be careful!</p><p>We can combine two of our previous loops to create this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;players&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;haters&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;heart-breakers&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;fakers&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;play&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;hate&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;break&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;fake&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>people<span class="token punctuation">.</span>count <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">people<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> gonna&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">        str <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">actions<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-9@2x.png" alt="Using a nested for loop to print “Shake it Off”." tabindex="0" loading="lazy"><figcaption>Using a nested for loop to print “Shake it Off”.</figcaption></figure><p>That outputs &quot;players gonna play play play play play&quot;, then &quot;haters gonna…&quot; Well, you get the idea.</p><p>One important note: although programmers conventionally use <code>i</code>, <code>j</code> and even <code>k</code> for loop constants, you can name them whatever you please: <code>for personNumber in 0..&lt;people.count</code> is perfectly valid.</p><hr><h2 id="while-loops" tabindex="-1"><a class="header-anchor" href="#while-loops"><span>While loops</span></a></h2><p>There&#39;s a third kind of loop you&#39;ll see, which repeats a block of code until you tell it to stop. This is used for things like game loops where you have no idea in advance how long the game will last – you just keep repeating &quot;check for touches, animate robots, draw screen, check for touches…&quot; and so on, until eventually the user taps a button to exit the game and go back to the main menu.</p><p>These loops are called <code>while</code> loops, and they look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Counter is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">counter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    counter <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">556</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-10@2x.png" alt="Using a while loop to iterate to 555." tabindex="0" loading="lazy"><figcaption>Using a while loop to iterate to 555.</figcaption></figure><p>That code introduces a new keyword, called <code>break</code>. It&#39;s used to exit a <code>while</code> or <code>for</code> loop at a point you decide. Without it, the code above would never end because the condition to check is just &quot;true&quot;, and true is always true. Without that <code>break</code> statement the loop is an infinite loop, which is A Bad Thing.</p><p>These <code>while</code> loops work best when you&#39;re using unknown data, such as downloading things from the internet, reading from a file such as XML, looking through user input, and so on. This is because you only know when to stop the loop after you&#39;ve run it a sufficient number of times.</p><p>There is a counterpart to <code>break</code> called <code>continue</code>. Whereas breaking out of a loop stops execution immediately and continues directly after the loop, continuing a loop only exits the current iteration of the loop – it will jump back to the top of the loop and pick up from there.</p><p>As an example, consider the code below:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Shake it Off&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;You Belong with Me&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Look What You Made Me Do&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> song <span class="token keyword">in</span> songs <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> song <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;You Belong with Me&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;My favorite song is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">song</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/loops-11@2x.png" alt="Using continue to skip an iteration." tabindex="0" loading="lazy"><figcaption>Using continue to skip an iteration.</figcaption></figure><p>That loops through three Taylor Swift songs, but it will only print the name of two. The reason for this is the <code>continue</code> keyword: when the loop tries to use the song &quot;You Belong with Me&quot;, <code>continue</code> gets called, which means the loop immediately jumps back to the start – the <code>print()</code> call is never made, and instead the loop continues straight on to “Look What You Made Me Do”.</p>`,53);function q(c,x){const p=o("VPCard"),a=o("router-link"),r=o("VidStack");return h(),k("div",null,[n("h1",f,[n("a",w,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(p,i(l({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n("nav",v,[n("ul",null,[n("li",null,[s(a,{to:"#looping-over-arrays"},{default:t(()=>[e("Looping over arrays")]),_:1})]),n("li",null,[s(a,{to:"#inner-loops"},{default:t(()=>[e("Inner loops")]),_:1})]),n("li",null,[s(a,{to:"#while-loops"},{default:t(()=>[e("While loops")]),_:1})])])]),b,s(p,i(l({title:"Loops | Hacking with iOS",desc:"Loops",link:"https://hackingwithswift.com/read/0/9/loops",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(r,{src:"youtube/IJChAEFA5as"}),y])}const L=u(m,[["render",q],["__file","09-loops.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/read/00/09-loops.html","title":"Loops","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Loops","description":"Article(s) > Loops","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Loops"},{"property":"og:description","content":"Loops"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/09-loops.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/09-loops.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Loops"}],["meta",{"property":"og:description","content":"Article(s) > Loops"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/loops-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Loops\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/loops-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-2@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-3@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-4@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-5@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-6@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-7@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-8@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-9@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-10@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/loops-11@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[{"level":2,"title":"Looping over arrays","slug":"looping-over-arrays","link":"#looping-over-arrays","children":[]},{"level":2,"title":"Inner loops","slug":"inner-loops","link":"#inner-loops","children":[]},{"level":2,"title":"While loops","slug":"while-loops","link":"#while-loops","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.33,"words":1598},"filePathRelative":"hackingwithswift.com/read/00/09-loops.md","excerpt":"\\n"}');export{L as comp,T as data};
