import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,t as r,e as s,n as e,g as t,f as u,r as i,o as d}from"./app-BgNevrm5.js";const m={},k={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},h=a("nav",{class:"table-of-contents"},[a("ul")],-1),f=a("hr",null,null,-1),v=u(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Wrapping a <code>UIView</code> in a <code>UIViewRepresentable</code> struct is a great way to bring existing UIKit into your SwiftUI app, and you can even add your own custom modifiers to adjust the way the view works at runtime.</p><p>To make this work, you should create private properties for all the values you want to adjust on the underlying <code>UIView</code>, then create methods to adjust them. Each of these methods should take a copy of your SwiftUI representable – <em>not</em> the underlying <code>UIView</code> – then adjust the private properties you created earlier to reflect the new state.</p><p>Once that’s done, SwiftUI will ensure your <code>updateUIView()</code> method is triggered, at which point you copy your private properties into the <code>UIView</code> to make sure it’s updated.</p><p>As an example, you could create a <code>UIViewRepresentable</code> to bridge <code>UISearchBar</code> into SwiftUI, but you might want some aspect of it to be customizable, such as its placeholder text. First you create the representable with an extra private property for its placeholder:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">SearchField</span><span class="token punctuation">:</span> <span class="token class-name">UIViewRepresentable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> placeholder <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        _text <span class="token operator">=</span> text</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">makeUIView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UISearchBar</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> searchBar <span class="token operator">=</span> <span class="token class-name">UISearchBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        searchBar<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> placeholder</span>
<span class="line">        <span class="token keyword">return</span> searchBar</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Always copy the placeholder text across on update</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">updateUIView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> uiView<span class="token punctuation">:</span> <span class="token class-name">UISearchBar</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        uiView<span class="token punctuation">.</span>text <span class="token operator">=</span> text</span>
<span class="line">        uiView<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> placeholder</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, create a modifier on that representable to adjust the private property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Any modifiers to adjust your search field – copy self, adjust, then return.</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">SearchField</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">placeholder</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">SearchField</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">        view<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> string</span>
<span class="line">        <span class="token keyword">return</span> view</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now you’re all set to use it. For example, this creates a <code>SearchField</code> view with our <code>placeholder()</code> modifier, but every time the button is clicked we randomize the placeholder so you can see everything in action:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeHolder <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">SearchField</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $text<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span>placeHolder<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap me&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// randomize the placeholder every press, to</span></span>
<span class="line">                <span class="token comment">// prove this works</span></span>
<span class="line">                placeHolder <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uuidString</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),b={class:"hint-container details"},g=a("summary",null,"Similar solutions…",-1);function y(o,U){const n=i("VPCard"),c=i("VidStack");return d(),l("div",null,[a("h1",k,[a("a",w,[a("span",null,r(o.$frontmatter.title)+" 관련",1)])]),s(n,e(t({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,f,s(n,e(t({title:"How to create modifiers for a UIViewRepresentable struct | SwiftUI by Example",desc:"How to create modifiers for a UIViewRepresentable struct",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-modifiers-for-a-uiviewrepresentable-struct",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,s(c,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-modifiers-for-a-uiviewrepresentable-struct-1~dark.mp4"}),a("details",b,[g,s(n,e(t({title:"How to create custom modifiers | SwiftUI by Example",desc:"How to create custom modifiers",link:"/hackingwithswift.com/swiftui/how-to-create-custom-modifiers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,e(t({title:"How to stack modifiers to create more advanced effects | SwiftUI by Example",desc:"How to stack modifiers to create more advanced effects",link:"/hackingwithswift.com/swiftui/how-to-stack-modifiers-to-create-more-advanced-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,e(t({title:"How to make SwiftUI modifiers safer to use with @warn_unqualified_access | SwiftUI by Example",desc:"How to make SwiftUI modifiers safer to use with @warn_unqualified_access",link:"/hackingwithswift.com/swiftui/how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,e(t({title:"How to detect the location of a tap inside a view | SwiftUI by Example",desc:"How to detect the location of a tap inside a view",link:"/hackingwithswift.com/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,e(t({title:"How to wrap a custom UIView for SwiftUI | SwiftUI by Example",desc:"How to wrap a custom UIView for SwiftUI",link:"/hackingwithswift.com/swiftui/how-to-wrap-a-custom-uiview-for-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const x=p(m,[["render",y],["__file","how-to-create-modifiers-for-a-uiviewrepresentable-struct.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-create-modifiers-for-a-uiviewrepresentable-struct.html","title":"How to create modifiers for a UIViewRepresentable struct","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create modifiers for a UIViewRepresentable struct","description":"Article(s) > How to create modifiers for a UIViewRepresentable struct","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create modifiers for a UIViewRepresentable struct"},{"property":"og:description","content":"How to create modifiers for a UIViewRepresentable struct"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-modifiers-for-a-uiviewrepresentable-struct.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-modifiers-for-a-uiviewrepresentable-struct.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create modifiers for a UIViewRepresentable struct"}],["meta",{"property":"og:description","content":"Article(s) > How to create modifiers for a UIViewRepresentable struct"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create modifiers for a UIViewRepresentable struct\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.38,"words":714},"filePathRelative":"hackingwithswift.com/swiftui/how-to-create-modifiers-for-a-uiviewrepresentable-struct.md","excerpt":"\\n"}');export{x as comp,_ as data};
