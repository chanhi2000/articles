import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as t,g as e,d as i,f as h,r as o,o as m}from"./app-BgNevrm5.js";const g={},k={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Updated for Xcode 15")],-1),y=n("p",null,"We'll add some more to our design in just a moment, but first let's pause and make what we have look better.",-1),x=n("code",null,"ItemRow.swift",-1),S=n("code",null,"font()",-1),_=h(`<p>So, something like this will make it stand out:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>As for the picture, it looks <em>OK</em> as it is, but with a little love it would look better. For example, we could apply a <code>clipShape()</code> modifier and ask it to be clipped to a circle shape:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>thumbnailImage<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Or we could apply a <code>clipShape()</code> modifier, then add an <code>overlay()</code> modifier so we place a shape on top of our image. For example, this will add a circle over the image, then give that circle a 2-point gray border:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>thumbnailImage<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK, that&#39;s enough styling – let&#39;s look at something more <em>complex</em>.</p><p>If you look in menu.json you&#39;ll see that each menu item has a string array of restrictions: “G” for containing gluten, “N” for containing nuts, “V” for being vegetarian friendly, and so on. We can use that to create colored icons representing what&#39;s in the food at a glance, showing zero or more of them in each row as appropriate.</p><p>First, we need a dictionary of colors that we&#39;ll use for each restriction type. Add this property to <code>ItemRow</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;D&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;G&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;N&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;S&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;V&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span>green<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, we need to loop over all the restrictions and put each one into a text view. Put this after the <code>VStack</code> containing the name and cost:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ForEach</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>restrictions<span class="token punctuation">)</span> <span class="token punctuation">{</span> restriction <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>restriction<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we have a problem: that code won&#39;t compile. As I mentioned earlier, we can put arrays into a <code>ForEach</code> as long as SwiftUI knows how to identify each item in the array uniquely. We solved that by making our sections and items conform to the <code>Identifiable</code> protocol, which uses the <code>id</code> property to identify items.</p><p>Here, though, we have an array of strings, so we can&#39;t make them conform to <code>Identifiable</code>. Instead, we need something else: we need to tell Swift that the string <em>itself</em> is the identifier for each item. This can be done using the <code>id</code> parameter for <code>ForEach</code>, passing in <code>\\.self</code> as its only parameter, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ForEach</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>restrictions<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> restriction <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>restriction<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now you should see the text “G” and “V” next to our example item in the Xcode preview.</p><p>That&#39;s pretty dull, though, so let&#39;s spice it up with some modifiers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>restriction<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>restriction<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will use a small, bold font with white text and a colored background, add a circular clipping shape, and add a little space around it so the text circles aren&#39;t so near.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/2-8~dark.png" alt="A SwiftUI list row, showing a food photo, its name, and price, along with circles showing what food restrictions it has." tabindex="0" loading="lazy"><figcaption>A SwiftUI list row, showing a food photo, its name, and price, along with circles showing what food restrictions it has.</figcaption></figure><p>We&#39;re going to do one more thing before we&#39;re done with the design of this item row: we&#39;re going to force the restriction text to be spaced apart from the rest of the row. SwiftUI has a dedicated view for this called <code>Spacer</code>, and I&#39;d like you to place it just before the <code>ForEach</code> for our restrictions, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">ForEach</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>restrictions<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will automatically take up all available free space, meaning that our picture will now be on the far left and the restrictions on the far right.</p><p>Go ahead and run the project now and I think you&#39;ll agree it looks great! Now think about how you might have accomplished all that using a <code>UITableViewCell</code> – it would take more code than you expect!</p>`,24),I={class:"hint-container details"},U=n("summary",null,"Further reading",-1),E={class:"hint-container details"},q=n("summary",null,"Similar solutions…",-1);function A(c,P){const a=o("VPCard"),p=o("VidStack"),l=o("FontIcon");return m(),u("div",null,[n("h1",k,[n("a",w,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,v,s(a,t(e({title:"Polishing designs with fonts and colors | SwiftUI by Example",desc:"Polishing designs with fonts and colors",link:"https://hackingwithswift.com/quick-start/swiftui/polishing-designs-with-fonts-and-colors",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,s(p,{src:"youtube/VlpqnHOur9o"}),y,n("p",null,[i("In "),s(l,{icon:"fa-brands fa-swift"}),x,i(", our menu item's name is clearly the most important thing in each row, but it has the same font size as the price below. We can bring it up in size and weight by using the "),S,i(" modifier, which accepts any of Apple's Dynamic Type sizes.")]),_,n("details",I,[U,s(a,t(e({title:"How to style text views with fonts, colors, line spacing, and more | SwiftUI by Example",desc:"How to style text views with fonts, colors, line spacing, and more",link:"/hackingwithswift.com/swiftui/how-to-style-text-views-with-fonts-colors-line-spacing-and-more.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to clip a view so only part is visible | SwiftUI by Example",desc:"How to clip a view so only part is visible",link:"/hackingwithswift.com/swiftui/how-to-clip-a-view-so-only-part-is-visible.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to force views to one side inside a stack using Spacer | SwiftUI by Example",desc:"How to force views to one side inside a stack using Spacer",link:"/hackingwithswift.com/swiftui/how-to-force-views-to-one-side-inside-a-stack-using-spacer.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),n("details",E,[q,s(a,t(e({title:"How to style text views with fonts, colors, line spacing, and more | SwiftUI by Example",desc:"How to style text views with fonts, colors, line spacing, and more",link:"/hackingwithswift.com/swiftui/how-to-style-text-views-with-fonts-colors-line-spacing-and-more.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to get custom colors and transparency with SF Symbols | SwiftUI by Example",desc:"How to get custom colors and transparency with SF Symbols",link:"/hackingwithswift.com/swiftui/how-to-get-custom-colors-and-transparency-with-sf-symbols.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to load custom colors from an asset catalog | SwiftUI by Example",desc:"How to load custom colors from an asset catalog",link:"/hackingwithswift.com/swiftui/how-to-load-custom-colors-from-an-asset-catalog.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const V=r(g,[["render",A],["__file","polishing-designs-with-fonts-and-colors.html.vue"]]),j=JSON.parse('{"path":"/hackingwithswift.com/swiftui/polishing-designs-with-fonts-and-colors.html","title":"Polishing designs with fonts and colors","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Polishing designs with fonts and colors","description":"Article(s) > Polishing designs with fonts and colors","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Polishing designs with fonts and colors"},{"property":"og:description","content":"Polishing designs with fonts and colors"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/polishing-designs-with-fonts-and-colors.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/polishing-designs-with-fonts-and-colors.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Polishing designs with fonts and colors"}],["meta",{"property":"og:description","content":"Article(s) > Polishing designs with fonts and colors"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/2-8~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Polishing designs with fonts and colors\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/2-8~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.01,"words":1204},"filePathRelative":"hackingwithswift.com/swiftui/polishing-designs-with-fonts-and-colors.md","excerpt":"\\n"}');export{V as comp,j as data};
