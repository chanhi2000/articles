import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as u,e,n as s,g as n,d as o,w as h,f as d,r as i,o as g}from"./app-BgNevrm5.js";const m={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},k=t("nav",{class:"table-of-contents"},[t("ul")],-1),b=t("hr",null,null,-1),y=t("blockquote",null,[t("p",null,"Updated for Xcode 15")],-1),q=t("p",null,"Fetch requests allow us to load Core Data results that match specific criteria we specify, and SwiftUI can bind those results directly to user interface elements.",-1),v=d(`<p><strong>That step is required.</strong> I know, you just want to know how to run a Core Data fetch request and show data inside a SwiftUI list, but if you don’t follow the steps in the link above then using <code>@FetchRequest</code> will crash at runtime because SwiftUI expects that setup to have been done.</p><p>Once your managed object context is attached to the environment under the <code>.managedObjectContext</code> key, you can use the <code>@FetchRequest</code> property wrapper to make properties in your views that create and manage Core Data fetch requests automatically.</p><p>Creating a fetch request requires two pieces of information: the entity you want to query, and a sort descriptor that determines the order in which results are returned. In my example setup we created a ProgrammingLanguages entity that had name and creator attributes, so we could create a fetch request for it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FetchRequest</span><span class="token punctuation">(</span>sortDescriptors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">var</span> languages<span class="token punctuation">:</span> <span class="token class-name">FetchedResults</span><span class="token operator">&lt;</span><span class="token class-name">ProgrammingLanguage</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That loads all programming languages, sorted alphabetically by their name.</p><p>As you can see, the <code>sortDescriptors</code> parameter is an array, so you can provide as many sorting options as you need like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FetchRequest</span><span class="token punctuation">(</span>sortDescriptors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>creator<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">var</span> languages<span class="token punctuation">:</span> <span class="token class-name">FetchedResults</span><span class="token operator">&lt;</span><span class="token class-name">ProgrammingLanguage</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Yes, that’s a massive line of code, so I wouldn’t blame you if you broke it up into something a little easier to read:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FetchRequest</span><span class="token punctuation">(</span>sortDescriptors<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>creator<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">var</span> languages<span class="token punctuation">:</span> <span class="token class-name">FetchedResults</span><span class="token operator">&lt;</span><span class="token class-name">ProgrammingLanguage</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Regardless of how you create your fetch request, the results can be used directly inside SwiftUI views. For example, we could show a table of all languages like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span> <span class="token punctuation">{</span> language <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>language<span class="token punctuation">.</span>name <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest-1~dark@2x.png" alt="A list showing several Example Languages." tabindex="0" loading="lazy"><figcaption>A list showing several Example Languages.</figcaption></figure>`,12),x={class:"hint-container details"},_=t("summary",null,"Similar solutions…",-1);function D(c,R){const a=i("VPCard"),r=i("RouteLink");return g(),l("div",null,[t("h1",w,[t("a",f,[t("span",null,u(c.$frontmatter.title)+" 관련",1)])]),e(a,s(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,b,e(a,s(n({title:"How to create a Core Data fetch request using @FetchRequest | SwiftUI by Example",desc:"How to create a Core Data fetch request using @FetchRequest",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,q,t("p",null,[o("If you followed my "),e(r,{to:"/hackingwithswift.com/swiftui/how-to-configure-core-data-to-work-with-swiftui.html"},{default:h(()=>[o("Core Data and SwiftUI set up instructions")]),_:1}),o(", you’ve already injected your managed object context into the SwiftUI environment.")]),v,t("details",x,[_,e(a,s(n({title:"How to limit the number of items in a fetch request | SwiftUI by Example",desc:"How to limit the number of items in a fetch request",link:"/hackingwithswift.com/swiftui/how-to-limit-the-number-of-items-in-a-fetch-request.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"How to filter Core Data fetch requests using a predicate | SwiftUI by Example",desc:"How to filter Core Data fetch requests using a predicate",link:"/hackingwithswift.com/swiftui/how-to-filter-core-data-fetch-requests-using-a-predicate.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"What is the @FetchRequest property wrapper? | SwiftUI by Example",desc:"What is the @FetchRequest property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-fetchrequest-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(a,s(n({title:"How to configure Core Data to work with SwiftUI | SwiftUI by Example",desc:"How to configure Core Data to work with SwiftUI",link:"/hackingwithswift.com/swiftui/how-to-configure-core-data-to-work-with-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const F=p(m,[["render",D],["__file","how-to-create-a-core-data-fetch-request-using-fetchrequest.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest.html","title":"How to create a Core Data fetch request using @FetchRequest","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create a Core Data fetch request using @FetchRequest","description":"Article(s) > How to create a Core Data fetch request using @FetchRequest","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create a Core Data fetch request using @FetchRequest"},{"property":"og:description","content":"How to create a Core Data fetch request using @FetchRequest"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create a Core Data fetch request using @FetchRequest"}],["meta",{"property":"og:description","content":"Article(s) > How to create a Core Data fetch request using @FetchRequest"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest-1~dark@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create a Core Data fetch request using @FetchRequest\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest-1~dark@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"hackingwithswift.com/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest.md","excerpt":"\\n"}');export{F as comp,I as data};
