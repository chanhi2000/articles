import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as d,e as t,n as e,g as a,d as o,a as h,f as u,r as c,o as m}from"./app-BgNevrm5.js";const w={},g={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Available from Swift 5.10")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0404-nested-protocols.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),N=u(`<p>This is particularly helpful when common names are given to protocols. For example, the word &quot;transaction&quot; could feasibly be used to mean an animation transaction, a bank transaction, and a database transaction all in the same app.</p><p>One way to resolve this is by using compound names â€“ we add more words to protocol names to clarify what we mean, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">protocol</span> <span class="token class-name">AnimationTransaction</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protocol</span> <span class="token class-name">BankTransaction</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protocol</span> <span class="token class-name">DatabaseTransaction</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another common problem also occurs when several similar protocols exist. For example, in SwiftUI we have protocols for <code>ButtonStyle</code>, <code>LabelStyle</code>, <code>ListStyle</code>, and more, all encapsulating the idea that a view can be styled in various ways.</p><p>Both of these can be resolved with this change. In the case of transactions, we could nest each transaction type inside whatever type it operated on:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Animation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protocol</span> <span class="token class-name">Transaction</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protocol</span> <span class="token class-name">Transaction</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protocol</span> <span class="token class-name">Transaction</span> <span class="token punctuation">{</span>       </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Where those protocols are used externally, they would now be written <code>Animation.Transaction</code>, <code>Bank.Transaction</code>, and <code>Database.Transaction</code>, but inside their respective structs they can just be referred to as <code>Transaction</code>.</p><p>In theory, SwiftUI could also move to <code>Button.Style</code>, <code>List.Style</code>, and so on, but that feels like a big change at this point.</p>`,8),A={class:"hint-container details"},x=n("summary",null,"Other Changes in Swift 5.10",-1),C={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-9-to-5-10.playground.zip",target:"_blank",rel:"noopener noreferrer"};function S(l,P){const s=c("VPCard"),i=c("FontIcon");return m(),p("div",null,[n("h1",g,[n("a",f,[n("span",null,d(l.$frontmatter.title)+" ê´€ë ¨",1)])]),t(s,e(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,b,t(s,e(a({title:"Allow Protocols to be Nested in Non-Generic Contexts | Changes in Swift 5.10",desc:"Allow Protocols to be Nested in Non-Generic Contexts",link:"https://hackingwithswift.com/swift/5.10/nested-protocols",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("p",null,[n("a",y,[o("SE-0404 ("),t(i,{icon:"iconfont icon-github"}),_,o(")")]),o(" allows us to create nested protocols, meaning that we can place protocols inside structs, enums, classes, actors, and even functions, with the sole restriction that whatever we're nesting the protocol in can't use generics.")]),N,n("details",A,[x,t(s,e(a({title:"Data races are now clearly diagnosed | Changes in Swift 5.10",desc:"Data races are now clearly diagnosed",link:"/hackingwithswift.com/swift/5.10/complete-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),h(` 
\`\`\`component VPCard
{
  "title": "Allow Protocols to be Nested in Non-Generic Contexts | Changes in Swift 5.10",
  "desc": "Allow Protocols to be Nested in Non-Generic Contexts",
  "link": "/hackingwithswift.com/swift/5.10/nested-protocols.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
 `),t(s,e(a({title:"Deprecate @UIApplicationMain and @NSApplicationMain | Changes in Swift 5.10",desc:"Deprecate @UIApplicationMain and @NSApplicationMain",link:"/hackingwithswift.com/swift/5.10/deprecate-uiapplicationmain.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,e(a({title:"Refined actor initialization and deinitialization | Changes in Swift 5.10",desc:"Refined actor initialization and deinitialization",link:"/hackingwithswift.com/swift/5.10/actor-initialization.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",C,[t(i,{icon:"fas fa-file-zipper"}),o("Download Swift 5.10 playground")])])])])}const I=r(w,[["render",S],["__file","nested-protocols.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/swift/5.10/nested-protocols.html","title":"Allow Protocols to be Nested in Non-Generic Contexts","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Allow Protocols to be Nested in Non-Generic Contexts","description":"Article(s) > Allow Protocols to be Nested in Non-Generic Contexts","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.10"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Allow Protocols to be Nested in Non-Generic Contexts"},{"property":"og:description","content":"Allow Protocols to be Nested in Non-Generic Contexts"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.10/nested-protocols.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.10/nested-protocols.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Allow Protocols to be Nested in Non-Generic Contexts"}],["meta",{"property":"og:description","content":"Article(s) > Allow Protocols to be Nested in Non-Generic Contexts"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Allow Protocols to be Nested in Non-Generic Contexts\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.8,"words":539},"filePathRelative":"hackingwithswift.com/swift/5.10/nested-protocols.md","excerpt":"\\n"}');export{I as comp,B as data};
