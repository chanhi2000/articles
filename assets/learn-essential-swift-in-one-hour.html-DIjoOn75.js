import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as k,g as m,w as t,d as a,f as v,r as p,o as h}from"./app-BgNevrm5.js";const g={},b={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},w={class:"table-of-contents"},y=n("hr",null,null,-1),q=n("p",null,"In this article I'm going to introduce you to the fundamentals of the Swift programming language in about one hour.",-1),x=n("p",null,"This article is aimed at two kinds of people: folks who have completed the introduction to my 100 Days of SwiftUI course and are looking for a quick review, and folks who are experienced with other languages and want to transfer their skills over to Swift.",-1),S=n("p",null,[a("We're going to move fast because this is designed to be a primer ‚Äì if you find yourself struggling to understand something, visit the "),n("a",{href:"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui",target:"_blank",rel:"noopener noreferrer"},"100 Days of SwiftUI"),a(" to complete the longer, more detailed introduction there.")],-1),j=n("p",null,"Let's get to it!",-1),T=v(`<hr><h2 id="creating-constants-and-variables" tabindex="-1"><a class="header-anchor" href="#creating-constants-and-variables"><span>Creating constants and variables</span></a></h2><details class="hint-container details"><summary>Creating constants and variables</summary><p>Swift can create constants and variables, but constants are generally preferable.</p><p>Use this to create then change a variable string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Ted&quot;</span></span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Rebecca&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don&#39;t want to change a value, use a <em>constant</em> instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Daphne&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>print()</code> function is helpful for learning and debugging, and shows some information about a variable:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><hr><h2 id="strings" tabindex="-1"><a class="header-anchor" href="#strings"><span>Strings</span></a></h2><details class="hint-container details"><summary>Strings</summary><p>Swift&#39;s strings start and end with double quotes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token keyword">actor</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And they work great with emoji too:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token keyword">actor</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise üèÉ‚Äç‚ôÇÔ∏è&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you want double quotes inside your string, place a backslash before them:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> quote <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;He tapped a sign saying \\&quot;Believe\\&quot; and walked away.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you want a string that spans multiple lines, start and end with three double quotes, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> movie <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">A day in</span>
<span class="line">the life of an</span>
<span class="line">Apple engineer</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift provides many useful properties and methods for strings, including <code>.count</code> to read how many letters it has:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">actor</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are also <code>hasPrefix()</code> and <code>hasSuffix()</code>, which lets us know whether a string starts or ends with specific letters:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;He&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Away.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Important</strong>: Strings are case-sensitive in Swift, so that second check will return false.</p></details><hr><h3 id="integers" tabindex="-1"><a class="header-anchor" href="#integers"><span>Integers</span></a></h3><details class="hint-container details"><summary>Integers</summary><p>Swift stores whole numbers using the type <code>Int</code>, which supports a range of standard mathematical operators:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">let</span> higherScore <span class="token operator">=</span> score <span class="token operator">+</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">let</span> halvedScore <span class="token operator">=</span> score <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It also supports compound assignment operators that modify variables in place:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">counter <span class="token operator">+=</span> <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Integers come with their own useful functionality, such as the <code>isMultiple(of:)</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">120</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also make random integers in a specific range, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><hr><h2 id="decimals" tabindex="-1"><a class="header-anchor" href="#decimals"><span>Decimals</span></a></h2><details class="hint-container details"><summary>Decimals</summary><p>If you create a number with a decimal point, Swift will consider it a <code>Double</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">3.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Swift considers <code>Double</code> to be a wholly different type of data to <code>Int</code>, and won&#39;t let you mix them together.</p></details><hr><h2 id="booleans" tabindex="-1"><a class="header-anchor" href="#booleans"><span>Booleans</span></a></h2><details class="hint-container details"><summary>Booleans</summary><p>Swift uses the type <code>Bool</code> to store true or false:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> goodDogs <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token keyword">let</span> gameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can flip a Boolean from true to false by calling its <code>toggle()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> isSaved <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">isSaved<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="joining-strings" tabindex="-1"><a class="header-anchor" href="#joining-strings"><span>Joining strings</span></a></h2><details class="hint-container details"><summary>Joining strings</summary><p>You can create strings out of other data using <em>string interpolation</em>: write a backslash inside your string, then place the name of a variable or constant inside parentheses, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span></span>
<span class="line"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;I&#39;m </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> and I&#39;m </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> years old.&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that code runs, it will print ‚ÄúI&#39;m Taylor and I&#39;m 26 years old.‚Äù</p></details><hr><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays"><span>Arrays</span></a></h2><details class="hint-container details"><summary>Arrays</summary><p>You can group items into an array like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Green&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Blue&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> readings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each of those hold different kinds of data: one strings, one integers, and one decimals. When we read data from arrays we will get the appropriate type back - a <code>String</code>, an <code>Int</code>, or a <code>Double</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>readings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: Make sure an item exists at the index you&#39;re asking for, otherwise your code will crash ‚Äì your app will just stop working.</p><p>If your array is variable, you can use <code>append()</code> to add new items:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">colors<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tartan&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The type of data you add must match whatever was already in there.</p><p>Arrays have useful functionality, such as <code>.count</code> to read how many items are in an array, or <code>remove(at:)</code> to remove one item at a specific index:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">colors<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can check whether an array contains a particular item by using <code>contains()</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Octarine&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><hr><h2 id="dictionaries" tabindex="-1"><a class="header-anchor" href="#dictionaries"><span>Dictionaries</span></a></h2><details class="hint-container details"><summary>Dictionaries</summary><p>Dictionaries store multiple values according to a key we specify. For example, we could create a dictionary to store information about a person:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;job&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Singer&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To read data from the dictionary, use the same keys you used when creating it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;job&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>default</code> value will be used if the key we&#39;ve asked for doesn&#39;t exist.</p></details><hr><h2 id="sets" tabindex="-1"><a class="header-anchor" href="#sets"><span>Sets</span></a></h2><details class="hint-container details"><summary>Sets</summary><p>Sets are similar to arrays, except you can&#39;t add duplicate items, and they don&#39;t store items in a particular order.</p><p>This makes a set of numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember, the set will ignore duplicate values, and it won&#39;t remember the order used in the array.</p><p>Adding items to a set is done by calling its <code>insert()</code> method, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">numbers<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Sets have one big advantage over arrays: using <code>contains()</code> on a set is effectively instant no matter how many items the set contains ‚Äì even a set with 10,000,000 items will respond instantly.</p></details><hr><h2 id="enums" tabindex="-1"><a class="header-anchor" href="#enums"><span>Enums</span></a></h2><details class="hint-container details"><summary>Enums</summary><p>An enum is a set of named values we can create and use to make our code more efficient and safer. For example, we could make an enum of weekdays like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> monday<span class="token punctuation">,</span> tuesday<span class="token punctuation">,</span> wednesday<span class="token punctuation">,</span> thursday<span class="token punctuation">,</span> friday</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That calls the new enum <code>Weekday</code>, and provides five cases to handle the five weekdays.</p><p>We can now make instances of that enum, then assign other possible cases to it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span>monday</span>
<span class="line">day <span class="token operator">=</span> <span class="token punctuation">.</span>friday</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="type-annotations" tabindex="-1"><a class="header-anchor" href="#type-annotations"><span>Type annotations</span></a></h2><details class="hint-container details"><summary>Type annotations</summary><p>You can try to force a specific type for a new variable or constant by using <em>type annotation</em> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Without the <code>: Double</code> part Swift would infer that to be an <code>Int</code>, but we&#39;re overriding that and saying it&#39;s a <code>Double</code>.</p><p>Here are some type annotations based on the types covered so far:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> player<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Roy&quot;</span></span></span>
<span class="line"><span class="token keyword">var</span> luckyNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">13</span></span>
<span class="line"><span class="token keyword">let</span> pi<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">3.141</span></span>
<span class="line"><span class="token keyword">var</span> isEnabled<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token keyword">var</span> albums<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> user<span class="token punctuation">:</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> books<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;The Bluest Eye&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Foundation&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Arrays and dictionaries are so common that they have special syntax that is easier to write:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> albums<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> user<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Knowing the exact types of things is important for creating empty collections. For example, both of these create empty string arrays:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> teams<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> clues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Values of an enum have the same type as the enum itself, so we could write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">UIStyle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> light<span class="token punctuation">,</span> dark<span class="token punctuation">,</span> system</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> style<span class="token punctuation">:</span> <span class="token class-name">UIStyle</span> <span class="token operator">=</span> <span class="token punctuation">.</span>light</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="conditions" tabindex="-1"><a class="header-anchor" href="#conditions"><span>Conditions</span></a></h2><details class="hint-container details"><summary>Conditions</summary><p>Use <code>if</code>, <code>else</code>, and <code>else if</code> statements to check a condition and run some code as appropriate:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">16</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can&#39;t vote&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can vote soon.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can vote now.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can use <code>&amp;&amp;</code> to combine two conditions, and the whole condition will only be true if the two parts inside are true:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">26</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> temp date<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s a nice day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, <code>||</code> will make a condition be true if <em>either</em> subcondition is true.</p></details><hr><h2 id="switch-statements" tabindex="-1"><a class="header-anchor" href="#switch-statements"><span>Switch statements</span></a></h2><details class="hint-container details"><summary>Switch statements</summary><p>Swift lets us check a value against multiple conditions using <code>switch</code>/<code>case</code> syntax, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Weather</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> sun<span class="token punctuation">,</span> rain<span class="token punctuation">,</span> wind</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> forecast <span class="token operator">=</span> <span class="token class-name">Weather</span><span class="token punctuation">.</span>sun</span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> forecast <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>sun<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A nice day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>rain<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Pack an umbrella.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Should be okay.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code> statements <em>must</em> be exhaustive: all possible values must be handled so you can&#39;t miss one by accident.</p></details><hr><h2 id="the-ternary-conditional-operator" tabindex="-1"><a class="header-anchor" href="#the-ternary-conditional-operator"><span>The ternary conditional operator</span></a></h2><details class="hint-container details"><summary>The ternary conditional operator</summary><p>The ternary operator lets us check a condition and return one of two values: something if the condition is true, and something if it&#39;s false:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span></span>
<span class="line"><span class="token keyword">let</span> canVote <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;Yes&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;No&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When that code runs, canVote will be set to ‚ÄúYes‚Äù because age is set to 18.</p></details><hr><h2 id="loops" tabindex="-1"><a class="header-anchor" href="#loops"><span>Loops</span></a></h2><details class="hint-container details"><summary>Loops</summary><p>Swift&#39;s <code>for</code> loops run some code for every item in a collection, or in a custom range. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> platforms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;iOS&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;macOS&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;tvOS&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;watchOS&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> os <span class="token keyword">in</span> platforms <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Swift works on </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">os</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also loop over a range of numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5 x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">5</span> <span class="token operator">*</span> i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>1...12</code> contains the values 1 through 12 inclusive. If you want to exclude the final number, use <code>..&lt;</code> instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">13</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5 x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">5</span> <span class="token operator">*</span> i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: If you don&#39;t need the loop variable, use <code>_</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> lyric <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Haters gonna&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    lyric <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; hate&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>lyric<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are also <code>while</code> loops, which execute their loop body until a condition is false, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">‚Ä¶&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    count <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Go!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use <code>continue</code> to skip the current loop iteration and proceed to the following one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;me.jpg&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;work.txt&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;sophie.jpg&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> file <span class="token keyword">in</span> files <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> file<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;.jpg&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found picture: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">file</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, use <code>break</code> to exit a loop and skip all remaining iterations.</p></details><hr><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions"><span>Functions</span></a></h2><details class="hint-container details"><summary>Functions</summary><p>To create a new function, write <code>func</code> followed by your function&#39;s name, then add parameters inside parentheses:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printTimesTables</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i <span class="token operator">*</span> number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">printTimesTables</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We need to write <code>number: 5</code> at the call site, because the parameter name is part of the function call.</p><p>To return data from a function, tell Swift what type it is, then use the <code>return</code> keyword to send it back. For example, this returns a dice roll:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">rollDice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">rollDice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If your function contains only a single line of code, you can remove the <code>return</code> keyword:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">rollDice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="returning-multiple-values-from-functions" tabindex="-1"><a class="header-anchor" href="#returning-multiple-values-from-functions"><span>Returning multiple values from functions</span></a></h2><details class="hint-container details"><summary>Returning multiple values from functions</summary><p>Tuples store a fixed number of values of specific types, which is a convenient way to return multiple values from a function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Name: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>firstName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>lastName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don&#39;t need all the values from the tuple you can destructure the tuple to pull it apart into individual values, then <code>_</code> to tell Swift to ignore some:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Name: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">firstName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="customizing-parameter-labels" tabindex="-1"><a class="header-anchor" href="#customizing-parameter-labels"><span>Customizing parameter labels</span></a></h2><details class="hint-container details"><summary>Customizing parameter labels</summary><p>If you don&#39;t want to pass a parameter&#39;s name when calling a function, place an underscore before it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">isUppercase</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    string <span class="token operator">==</span> string<span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;HELLO, WORLD&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">isUppercase</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An alternative is to write a second name before the first: one to use externally, and one internally:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printTimesTables</span><span class="token punctuation">(</span><span class="token keyword">for</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i <span class="token operator">*</span> number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">printTimesTables</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code <code>for</code> is used externally, and <code>number</code> is used internally.</p></details><hr><h2 id="providing-default-values-for-parameters" tabindex="-1"><a class="header-anchor" href="#providing-default-values-for-parameters"><span>Providing default values for parameters</span></a></h2><details class="hint-container details"><summary>Providing default values for parameters</summary><p>We can provide default parameter values by writing an equals after the type then providing a value, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> formal<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> formal <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can call <code>greet()</code> in two ways:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tim&quot;</span></span><span class="token punctuation">,</span> formal<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="handling-errors-in-functions" tabindex="-1"><a class="header-anchor" href="#handling-errors-in-functions"><span>Handling errors in functions</span></a></h2><details class="hint-container details"><summary>Handling errors in functions</summary><p>To handle errors in functions you need to tell Swift which errors can happen, write a function that can throw errors, then call it and handle any problems.</p><p>First, define the errors that can occur:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">PasswordError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> short<span class="token punctuation">,</span> obvious</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, write a function that can throw errors. This is done by placing <code>throws</code> into the function&#39;s type, then by using <code>throw</code> to trigger specific errors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">checkPassword</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> password<span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token class-name">PasswordError</span><span class="token punctuation">.</span>short</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token class-name">PasswordError</span><span class="token punctuation">.</span>obvious</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> password<span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Good&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now call the throwing function by starting a <code>do</code> block, calling the function using <code>try</code>, then catching errors that occur:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Rating: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token class-name">PasswordError</span><span class="token punctuation">.</span>obvious <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I have the same combination on my luggage!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;There was an error.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When it comes to catching errors, you must always have a <code>catch</code> block that can handle every kind of error.</p></details><hr><h2 id="closures" tabindex="-1"><a class="header-anchor" href="#closures"><span>Closures</span></a></h2><details class="hint-container details"><summary>Closures</summary><p>You can assign functionality directly to a constant or variable like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi there!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code, <code>sayHello</code> is a closure ‚Äì a chunk of code we can pass around and call whenever we want. If you want the closure to accept parameters, they must be written inside the braces:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Hi </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>in</code> is used to mark the end of the parameters and return type ‚Äì everything after that is the body of the closure itself.</p><p>Closures are used extensively in Swift. For example, there&#39;s an array method called <code>filter()</code> that runs all elements of the array through a test, and any that return true for the test get returned in a new array.</p><p>We can provide that test using a closure, so we could filter an array to include only names that begin with T:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> team <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Gloria&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tiffany&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tasha&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> onlyT <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;T&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside the closure we list the parameter <code>filter()</code> passes us, which is a string from the array. We also say that our closure returns a Boolean, then mark the start of the closure&#39;s code by using <code>in</code> ‚Äì after that, everything else is normal function code.</p></details><hr><h2 id="trailing-closures-and-shorthand-syntax" tabindex="-1"><a class="header-anchor" href="#trailing-closures-and-shorthand-syntax"><span>Trailing closures and shorthand syntax</span></a></h2><details class="hint-container details"><summary>Trailing closures and shorthand syntax</summary><p>Swift has a few tricks up its sleeve to make closures easier to read. Here&#39;s some code that filters an array to include only names beginning with ‚ÄúT‚Äù:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> team <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Gloria&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tiffany&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tasha&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> onlyT <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;T&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>onlyT<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Immediately you can see that the body of the closure has just a single line of code, so we can remove <code>return</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> onlyT <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token keyword">in</span></span>
<span class="line">    name<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;T&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>filter()</code> must be given a function that accepts one item from its array, and returns true if it should be in the returned array.</p><p>Because the function we pass in <em>must</em> behave like that, we don&#39;t need to specify the types in our closure. So, we can rewrite the code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> onlyT <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token keyword">in</span></span>
<span class="line">    name<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;T&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can go further using special syntax called <em>trailing closure syntax</em>, which looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> onlyT <span class="token operator">=</span> team<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> name <span class="token keyword">in</span></span>
<span class="line">    name<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;T&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, Swift can provide short parameter names for us so we don&#39;t even write <code>name in</code> any more, and instead rely on a specially named value provided for us: <code>$0</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> onlyT <span class="token operator">=</span> team<span class="token punctuation">.</span>filter <span class="token punctuation">{</span></span>
<span class="line">    <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;T&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="structs" tabindex="-1"><a class="header-anchor" href="#structs"><span>Structs</span></a></h2><details class="hint-container details"><summary>Structs</summary><p>Structs let us create our own custom data types, complete with their own properties and methods:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Album</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> artist<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> isReleased <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">title</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> by </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">artist</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> red <span class="token operator">=</span> <span class="token class-name">Album</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> artist<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>red<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">red<span class="token punctuation">.</span><span class="token function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we create instances of structs we do so using an <em>initializer</em> ‚Äì Swift lets us treat our struct like a function, passing in parameters for each of its properties. It silently generates this <em>memberwise initializer</em> based on the struct&#39;s properties.</p><p>If you want to have a struct&#39;s method change one of its properties, mark it as <em>mutating</em>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">removeFromSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    isReleased <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="computed-properties" tabindex="-1"><a class="header-anchor" href="#computed-properties"><span>Computed properties</span></a></h2><details class="hint-container details"><summary>Computed properties</summary><p>A computed property calculates its value every time it&#39;s accessed. For example, we could write an <code>Employee</code> struct that tracks how many days of vacation remained for that employee:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> vacationAllocated <span class="token operator">=</span> <span class="token number">14</span></span>
<span class="line">    <span class="token keyword">var</span> vacationTaken <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> vacationRemaining<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        vacationAllocated <span class="token operator">-</span> vacationTaken</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To be able to write to <code>vacationRemaining</code> we need to provide both a <em>getter</em> and a <em>setter</em>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> vacationRemaining<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token punctuation">{</span></span>
<span class="line">        vacationAllocated <span class="token operator">-</span> vacationTaken</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">set</span> <span class="token punctuation">{</span></span>
<span class="line">        vacationAllocated <span class="token operator">=</span> vacationTaken <span class="token operator">+</span> newValue</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>newValue</code> is provided by Swift, and stores whatever value the user was assigning to the property.</p></details></details><hr><h2 id="property-observers" tabindex="-1"><a class="header-anchor" href="#property-observers"><span>Property observers</span></a></h2><details class="hint-container details"><summary>Property observers</summary><p>Property observers are pieces of code that run when properties change: <code>didSet</code> runs when the property just changed, and <code>willSet</code> runs <em>before</em> the property changed.</p><p>We could demonstrate <code>didSet</code> by making a <code>Game</code> struct print a message when the score changes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Score is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> game <span class="token operator">=</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">10</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">-=</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="custom-initializers" tabindex="-1"><a class="header-anchor" href="#custom-initializers"><span>Custom initializers</span></a></h2><details class="hint-container details"><summary>Custom initializers</summary><p>Initializers are special functions that prepare a new struct instance to be used, ensuring all properties have an initial value.</p><p>Swift generates one based on the struct&#39;s properties, but you can create your own:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        number <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">99</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Important</strong>: Initializers don&#39;t have <code>func</code> before them, and don&#39;t explicitly return a value.</p></details><hr><h2 id="access-control" tabindex="-1"><a class="header-anchor" href="#access-control"><span>Access control</span></a></h2><details class="hint-container details"><summary>Access control</summary><p>Swift has several options for access control inside structs, but four are the most common:</p><ul><li>Use <code>private</code> for ‚Äúdon&#39;t let anything outside the struct use this.‚Äù</li><li>Use <code>private(set)</code> for ‚Äúanything outside the struct can read this, but don&#39;t let them change it.‚Äù</li><li>Use <code>fileprivate</code> for ‚Äúdon&#39;t let anything outside the current file use this.‚Äù</li><li>Use <code>public</code> for ‚Äúlet anyone, anywhere use this.‚Äù</li></ul><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">BankAccount</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> funds <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">deposit</span><span class="token punctuation">(</span>amount<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        funds <span class="token operator">+=</span> amount</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">withdraw</span><span class="token punctuation">(</span>amount<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> funds <span class="token operator">&gt;</span> amount <span class="token punctuation">{</span></span>
<span class="line">            funds <span class="token operator">-=</span> amount</span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because we used <code>private(set)</code>, reading <code>funds</code> from outside the struct is fine but writing isn&#39;t possible.</p></details><hr><h2 id="static-properties-and-methods" tabindex="-1"><a class="header-anchor" href="#static-properties-and-methods"><span>Static properties and methods</span></a></h2><details class="hint-container details"><summary>Static properties and methods</summary><p>Swift supports static properties and methods, allowing you to add a property or method directly to the struct itself rather than to one instance of the struct:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">AppData</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">let</span> version <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;1.3 beta 2&quot;</span></span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">let</span> settings <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;settings.json&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using this approach, everywhere we need to check or display something like the app&#39;s version number we can read <code>AppData.version</code>.</p></details><hr><h2 id="classes" tabindex="-1"><a class="header-anchor" href="#classes"><span>Classes</span></a></h2><details class="hint-container details"><summary>Classes</summary><p>Classes let us create custom data types, and are different from structs in five ways.</p><p>The first difference is that we can create classes by inheriting functionality from other classes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> hours<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>hours<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>hours <span class="token operator">=</span> hours</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I work </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hours</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> hours a day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Developer</span><span class="token punctuation">:</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m coding for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hours</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> hours.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> novall <span class="token operator">=</span> <span class="token class-name">Developer</span><span class="token punctuation">(</span>hours<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">novall<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">novall<span class="token punctuation">.</span><span class="token function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a child class wants to change a method from a parent class, it must use override:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I spend </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hours</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> hours a day searching Stack Overflow.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second difference is that initializers are more tricky with classes. There&#39;s a lot of complexity here, but there are three key points:</p><ol><li><mark>Swift won&#39;t generate a memberwise initializer for classes.</mark></li><li>If a child class has custom initializers, it must always call the <em>parent&#39;s</em> initializer after it has finished setting up its own properties.</li><li>If a subclass <em>doesn&#39;t</em> have any initializers, it automatically inherits the initializers of its parent class.</li></ol><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> isElectric<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>isElectric<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>isElectric <span class="token operator">=</span> isElectric</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> isConvertible<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>isElectric<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">,</span> isConvertible<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>isConvertible <span class="token operator">=</span> isConvertible</span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>isElectric<span class="token punctuation">:</span> isElectric<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>super</code> allows us to call up to methods that belong to our parent class, such as its initializer.</p><p>The third difference is that all copies of a class instance share their data, meaning that changes you make to one will automatically change other copies.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Singer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Adele&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> singer1 <span class="token operator">=</span> <span class="token class-name">Singer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> singer2 <span class="token operator">=</span> singer1</span>
<span class="line">singer2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Justin&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>singer1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>singer2<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print ‚ÄúJustin‚Äù for both ‚Äì even though we only changed one of them, the other also changed. In comparison, struct copies <em>don&#39;t</em> share their data.</p><p>The fourth difference is that classes can have a <em>deinitializer</em> that gets called when the last reference to an object is destroyed.</p><p>So, we could create a class that prints a message when it&#39;s created and destroyed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id</span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: I&#39;m alive!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">deinit</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: I&#39;m dead!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: I&#39;m in control!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The final difference is that classes let us change variable properties even when the class itself is constant:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a result of this, classes don&#39;t need the <code>mutating</code> keyword with methods that change their data.</p></details><hr><h2 id="protocols" tabindex="-1"><a class="header-anchor" href="#protocols"><span>Protocols</span></a></h2><details class="hint-container details"><summary>Protocols</summary><p>Protocols define functionality we expect a data type to support, and Swift ensures our code follows those rules.</p><p>For example, we could define a <code>Vehicle</code> protocol like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">protocol</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">estimateTime</span><span class="token punctuation">(</span><span class="token keyword">for</span> distance<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That lists the required methods for this protocol to work, but doesn&#39;t contain any code ‚Äì we&#39;re specifying only method names, parameters, and return types.</p><p>Once you have a protocol you can make data types conform to it by implementing the required functionality. For example, we could make a <code>Car</code> struct that conforms to <code>Vehicle</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">estimateTime</span><span class="token punctuation">(</span><span class="token keyword">for</span> distance<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        distance <span class="token operator">/</span> <span class="token number">50</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m driving </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">distance</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">km.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All the methods listed in <code>Vehicle</code> must exist <em>exactly</em> in <code>Car</code>, with the same name, parameters, and return types.</p><p>Now you can write a function that accepts any kind of type that conforms to <code>Vehicle</code>, because Swift knows it implements both <code>estimateTime()</code> and <code>travel()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">commute</span><span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> using vehicle<span class="token punctuation">:</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> vehicle<span class="token punctuation">.</span><span class="token function">estimateTime</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> distance<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Too slow!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        vehicle<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span>distance<span class="token punctuation">:</span> distance<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">commute</span><span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> using<span class="token punctuation">:</span> car<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Protocols can also require properties, so we could require properties for how many seats vehicles have and how many passengers they currently have:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">protocol</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> currentPassengers<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">estimateTime</span><span class="token punctuation">(</span><span class="token keyword">for</span> distance<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>distance<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That adds two properties: one marked with <code>get</code> that might be a constant or computed property, and one marked with <code>get</code> <code>set</code> that might be a variable or a computed property with a getter and setter.</p><p>Now all conforming types must add implementations of those two properties, like this for <code>Car</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Car&quot;</span></span></span>
<span class="line"><span class="token keyword">var</span> currentPassengers <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: You can conform to as many protocols as you need, just by listing them separated with a comma.</p></details><hr><h2 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions"><span>Extensions</span></a></h2><details class="hint-container details"><summary>Extensions</summary><p>Extensions let us add functionality to any type. For example, Swift&#39;s strings have a method for trimming whitespace and new lines, but it&#39;s quite long so we could turn it into an extension:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">trimmingCharacters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whitespacesAndNewlines<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> quote <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;   The truth is rarely pure and never simple   &quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> trimmed <span class="token operator">=</span> quote<span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to change a value directly rather than returning a new value, mark your method as <code>mutating</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">quote<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Extensions can also add computed properties to types, like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> lines<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span>separatedBy<span class="token punctuation">:</span> <span class="token punctuation">.</span>newlines<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>components(separatedBy:)</code> method splits a string into an array of strings using a boundary of our choosing, which in this case is new lines.</p><p>We can now use that property with all strings:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> lyrics <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">But I keep cruising</span>
<span class="line">Can&#39;t stop, won&#39;t stop moving</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>lyrics<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="protocol-extensions" tabindex="-1"><a class="header-anchor" href="#protocol-extensions"><span>Protocol extensions</span></a></h2><details class="hint-container details"><summary>Protocol extensions</summary><p>Protocol extensions extend a whole protocol to add computed properties and method implementations, so any types conforming to that protocol get them.</p><p>For example, <code>Array</code>, <code>Dictionary</code>, and <code>Set</code> all conform to the Collection protocol, so we can add a computed property to all three of them like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Collection</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> isNotEmpty<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        isEmpty <span class="token operator">==</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can put it to use:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> guests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Mario&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Luigi&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Peach&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> guests<span class="token punctuation">.</span>isNotEmpty <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Guest count: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">guests<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach means we can list required methods in a protocol, then add default implementations of those inside a protocol extension. All conforming types then get to use those default implementations, or provide their own as needed.</p></details><hr><h2 id="optionals" tabindex="-1"><a class="header-anchor" href="#optionals"><span>Optionals</span></a></h2><details class="hint-container details"><summary>Optionals</summary><p>Optionals represent the absence of data ‚Äì for example, they distinguish between an integer having the value 0, and having no value at all.</p><p>To see optionals in action, think about this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> opposites <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Mario&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Wario&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Luigi&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Waluigi&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> peachOpposite <span class="token operator">=</span> opposites<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Peach&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That attempts to read the value attached to the key ‚ÄúPeach‚Äù, which doesn&#39;t exist, so this can&#39;t be a regular string. Swift&#39;s solution is called <em>optionals</em>, which means data that might be present or might not.</p><p>An optional string might have a string waiting inside for us, or there might be nothing at all ‚Äì a special value called <code>nil</code>, that means ‚Äúno value‚Äù. Any kind of data can be optional, including <code>Int</code>, <code>Double</code>, and <code>Bool</code>, as well as instances of enums, structs, and classes.</p><p>Swift won&#39;t let us use optional data directly, because it might be empty. That means we need to <em>unwrap</em> the optional to use it ‚Äì we need to look inside to see if there&#39;s a value, and, if there is, take it out and use it.</p><p>Swift gives us several ways of unwrapping optionals, but the one you&#39;ll see most looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> marioOpposite <span class="token operator">=</span> opposites<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Mario&quot;</span></span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Mario&#39;s opposite is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">marioOpposite</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That reads the optional value from the dictionary, and if it has a string inside it gets <em>unwrapped</em> ‚Äì the string inside gets placed into the <code>marioOpposite</code> constant, and isn&#39;t optional any more. Because we were able to unwrap the optional, the condition is a success so the <code>print()</code> code is run.</p></details><hr><h2 id="unwrapping-optionals-with-guard" tabindex="-1"><a class="header-anchor" href="#unwrapping-optionals-with-guard"><span>Unwrapping optionals with guard</span></a></h2><details class="hint-container details"><summary>Unwrapping optionals with guard</summary><p>Swift has a second way of unwrapping optionals, called <code>guard let</code>, which is very similar to <code>if let</code> except it flips things around: <code>if let</code> runs the code inside its braces if the optional had a value, and <code>guard let</code> runs the code if the optional <em>didn&#39;t</em> have a value.</p><p>It looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printSquare</span><span class="token punctuation">(</span>of number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> number <span class="token operator">=</span> number <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Missing input&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number <span class="token operator">*</span> number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use <code>guard</code> to check a function&#39;s inputs are valid, Swift requires you to use <code>return</code> if the check fails. However, if the optional you&#39;re unwrapping has a value inside, you can use it <em>after</em> the <code>guard</code> code finishes.</p><p><strong>Tip</strong>: You can use guard with any condition, including ones that don&#39;t unwrap optionals.</p><p>::</p><hr><h2 id="nil-coalescing" tabindex="-1"><a class="header-anchor" href="#nil-coalescing"><span>Nil coalescing</span></a></h2><details class="hint-container details"><summary>Nil coalescing</summary><p>Swift has a third way of unwrapping optionals, called the <em>nil coalescing operator</em> ‚Äì it unwraps an optional and provides a default value if the optional was empty:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tvShows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Archer&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Babylon 5&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ted Lasso&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> favorite <span class="token operator">=</span> tvShows<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;None&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The nil coalescing operator is useful in many places optionals are created. For example, creating an integer from a string returns an optional <code>Int?</code> because the conversion might have failed. Here we can use nil coalescing to provide a default value:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></details><hr><h2 id="optional-chaining" tabindex="-1"><a class="header-anchor" href="#optional-chaining"><span>Optional chaining</span></a></h2><details class="hint-container details"><summary>Optional chaining</summary><p>Optional chaining reads optionals inside optionals, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Arya&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Bran&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Robb&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Sansa&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> chosen <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Next in line: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">chosen <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;No one&quot;</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Optional chaining is there on line 2: a question mark followed by more code. It allows us to say ‚Äúif the optional has a value inside, unwrap it then‚Ä¶‚Äù and add more code. In our case we&#39;re saying ‚Äúif we got a random element from the array, uppercase it.‚Äù</p></details><hr><h2 id="optional-try" tabindex="-1"><a class="header-anchor" href="#optional-try"><span>Optional try?</span></a></h2><details class="hint-container details"><summary>Optional try?</summary><p>When calling a function that might throw errors, we can use <code>try?</code> to convert its result into an optional containing a value on success, or <code>nil</code> otherwise.</p><p>Here&#39;s how it looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">UserError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> badID<span class="token punctuation">,</span> networkFailed</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token class-name">UserError</span><span class="token punctuation">.</span>networkFailed</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>getUser()</code> function will always throw <code>networkFailed</code>, but we don&#39;t care <em>what</em> was thrown ‚Äì all we care about is whether the call sent back a user or not.</p></details><hr><h2 id="wrap-up" tabindex="-1"><a class="header-anchor" href="#wrap-up"><span>Wrap up</span></a></h2><p>We&#39;ve covered the majority of Swift language fundamentals here, but really we&#39;ve only scratched the surface of what the language does. Fortunately, with what you&#39;ve learned you already know enough to build some fantastic software with Swift and SwiftUI.</p><p>If you&#39;re keen to continue your learning, I suggest you visit my <a href="https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/README.md" target="_blank" rel="noopener noreferrer">100 Days of SwiftUI</a> course, which teaches you how to build fantastic apps for iOS using Swift ‚Äì it&#39;s all free, and has hundreds of videos too.</p>`,109);function I(i,_){const l=p("VPCard"),e=p("router-link"),o=p("SiteInfo"),c=p("VidStack");return h(),u("div",null,[n("h1",b,[n("a",f,[n("span",null,d(i.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),s(l,k(m({title:"Swift > Article(s)",desc:"Article(s)",link:"/programming/swift/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[s(e,{to:"#creating-constants-and-variables"},{default:t(()=>[a("Creating constants and variables")]),_:1})]),n("li",null,[s(e,{to:"#strings"},{default:t(()=>[a("Strings")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#integers"},{default:t(()=>[a("Integers")]),_:1})])])]),n("li",null,[s(e,{to:"#decimals"},{default:t(()=>[a("Decimals")]),_:1})]),n("li",null,[s(e,{to:"#booleans"},{default:t(()=>[a("Booleans")]),_:1})]),n("li",null,[s(e,{to:"#joining-strings"},{default:t(()=>[a("Joining strings")]),_:1})]),n("li",null,[s(e,{to:"#arrays"},{default:t(()=>[a("Arrays")]),_:1})]),n("li",null,[s(e,{to:"#dictionaries"},{default:t(()=>[a("Dictionaries")]),_:1})]),n("li",null,[s(e,{to:"#sets"},{default:t(()=>[a("Sets")]),_:1})]),n("li",null,[s(e,{to:"#enums"},{default:t(()=>[a("Enums")]),_:1})]),n("li",null,[s(e,{to:"#type-annotations"},{default:t(()=>[a("Type annotations")]),_:1})]),n("li",null,[s(e,{to:"#conditions"},{default:t(()=>[a("Conditions")]),_:1})]),n("li",null,[s(e,{to:"#switch-statements"},{default:t(()=>[a("Switch statements")]),_:1})]),n("li",null,[s(e,{to:"#the-ternary-conditional-operator"},{default:t(()=>[a("The ternary conditional operator")]),_:1})]),n("li",null,[s(e,{to:"#loops"},{default:t(()=>[a("Loops")]),_:1})]),n("li",null,[s(e,{to:"#functions"},{default:t(()=>[a("Functions")]),_:1})]),n("li",null,[s(e,{to:"#returning-multiple-values-from-functions"},{default:t(()=>[a("Returning multiple values from functions")]),_:1})]),n("li",null,[s(e,{to:"#customizing-parameter-labels"},{default:t(()=>[a("Customizing parameter labels")]),_:1})]),n("li",null,[s(e,{to:"#providing-default-values-for-parameters"},{default:t(()=>[a("Providing default values for parameters")]),_:1})]),n("li",null,[s(e,{to:"#handling-errors-in-functions"},{default:t(()=>[a("Handling errors in functions")]),_:1})]),n("li",null,[s(e,{to:"#closures"},{default:t(()=>[a("Closures")]),_:1})]),n("li",null,[s(e,{to:"#trailing-closures-and-shorthand-syntax"},{default:t(()=>[a("Trailing closures and shorthand syntax")]),_:1})]),n("li",null,[s(e,{to:"#structs"},{default:t(()=>[a("Structs")]),_:1})]),n("li",null,[s(e,{to:"#property-observers"},{default:t(()=>[a("Property observers")]),_:1})]),n("li",null,[s(e,{to:"#custom-initializers"},{default:t(()=>[a("Custom initializers")]),_:1})]),n("li",null,[s(e,{to:"#access-control"},{default:t(()=>[a("Access control")]),_:1})]),n("li",null,[s(e,{to:"#static-properties-and-methods"},{default:t(()=>[a("Static properties and methods")]),_:1})]),n("li",null,[s(e,{to:"#classes"},{default:t(()=>[a("Classes")]),_:1})]),n("li",null,[s(e,{to:"#protocols"},{default:t(()=>[a("Protocols")]),_:1})]),n("li",null,[s(e,{to:"#extensions"},{default:t(()=>[a("Extensions")]),_:1})]),n("li",null,[s(e,{to:"#protocol-extensions"},{default:t(()=>[a("Protocol extensions")]),_:1})]),n("li",null,[s(e,{to:"#optionals"},{default:t(()=>[a("Optionals")]),_:1})]),n("li",null,[s(e,{to:"#unwrapping-optionals-with-guard"},{default:t(()=>[a("Unwrapping optionals with guard")]),_:1})]),n("li",null,[s(e,{to:"#optional-chaining"},{default:t(()=>[a("Optional chaining")]),_:1})]),n("li",null,[s(e,{to:"#optional-try"},{default:t(()=>[a("Optional try?")]),_:1})]),n("li",null,[s(e,{to:"#wrap-up"},{default:t(()=>[a("Wrap up")]),_:1})])])]),y,s(o,{name:"HACKING WITH SWIFT",desc:"Learn essential Swift in one hour",url:"https://hackingwithswift.com/articles/242/learn-essential-swift-in-one-hour",logo:"https://hackingwithswift.com/favicon.svg",preview:"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"}),q,x,S,j,s(c,{src:"youtube/n5X_V81OYnQ"}),T])}const P=r(g,[["render",I],["__file","learn-essential-swift-in-one-hour.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/learn-essential-swift-in-one-hour.html","title":"Learn essential Swift in one hour","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Learn essential Swift in one hour","description":"Article(s) > Learn essential Swift in one hour","icon":"fa-brands fa-swift","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","ios","xcode"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Learn essential Swift in one hour"},{"property":"og:description","content":"Learn essential Swift in one hour"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/learn-essential-swift-in-one-hour.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/learn-essential-swift-in-one-hour.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Learn essential Swift in one hour"}],["meta",{"property":"og:description","content":"Article(s) > Learn essential Swift in one hour"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"}],["meta",{"name":"twitter:image:alt","content":"Learn essential Swift in one hour"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:published_time","content":"2022-01-31T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Learn essential Swift in one hour\\",\\"image\\":[\\"https://hackingwithswift.com/uploads/swift-evolution-5.jpg\\"],\\"datePublished\\":\\"2022-01-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/swift/articles/README.md","date":"2022-01-31T00:00:00.000Z","isOriginal":false,"cover":"https://hackingwithswift.com/uploads/swift-evolution-5.jpg"},"headers":[{"level":2,"title":"Creating constants and variables","slug":"creating-constants-and-variables","link":"#creating-constants-and-variables","children":[]},{"level":2,"title":"Strings","slug":"strings","link":"#strings","children":[{"level":3,"title":"Integers","slug":"integers","link":"#integers","children":[]}]},{"level":2,"title":"Decimals","slug":"decimals","link":"#decimals","children":[]},{"level":2,"title":"Booleans","slug":"booleans","link":"#booleans","children":[]},{"level":2,"title":"Joining strings","slug":"joining-strings","link":"#joining-strings","children":[]},{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[]},{"level":2,"title":"Dictionaries","slug":"dictionaries","link":"#dictionaries","children":[]},{"level":2,"title":"Sets","slug":"sets","link":"#sets","children":[]},{"level":2,"title":"Enums","slug":"enums","link":"#enums","children":[]},{"level":2,"title":"Type annotations","slug":"type-annotations","link":"#type-annotations","children":[]},{"level":2,"title":"Conditions","slug":"conditions","link":"#conditions","children":[]},{"level":2,"title":"Switch statements","slug":"switch-statements","link":"#switch-statements","children":[]},{"level":2,"title":"The ternary conditional operator","slug":"the-ternary-conditional-operator","link":"#the-ternary-conditional-operator","children":[]},{"level":2,"title":"Loops","slug":"loops","link":"#loops","children":[]},{"level":2,"title":"Functions","slug":"functions","link":"#functions","children":[]},{"level":2,"title":"Returning multiple values from functions","slug":"returning-multiple-values-from-functions","link":"#returning-multiple-values-from-functions","children":[]},{"level":2,"title":"Customizing parameter labels","slug":"customizing-parameter-labels","link":"#customizing-parameter-labels","children":[]},{"level":2,"title":"Providing default values for parameters","slug":"providing-default-values-for-parameters","link":"#providing-default-values-for-parameters","children":[]},{"level":2,"title":"Handling errors in functions","slug":"handling-errors-in-functions","link":"#handling-errors-in-functions","children":[]},{"level":2,"title":"Closures","slug":"closures","link":"#closures","children":[]},{"level":2,"title":"Trailing closures and shorthand syntax","slug":"trailing-closures-and-shorthand-syntax","link":"#trailing-closures-and-shorthand-syntax","children":[]},{"level":2,"title":"Structs","slug":"structs","link":"#structs","children":[]},{"level":2,"title":"Property observers","slug":"property-observers","link":"#property-observers","children":[]},{"level":2,"title":"Custom initializers","slug":"custom-initializers","link":"#custom-initializers","children":[]},{"level":2,"title":"Access control","slug":"access-control","link":"#access-control","children":[]},{"level":2,"title":"Static properties and methods","slug":"static-properties-and-methods","link":"#static-properties-and-methods","children":[]},{"level":2,"title":"Classes","slug":"classes","link":"#classes","children":[]},{"level":2,"title":"Protocols","slug":"protocols","link":"#protocols","children":[]},{"level":2,"title":"Extensions","slug":"extensions","link":"#extensions","children":[]},{"level":2,"title":"Protocol extensions","slug":"protocol-extensions","link":"#protocol-extensions","children":[]},{"level":2,"title":"Optionals","slug":"optionals","link":"#optionals","children":[]},{"level":2,"title":"Unwrapping optionals with guard","slug":"unwrapping-optionals-with-guard","link":"#unwrapping-optionals-with-guard","children":[]},{"level":2,"title":"Optional chaining","slug":"optional-chaining","link":"#optional-chaining","children":[]},{"level":2,"title":"Optional try?","slug":"optional-try","link":"#optional-try","children":[]},{"level":2,"title":"Wrap up","slug":"wrap-up","link":"#wrap-up","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":16.86,"words":5057},"filePathRelative":"hackingwithswift.com/learn-essential-swift-in-one-hour.md","localizedDate":"2022ÎÖÑ 1Ïõî 31Ïùº","excerpt":"\\n"}');export{P as comp,E as data};
