import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as c,e as t,n as a,g as e,f as l,r as p,o as u}from"./app-BgNevrm5.js";const d={},h={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},m=s("nav",{class:"table-of-contents"},[s("ul")],-1),w=s("hr",null,null,-1),g=l(`<blockquote><p>Available from Swift 2.0</p></blockquote><p><code>try/catch</code> is a way of programming that means &quot;try this thing, but if it fails do this other thing instead.&quot; Swift uses enums for error types so that it can ensure your error catching is exhaustive, just like with <code>switch</code> statements. So for example, you might define your error list something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">MyError</span><span class="token punctuation">:</span> <span class="token class-name">ErrorType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">UserError</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">NetworkError</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">DiscoverydError</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how my error type builds on the built-in <code>ErrorType</code> protocol; this is required. Once you&#39;ve defined the various errors you want to work with, it&#39;s time to introduce three new keywords: <code>throws</code>, <code>try</code>, <code>do</code> and <code>catch</code>. First up, <code>throws</code> is a simple keyword that you add to your method to tell Swift it might fail. You put it right before where you put your method&#39;s return type, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Once that&#39;s done, you cannot call that method unless your code is written to handle any errors it throws – Xcode simply won&#39;t compile. When you want to throw an error from inside your methods, you just write <code>throw</code> followed by the type of error you want to throw, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Do stuff 1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Do stuff 2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token class-name">MyError</span><span class="token punctuation">.</span><span class="token class-name">NetworkError</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Some return value&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The dummy <code>print()</code> calls are there so you can follow the program flow, as you&#39;ll see in a moment. But first, on to the next keyword: <code>try</code>. This is placed before any call to a method that throws an error, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This literally writes into your code &quot;I acknowledge that this code might fail,&quot; so it&#39;s effectively syntactic sugar to ensure safety. But even with that your code still won&#39;t compile, because you don&#39;t catch the errors: you need to use <code>do</code> and <code>catch</code>. Catching errors has two forms: catching specific errors and catching all errors. You can mix and match, meaning your code can say &quot;if the error is X, I want to handle it like this; all other errors should be handled this other way.&quot; Here&#39;s a very basic example showing how to catch all errors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Success&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;An error occurred.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you remember, we made the <code>doStuff()</code> method print &quot;Do stuff 1&quot; then &quot;Do stuff 2&quot; before throwing a network error. So, what will happen is:</p><ul><li>&quot;Do stuff 1&quot; will be printed</li><li>&quot;Do stuff 2&quot; will be printed</li><li>The NetworkError error will be thrown, immediately exiting the <code>doStuff()</code> method – its return statement will never be reached</li><li>Control will jump to the <code>catch</code> block</li><li>&quot;An error occurred&quot; will be printed</li></ul><p>To be clear: in the code above, &quot;Success&quot; will never be printed – as soon as any <code>try</code> methods throw an error, execution stops and jumps to the <code>catch</code> block. As I said, you can mix and match generic and specific <code>catch</code> blocks, but you do need to be sure that all possible errors are caught. For example, this will execute one chunk of code for NetworkError errors, and another chunk for all other errors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Success&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token class-name">MyError</span><span class="token punctuation">.</span><span class="token class-name">NetworkError</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A network error occurred&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;An error occurred&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),f={class:"hint-container details"},y=s("summary",null,"Other changes in Swift 2.0…",-1);function v(o,b){const n=p("VPCard");return u(),r("div",null,[s("h1",h,[s("a",k,[s("span",null,c(o.$frontmatter.title)+" 관련",1)])]),t(n,a(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),m,w,t(n,a(e({title:"Throwing errors | Changes in Swift 2.0",desc:"Throwing errors",link:"https://hackingwithswift.com/swift/2.0/try",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,s("details",f,[y,t(n,a(e({title:"Use the guard keyword for early returns | Changes in Swift 2.0",desc:"Use the guard keyword for early returns",link:"/hackingwithswift.com/swift/2.0/guard.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(n,a(e({title:"Measure strings using their character count | Changes in Swift 2.0",desc:"Measure strings using their character count",link:"/hackingwithswift.com/swift/2.0/strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(n,a(e({title:"Use the defer keyword to delay work until your scope exits | Changes in Swift 2.0",desc:"Use the defer keyword to delay work until your scope exits",link:"/hackingwithswift.com/swift/2.0/defer.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(n,a(e({title:"Mutability warnings | Changes in Swift 2.0",desc:"Mutability warnings",link:"/hackingwithswift.com/swift/2.0/mutability.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(n,a(e({title:"Checking API availability | Changes in Swift 2.0",desc:"Checking API availability",link:"/hackingwithswift.com/swift/2.0/api-availability.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const _=i(d,[["render",v],["__file","try.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swift/2.0/try.html","title":"Throwing errors","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Throwing errors","description":"Article(s) > Throwing errors","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-2.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Throwing errors"},{"property":"og:description","content":"Throwing errors"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/2.0/try.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/2.0/try.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Throwing errors"}],["meta",{"property":"og:description","content":"Article(s) > Throwing errors"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-2.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Throwing errors\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swift/2.1/string-interpolation.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.65,"words":796},"filePathRelative":"hackingwithswift.com/swift/2.0/try.md","excerpt":"\\n"}');export{_ as comp,x as data};
