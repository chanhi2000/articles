import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as s,e as a,n,g as r,a as o,r as p,o as h}from"./app-BgNevrm5.js";const m={},u={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),d=t("hr",null,null,-1),w=t("blockquote",null,[t("p",null,"Available from iOS 13.0")],-1),b=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),o(`
/example-code/language/how-to-conform-to-the-hashable-protocol">How to conform to the Hashable protocol 
/example-code/language/how-to-conform-to-the-comparable-protocol">How to conform to the Comparable protocol 
/quick-start/swiftui/how-to-fix-referencing-initializer-initwrappedvalue-on-observedobject-requires-that-sometype-conform-to-observableobject">How to fix ‚ÄúReferencing initializer 'init(wrappedValue:)' on 'ObservedObject' requires that ‚ÄòSomeType‚Äô conform to 'ObservableObject'" 
/quick-start/swiftui/how-to-fix-initializer-init-rowcontent-requires-that-sometype-conform-to-identifiable">How to fix ‚ÄúInitializer 'init(_:rowContent:)' requires that ‚ÄòSomeType‚Äô conform to 'Identifiable‚Äô‚Äù 
/example-code/language/how-to-constrain-a-protocol-associated-type">How to constrain a protocol associated type</a>
`)],-1);function y(i,k){const e=p("VPCard");return h(),l("div",null,[t("h1",u,[t("a",f,[t("span",null,s(i.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(e,n(r({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,d,a(e,n(r({title:"How to conform to the Equatable protocol | Language - free Swift example code",desc:"How to conform to the Equatable protocol",link:"https://hackingwithswift.com/example-code/language/how-to-conform-to-the-equatable-protocol",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,o(" TODO: ÏûëÏÑ± "),o(" \nThe `Equatable` protocol is what allows two objects to be compared using `==`, and it‚Äôs surprisingly easy to implement because Swift does most of the work for you by default.\n\nFirst, here‚Äôs a struct we can work with:\n\n```swift\nstruct Person {\n    var name: String\n    var age: String\n}\n```\n\nTo make that `Equatable` you need to add the `Equatable` conformance like this:\n\n```swift\nstruct Person: Equatable {\n    var name: String\n    var age: String\n}\n```\n\nIf you don‚Äôt want to check all properties for equality, or if any of your properties are not also `Equatable`, then you need to write your own `==` function like this:\n\n```swift\nstatic func ==(lhs: Person, rhs: Person) -> Bool {\n    return lhs.name == rhs.name && lhs.age == rhs.age\n}\n```\n\nPut that *inside* the `Person` struct. Because that‚Äôs your own function you can make it do any comparisons you like. Swift‚Äôs default `Equatable` implementation will check all properties for equality, so if you have one property that is guaranteed to be unique adding your own `Equatable` implementation is a good idea.\n\n"),b])}const x=c(m,[["render",y],["__file","how-to-conform-to-the-equatable-protocol.html.vue"]]),v=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/how-to-conform-to-the-equatable-protocol.html","title":"How to conform to the Equatable protocol","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to conform to the Equatable protocol","description":"Article(s) > How to conform to the Equatable protocol","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-13.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to conform to the Equatable protocol"},{"property":"og:description","content":"How to conform to the Equatable protocol"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-conform-to-the-equatable-protocol.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-conform-to-the-equatable-protocol.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to conform to the Equatable protocol"}],["meta",{"property":"og:description","content":"Article(s) > How to conform to the Equatable protocol"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-13.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to conform to the Equatable protocol\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.47,"words":440},"filePathRelative":"hackingwithswift.com/example-code/language/how-to-conform-to-the-equatable-protocol.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{x as comp,v as data};
