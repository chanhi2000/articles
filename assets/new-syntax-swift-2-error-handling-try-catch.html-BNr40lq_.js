import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as w,b as n,t as k,e as a,n as r,g as c,w as t,d as s,f as p,r as e,o as m}from"./app-BgNevrm5.js";const y={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=n("hr",null,null,-1),S=p(`<p>Swift works hard to make sure we can write <em>safe</em> software, which means it eliminates many opportunities for our code to fail. One of the ways it accomplishes this is by letting us catch errors when risky code doesn&#39;t run according to plan, and in this article I&#39;m going to walk through how that works and how to use it in your own code.</p><hr><h2 id="the-swift-approach-try-catch-do-and-throw" tabindex="-1"><a class="header-anchor" href="#the-swift-approach-try-catch-do-and-throw"><span>The Swift approach: try, catch, do and throw</span></a></h2><p>If we wanted to load a file from a URL into a <code>Data</code> instance, we might write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> contents<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token operator">?</span></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    contents <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> someURL<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    contents <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That illustrates three of the five new keywords you&#39;ll need to learn.</p><p>The fourth and fifth keywords are <code>throw</code> and <code>throws</code>, and we&#39;ll look at them in depth now.</p><p>Please create a new Xcode project, using the Single View App template. You can name it whatever you feel like, and target whatever device you want – it doesn&#39;t matter, because we&#39;re not doing anything visual here.</p>`,8),x=n("code",null,"ViewController.swift",-1),_=p(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">encrypt</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> str<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> withPassword password<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// complicated encryption goes here</span></span>
<span class="line">    <span class="token keyword">let</span> encrypted <span class="token operator">=</span> password <span class="token operator">+</span> str <span class="token operator">+</span> password</span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That method is going to encrypt an string using the password that gets sent in. Well, it&#39;s not <em>actually</em> going to do that – this article isn&#39;t about encryption, so my &quot;encryption&quot; algorithm is pathetic: it puts the password before and after the input string, then reverses it. You&#39;re welcome to add the complex encryption algorithm yourself later on!</p><p>Modify <code>viewDidLoad()</code> to call that method by adding this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> encrypted <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;secret information!&quot;</span></span><span class="token punctuation">,</span> withPassword<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When you run your app now, you&#39;ll see &quot;54321!noitamrofni terces54321&quot; printed out in the Xcode terminal. Easy, right?</p><p>But there&#39;s a problem: assuming you actually do put in a meaningful encryption algorithm, there&#39;s nothing stopping users from entering an empty string for a password, entering obvious passwords such as &quot;password&quot;, or even trying to call the encryption method without any data to encrypt!</p><p>Swift comes to the rescue: you can tell Swift that this method can throw an error if it finds itself in an unacceptable state, such as if the password is six or fewer characters. Those errors are defined by you, and Swift goes some way to ensuring you catch them all.</p><p>To get started, we need the <code>throws</code> keyword, which you add to your method definition before its return value, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">encrypt</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> str<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> withPassword password<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// complicated encryption goes here</span></span>
<span class="line">    <span class="token keyword">let</span> encrypted <span class="token operator">=</span> password <span class="token operator">+</span> str <span class="token operator">+</span> password</span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As soon as you do that, your code stops working: adding <code>throws</code> has actually made things worse! But it&#39;s worse for a good reason: Swift&#39;s <code>try/catch</code> system is designed to be clear to developers, which means you need to mark any methods that can throw using the <code>try</code> keyword, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> encrypted <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;secret information!&quot;</span></span><span class="token punctuation">,</span> withPassword<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>…but even now your code won&#39;t compile, because you haven&#39;t told Swift what to do when an error is thrown. This is where the <code>do</code> and <code>catch</code> keywords come in: they start a block of code that might fail, and handle those failures. In our basic example, it might look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> encrypted <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;secret information!&quot;</span></span><span class="token punctuation">,</span> withPassword<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Something went wrong!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That silences all the errors, and your code runs again. But it&#39;s not actually doing anything interesting yet, because even though we say <code>encrypt()</code> has the potential to throw an error, it never actually does.</p><hr><h2 id="how-to-throw-an-error-in-swift" tabindex="-1"><a class="header-anchor" href="#how-to-throw-an-error-in-swift"><span>How to throw an error in Swift</span></a></h2><p>Before you can throw an error, you need to make a list of all the possible errors you want to throw. In our case, we&#39;re going to stop people from providing empty passwords, short passwords and obvious passwords, but you can extend it later.</p><p>To do this, we need to create an <code>enum</code> that represents our type of error. This needs to build on the built-in <code>Error</code> enum, but otherwise it&#39;s easy. Add this before <code>class ViewController</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">EncryptionError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> empty</span>
<span class="line">    <span class="token keyword">case</span> short</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That defines our first two encryption error types, and we can start using them immediately. As these are preconditions to running the method, we&#39;re going to use the new <code>guard</code> keyword to make our intentions clear.</p><p>Put this at the start of <code>encrypt()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">guard</span> password<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token class-name">EncryptionError</span><span class="token punctuation">.</span>empty <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">guard</span> password<span class="token punctuation">.</span>count <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token class-name">EncryptionError</span><span class="token punctuation">.</span>short <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the app now nothing will have changed, because we&#39;re providing the password &quot;12345&quot;. But if you set that to an empty string, you&#39;ll see &quot;Something went wrong!&quot; printed in the Xcode console, showing the error.</p><p>Of course, having a single error message isn&#39;t helpful – there are several ways the method call can fail, and we want to provide something meaningful for each of them. So, modify the <code>try/catch</code> block in <code>viewDidLoad()</code> to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> encrypted <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;secret information!&quot;</span></span><span class="token punctuation">,</span> withPassword<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token class-name">EncryptionError</span><span class="token punctuation">.</span>empty <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You must provide a password.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token class-name">EncryptionError</span><span class="token punctuation">.</span>short <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Passwords must be at least five characters, preferably eight or more.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Something went wrong!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now there are meaningful error messages, so our code is starting to look better. But you may notice that we still need a third <code>catch</code> block in there even though we already caught both the <code>.empty</code> and <code>.short</code> cases.</p><hr><h2 id="swift-wants-exhaustive-try-catch-error-handling" tabindex="-1"><a class="header-anchor" href="#swift-wants-exhaustive-try-catch-error-handling"><span>Swift wants exhaustive try/catch error handling</span></a></h2><p>If you recall, I said &quot;Swift goes some way to ensuring you catch them all&quot; and here&#39;s where that becomes clear: we&#39;re catching both errors we defined, but Swift also wants us to define a generic catch all to handle any other errors that might occur. We don&#39;t tell Swift what kind of error our encryption method might throw, just that it throws something, so this extra catch-all block is required.</p><p>This does have one downside: if you add any future values to the enum, which we&#39;re about to do, it will just drop into the default <code>catch</code> block – you won&#39;t be asked to provide any code for it as would happen with a <code>switch/case</code> block.</p><p>We&#39;re going to add a new value to our enum now, to detect obvious passwords. But we&#39;re going to use Swift&#39;s super-powerful enums so that we can return a message along with the error type. So, modify the <code>EncryptionError</code> enum to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">EncryptionError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> empty</span>
<span class="line">    <span class="token keyword">case</span> short</span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">obvious</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now when you want to throw an error of type <code>EncryptionError.obvious</code> you must provide a reason.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">guard</span> password <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token class-name">EncryptionError</span><span class="token punctuation">.</span><span class="token function">obvious</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;ve got the same passcode on my luggage!&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,34),q=n("code",null,"guard",-1),E=p(`<p>That&#39;s our basic <code>do/try/throw/catch</code> Swift example complete. You might look at the <code>try</code> statement and think it useless, but it&#39;s primarily there to signal to developers &quot;this call might fail.&quot; This matters: when a <code>try</code> calls fails, execution immediately jumps to the <code>catch</code> blocks, so if you see <code>try</code> before a call it signals that the code beneath it might not get called.</p><p>There&#39;s one more thing to discuss, which is what to do if you know a call simply can&#39;t fail, for whatever reason. Now, clearly this is a decision you need to make on a case-by-case basic, but if you know there&#39;s absolutely no way a method call might fail, or if it did fail then your code was so fundamentally broken that you might as well crash, you can use <code>try!</code> to signal this to Swift.</p><p>When you use the <code>try!</code> keyword, you don&#39;t need to have <code>do</code> and <code>catch</code> around your code, because you&#39;re promising it won&#39;t ever fail. Instead, you can just write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> encrypted <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;secret information!&quot;</span></span><span class="token punctuation">,</span> withPassword<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Using the <code>try!</code> keyword communicates your intent clearly: you&#39;re aware there&#39;s the theoretical possibility of the call failing, but you&#39;re certain it won&#39;t happen in your use case. For example, if you&#39;re trying to load the contents of a file in your app&#39;s bundle, any failure effectively means your app bundle is damaged or unavailable, so you should terminate.</p>`,5),T=n("code",null,"try/finally",-1);function j(d,P){const o=e("VPCard"),i=e("router-link"),u=e("FontIcon"),l=e("RouteLink");return m(),w("div",null,[n("h1",g,[n("a",f,[n("span",null,k(d.$frontmatter.title)+" 관련",1)])]),a(o,r(c({title:"Swift > Article(s)",desc:"Article(s)",link:"/programming/swift/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",v,[n("ul",null,[n("li",null,[a(i,{to:"#the-swift-approach-try-catch-do-and-throw"},{default:t(()=>[s("The Swift approach: try, catch, do and throw")]),_:1})]),n("li",null,[a(i,{to:"#how-to-throw-an-error-in-swift"},{default:t(()=>[s("How to throw an error in Swift")]),_:1})]),n("li",null,[a(i,{to:"#swift-wants-exhaustive-try-catch-error-handling"},{default:t(()=>[s("Swift wants exhaustive try/catch error handling")]),_:1})])])]),b,a(o,r(c({title:"Error handling in Swift: try, catch, do and throw – Hacking with Swift",desc:"Error handling in Swift: try, catch, do and throw",link:"https://hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),S,n("p",null,[s("Select "),a(u,{icon:"fa-brands fa-swift"}),x,s(" and add this new method:")]),_,n("p",null,[s("Obviously you don't want to provide hundreds (or thousands!) of "),q,s(" statements to filter out obvious passwords, but hopefully you remember "),a(l,{to:"/hackingwithswift.com/read/05/05-checking-for-valid-answers.html"},{default:t(()=>[s("how to use UITextChecker")]),_:1}),s(" to do spell checking – that would be a smart thing here!")]),a(o,r(c({title:"Checking for valid answers | Hacking with iOS",desc:"Checking for valid answers",link:"/hackingwithswift.com/read/5/5/checking-for-valid-answers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),E,n("p",null,[s("That's all for error handling in Swift. If you'd like to learn about how Swift handles "),T,s(" you should "),a(l,{to:"/hackingwithswift.com/new-syntax-swift-2-defer.html"},{default:t(()=>[s("read my article on Swift's defer keyword")]),_:1}),s(".")])])}const R=h(y,[["render",j],["__file","new-syntax-swift-2-error-handling-try-catch.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch.html","title":"Error handling in Swift: try, catch, do and throw","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Error handling in Swift: try, catch, do and throw","description":"Error handling in Swift: try, catch, do and throw","icon":"fa-brands fa-swift","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-2.0","xcode"],"head":[[{"meta":null},{"property":"og:title","content":"Error handling in Swift: try, catch, do and throw"},{"property":"og:description","content":"Error handling in Swift: try, catch, do and throw"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Error handling in Swift: try, catch, do and throw"}],["meta",{"property":"og:description","content":"Error handling in Swift: try, catch, do and throw"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-2.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:published_time","content":"2019-09-23T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Error handling in Swift: try, catch, do and throw\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-09-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/swift/articles/README.md","date":"2019-09-23T00:00:00.000Z","isOriginal":false},"headers":[{"level":2,"title":"The Swift approach: try, catch, do and throw","slug":"the-swift-approach-try-catch-do-and-throw","link":"#the-swift-approach-try-catch-do-and-throw","children":[]},{"level":2,"title":"How to throw an error in Swift","slug":"how-to-throw-an-error-in-swift","link":"#how-to-throw-an-error-in-swift","children":[]},{"level":2,"title":"Swift wants exhaustive try/catch error handling","slug":"swift-wants-exhaustive-try-catch-error-handling","link":"#swift-wants-exhaustive-try-catch-error-handling","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.56,"words":1667},"filePathRelative":"hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch.md","localizedDate":"2019년 9월 23일","excerpt":"\\n"}');export{R as comp,A as data};
