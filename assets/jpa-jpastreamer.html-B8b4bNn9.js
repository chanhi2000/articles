import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as m,g as k,w as e,f as v,r as p,o as h,d as t}from"./app-BgNevrm5.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},w=n("hr",null,null,-1),j=v(`<h2 id="fetching-films-with-java-streams-and-jpastreamer" tabindex="-1"><a class="header-anchor" href="#fetching-films-with-java-streams-and-jpastreamer"><span>Fetching Films with Java Streams and JPAStreamer</span></a></h2><p>So far our application has not touched the database, but that is our next move. We start simple and gradually build up Stream queries that are more powerful.</p><p>Initiate this process by establishing a dedicated repository package adjacent to the existing model package. Inside this repository section, create a class named FilmRepository. As the name implies, this class will serve as the hub for our database queries. This class needs to be annotated with <code>@ApplicationScoped</code> for it to be injected into your <code>FilmResource</code> later.</p><p>Then, to start harnessing JPAStreamer, integrate it into the repository by injecting a JPAStreamer instance. This instance is your access point to the Stream query API. Here is what your class should look like at this point:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ApplicationScoped</span></span>
<span class="line"><span class="token class-name">FilmRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@Inject</span></span>
<span class="line">  <span class="token class-name">JPAStreamer</span> jpaStreamer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ... 생략 ... </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetching-an-entity-by-id" tabindex="-1"><a class="header-anchor" href="#fetching-an-entity-by-id"><span>Fetching an Entity by Id</span></a></h3><p>The first endpoint will fetch the title of a film, given an id. This will be your first opportunity to leverage JPAStreamer to perform queries. You can think of a Stream query as a virtual pipeline that is trafficked by all the Films in the database. The operations appended to the pipeline will decide what entities are allowed through, and in what shape. For example, a filter operation is the equivalent of a <code>WHERE</code> statement as it puts a logical constraint on the resulting entities.</p><p>To initiate a Stream query, you simply call the method <code>JPAStreamer.stream()</code> and provide it with a source of your choice. In this case, our source is the Film table, represented by the entity <code>Film.class</code>. The return value of this operation is a standard <code>Stream&lt;Film&gt;</code>. This means you can, in practice, apply any Stream operation available in the Stream API to manipulate the Film entities.</p><p>But not so fast - your choice of Stream operations significantly influences performance, particularly with large datasets! If you&#39;re familiar with the Stream API, you&#39;ve likely encountered numerous lambda-based examples for predicates and mappings such as this:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">getFilmId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filmId<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>However, this predicate cannot be optimized by JPAStreamer as the anonymous lambda holds too little metadata to make a correct SQL translation. Therefore, make it a habit to express predicates using the JPAStreamer metamodel. Guided by IntelliSense in your IDE, this is simple:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>filmId<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Upon execution, this operation will in fact be translated to a SQL WHERE operation to ensure that the filtering is performed in the database, not in the JVM, for efficiency.</p><p>With this knowledge, you can go ahead and create a method that fetches films based on their id as follows:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Film</span><span class="token punctuation">&gt;</span></span> <span class="token function">film</span><span class="token punctuation">(</span><span class="token keyword">int</span> filmId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> jpaStreamer<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">Film</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>filmId<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>filmId<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As before, use the <kbd>s</kbd> key to reload your application in the terminal and browse to: <code>http://localhost:8080/film/23</code></p><p>Assuming all is well, you&#39;ll be greeted by the film&#39;s title: <code>ANACONDA CONFESSIONS</code></p><p>A quick look in the application log reveals the Hibernate query that was issued by JPAStreamer, confirming the presence of a <code>WHERE</code> operation.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Hibernate:</span>
<span class="line">  select</span>
<span class="line">    f1_0.film_id,</span>
<span class="line">    f1_0.description,</span>
<span class="line">    f1_0.language_id,</span>
<span class="line">    f1_0.last_update,</span>
<span class="line">    f1_0.length,</span>
<span class="line">    f1_0.original_language_id,</span>
<span class="line">    f1_0.rating,</span>
<span class="line">    f1_0.rental_duration,</span>
<span class="line">    f1_0.rental_rate,</span>
<span class="line">    f1_0.replacement_cost,</span>
<span class="line">    f1_0.special_features,</span>
<span class="line">    f1_0.title</span>
<span class="line">  from</span>
<span class="line">    film f1_0</span>
<span class="line">  where</span>
<span class="line">    f1_0.film_id=? limit ?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="paged-queries" tabindex="-1"><a class="header-anchor" href="#paged-queries"><span>Paged Queries</span></a></h3><p>When grappling with a substantial dataset, shipping users the entire results might prove unpractical or even unfeasible. That&#39;s where paging enters the scene, limiting the result set. Leveraging Java Stream queries, paging becomes an effortless endeavor. You can easily navigate through pages by skipping preceding data with the <code>skip()</code>-operator and constraining the results to a predefined page size with <code>limit()</code>.</p><p>Assuming a page size of 20, you can facilitate client access to films that match or exceed a specified length while maintaining an orderly sequence based on length. Here&#39;s how:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PAGE_SIZE</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// ... 생략 ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Film</span><span class="token punctuation">&gt;</span></span> <span class="token function">paged</span><span class="token punctuation">(</span><span class="token keyword">long</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> jpaStreamer<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">Film</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>minLength<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>page <span class="token operator">*</span> <span class="token constant">PAGE_SIZE</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token constant">PAGE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To accommodate this paged content, your <code>FilmResource</code> needs a new endpoint:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@GET</span></span>
<span class="line"><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/paged/{page}/{minLength}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paged</span><span class="token punctuation">(</span><span class="token keyword">long</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> filmRepository<span class="token punctuation">.</span><span class="token function">paged</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> minLength<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s (%d min)&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A simple call to <a href="http://localhost:8080/paged/3/120" target="_blank" rel="noopener noreferrer">http://localhost:8080/paged/3/120</a> fetches the movies on the third page, each lasting a minimum of 2 hours, yielding an anticipated response:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">AMERICAN CIRCUS (129 min)</span>
<span class="line">UNFORGIVEN ZOOLANDER (129 min)</span>
<span class="line">...</span>
<span class="line">CHOCOLATE DUCK (132 min)</span>
<span class="line">STREAK RIDGEMONT (132 min)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A quick look in the Quarkus dev terminal reveals that all Stream operators where embedded in the query as <code>WHERE</code>-, <code>ORDER BY</code>- and <code>LIMIT</code>-operator with a lower and upper value:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Hibernate:</span>
<span class="line">  select</span>
<span class="line">    f1_0.film_id,</span>
<span class="line">    f1_0.description,</span>
<span class="line">    f1_0.language_id,</span>
<span class="line">    f1_0.last_update,</span>
<span class="line">    f1_0.length,</span>
<span class="line">    f1_0.original_language_id,</span>
<span class="line">    f1_0.rating,</span>
<span class="line">    f1_0.rental_duration,</span>
<span class="line">    f1_0.rental_rate,</span>
<span class="line">    f1_0.replacement_cost,</span>
<span class="line">    f1_0.special_features,</span>
<span class="line">    f1_0.title</span>
<span class="line">  from</span>
<span class="line">    film f1_0</span>
<span class="line">  where</span>
<span class="line">    f1_0.length&gt;?</span>
<span class="line">  order by</span>
<span class="line">    f1_0.length limit ?,</span>
<span class="line">    ?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="projections" tabindex="-1"><a class="header-anchor" href="#projections"><span>Projections</span></a></h3><p>You&#39;ve probably noticed that you&#39;re retrieving the entire array of Film table columns, although you only include the title and length in your response. You can save application resources by using a projection as the Stream source instead of the full table. The <code>filmId</code> is required as it is the primary key.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Film</span><span class="token punctuation">&gt;</span></span> <span class="token function">paged</span><span class="token punctuation">(</span><span class="token keyword">long</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> jpaStreamer<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">Projection</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>filmId<span class="token punctuation">,</span> <span class="token class-name">Film</span>$<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>minLength<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>page <span class="token operator">*</span> <span class="token constant">PAGE_SIZE</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token constant">PAGE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This change also require that you enhance the <code>Film</code> entity with a matching constructor.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">Film</span><span class="token punctuation">(</span><span class="token keyword">short</span> filmId<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>filmId <span class="token operator">=</span> filmId<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now go ahead and make a second request to the paged endpoint and observe how the query is limited to three columns.</p><p><a href="http://localhost:8080/paged/3/120" target="_blank" rel="noopener noreferrer">http://localhost:8080/paged/3/120</a></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Hibernate:</span>
<span class="line">  select</span>
<span class="line">    f1_0.film_id,</span>
<span class="line">    f1_0.title,</span>
<span class="line">    f1_0.length</span>
<span class="line">  from</span>
<span class="line">    film f1_0</span>
<span class="line">  where</span>
<span class="line">    f1_0.length&gt;?</span>
<span class="line">  order by</span>
<span class="line">    3 limit ?,</span>
<span class="line">    ?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="joins" tabindex="-1"><a class="header-anchor" href="#joins"><span>Joins</span></a></h3><p>Now onto something a little more interesting - performing a Stream join. A join is a combination of several tables, translated to Stream queries, which means you need to update the Stream source to include entities from an additional table.</p><p>In section 5.2 you defined a mapping between the Film and Actor-table via the field <code>List&lt;Actor&gt;</code> actors. With JPAStreamer, you can achieve a join of the Film and Actor table by creating a <code>StreamConfiguration&lt;Film&gt;</code> that references this field as follows:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StreamConfiguration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Film</span><span class="token punctuation">&gt;</span></span> sc <span class="token operator">=</span> <span class="token class-name">StreamConfiguration</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Film</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>actors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The stream configuration now replaces <code>Film.class</code> as the stream source. While where at it we might as well add another filter and flip the sorting order. Notice how multiple predicates can by combined with the and/or-operators.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Film</span><span class="token punctuation">&gt;</span></span> <span class="token function">actors</span><span class="token punctuation">(</span><span class="token class-name">String</span> startsWith<span class="token punctuation">,</span> <span class="token keyword">int</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">StreamConfiguration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Film</span><span class="token punctuation">&gt;</span></span> sc <span class="token operator">=</span> <span class="token class-name">StreamConfiguration</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Film</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>actors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> jpaStreamer<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>startsWith<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>minLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a response to the clients, it seems suitable to present the title of the films, the films’ length (to confirm that the sorting order is correct), and a list of the starring actors:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@GET</span></span>
<span class="line"><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/actors/{startsWith}/{minLength}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">actors</span><span class="token punctuation">(</span><span class="token class-name">String</span> startsWith<span class="token punctuation">,</span> <span class="token keyword">short</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> filmRepository<span class="token punctuation">.</span><span class="token function">actors</span><span class="token punctuation">(</span>startsWith<span class="token punctuation">,</span> minLength<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s (%d min): %s&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      f<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      f<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      f<span class="token punctuation">.</span><span class="token function">getActors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now try calling the new endpoint with a start character A and a minimum length of 2 hours: <a href="http://localhost:8080/actors/A/120" target="_blank" rel="noopener noreferrer">http://localhost:8080/actors/A/120</a>. You should expect the following results:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ANALYZE HOOSIERS (181 min): TOM MCKELLEN, TOM MIRANDA, JESSICA BAILEY, GRETA MALDEN, ED GUINESS</span>
<span class="line">ALLEY EVOLUTION (180 min): KARL BERRY, JUDE CRUISE, ALBERT JOHANSSON, GREGORY GOODING, JOHN SUVARI</span>
<span class="line">...</span>
<span class="line">ALAMO VIDEOTAPE (126 min): JOHNNY CAGE, SCARLETT DAMON, SEAN GUINESS, MICHAEL BENING</span>
<span class="line">ARIZONA BANG (121 min): KARL BERRY, RAY JOHANSSON, RUSSELL BACALL, GRETA KEITEL</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Below is the resulting query, confirming that the join was applied.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Hibernate:</span>
<span class="line">  select</span>
<span class="line">    f1_0.film_id,</span>
<span class="line">    a1_0.film_id,</span>
<span class="line">    ...</span>
<span class="line">  from</span>
<span class="line">    film f1_0</span>
<span class="line">  left join</span>
<span class="line">    (film_actor a1_0</span>
<span class="line">  join</span>
<span class="line">    actor a1_1</span>
<span class="line">      on a1_1.actor_id=a1_0.actor_id)</span>
<span class="line">        on f1_0.film_id=a1_0.film_id</span>
<span class="line">    where</span>
<span class="line">      f1_0.title like replace(?,&#39;\\\\&#39;,&#39;\\\\\\\\&#39;)</span>
<span class="line">      and f1_0.length&gt;?</span>
<span class="line">    order by</span>
<span class="line">      f1_0.length desc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updating-films" tabindex="-1"><a class="header-anchor" href="#updating-films"><span>Updating Films</span></a></h3><p>While JPAStreamer’s strength lies in reading data, you can use it to update your database as well. Let’s say the imagined video rental store has a price model based on the length of the films. In that case, you want to be able to adjust the rental rate based on length. That’s easily achieved by filtering out the relevant films and applying the operator <code>forEach()</code> to set a new price. By annotating the method with <code>@Transactional</code>, you ensure that Hibernate persists the changes to your Film entities.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Transactional</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateRentalRate</span><span class="token punctuation">(</span><span class="token keyword">int</span> minLength<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLength<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> rentalRate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  jpaStreamer<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">Film</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Film</span>$<span class="token punctuation">.</span>length<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>minLength<span class="token punctuation">,</span> maxLength<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      f<span class="token punctuation">.</span><span class="token function">setRentalRate</span><span class="token punctuation">(</span>rentalRate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’ll leave it to you to create an endpoint that facilitates clients to initiate rental rate updates.</p>`,53);function _(i,S){const l=p("VPCard"),a=p("router-link"),c=p("SiteInfo"),o=p("VidStack");return h(),r("div",null,[n("h1",f,[n("a",b,[n("span",null,d(i.$frontmatter.title)+" 관련",1)])]),s(l,m(k({title:"Get started with Quarkus and JPAStreamer",desc:"In the world of software development, innovation often arrives in the form of powerful tools that transform the way we build applications - enter Quarkus, a development platform that's reshaping the Java landscape.  If you are new...",link:"/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[s(a,{to:"#fetching-films-with-java-streams-and-jpastreamer"},{default:e(()=>[t("Fetching Films with Java Streams and JPAStreamer")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#fetching-an-entity-by-id"},{default:e(()=>[t("Fetching an Entity by Id")]),_:1})]),n("li",null,[s(a,{to:"#paged-queries"},{default:e(()=>[t("Paged Queries")]),_:1})]),n("li",null,[s(a,{to:"#projections"},{default:e(()=>[t("Projections")]),_:1})]),n("li",null,[s(a,{to:"#joins"},{default:e(()=>[t("Joins")]),_:1})]),n("li",null,[s(a,{to:"#updating-films"},{default:e(()=>[t("Updating Films")]),_:1})])])])])]),w,s(c,{name:"Get started with Quarkus and JPAStreamer",desc:"In the world of software development, innovation often arrives in the form of powerful tools that transform the way we build applications - enter Quarkus, a development platform that's reshaping the Java landscape.  If you are new...",url:"https://freecodecamp.org/news/get-started-with-quarkus-and-jpastreamer-2/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"}),s(o,{src:"youtube/KZnQ5R8Kd4I"}),j])}const I=u(g,[["render",_],["__file","jpa-jpastreamer.html.vue"]]),F=JSON.parse('{"path":"/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/jpa-jpastreamer.html","title":"3. JPA & JPAStreamer","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"3. JPA & JPAStreamer","description":"(3/5) Get started with Quarkus and JPAStreamer","category":["Java","Quarkus","Youtube"],"tag":["blog","freecodecamp.org","java","jdk","jdk8","stream","quarkus","jpa","jpastreamer","youtube","crashcourse"],"head":[[{"meta":null},{"property":"og:title","content":"(3/5) Get started with Quarkus and JPAStreamer"},{"property":"og:description","content":"3. JPA & JPAStreamer"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/jpa-jpastreamer.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/jpa-jpastreamer.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"3. JPA & JPAStreamer"}],["meta",{"property":"og:description","content":"(3/5) Get started with Quarkus and JPAStreamer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"}],["meta",{"name":"twitter:image:alt","content":"3. JPA & JPAStreamer"}],["meta",{"property":"article:author","content":"Julia Gustafsson"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"quarkus"}],["meta",{"property":"article:tag","content":"jpa"}],["meta",{"property":"article:tag","content":"jpastreamer"}],["meta",{"property":"article:tag","content":"youtube"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:published_time","content":"2023-11-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. JPA & JPAStreamer\\",\\"image\\":[\\"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png\\"],\\"datePublished\\":\\"2023-11-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Julia Gustafsson\\"}]}"]],"date":"2023-11-03T00:00:00.000Z","isOriginal":false,"author":"Julia Gustafsson","cover":"https://freecodecamp.org/news/content/images/size/w2000/2023/11/jpastreamer_featureimage_update.png"},"headers":[{"level":2,"title":"Fetching Films with Java Streams and JPAStreamer","slug":"fetching-films-with-java-streams-and-jpastreamer","link":"#fetching-films-with-java-streams-and-jpastreamer","children":[{"level":3,"title":"Fetching an Entity by Id","slug":"fetching-an-entity-by-id","link":"#fetching-an-entity-by-id","children":[]},{"level":3,"title":"Paged Queries","slug":"paged-queries","link":"#paged-queries","children":[]},{"level":3,"title":"Projections","slug":"projections","link":"#projections","children":[]},{"level":3,"title":"Joins","slug":"joins","link":"#joins","children":[]},{"level":3,"title":"Updating Films","slug":"updating-films","link":"#updating-films","children":[]}]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.54,"words":1662},"filePathRelative":"freecodecamp.org/get-started-with-quarkus-and-jpastreamer-2/jpa-jpastreamer.md","localizedDate":"2023년 11월 3일","excerpt":"\\n","copyright":{"author":"Julia Gustafsson"}}');export{I as comp,F as data};
