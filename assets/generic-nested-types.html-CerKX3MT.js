import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as s,t as r,e as n,n as a,g as t,a as d,d as u,f as h,r as i,o as m}from"./app-BgNevrm5.js";const k={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},v=s("nav",{class:"table-of-contents"},[s("ul")],-1),f=s("hr",null,null,-1),y=h(`<blockquote><p>Available from Swift 3.1</p></blockquote><p>Swift 3.0&#39;s support for nested types is useful to help you organize your data and increase encapsulation, but Swift 3.1 takes them to the next level by adding support for generics. Let&#39;s look at a simple example again, just to start with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">Attachment</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> contents<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> attachment<span class="token punctuation">:</span> <span class="token class-name">Attachment</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a <code>Message</code> struct that has an <code>Attachment</code> struct inside it – a nested type. I&#39;ve added two <code>String</code> properties, because messages will have some text and attachments will hold some text.</p><p>Now, what if we wanted either <code>Message</code> or <code>Attachment</code> to have different kinds of data – perhaps <code>Int</code> or <code>Data</code>? Well, that requires generics, so you might have found yourself writing something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">Attachment</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> contents<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">T</span></span>
<span class="line">    <span class="token keyword">var</span> attachment<span class="token punctuation">:</span> <span class="token class-name">Attachment</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That tells Swift we want <code>Message</code> to work across several data types, and whatever data type gets used to create the struct should also be used for the <code>title</code> property. Or at least that&#39;s what it <em>would</em> tell Swift, if such code were actually legal – Swift 3.0 does not allow you to mix nested type with generics. Fortunately, this is exactly what Swift 3.1 allows, because nested types can now appear inside generic types.</p><p>Not content to stop there, Swift 3.1 takes this a step further: nested types can <em>also</em> be generic, either using their own generic type or by inheriting the generic type of their parent. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">Attachment</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> contents<span class="token punctuation">:</span> <span class="token class-name">T</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">T</span></span>
<span class="line">    <span class="token keyword">var</span> attachment<span class="token punctuation">:</span> <span class="token class-name">Attachment</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that code, the <code>Message</code> struct will have a specific type assigned to it, and the <code>Attachment</code> struct will always have the same type – you can&#39;t use <code>String</code> for one and <code>Int</code> for the other. So, this code will work fine:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> attachment<span class="token punctuation">:</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token class-name">Attachment</span><span class="token punctuation">(</span>contents<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;World&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Helpfully, if your goal is to make the nested type and its container use the same generic type, you don&#39;t even need to declare the nested type as generic – Swift makes the outer type available to the nested type, so in fact you can just write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">Attachment</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> contents<span class="token punctuation">:</span> <span class="token class-name">T</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">T</span></span>
<span class="line">    <span class="token keyword">var</span> attachment<span class="token punctuation">:</span> <span class="token class-name">Attachment</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Generics are great and so are nested types, so I&#39;m really pleased to see Swift 3.1 bring them together at last.</p>`,14),b={class:"hint-container details"},_=s("summary",null,"Other Changes in Swift 3.1",-1),S={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-3-0-to-3-1.playground.zip",target:"_blank",rel:"noopener noreferrer"};function x(c,A){const e=i("VPCard"),o=i("FontIcon");return m(),p("div",null,[s("h1",g,[s("a",w,[s("span",null,r(c.$frontmatter.title)+" 관련",1)])]),n(e,a(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,f,n(e,a(t({title:"Generics with nested types | Changes in Swift 3.1",desc:"Generics with nested types",link:"https://hackingwithswift.com/swift/3.1/generic-nested-types",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,s("details",b,[_,n(e,a(t({title:"Concrete constrained extensions | Changes in Swift 3.1",desc:"Concrete constrained extensions",link:"/hackingwithswift.com/swift/3.1/concrete-constrained-extensions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Generics with nested types | Changes in Swift 3.1",
  "desc": "Generics with nested types",
  "link": "/hackingwithswift.com/swift/3.1/generic-nested-types.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(e,a(t({title:"All function parameters have labels unless you request otherwise | Changes in Swift 3.1",desc:"Sequences get prefix(while:) and drop(while:) methods",link:"/hackingwithswift.com/swift/3.1/prefix-drop.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s("p",null,[s("a",S,[n(o,{icon:"fas fa-file-zipper"}),u("Download Swift 3.1 playground")])])])])}const C=l(k,[["render",x],["__file","generic-nested-types.html.vue"]]),M=JSON.parse('{"path":"/hackingwithswift.com/swift/3.1/generic-nested-types.html","title":"Generics with nested types","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Generics with nested types","description":"Article(s) > Generics with nested types","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-3.1"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Generics with nested types"},{"property":"og:description","content":"Generics with nested types"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/3.1/generic-nested-types.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/3.1/generic-nested-types.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Generics with nested types"}],["meta",{"property":"og:description","content":"Article(s) > Generics with nested types"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-3.1"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Generics with nested types\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"hackingwithswift.com/swift/3.1/generic-nested-types.md","excerpt":"\\n"}');export{C as comp,M as data};
