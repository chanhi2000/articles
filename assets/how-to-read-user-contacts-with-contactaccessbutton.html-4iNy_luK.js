import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as i,e as a,n as t,g as e,f as l,r as u,o as r}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),w=l(`<blockquote><p>Updated for Xcode 16</p></blockquote><p><strong>New in iOS 18</strong></p><p>SwiftUI has a dedicated <code>ContactAccessButton</code> for displaying and adding contacts in your app, along with a <code>contactAccessPicker()</code> modifier for adjusting access later on.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>You should use <code>ContactAccessButton</code> initially because it&#39;s a really smooth way of reading contacts at the point they are needed, then bring in <code>contactAccessPicker()</code> only if needed.</p></div><p>To get started, open the Info tab in your app&#39;s target and add the key &quot;Privacy - Contacts Usage Description&quot;. You should set this to a string that explains why your app needs access to contacts, so that iOS can automatically show this message when a request is made.</p><p>When it comes to the code, you need to do three things:</p><ol><li>Add an import for ContactsUI.</li><li>Place a <code>ContactAccessButton</code> with a query string and some kind of action to run when a contact is selected.</li><li>Create a function that&#39;s able to receive an array of contact identifiers and turn them into actual <code>CNContact</code> instances by using <code>CNContactStore</code>.</li></ol><p>This works best when the user is actually searching for something, so that <code>ContactAccessButton</code> matches the same search query you are running elsewhere in your UI.</p><p>Here&#39;s a complete example to get you started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// We hold all our loaded contacts here</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> allContacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">CNContact</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Whatever the user is currently looking for</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> searchText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Results from our existing contacts list</span></span>
<span class="line">    <span class="token keyword">var</span> filteredContacts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CNContact</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> searchText<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span></span>
<span class="line">            allContacts</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            allContacts<span class="token punctuation">.</span>filter <span class="token punctuation">{</span></span>
<span class="line">                <span class="token short-argument">$0</span><span class="token punctuation">.</span>givenName<span class="token punctuation">.</span><span class="token function">localizedStandardContains</span><span class="token punctuation">(</span>searchText<span class="token punctuation">)</span></span>
<span class="line">                <span class="token operator">||</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>familyName<span class="token punctuation">.</span><span class="token function">localizedStandardContains</span><span class="token punctuation">(</span>searchText<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">List</span><span class="token punctuation">(</span>filteredContacts<span class="token punctuation">)</span> <span class="token punctuation">{</span> contact <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Say hello to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">contact<span class="token punctuation">.</span>givenName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $searchText<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// This will automatically show a contact if one is matched, or a Search button otherwise</span></span>
<span class="line">                <span class="token class-name">ContactAccessButton</span><span class="token punctuation">(</span>queryString<span class="token punctuation">:</span> searchText<span class="token punctuation">)</span> <span class="token punctuation">{</span> results <span class="token keyword">in</span></span>
<span class="line">                    <span class="token comment">// Run fetchContacts(with:) when a contact is selected</span></span>
<span class="line">                    <span class="token function">fetchContacts</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> results<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Converts an array of contact identifiers into actual contacts</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">fetchContacts</span><span class="token punctuation">(</span>with identifiers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Prepare the Contacts system to return the names of matching people</span></span>
<span class="line">            <span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">CNContactFormatter</span><span class="token punctuation">.</span><span class="token function">descriptorForRequiredKeys</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">            <span class="token keyword">let</span> fetchRequest <span class="token operator">=</span> <span class="token class-name">CNContactFetchRequest</span><span class="token punctuation">(</span>keysToFetch<span class="token punctuation">:</span> keys<span class="token punctuation">)</span></span>
<span class="line">            fetchRequest<span class="token punctuation">.</span>predicate <span class="token operator">=</span> <span class="token class-name">CNContact</span><span class="token punctuation">.</span><span class="token function">predicateForContacts</span><span class="token punctuation">(</span>withIdentifiers<span class="token punctuation">:</span> identifiers<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Store new contacts in this array</span></span>
<span class="line">            <span class="token keyword">var</span> newContacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">CNContact</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">try</span> <span class="token class-name">CNContactStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerateContacts</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> fetchRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span> contact<span class="token punctuation">,</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">                newContacts<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>contact<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Load is completed, so add the new contacts to our existing array</span></span>
<span class="line">            allContacts <span class="token operator">+=</span> newContacts</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, most of the work happens in the <code>fetchContacts(with:)</code> method – <code>ContactAccessButton</code> wraps all the UI part, but actually loading the data is still a bit of a slog. It would be nice if Apple could simplify this a little so that <code>ContactAccessButton</code> could be given a list of keys to fetch, and send back <code>CNContact</code> objects pre-filled with that data.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>Once the user has clicked Add for a given contact, it&#39;s down to you to store that contact safely – they will <em>not</em> be shown for future search results.</p></div><p>Once you have your <code>ContactAccessButton</code> in place, you can customize it using standard SwiftUI modifiers such as <code>font()</code> and <code>foregroundStyle()</code>, alongside new modifiers such as <code>contactAccessButtonCaption()</code> and <code>contactAccessButtonStyle()</code>.</p><p>For example, this displays a contact&#39;s email address below their name, and also uses indigo to tint user images when they don&#39;t have a photo attached:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ContactAccessButton</span><span class="token punctuation">(</span>queryString<span class="token punctuation">:</span> searchText<span class="token punctuation">)</span> <span class="token punctuation">{</span> results <span class="token keyword">in</span></span>
<span class="line">    <span class="token function">fetchContacts</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> results<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">contactAccessButtonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>imageColor<span class="token punctuation">:</span> <span class="token punctuation">.</span>indigo<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">contactAccessButtonCaption</span><span class="token punctuation">(</span><span class="token punctuation">.</span>email<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As an alternative to <code>ContactAccessButton</code>, the <code>contactAccessPicker()</code> modifier lets us present a list of the user&#39;s contacts in a privacy-safe way – it&#39;s controlled by the system rather than us – so that the user can add or remove many contacts at once.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>This API reports back to you only the contacts that were new, which means it won&#39;t include contacts added previously or contacts that were removed. Apple hasn&#39;t given us a way to handle those removals, other than manually requesting all known contacts every time and seeing what comes back.</p></div><p>So, I would be careful using this API: yes, it&#39;s a great way to mass add or remove contacts, but you should be sure to validate the user&#39;s selection fully each time results are returned.</p><p>For example, this code queries the contacts store by merging the new identifiers will existing identifiers, so we can detect when the user has request a contact be removed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> allContacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">CNContact</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingContactsPicker <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>allContacts<span class="token punctuation">)</span> <span class="token punctuation">{</span> contact <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Say hello to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">contact<span class="token punctuation">.</span>givenName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select Contacts&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;person.crop.circle.badge.plus&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    showingContactsPicker<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">contactAccessPicker</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $showingContactsPicker<span class="token punctuation">)</span> <span class="token punctuation">{</span> results <span class="token keyword">in</span></span>
<span class="line">                <span class="token function">fetchContacts</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> results<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">fetchContacts</span><span class="token punctuation">(</span>with newIdentifiers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Create an array of all identifiers, old and new</span></span>
<span class="line">            <span class="token keyword">let</span> existingIdentifiers <span class="token operator">=</span> allContacts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>identifier<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> allIdentifiers <span class="token operator">=</span> existingIdentifiers <span class="token operator">+</span> newIdentifiers</span>
<span class="line"></span>
<span class="line">            <span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">CNContactFormatter</span><span class="token punctuation">.</span><span class="token function">descriptorForRequiredKeys</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">            <span class="token keyword">let</span> fetchRequest <span class="token operator">=</span> <span class="token class-name">CNContactFetchRequest</span><span class="token punctuation">(</span>keysToFetch<span class="token punctuation">:</span> keys<span class="token punctuation">)</span></span>
<span class="line">            fetchRequest<span class="token punctuation">.</span>predicate <span class="token operator">=</span> <span class="token class-name">CNContact</span><span class="token punctuation">.</span><span class="token function">predicateForContacts</span><span class="token punctuation">(</span>withIdentifiers<span class="token punctuation">:</span> allIdentifiers<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">var</span> newContacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">CNContact</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">try</span> <span class="token class-name">CNContactStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerateContacts</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> fetchRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span> contact<span class="token punctuation">,</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">                newContacts<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>contact<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            allContacts <span class="token operator">=</span> newContacts</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),f={class:"hint-container details"},b=n("summary",null,"Similar solutions…",-1);function g(c,y){const s=u("VPCard");return r(),p("div",null,[n("h1",k,[n("a",m,[n("span",null,i(c.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,v,a(s,t(e({title:"How to read user contacts with ContactAccessButton | SwiftUI by Example",desc:"How to read user contacts with ContactAccessButton",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-read-user-contacts-with-contactaccessbutton",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,n("details",f,[b,a(s,t(e({title:"How to read the user's location using LocationButton | SwiftUI by Example",desc:"How to read the user's location using LocationButton",link:"/hackingwithswift.com/swiftui/how-to-read-the-users-location-using-locationbutton.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to read the size and position of a scrollview | SwiftUI by Example",desc:"How to read the size and position of a scrollview",link:"/hackingwithswift.com/swiftui/how-to-read-the-size-and-position-of-a-scrollview.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to create multi-column lists using Table | SwiftUI by Example",desc:"How to create multi-column lists using Table",link:"/hackingwithswift.com/swiftui/how-to-create-multi-column-lists-using-table.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to make VoiceOver read characters individually | SwiftUI by Example",desc:"How to make VoiceOver read characters individually",link:"/hackingwithswift.com/swiftui/how-to-make-voiceover-read-characters-individually.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to read the red, green, and blue values from a Color | SwiftUI by Example",desc:"How to read the red, green, and blue values from a Color",link:"/hackingwithswift.com/swiftui/how-to-read-the-red-green-and-blue-values-from-a-color.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const S=o(d,[["render",g],["__file","how-to-read-user-contacts-with-contactaccessbutton.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-read-user-contacts-with-contactaccessbutton.html","title":"How to read user contacts with ContactAccessButton","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to read user contacts with ContactAccessButton","description":"Article(s) > How to read user contacts with ContactAccessButton","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to read user contacts with ContactAccessButton"},{"property":"og:description","content":"How to read user contacts with ContactAccessButton"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-user-contacts-with-contactaccessbutton.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-user-contacts-with-contactaccessbutton.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to read user contacts with ContactAccessButton"}],["meta",{"property":"og:description","content":"Article(s) > How to read user contacts with ContactAccessButton"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to read user contacts with ContactAccessButton\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftui/introduction-to-accessibility-with-swiftui.md","date":"2024-06-21T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.94,"words":1182},"filePathRelative":"hackingwithswift.com/swiftui/how-to-read-user-contacts-with-contactaccessbutton.md","localizedDate":"2024년 6월 21일","excerpt":"\\n"}');export{S as comp,x as data};
