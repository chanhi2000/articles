import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,b as n,t as h,e as a,n as u,g as d,w as e,d as s,f as p,r as i,o as b}from"./app-BgNevrm5.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},C=n("hr",null,null,-1),_=p(`<p>Refactoring is a technique for restructuring existing code without changing its behavior. You can think of refactoring as a series of small code transformations.</p><p>One change (refactoring) does little. But a sequence of refactors produces a significant transformation.</p><p>There&#39;s no better way to learn refactoring than practicing.</p><p>So I prepared a refactoring exercise for you.</p><p>Today I&#39;m going to refactor some poorly written code.</p><p>And I&#39;ll show you 5 awesome refactoring techniques along the way:</p><ul><li>Extract method</li><li>Extract interface</li><li>Extract class</li><li>Functional code</li><li>Pushing logic down</li></ul><hr><h2 id="starting-point" tabindex="-1"><a class="header-anchor" href="#starting-point"><span>Starting Point</span></a></h2><p>We will refactor the <code>CustomerService</code> below to try to improve the code.</p><p>I want to achieve three goals with this refactor.</p><p>Or rather, I want to improve three qualities of the <code>CustomerService</code>:</p><ul><li>Testability</li><li>Readability</li><li>Maintainability</li></ul><p>To improve these qualities, we need to figure out what&#39;s preventing us from attaining them.</p><p>So, let&#39;s first understand what the <code>CustomerService</code> is doing on a high level:</p><ul><li>Validation of the input arguments</li><li>Fetching the <code>Company</code> and creating a new <code>Customer</code></li><li>Calculating if the <code>Customer</code> has a credit limit and the amount</li><li>Saving the <code>Customer</code> to the database if they meet a specific condition</li></ul><p>You can see quite a few things are happening inside the <code>AddCustomer</code> method.</p><p>It&#39;s almost 100 lines of code, which reduces readability.</p><p>It&#39;s difficult to test because we can&#39;t control any external dependencies.</p><p>It&#39;s impossible to extend the behavior of the <code>CustomerService</code> without changing the code.</p><p>But we can fix all these problems. Let me show you how.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">AddCustomer</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">DateTime</span> dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> companyId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>email<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token char">&#39;@&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>email<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> age <span class="token operator">=</span> now<span class="token punctuation">.</span>Year <span class="token operator">-</span> dateOfBirth<span class="token punctuation">.</span>Year<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>dateOfBirth<span class="token punctuation">.</span>Date <span class="token operator">&gt;</span> now<span class="token punctuation">.</span><span class="token function">AddYears</span><span class="token punctuation">(</span><span class="token operator">-</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            age <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> companyRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompanyRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> company <span class="token operator">=</span> companyRepository<span class="token punctuation">.</span><span class="token function">GetById</span><span class="token punctuation">(</span>companyId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Company <span class="token operator">=</span> company<span class="token punctuation">,</span></span>
<span class="line">            DateOfBirth <span class="token operator">=</span> dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">            EmailAddress <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">            Firstname <span class="token operator">=</span> firstName<span class="token punctuation">,</span></span>
<span class="line">            Surname <span class="token operator">=</span> lastName</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>company<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">&quot;VeryImportantClient&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Skip credit check</span></span>
<span class="line">            customer<span class="token punctuation">.</span>HasCreditLimit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>company<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">&quot;ImportantClient&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Do credit check and double credit limit</span></span>
<span class="line">            customer<span class="token punctuation">.</span>HasCreditLimit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> creditService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerCreditServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> creditLimit <span class="token operator">=</span> creditService<span class="token punctuation">.</span><span class="token function">GetCreditLimit</span><span class="token punctuation">(</span></span>
<span class="line">                customer<span class="token punctuation">.</span>Firstname<span class="token punctuation">,</span></span>
<span class="line">                customer<span class="token punctuation">.</span>Surname<span class="token punctuation">,</span></span>
<span class="line">                customer<span class="token punctuation">.</span>DateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            creditLimit <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">            customer<span class="token punctuation">.</span>CreditLimit <span class="token operator">=</span> creditLimit<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Do credit check</span></span>
<span class="line">            customer<span class="token punctuation">.</span>HasCreditLimit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> creditService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerCreditServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> creditLimit <span class="token operator">=</span> creditService<span class="token punctuation">.</span><span class="token function">GetCreditLimit</span><span class="token punctuation">(</span></span>
<span class="line">                customer<span class="token punctuation">.</span>Firstname<span class="token punctuation">,</span></span>
<span class="line">                customer<span class="token punctuation">.</span>Surname<span class="token punctuation">,</span></span>
<span class="line">                customer<span class="token punctuation">.</span>DateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            customer<span class="token punctuation">.</span>CreditLimit <span class="token operator">=</span> creditLimit<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>customer<span class="token punctuation">.</span>HasCreditLimit <span class="token operator">&amp;&amp;</span> customer<span class="token punctuation">.</span>CreditLimit <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> customerRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        customerRepository<span class="token punctuation">.</span><span class="token function">AddCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="refactoring-the-validation" tabindex="-1"><a class="header-anchor" href="#refactoring-the-validation"><span>Refactoring the Validation</span></a></h2><p>The first part of the code validating input parameters is pretty concise. It also follows the early return principle.</p><p>The validation consists of simple input validation and a calculation for the customer&#39;s age.</p><p>I would start with an <strong>extract method</strong> refactor to move the validation into one place.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>email<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token char">&#39;@&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>email<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> age <span class="token operator">=</span> now<span class="token punctuation">.</span>Year <span class="token operator">-</span> dateOfBirth<span class="token punctuation">.</span>Year<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>dateOfBirth<span class="token punctuation">.</span>Date <span class="token operator">&gt;</span> now<span class="token punctuation">.</span><span class="token function">AddYears</span><span class="token punctuation">(</span><span class="token operator">-</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    age <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Calculating the age isn&#39;t part of the validation flow, so I&#39;ll extract that into the <code>CalculateAge</code> method.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalculateAge</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span> dateOfBirth<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> now<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> age <span class="token operator">=</span> now<span class="token punctuation">.</span>Year <span class="token operator">-</span> dateOfBirth<span class="token punctuation">.</span>Year<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dateOfBirth<span class="token punctuation">.</span>Date <span class="token operator">&gt;</span> now<span class="token punctuation">.</span><span class="token function">AddYears</span><span class="token punctuation">(</span><span class="token operator">-</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        age <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, I&#39;ll create the <code>IsValid</code> method to encapsulate all the validation rules. Instead of writing many <code>if-else</code> statements, I can write a single <code>bool</code> expression.</p><p>I also introduced a <code>minimumAge</code> constant to improve readability.</p><p>You can see how the <code>CalculateAge</code> method helps simplify the validation check.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValid</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">DateTime</span> dateOfBirth<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> minimumAge <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">           <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">           <span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token char">&#39;@&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> email<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">           <span class="token function">CalculateAge</span><span class="token punctuation">(</span>dateOfBirth<span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> minimumAge<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This simplifies the validation code in <code>AddCustomer</code> to:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsValid</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> dateOfBirth<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="refactoring-towards-dependency-injection" tabindex="-1"><a class="header-anchor" href="#refactoring-towards-dependency-injection"><span>Refactoring Towards Dependency Injection</span></a></h2>`,38),I=n("code",null,"CustomerService",-1),T=p(`<p>Dependency injection allows us to achieve <strong>Inversion of Control (IoC).</strong></p><p>We depend only on interfaces at compile time and on implementations at run time.</p><p>The dependency injection pattern has a few important benefits.</p><p>You don&#39;t have to know how to initialize or dispose of external dependencies.</p><p>It also improves testability since you now depend on interfaces.</p><p>Interfaces can be mocked to make unit testing easier.</p><p>So let&#39;s update the <code>CustomerService</code> not to initialize the dependencies directly:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> companyRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompanyRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> creditService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerCreditServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> customerRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead, we will inject them as constructor arguments.</p>`,9),x={href:"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/primary-constructors",target:"_blank",rel:"noopener noreferrer"},L=p(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerService</span><span class="token punctuation">(</span></span>
<span class="line highlighted">    <span class="token class-name">CompanyRepository</span> companyRepository<span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token class-name">CustomerRepository</span> customerRepository<span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token class-name">CustomerCreditServiceClient</span> creditService<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The next step would be introducing interfaces for these dependencies. This comes down to an <strong>extract interface</strong> refactor.</p><hr><h2 id="refactoring-the-credit-limit-calculation" tabindex="-1"><a class="header-anchor" href="#refactoring-the-credit-limit-calculation"><span>Refactoring the Credit Limit Calculation</span></a></h2><p>The credit limit calculation is the most complicated part of the code.</p><p>There are different business rules based on the company type.</p><p>I try to notice patterns in the code before refactoring.</p><p>So here are a few of my observations.</p><p>Multiple <code>if-else</code> statements based on the <code>Type</code> property make me wonder if I&#39;ll need to extend this in the future.</p><p>Adding a new rule would mean another <code>if-else</code> check.</p>`,10),R={href:"https://refactoring.guru/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"switch",-1),N=p(`<p>Another thing that stands out is the <strong>code duplication</strong> in the last two blocks.</p><p>This usually means I can do an <strong>extract method</strong> refactoring to reduce code duplication.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>company<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">&quot;VeryImportantClient&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Skip credit check</span></span>
<span class="line">    customer<span class="token punctuation">.</span>HasCreditLimit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>company<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">&quot;ImportantClient&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Do credit check and double credit limit</span></span>
<span class="line">    customer<span class="token punctuation">.</span>HasCreditLimit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> creditService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerCreditServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> creditLimit <span class="token operator">=</span> creditService<span class="token punctuation">.</span><span class="token function">GetCreditLimit</span><span class="token punctuation">(</span></span>
<span class="line">        customer<span class="token punctuation">.</span>Firstname<span class="token punctuation">,</span></span>
<span class="line">        customer<span class="token punctuation">.</span>Surname<span class="token punctuation">,</span></span>
<span class="line">        customer<span class="token punctuation">.</span>DateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    creditLimit <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    customer<span class="token punctuation">.</span>CreditLimit <span class="token operator">=</span> creditLimit<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Do credit check</span></span>
<span class="line">    customer<span class="token punctuation">.</span>HasCreditLimit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> creditService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerCreditServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> creditLimit <span class="token operator">=</span> creditService<span class="token punctuation">.</span><span class="token function">GetCreditLimit</span><span class="token punctuation">(</span></span>
<span class="line">        customer<span class="token punctuation">.</span>Firstname<span class="token punctuation">,</span></span>
<span class="line">        customer<span class="token punctuation">.</span>Surname<span class="token punctuation">,</span></span>
<span class="line">        customer<span class="token punctuation">.</span>DateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    customer<span class="token punctuation">.</span>CreditLimit <span class="token operator">=</span> creditLimit<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first thing I want to do is introduce an <code>enum</code> for the <code>CompanyType</code>.</p>`,4),j=p(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CompanyType</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Regular <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    ImportantClient <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    VeryImportantClient <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The next thing that bothers me is that the credit limit calculation doesn&#39;t belong to the <code>CustomerService</code>.</p>`,2),A={href:"https://en.wikipedia.org/wiki/Single-responsibility_principle",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,[s("So I want to introduce a dedicated "),n("code",null,"CreditLimitCalculator"),s(" using an "),n("strong",null,"extract class"),s(" refactoring.")],-1),B=n("code",null,"if-else",-1),D={href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreditLimitCalculator</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">CustomerCreditServiceClient</span> customerCreditServiceClient<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">bool</span> HasCreditLimit<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">?</span> CreditLimit<span class="token punctuation">)</span></span> <span class="token function">Calculate</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">Customer</span> customer<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Company</span> company<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> company<span class="token punctuation">.</span>Type <span class="token keyword">switch</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            CompanyType<span class="token punctuation">.</span>VeryImportantClient <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            CompanyType<span class="token punctuation">.</span>ImportantClient <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">GetCreditLimit</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            _ <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">GetCreditLimit</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">GetCreditLimit</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> customerCreditServiceClient<span class="token punctuation">.</span><span class="token function">GetCreditLimit</span><span class="token punctuation">(</span></span>
<span class="line">            customer<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span></span>
<span class="line">            customer<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span></span>
<span class="line">            customer<span class="token punctuation">.</span>DateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="reviewing-the-refactoring-so-far" tabindex="-1"><a class="header-anchor" href="#reviewing-the-refactoring-so-far"><span>Reviewing the Refactoring (So Far)</span></a></h2><p>Let&#39;s pause momentarily and review the refactored version of the <code>CustomerService</code>.</p><p>I&#39;m confident you will find it more readable and easier to understand.</p><p>We can easily test this class and verify that the behavior is correct.</p><p>I would usually stop the refactoring at this point, since I&#39;m happy with the results.</p><p>But can we take this further?</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerService</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">CompanyRepository</span> companyRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CustomerRepository</span> customerRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CreditLimitCalculator</span> creditLimitCalculator<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">AddCustomer</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">DateTime</span> dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> companyId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsValid</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> dateOfBirth<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> company <span class="token operator">=</span> companyRepository<span class="token punctuation">.</span><span class="token function">GetById</span><span class="token punctuation">(</span>companyId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Company <span class="token operator">=</span> company<span class="token punctuation">,</span></span>
<span class="line">            DateOfBirth <span class="token operator">=</span> dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">            EmailAddress <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">            FirstName <span class="token operator">=</span> firstName<span class="token punctuation">,</span></span>
<span class="line">            LastName <span class="token operator">=</span> lastName</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">(</span>customer<span class="token punctuation">.</span>HasCreditLimit<span class="token punctuation">,</span> customer<span class="token punctuation">.</span>CreditLimit<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">            creditLimitCalculator<span class="token punctuation">.</span><span class="token function">Calculate</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token keyword">is</span> <span class="token punctuation">{</span> HasCreditLimit<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">CreditLimit</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        customerRepository<span class="token punctuation">.</span><span class="token function">AddCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="taking-it-further-pushing-logic-down" tabindex="-1"><a class="header-anchor" href="#taking-it-further-pushing-logic-down"><span>Taking It Further - Pushing Logic Down</span></a></h2><p>This part is optional, but I want to show you how to simplify the <code>CustomerService</code> by pushing logic into the domain.</p><p>What if we moved the responsibility of creating a <code>Customer</code> into the class?</p><p>I often use the <strong>static factory</strong> pattern to implement this.</p><p>The caveat is I have to take a dependency on <code>CreditLimitCalculator</code>.</p><p>I&#39;m trading off domain model purity to get business rules completeness.</p><p>I also added the <code>IsUnderCreditLimit</code> method to wrap the credit limit check.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Properties omited</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Customer</span> <span class="token function">Create</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">Company</span> company<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">DateTime</span> dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CreditLimitCalculator</span> creditLimitCalculator<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Company <span class="token operator">=</span> company<span class="token punctuation">,</span></span>
<span class="line">            DateOfBirth <span class="token operator">=</span> dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">            EmailAddress <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">            FirstName <span class="token operator">=</span> firstName<span class="token punctuation">,</span></span>
<span class="line">            LastName <span class="token operator">=</span> lastName</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">(</span>customer<span class="token punctuation">.</span>HasCreditLimit<span class="token punctuation">,</span> customer<span class="token punctuation">.</span>CreditLimit<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">            creditLimitCalculator<span class="token punctuation">.</span><span class="token function">Calculate</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> customer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsUnderCreditLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HasCreditLimit <span class="token operator">&amp;&amp;</span> CreditLimit <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is what the <code>CustomerService</code> looks like now:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerService</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">CompanyRepository</span> companyRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CustomerRepository</span> customerRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CreditLimitCalculator</span> creditLimitCalculator<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">AddCustomer</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">DateTime</span> dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> companyId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsValid</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> dateOfBirth<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> company <span class="token operator">=</span> companyRepository<span class="token punctuation">.</span><span class="token function">GetById</span><span class="token punctuation">(</span>companyId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> Customer<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span></span>
<span class="line">            company<span class="token punctuation">,</span></span>
<span class="line">            firstName<span class="token punctuation">,</span></span>
<span class="line">            lastName<span class="token punctuation">,</span></span>
<span class="line">            email<span class="token punctuation">,</span></span>
<span class="line">            dateOfBirth<span class="token punctuation">,</span></span>
<span class="line">            creditLimitCalculator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>customer<span class="token punctuation">.</span><span class="token function">IsUnderCreditLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        customerRepository<span class="token punctuation">.</span><span class="token function">AddCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What do you think about this implementation?</p><hr><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>First of all, congrats on making it to the end.</p><p>This was a much longer newsletter issue than usual.</p><p>What do you think of this format?</p><p>Writing unit tests before starting the refactoring would be a great idea.</p><p>Unit tests will help detect any changes in behavior.</p><p>Remember, refactoring is transforming the existing code without changing the behavior.</p><p>Here are a few ideas on how you could further refactor the code:</p>`,30),F=n("p",null,[s("If you want to try this refactoring exercise, you can find the complete "),n("strong",null,"source code here.")],-1),V=n("p",null,"Hope this was helpful.",-1),q=n("p",null,"See you next week.",-1);function H(k,P){const l=i("VPCard"),t=i("router-link"),c=i("SiteInfo"),r=i("RouteLink"),o=i("FontIcon");return b(),v("div",null,[n("h1",f,[n("a",y,[n("span",null,h(k.$frontmatter.title)+" 관련",1)])]),a(l,u(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[a(t,{to:"#starting-point"},{default:e(()=>[s("Starting Point")]),_:1})]),n("li",null,[a(t,{to:"#refactoring-the-validation"},{default:e(()=>[s("Refactoring the Validation")]),_:1})]),n("li",null,[a(t,{to:"#refactoring-towards-dependency-injection"},{default:e(()=>[s("Refactoring Towards Dependency Injection")]),_:1})]),n("li",null,[a(t,{to:"#refactoring-the-credit-limit-calculation"},{default:e(()=>[s("Refactoring the Credit Limit Calculation")]),_:1})]),n("li",null,[a(t,{to:"#reviewing-the-refactoring-so-far"},{default:e(()=>[s("Reviewing the Refactoring (So Far)")]),_:1})]),n("li",null,[a(t,{to:"#taking-it-further-pushing-logic-down"},{default:e(()=>[s("Taking It Further - Pushing Logic Down")]),_:1})]),n("li",null,[a(t,{to:"#next-steps"},{default:e(()=>[s("Next Steps")]),_:1})])])]),C,a(c,{name:"5 Awesome C# Refactoring Tip",desc:"Refactoring is a technique for restructuring existing code without changing its behavior. You can think of refactoring as a series of small code transformations. One change (refactoring) does little. But a sequence of refactors produces a significant transformation. There's no better way to learn refactoring than practicing. So I prepared a refactoring exercise for you.",url:"https://milanjovanovic.tech/blog/5-awesome-csharp-refactoring-tips/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_065.png"}),_,n("p",null,[s("The next problem I want to solve is introducing "),a(r,{to:"/milanjovanovic.tech/improving-aspnetcore-dependency-injection-with-scrutor.html"},{default:e(()=>[s("dependency injection")]),_:1}),s(" to the "),I,s(".")]),T,n("p",null,[s("You can even use the "),n("a",x,[a(o,{icon:"fa-brands fa-microsoft"}),s("C# 12 primary constructor")]),s(" feature.")]),L,n("p",null,[s("The "),n("a",R,[a(o,{icon:"fas fa-globe"}),s("strategy pattern")]),s(" could be an alternative, but a "),S,s(" statement will also work fine.")]),N,n("p",null,[s("This is a "),a(r,{to:"/milanjovanovic.tech/8-tips-to-write-clean-code.html"},{default:e(()=>[s("clean coding principle")]),_:1}),s(" I often use. It improves the readability and extensibility of the code.")]),j,n("p",null,[s("It violates the "),n("a",A,[a(o,{icon:"fa-brands fa-wikipedia-w"}),s("single responsibility principle")]),s(".")]),O,n("p",null,[s("I replaced the "),B,s(" statements with a "),n("a",D,[a(o,{icon:"fa-brands fa-microsoft"}),s("switch expression")]),s(" that I can easily extend in the future.")]),E,a(c,{name:"Strategy",desc:"Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable.",url:"https://refactoring.guru/design-patterns/strategy",logo:"https://refactoring.guru/favicon.ico",preview:"https://refactoring.guru/images/refactoring/social/facebook-share-preview.png?id=dbf9e98269595be86eb668f365be6868"}),a(l,u(d({title:"Functional Error Handling in .NET With the Result Pattern",desc:"How should you handle errors in your code? This has been a topic of many discussions, and I want to share my opinion. One school of thought suggests using exceptions for flow control. This is not a good approach because it makes the code harder to reason about. The caller must know the implementation details and which exceptions to handle. Exceptions are for exceptional situations. Today, I want to show you how to implement error handling using the Result pattern. It's a functional approach to error handling, making your code more expressive.",link:"/milanjovanovic.tech/functional-error-handling-in-dotnet-with-the-result-pattern.md",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0,2)"})),null,16),F,a(c,{name:"m-jovanovic/refactoring-katas",desc:"This repository contains refactoring exercises in C#/.NET",url:"https://github.com/m-jovanovic/refactoring-katas",logo:"https://avatars.githubusercontent.com/u/34191235?s=48&v=4",preview:"https://opengraph.githubassets.com/2b6f373f3f5640ca3b49b9b16252cc2200c954190ec03f40e72d89123ce74c58/m-jovanovic/refactoring-katas"}),V,q])}const M=m(g,[["render",H],["__file","5-awesome-csharp-refactoring-tips.html.vue"]]),W=JSON.parse('{"path":"/milanjovanovic.tech/5-awesome-csharp-refactoring-tips.html","title":"5 Awesome C# Refactoring Tip","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"5 Awesome C# Refactoring Tip","description":"Article(s) > 5 Awesome C# Refactoring Tip","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 5 Awesome C# Refactoring Tip"},{"property":"og:description","content":"5 Awesome C# Refactoring Tip"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/5-awesome-csharp-refactoring-tips.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/5-awesome-csharp-refactoring-tips.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"5 Awesome C# Refactoring Tip"}],["meta",{"property":"og:description","content":"Article(s) > 5 Awesome C# Refactoring Tip"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_065.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_065.png"}],["meta",{"name":"twitter:image:alt","content":"5 Awesome C# Refactoring Tip"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2023-11-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5 Awesome C# Refactoring Tip\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_065.png\\"],\\"datePublished\\":\\"2023-11-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2023-11-25T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_065.png"},"headers":[{"level":2,"title":"Starting Point","slug":"starting-point","link":"#starting-point","children":[]},{"level":2,"title":"Refactoring the Validation","slug":"refactoring-the-validation","link":"#refactoring-the-validation","children":[]},{"level":2,"title":"Refactoring Towards Dependency Injection","slug":"refactoring-towards-dependency-injection","link":"#refactoring-towards-dependency-injection","children":[]},{"level":2,"title":"Refactoring the Credit Limit Calculation","slug":"refactoring-the-credit-limit-calculation","link":"#refactoring-the-credit-limit-calculation","children":[]},{"level":2,"title":"Reviewing the Refactoring (So Far)","slug":"reviewing-the-refactoring-so-far","link":"#reviewing-the-refactoring-so-far","children":[]},{"level":2,"title":"Taking It Further - Pushing Logic Down","slug":"taking-it-further-pushing-logic-down","link":"#taking-it-further-pushing-logic-down","children":[]},{"level":2,"title":"Next Steps","slug":"next-steps","link":"#next-steps","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.56,"words":1969},"filePathRelative":"milanjovanovic.tech/5-awesome-csharp-refactoring-tips.md","localizedDate":"2023년 11월 25일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{M as comp,W as data};
