import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as t,t as p,e as o,n,g as r,d as e,f as d,r as s,o as u}from"./app-BgNevrm5.js";const g={},m={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=t("nav",{class:"table-of-contents"},[t("ul")],-1),b=t("hr",null,null,-1),y=d('<p>In this project you&#39;ll learn how to use Core Data while building an app that fetches GitHub commit data for the Swift project. Core Data is Apple&#39;s object graph and persistence framework, which is a fancy way of saying it reads, writes and queries collections of related objects while also being able to save them to disk.</p><p>Core Data is undoubtedly useful, which is why about 500,000 apps in the App Store build on top of it. But it&#39;s also rather complicated to learn, which is why I left it so late in this tutorial series – despite my repeated attempts to simplify the topic, this tutorial is still going to be the hardest one in the whole of Hacking with Swift, and indeed I might have missed it out altogether were it not by far the most requested topic from readers!</p><p>So, strap in, because you&#39;re going to learn a lot: we&#39;ll be covering Core Data, which will encompass <code>NSFetchRequest</code>, <code>NSManagedObject</code>, <code>NSPredicate</code>, <code>NSSortDescriptor</code>, and <code>NSFetchedResultsController</code>. We&#39;ll also touch on <code>ISO8601DateFormatter</code> for the first time, which is one of Apple&#39;s ways to convert <code>Date</code> objects to and from strings.</p><p>As always, I like to teach new topics while giving you a real-world project to work with, and in our case we&#39;re going to be using the GitHub API to fetch information about Apple&#39;s open-source Swift project. The GitHub API is simple, fast, and outputs JSON, but most importantly it&#39;s public. Be warned, though: you get to make only 60 requests an hour without an API key, so while you&#39;re testing your app make sure you don&#39;t refresh too often!</p><p>If you weren&#39;t sure, a &quot;Git commit&quot; is a set of changes a developer made to source code that is stored in a source control repository. For example, if you spot a bug in the Swift compiler and contribute your changes, those changes will form one commit. And before I get emails from random internet pedants, <em>yes I know</em> things are more complicated than that, but it&#39;s more than enough of an explanation for the purposes of this tutorial.</p><p>Before we start, it&#39;s important I reiterate that Core Data can be a bit overwhelming at first. It has a lot of unique terminology, so if you find yourself struggling to understand it all, that&#39;s perfectly normal – it&#39;s not you, it&#39;s just Core Data.</p><p>Over the next four chapters, we will implement the four pieces of Core Data boilerplate. We&#39;re going to use Xcode&#39;s built-in Single View App template, but we&#39;re not <em>not</em> going to have it generate Core Data code for us because I want you to understand it from the ground up.</p><p>So, please go ahead and create a new Single View App project named Project38. Select Swift for your language, then make sure you <em>uncheck</em> Core Data otherwise the rest of this tutorial will be very confusing indeed.</p><figure><img src="https://hackingwithswift.com/img/books/hws/38-1@2x.png" alt="Do not, under any circumstances, enable Core Data for the Single View App template for this tutorial." tabindex="0" loading="lazy"><figcaption>Do not, under any circumstances, enable Core Data for the Single View App template for this tutorial.</figcaption></figure><p>We need to parse the JSON coming from GitHub&#39;s API, and the easiest way to do that isn’t using the <code>Codable</code> protocol that we’ve looked at before. You see, <code>Codable</code> is great at converting JSON into objects that we create and manage, but it’s less great when working with Core Data because <em>Core Data</em> wants to manage the objects itself as you’ll see.</p>',10),S={href:"https://github.com/twostraws/HackingWithSwift",target:"_blank",rel:"noopener noreferrer"},_=t("code",null,"twostraws/HackingWithSwift",-1),k=t("p",null,"We’re going to use a table view controller rather than a regular view controller, so we need to do the same conversion job we’ve done several times before. So:",-1),v=t("code",null,"ViewController.swift",-1),C=t("code",null,"UITableViewController",-1),D=t("code",null,"Main.storyboard",-1),A=t("li",null,"Drag in a new table view controller and set its class to be “ViewController”.",-1),I=t("li",null,"Make it the initial view controller for the storyboard.",-1),j=t("li",null,"Embed it inside a navigation controller.",-1),x=t("li",null,"Select its prototype cell, give it the style Subtitle, the identifier “Commit”, and a disclosure indicator for its accessory.",-1),O=t("figure",null,[t("img",{src:"https://hackingwithswift.com/img/books/hws/38-2@2x.png",alt:"Change the table view cell style to be Subtitle.",tabindex:"0",loading:"lazy"}),t("figcaption",null,"Change the table view cell style to be Subtitle.")],-1),N=t("p",null,"We also need a detail view controller, but it doesn’t need to do much – it’s just there to show that everything works correctly. So, drag out a new view controller from the object library, and give it the storyboard ID “Detail”. Drag a label out onto it so that it fills the view controller, then set Auto Layout rules so that it always stays edge to edge. Center its text, then give it 0 for its number of lines property.",-1),V=t("p",null,"The main table view controller class and interface are done for now, but we need to create a new class to handle the detail view controller. So, go to File > New > File and choose iOS > Source > Cocoa Touch Class. Name it “DetailViewController”, make it a subclass of “UIViewController”, then click Finish and Create.",-1),P=t("p",null,"Back in Main.storyboard, change the class of the detail view controller to be “DetailViewController”, then switch to the assistant editor and create an outlet for the label called “detailLabel”.",-1),H=t("p",null,"That's it: the project is cleaned up and ready for Core Data. Remember, there are four steps to implementing Core Data in your app, so let's start with the very first step: designing a Core Data model.",-1);function F(l,R){const a=s("VPCard"),i=s("FontIcon");return u(),h("div",null,[t("h1",m,[t("a",w,[t("span",null,p(l.$frontmatter.title)+" 관련",1)])]),o(a,n(r({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,b,o(a,n(r({title:"Setting up | Hacking with iOS",desc:"Setting up",link:"https://hackingwithswift.com/read/38/1/setting-up",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),y,t("p",null,[e("So, instead we’re going to use a popular JSON parsing library called SwiftyJSON. If you haven't already downloaded the content for this project, please get it from "),t("a",S,[e("GitHub now ("),o(i,{icon:"iconfont icon-github"}),_,e(")")]),e(". You'll see SwiftyJSON is there, so please drag that into your project now.")]),k,t("ol",null,[t("li",null,[e("Open "),o(i,{icon:"fa-brands fa-swift"}),v,e(" and make it inherit from "),C,e(".")]),t("li",null,[e("Open "),o(i,{icon:"iconfont icon-xcode"}),D,e(" and delete the view controller that’s there right now.")]),A,I,j,x]),O,N,V,P,H])}const J=c(g,[["render",F],["__file","01-setting-up.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/read/38/01-setting-up.html","title":"Setting up","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Setting up","description":"Article(s) > Setting up","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Setting up"},{"property":"og:description","content":"Setting up"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/38/01-setting-up.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/38/01-setting-up.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Setting up"}],["meta",{"property":"og:description","content":"Article(s) > Setting up"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/38-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Setting up\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/38-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/38-2@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.68,"words":1103},"filePathRelative":"hackingwithswift.com/read/38/01-setting-up.md","excerpt":"\\n"}');export{J as comp,T as data};
