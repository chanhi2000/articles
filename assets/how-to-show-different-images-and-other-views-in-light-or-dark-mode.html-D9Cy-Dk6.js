import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as s,t as l,e as a,n as t,g as e,f as c,r,o as u}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},h=s("nav",{class:"table-of-contents"},[s("ul")],-1),w=s("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI can load light and dark mode images directly from your asset catalog depending on the user&#39;s current appearance setting, but if you <em>aren&#39;t</em> using an asset catalog – for example if you downloaded the images or generated them locally – you need to do a little extra work.</p><p>The simplest solution is to create a new view that handles both light and dark mode images, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">AdaptiveImage</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">var</span> colorScheme</span>
<span class="line">    <span class="token keyword">let</span> light<span class="token punctuation">:</span> <span class="token class-name">Image</span></span>
<span class="line">    <span class="token keyword">let</span> dark<span class="token punctuation">:</span> <span class="token class-name">Image</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> colorScheme <span class="token operator">==</span> <span class="token punctuation">.</span>light <span class="token punctuation">{</span></span>
<span class="line">            light</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            dark</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That allows you to pass both images in, and SwiftUI will automatically select the correct one for both light and dark mode:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">AdaptiveImage</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sun.max&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;moon&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works great if you just want to flip between light and dark mode images, but if we add a little extra code we can create a wrapper view able to display completely different content depending on light and dark mode:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">AdaptiveView</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">&gt;</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">var</span> colorScheme</span>
<span class="line">    <span class="token keyword">let</span> light<span class="token punctuation">:</span> <span class="token class-name">T</span></span>
<span class="line">    <span class="token keyword">let</span> dark<span class="token punctuation">:</span> <span class="token class-name">U</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>dark <span class="token operator">=</span> dark</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span><span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>light <span class="token operator">=</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>dark <span class="token operator">=</span> <span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> colorScheme <span class="token operator">==</span> <span class="token punctuation">.</span>light <span class="token punctuation">{</span></span>
<span class="line">            light</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            dark</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That retains the same simple initializer, but now adds alternatives that accept closures. So, with that more advanced version we can now flip between more complicated layouts:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">AdaptiveView</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Light mode&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sun.max&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> dark<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dark mode&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;moon&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),v={class:"hint-container details"},f=s("summary",null,"Similar solutions…",-1);function b(i,y){const n=r("VPCard");return u(),p("div",null,[s("h1",k,[s("a",m,[s("span",null,l(i.$frontmatter.title)+" 관련",1)])]),a(n,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,w,a(n,t(e({title:"How to show different images and other views in light or dark mode | SwiftUI by Example",desc:"How to show different images and other views in light or dark mode",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-show-different-images-and-other-views-in-light-or-dark-mode",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,s("details",v,[f,a(n,t(e({title:"How to preview your layout in light and dark mode | SwiftUI by Example",desc:"How to preview your layout in light and dark mode",link:"/hackingwithswift.com/swiftui/how-to-preview-your-layout-in-light-and-dark-mode.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(n,t(e({title:"How to detect dark mode | SwiftUI by Example",desc:"How to detect dark mode",link:"/hackingwithswift.com/swiftui/how-to-detect-dark-mode.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(n,t(e({title:"How to use images and other views as backgrounds | SwiftUI by Example",desc:"How to use images and other views as backgrounds",link:"/hackingwithswift.com/swiftui/how-to-use-images-and-other-views-as-backgrounds.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(n,t(e({title:"How to layer views on top of each other using ZStack | SwiftUI by Example",desc:"How to layer views on top of each other using ZStack",link:"/hackingwithswift.com/swiftui/how-to-layer-views-on-top-of-each-other-using-zstack.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(n,t(e({title:"How to hide the home indicator and other system UI | SwiftUI by Example",desc:"How to hide the home indicator and other system UI",link:"/hackingwithswift.com/swiftui/how-to-hide-the-home-indicator-and-other-system-ui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const x=o(d,[["render",b],["__file","how-to-show-different-images-and-other-views-in-light-or-dark-mode.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-show-different-images-and-other-views-in-light-or-dark-mode.html","title":"How to show different images and other views in light or dark mode","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to show different images and other views in light or dark mode","description":"Article(s) > How to show different images and other views in light or dark mode","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to show different images and other views in light or dark mode"},{"property":"og:description","content":"How to show different images and other views in light or dark mode"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-show-different-images-and-other-views-in-light-or-dark-mode.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-show-different-images-and-other-views-in-light-or-dark-mode.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to show different images and other views in light or dark mode"}],["meta",{"property":"og:description","content":"Article(s) > How to show different images and other views in light or dark mode"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to show different images and other views in light or dark mode\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.28,"words":684},"filePathRelative":"hackingwithswift.com/swiftui/how-to-show-different-images-and-other-views-in-light-or-dark-mode.md","excerpt":"\\n"}');export{x as comp,V as data};
