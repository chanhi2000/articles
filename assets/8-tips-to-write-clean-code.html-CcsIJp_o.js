import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as s,t as k,e as n,n as v,g as m,w as t,d as a,f as h,r as p,o as b}from"./app-BgNevrm5.js";const g={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},I=s("hr",null,null,-1),x=h(`<p><strong>Clean code</strong> is code that&#39;s easy to read, maintain, and understand.</p><p>I consider writing <strong>clean code</strong> a skill.</p><p>And it&#39;s a <strong>skill</strong> that <strong>you can learn</strong> and improve with deliberate practice.</p><p>My favorite approach for practicing <strong>clean coding</strong> is doing <strong>refactoring exercises</strong>.</p><p>So I prepared one for you today, and we&#39;re going to improve it one step at a time by applying <strong>clean code principles</strong>.</p><p>Let&#39;s dive in!</p><hr><h2 id="starting-point" tabindex="-1"><a class="header-anchor" href="#starting-point"><span>Starting Point</span></a></h2><p>I like starting with a problem when trying to learn new concepts.</p><p>And the more illustrative the problem, the better.</p><p>So we&#39;ll use some poorly written code as the starting point for our refactoring.</p><p>And in each step, I will highlight what the current issue is and how we will fix it.</p><p>Here&#39;s what I see when I look at the <code>Process</code> method:</p><ul><li>Deep nesting of code - 4 levels, to be precise</li><li>Precondition checks are applied one after the other</li><li>Throwing exceptions to represent a failure</li></ul><p>How can we turn this into <strong>clean code</strong>?</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>IsVerified<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">                        <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; has too many items&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> <span class="token string">&quot;ReadyToProcess&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">                        <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; isn&#39;t ready to process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_1-early-return-principle" tabindex="-1"><a class="header-anchor" href="#_1-early-return-principle"><span>#1: Early Return Principle</span></a></h2><p>It should be painfully obvious by now that the initial version is deeply nested because of the <code>if</code> statements applying precondition checks.</p><p>We&#39;ll solve this using the <strong>early return principle</strong>, which states that we should return from a method as soon as the conditions for that have been met.</p><p>In the case of the <code>Process</code> method, this means moving from a deeply nested structure to a set of <strong>guard clauses</strong>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>order<span class="token punctuation">.</span>IsVerified<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; has too many items&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> <span class="token string">&quot;ReadyToProcess&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; isn&#39;t ready to process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-merge-if-statements-to-improve-readability" tabindex="-1"><a class="header-anchor" href="#_2-merge-if-statements-to-improve-readability"><span>#2: Merge If Statements To Improve Readability</span></a></h2><p>The <strong>early return principle</strong> makes the <code>Process</code> method more readable.</p><p>But there&#39;s no need to have one <strong>guard clause</strong> after another.</p><p>So we can merge all of them into one <code>if</code> statement.</p><p>The behavior of the <code>Process</code> method remains unchanged, but we remove a lot of excess code.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span></span>
<span class="line highlighted">        <span class="token operator">!</span>order<span class="token punctuation">.</span>IsVerified <span class="token operator">||</span></span>
<span class="line highlighted">        order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; has too many items&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> <span class="token string">&quot;ReadyToProcess&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; isn&#39;t ready to process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-use-linq-for-more-concise-code" tabindex="-1"><a class="header-anchor" href="#_3-use-linq-for-more-concise-code"><span>#3: Use LINQ For More Concise Code</span></a></h2><p>A quick improvement can be using <strong>LINQ</strong> to make the code more concise and expressive.</p><p>Instead of checking for <code>Items.Count == 0</code>, I prefer using the LINQ <code>Any</code> method.</p><p>You could argue that LINQ has worse performance, but I always optimize for readability.</p><p>There are far more expensive operations in an application than a simple method call.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token operator">!</span>order<span class="token punctuation">.</span>IsVerified <span class="token operator">||</span></span>
<span class="line highlighted">        <span class="token operator">!</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; has too many items&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> <span class="token string">&quot;ReadyToProcess&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; isn&#39;t ready to process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-replace-boolean-expression-with-descriptive-method" tabindex="-1"><a class="header-anchor" href="#_4-replace-boolean-expression-with-descriptive-method"><span>#4: Replace Boolean Expression With Descriptive Method</span></a></h2><p>Merging multiple conditions into one <code>if</code> statement means writing less code, but it can <strong>decrease readability</strong> with <strong>complex conditions</strong>.</p><p>However, you can fix this and improve readability by using a variable or method with a <strong>descriptive name</strong>.</p><p>I prefer using methods, so I will introduce the <code>IsProcessable</code> method to represent the precondition check.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsProcessable</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; has too many items&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> <span class="token string">&quot;ReadyToProcess&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;The order &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>Id <span class="token operator">+</span> <span class="token string">&quot; isn&#39;t ready to process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsProcessable</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">return</span> order <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line highlighted">           order<span class="token punctuation">.</span>IsVerified <span class="token operator">&amp;&amp;</span></span>
<span class="line highlighted">           order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-prefer-throwing-custom-exceptions" tabindex="-1"><a class="header-anchor" href="#_5-prefer-throwing-custom-exceptions"><span>#5: Prefer Throwing Custom Exceptions</span></a></h2><p>Now let&#39;s talk about throwing exceptions. I like to use exceptions for <em>&quot;exceptional&quot;</em> situations only, and I don&#39;t use them for flow control in my code.</p><p>Having said that, if you <em>do</em> want to use exceptions for flow control, it&#39;s better to use <strong>custom exceptions</strong>.</p><p>You can introduce valuable contextual information and better describe the reason for throwing the exception.</p><p>And if you want to handle these exceptions globally, you can create a base class to be able to catch specific exceptions.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsProcessable</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TooManyLineItemsException</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> <span class="token string">&quot;ReadyToProcess&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotReadyForProcessingException</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsProcessable</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> order <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>IsVerified <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-fix-magic-numbers-with-constants" tabindex="-1"><a class="header-anchor" href="#_6-fix-magic-numbers-with-constants"><span>#6: Fix Magic Numbers With Constants</span></a></h2><p>A common <strong>code smell</strong> I see is the use of <strong>magic numbers</strong>.</p><p>They are usually easy to spot because they&#39;re used to check if numeric some condition applies.</p><p>The problem with <strong>magic numbers</strong> is that they <strong>carry no meaning</strong>.</p><p>The code is harder to reason about, and more error-prone.</p><p>Fixing <strong>magic numbers</strong> should be straightforward, and one solution is introducing a constant.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line highlighted"><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> MaxNumberOfLineItems <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsProcessable</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> MaxNumberOfLineItems<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TooManyLineItemsException</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> <span class="token string">&quot;ReadyToProcess&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotReadyForProcessingException</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsProcessable</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> order <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>IsVerified <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_7-fix-magic-strings-with-enums" tabindex="-1"><a class="header-anchor" href="#_7-fix-magic-strings-with-enums"><span>#7: Fix Magic Strings With Enums</span></a></h2><p>Similar to <strong>magic numbers</strong>, we have the <strong>magic strings</strong> <strong>code smell</strong>.</p><p>A typical use case for <strong>magic strings</strong> is to represent some sort of state.</p><p>You&#39;ll notice that we&#39;re comparing the <code>Order.Status</code> value to a <strong>magic string</strong> to check if the order is ready to process.</p><p>A few <strong>problems</strong> with <strong>magic strings</strong>:</p><ul><li>Easy to make mistakes (typo)</li><li>Lack of strong typing</li><li>Not refactoring proof</li></ul><p>Let&#39;s create an <code>OrderStatus</code> <code>enum</code> to represent the possible states:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">OrderStatus</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Pending <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    ReadyToProcess <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    Processed <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now we have to use the appropriate <code>OrderStatus</code> in the check:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> MaxNumberOfLineItems <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsProcessable</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> MaxNumberOfLineItems<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TooManyLineItemsException</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> OrderStatus<span class="token punctuation">.</span>ReadyToProcess<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotReadyForProcessingException</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    order<span class="token punctuation">.</span>Status <span class="token operator">=</span> OrderStatus<span class="token punctuation">.</span>Processed<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsProcessable</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> order <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>IsVerified <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_8-use-the-result-object-pattern" tabindex="-1"><a class="header-anchor" href="#_8-use-the-result-object-pattern"><span>#8: Use The Result Object Pattern</span></a></h2><p>I said I don&#39;t prefer using exceptions for flow control. But how can we fix this?</p><p>One solution is using the <strong>result object pattern</strong>.</p><p>You can use a generic <code>Result</code> class to represent all types of results or a specific one like <code>ProcessOrderResult</code>.</p><p>To make your result objects encapsulated, expose a set of factory methods to create the concrete result type.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProcessOrderResult</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token function">ProcessOrderResult</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ProcessOrderResultType</span> type<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">long</span></span> orderId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Type <span class="token operator">=</span> type<span class="token punctuation">;</span></span>
<span class="line">        OrderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span></span>
<span class="line">        Message <span class="token operator">=</span> message<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">ProcessOrderResultType</span> Type <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Message <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">ProcessOrderResult</span> <span class="token function">NotProcessable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token keyword">new</span><span class="token punctuation">(</span>ProcessOrderResultType<span class="token punctuation">.</span>NotProcessable<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token string">&quot;Not processable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">ProcessOrderResult</span> <span class="token function">TooManyLineItems</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> oderId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token keyword">new</span><span class="token punctuation">(</span>ProcessOrderResultType<span class="token punctuation">.</span>TooManyLineItems<span class="token punctuation">,</span> orderId<span class="token punctuation">,</span> <span class="token string">&quot;Too many items&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">ProcessOrderResult</span> <span class="token function">NotReadyForProcessing</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> oderId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token keyword">new</span><span class="token punctuation">(</span>ProcessOrderResultType<span class="token punctuation">.</span>NotReadyForProcessing<span class="token punctuation">,</span> oderId<span class="token punctuation">,</span> <span class="token string">&quot;Not ready&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">ProcessOrderResult</span> <span class="token function">Success</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> oderId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token keyword">new</span><span class="token punctuation">(</span>ProcessOrderResultType<span class="token punctuation">.</span>Success<span class="token punctuation">,</span> oderId<span class="token punctuation">,</span> <span class="token string">&quot;Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using an <code>enum</code> like <code>ProcessOrderResultType</code> will make consuming the result object easier with switch expressions. Here&#39;s the <code>enum</code> to represent the <code>ProcessOrderResult.Type</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ProcessOrderResultType</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    NotProcessable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    TooManyLineItems <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    NotReadyForProcessing <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    Success <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now the <code>Process</code> method becomes:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> MaxNumberOfLineItems <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">ProcessOrderResult</span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsProcessable</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">return</span> ProcessOrderResult<span class="token punctuation">.</span><span class="token function">NotProcessable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> MaxNumberOfLineItems<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">return</span> ProcessOrderResult<span class="token punctuation">.</span><span class="token function">TooManyLineItems</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Status <span class="token operator">!=</span> OrderStatus<span class="token punctuation">.</span>ReadyToProcess<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">return</span> ProcessOrderResult<span class="token punctuation">.</span><span class="token function">NotReadyForProcessing</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>IsProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    order<span class="token punctuation">.</span>Status <span class="token operator">=</span> OrderStatus<span class="token punctuation">.</span>Processed<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token keyword">return</span> ProcessOrderResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsProcessable</span><span class="token punctuation">(</span><span class="token class-name">Order<span class="token punctuation">?</span></span> order<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> order <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>IsVerified <span class="token operator">&amp;&amp;</span></span>
<span class="line">           order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s how using an <code>enum</code> for the <code>ProcessOrderResult.Type</code> allows you to write a switch expression:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token function">Process</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">result<span class="token punctuation">.</span>Type <span class="token keyword">switch</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    ProcessOrderResultType<span class="token punctuation">.</span>TooManyLineItems <span class="token operator">=&gt;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Too many line items: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result<span class="token punctuation">.</span>OrderId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    ProcessOrderResultType<span class="token punctuation">.</span>NotReadyForProcessing <span class="token operator">=&gt;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Not ready for processing </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result<span class="token punctuation">.</span>OrderId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    ProcessOrderResultType<span class="token punctuation">.</span>Success <span class="token operator">=&gt;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Processed successfully </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result<span class="token punctuation">.</span>OrderId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    _ <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to process: {OrderId}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Writing <strong>clean code</strong> is a matter of deliberate practice and experience.</p><p>Most people will read about <strong>clean coding principles</strong>, but few will strive to apply them daily.</p><p>This is where you can set yourself apart.</p>`,86),P=s("strong",null,"clean code",-1),_={href:"https://youtu.be/McDvyFglkvU",target:"_blank",rel:"noopener noreferrer"},T=s("p",null,"Hope this was helpful.",-1),q=s("p",null,"See you next week!",-1),O=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"Today's action step"),s("p",null,"Take a look at your project and see if you're making some of the mistakes I highlighted here. And then fix them using the clean code tips I shared with you.")],-1);function R(o,C){const l=p("VPCard"),e=p("router-link"),c=p("SiteInfo"),i=p("FontIcon"),r=p("VidStack");return b(),d("div",null,[s("h1",y,[s("a",w,[s("span",null,k(o.$frontmatter.title)+" 관련",1)])]),n(l,v(m({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",f,[s("ul",null,[s("li",null,[n(e,{to:"#starting-point"},{default:t(()=>[a("Starting Point")]),_:1})]),s("li",null,[n(e,{to:"#_1-early-return-principle"},{default:t(()=>[a("#1: Early Return Principle")]),_:1})]),s("li",null,[n(e,{to:"#_2-merge-if-statements-to-improve-readability"},{default:t(()=>[a("#2: Merge If Statements To Improve Readability")]),_:1})]),s("li",null,[n(e,{to:"#_3-use-linq-for-more-concise-code"},{default:t(()=>[a("#3: Use LINQ For More Concise Code")]),_:1})]),s("li",null,[n(e,{to:"#_4-replace-boolean-expression-with-descriptive-method"},{default:t(()=>[a("#4: Replace Boolean Expression With Descriptive Method")]),_:1})]),s("li",null,[n(e,{to:"#_5-prefer-throwing-custom-exceptions"},{default:t(()=>[a("#5: Prefer Throwing Custom Exceptions")]),_:1})]),s("li",null,[n(e,{to:"#_6-fix-magic-numbers-with-constants"},{default:t(()=>[a("#6: Fix Magic Numbers With Constants")]),_:1})]),s("li",null,[n(e,{to:"#_7-fix-magic-strings-with-enums"},{default:t(()=>[a("#7: Fix Magic Strings With Enums")]),_:1})]),s("li",null,[n(e,{to:"#_8-use-the-result-object-pattern"},{default:t(()=>[a("#8: Use The Result Object Pattern")]),_:1})]),s("li",null,[n(e,{to:"#takeaway"},{default:t(()=>[a("Takeaway")]),_:1})])])]),I,n(c,{name:"8 Tips To Write Clean Code",desc:"Clean code is code that's easy to read, maintain, and understand. I consider writing clean code a skill. And it's a skill that you can learn and improve with deliberate practice. My favorite approach to practice clean coding is doing refactoring exercises. So I prepared one for you today, and we're going to improve one step at a time by applying clean code principles.",url:"https://milanjovanovic.tech/blog/8-tips-to-write-clean-code/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_046.png"}),x,s("p",null,[a("I also made a video about these "),P,a(" tips, you can watch it "),s("a",_,[n(i,{icon:"fa-brands fa-youtube"}),a("here.")])]),n(r,{src:"youtube/McDvyFglkvU"}),T,q,O])}const j=u(g,[["render",R],["__file","8-tips-to-write-clean-code.html.vue"]]),N=JSON.parse('{"path":"/milanjovanovic.tech/8-tips-to-write-clean-code.html","title":"8 Tips To Write Clean Code","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"8 Tips To Write Clean Code","description":"Article(s) > 8 Tips To Write Clean Code","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 8 Tips To Write Clean Code"},{"property":"og:description","content":"8 Tips To Write Clean Code"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/8-tips-to-write-clean-code.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/8-tips-to-write-clean-code.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"8 Tips To Write Clean Code"}],["meta",{"property":"og:description","content":"Article(s) > 8 Tips To Write Clean Code"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_046.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_046.png"}],["meta",{"name":"twitter:image:alt","content":"8 Tips To Write Clean Code"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8 Tips To Write Clean Code\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_046.png\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2023-07-15T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_046.png"},"headers":[{"level":2,"title":"Starting Point","slug":"starting-point","link":"#starting-point","children":[]},{"level":2,"title":"#1: Early Return Principle","slug":"_1-early-return-principle","link":"#_1-early-return-principle","children":[]},{"level":2,"title":"#2: Merge If Statements To Improve Readability","slug":"_2-merge-if-statements-to-improve-readability","link":"#_2-merge-if-statements-to-improve-readability","children":[]},{"level":2,"title":"#3: Use LINQ For More Concise Code","slug":"_3-use-linq-for-more-concise-code","link":"#_3-use-linq-for-more-concise-code","children":[]},{"level":2,"title":"#4: Replace Boolean Expression With Descriptive Method","slug":"_4-replace-boolean-expression-with-descriptive-method","link":"#_4-replace-boolean-expression-with-descriptive-method","children":[]},{"level":2,"title":"#5: Prefer Throwing Custom Exceptions","slug":"_5-prefer-throwing-custom-exceptions","link":"#_5-prefer-throwing-custom-exceptions","children":[]},{"level":2,"title":"#6: Fix Magic Numbers With Constants","slug":"_6-fix-magic-numbers-with-constants","link":"#_6-fix-magic-numbers-with-constants","children":[]},{"level":2,"title":"#7: Fix Magic Strings With Enums","slug":"_7-fix-magic-strings-with-enums","link":"#_7-fix-magic-strings-with-enums","children":[]},{"level":2,"title":"#8: Use The Result Object Pattern","slug":"_8-use-the-result-object-pattern","link":"#_8-use-the-result-object-pattern","children":[]},{"level":2,"title":"Takeaway","slug":"takeaway","link":"#takeaway","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.5,"words":1651},"filePathRelative":"milanjovanovic.tech/8-tips-to-write-clean-code.md","localizedDate":"2023년 7월 15일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{j as comp,N as data};
