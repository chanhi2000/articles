import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,t as u,e as s,n as a,g as n,d as o,f as h,r as i,o as w}from"./app-BgNevrm5.js";const d={},m={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),k=t("hr",null,null,-1),y=h(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI supports size classes natively by exposing them in the environment for us to read. To use them, first create an <code>@Environment</code> object that will store its value, then check the value of that property whenever you need, looking for either the <code>.compact</code> or <code>.regular</code> size class.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>horizontalSizeClass<span class="token punctuation">)</span> <span class="token keyword">var</span> horizontalSizeClass</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> horizontalSizeClass <span class="token operator">==</span> <span class="token punctuation">.</span>compact <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Compact&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Regular&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-create-different-layouts-using-size-classes-1.zip",target:"_blank",rel:"noopener noreferrer"},v=t("figure",null,[t("img",{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-different-layouts-using-size-classes-1~dark.png",alt:"A phone in portrait mode showing the word “Compact” beside a phone in landscape mode showing the word “Regular”.",tabindex:"0",loading:"lazy"}),t("figcaption",null,"A phone in portrait mode showing the word “Compact” beside a phone in landscape mode showing the word “Regular”.")],-1),z=t("p",null,[o("Size classes are a great way to make your user interfaces intelligently adapt to the available space by using a "),t("code",null,"VStack"),o(" or a "),t("code",null,"HStack"),o(" for your content. For example, if you have lots of space you might lay things out horizontally, but switch to vertical layout when space is limited.")],-1),_={class:"hint-container details"},S=t("summary",null,"Similar solutions…",-1);function x(c,H){const e=i("VPCard"),l=i("FontIcon");return w(),p("div",null,[t("h1",m,[t("a",f,[t("span",null,u(c.$frontmatter.title)+" 관련",1)])]),s(e,a(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,k,s(e,a(n({title:"How to create different layouts using size classes | SwiftUI by Example",desc:"How to create different layouts using size classes",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-different-layouts-using-size-classes",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,t("blockquote",null,[t("p",null,[t("a",b,[s(l,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),v,z,t("details",_,[S,s(e,a(n({title:"How to use Instruments to profile your SwiftUI code and identify slow layouts | SwiftUI by Example",desc:"How to use Instruments to profile your SwiftUI code and identify slow layouts",link:"/hackingwithswift.com/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"How to customize stack layouts with alignment and spacing | SwiftUI by Example",desc:"How to customize stack layouts with alignment and spacing",link:"/hackingwithswift.com/swiftui/how-to-customize-stack-layouts-with-alignment-and-spacing.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"How to control which NavigationSplitView column is shown in compact layouts | SwiftUI by Example",desc:"How to control which NavigationSplitView column is shown in compact layouts",link:"/hackingwithswift.com/swiftui/how-to-control-which-navigationsplitview-column-is-shown-in-compact-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"How to control which NavigationSplitView column is shown in compact layouts | SwiftUI by Example",desc:"How to control which NavigationSplitView column is shown in compact layouts",link:"/hackingwithswift.com/swiftui/how-to-control-which-navigationsplitview-column-is-shown-in-compact-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"How to automatically switch between HStack and VStack based on size class | SwiftUI by Example",desc:"How to automatically switch between HStack and VStack based on size class",link:"/hackingwithswift.com/swiftui/how-to-automatically-switch-between-hstack-and-vstack-based-on-size-class.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"How to animate the size of text | SwiftUI by Example",desc:"How to animate the size of text",link:"/hackingwithswift.com/swiftui/how-to-animate-the-size-of-text.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const U=r(d,[["render",x],["__file","how-to-create-different-layouts-using-size-classes.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-create-different-layouts-using-size-classes.html","title":"How to create different layouts using size classes","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create different layouts using size classes","description":"Article(s) > How to create different layouts using size classes","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create different layouts using size classes"},{"property":"og:description","content":"How to create different layouts using size classes"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-different-layouts-using-size-classes.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-different-layouts-using-size-classes.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create different layouts using size classes"}],["meta",{"property":"og:description","content":"Article(s) > How to create different layouts using size classes"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-different-layouts-using-size-classes-1~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create different layouts using size classes\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-create-different-layouts-using-size-classes-1~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.05,"words":615},"filePathRelative":"hackingwithswift.com/swiftui/how-to-create-different-layouts-using-size-classes.md","excerpt":"\\n"}');export{U as comp,E as data};
