import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as e,g as t,d as p,f as c,r as i,o as k}from"./app-BgNevrm5.js";const w={},h={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>You can loop over an <code>AsyncSequence</code> using Swift’s regular loop types, <code>for</code>, <code>while</code>, and <code>repeat</code>, but whenever you read a value from the async sequence you must use either <code>await</code> or <code>try await</code> depending on whether it can throw errors or not.</p><p>As an example, <code>URL</code> has a built-in <code>lines</code> property that generates an async sequence of all the lines directly from a URL. This does a <em>lot</em> of work internally: making the network request, fetching part of the data, converting it into a string, sending it back for us to use, then repeating fetch, convert, and send again and again until the server stops sending back data.</p><p>All that functionality boils down to just a handful of lines of code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fetchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/users.csv&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> line <span class="token keyword">in</span> url<span class="token punctuation">.</span>lines <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Received user: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">line</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-loop-over-an-asyncsequence-using-for-await-1.zip",target:"_blank",rel:"noopener noreferrer"},b=c(`<p>Notice how we must use <code>try</code> along with <code>await</code>, because fetching data from the network might throw errors.</p><p>Using <code>lines</code> returns a specialized type called <code>AsyncLineSequence</code>, which returns individual lines from the download as strings. Because our source happens to be a comma-separated values file (CSV), we can write code to read the values from each line easily enough:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/users.csv&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">try</span> <span class="token keyword">await</span> line <span class="token keyword">in</span> url<span class="token punctuation">.</span>lines <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> parts <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;,&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">guard</span> parts<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">let</span> firstName <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">let</span> lastName <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">let</span> country <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found user #</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">firstName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">lastName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> from </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">country</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">printUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),q={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-loop-over-an-asyncsequence-using-for-await-2.zip",target:"_blank",rel:"noopener noreferrer"},_=c(`<p>Just like a regular sequence, using an async sequence in this way effectively generates an iterator then calls <code>next()</code> on it repeatedly until it returns <code>nil</code>, at which point the loop finishes.</p><p>If you want more control over how the sequence is read, you can of course create your own iterator then call <code>next()</code> whenever you want and as often as you want. Again, it will send back <code>nil</code> when the sequence is empty, at which point you should stop calling it.</p><p>For example, we could read the first user from our CSV and treat them specially, then read the next four users and do something specific for them, then finally reduce all the remainder down into an array of other users:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/users.csv&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> iterator <span class="token operator">=</span> url<span class="token punctuation">.</span>lines<span class="token punctuation">.</span><span class="token function">makeAsyncIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The first user is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">line</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User #</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">line</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> remainingResults <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        remainingResults<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;There were </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">remainingResults<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> other users.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">printUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),S={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-loop-over-an-asyncsequence-using-for-await-3.zip",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container details"},x=n("summary",null,"Similar solutions…",-1);function H(l,R){const a=i("VPCard"),o=i("FontIcon");return k(),u("div",null,[n("h1",h,[n("a",m,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,y,s(a,e(t({title:"How to loop over an AsyncSequence using for await | Swift Concurrency by Example",desc:"How to loop over an AsyncSequence using for await",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-loop-over-an-asyncsequence-using-for-await",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("blockquote",null,[n("p",null,[n("a",v,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),b,n("blockquote",null,[n("p",null,[n("a",q,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),_,n("blockquote",null,[n("p",null,[n("a",S,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),n("details",A,[x,s(a,e(t({title:"How to create a custom AsyncSequence | Swift Concurrency by Example",desc:"How to create a custom AsyncSequence",link:"/hackingwithswift.com/concurrency/how-to-create-a-custom-asyncsequence.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to manipulate an AsyncSequence using map(), filter(), and more | Swift Concurrency by Example",desc:"How to manipulate an AsyncSequence using map(), filter(), and more",link:"/hackingwithswift.com/concurrency/how-to-manipulate-an-asyncsequence-using-map-filter-and-more.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"What’s the difference between await and async let? | Swift Concurrency by Example",desc:"What’s the difference between await and async let?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-await-and-async-let.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to convert an AsyncSequence into a Sequence | Swift Concurrency by Example",desc:"How to convert an AsyncSequence into a Sequence",link:"/hackingwithswift.com/concurrency/how-to-convert-an-asyncsequence-into-a-sequence.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"What’s the difference between Sequence, AsyncSequence, and AsyncStream? | Swift Concurrency by Example",desc:"What’s the difference between Sequence, AsyncSequence, and AsyncStream?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-sequence-asyncsequence-and-asyncstream.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const j=r(w,[["render",H],["__file","how-to-loop-over-an-asyncsequence-using-for-await.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-loop-over-an-asyncsequence-using-for-await.html","title":"How to loop over an AsyncSequence using for await","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to loop over an AsyncSequence using for await","description":"Article(s) > How to loop over an AsyncSequence using for await","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to loop over an AsyncSequence using for await"},{"property":"og:description","content":"How to loop over an AsyncSequence using for await"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-loop-over-an-asyncsequence-using-for-await.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-loop-over-an-asyncsequence-using-for-await.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to loop over an AsyncSequence using for await"}],["meta",{"property":"og:description","content":"Article(s) > How to loop over an AsyncSequence using for await"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to loop over an AsyncSequence using for await\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.99,"words":896},"filePathRelative":"hackingwithswift.com/concurrency/how-to-loop-over-an-asyncsequence-using-for-await.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{j as comp,E as data};
