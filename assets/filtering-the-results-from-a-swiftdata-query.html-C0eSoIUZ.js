import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as l,e as n,n as t,g as e,f as u,r as i,o as d}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},g=s("nav",{class:"table-of-contents"},[s("ul")],-1),f=s("hr",null,null,-1),w=s("blockquote",null,[s("p",null,"Updated for Xcode 15")],-1),v=u(`<p>Filtering in SwiftData is done with predicates: a test that can be applied to decide whether objects should appear in the resulting array or not. This is done with a special <code>#Predicate</code> macro that takes Swift code we write and converts it into filters the underlying database can understand.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you used Core Data before, <code>#Predicate</code> is similar to <code>NSPredicate</code>. The main difference is that <code>#Predicate</code> gets typechecked at compile time, but there is no <code>NSCompoundPredicate</code> equivalent at this time.</p></div><p>Let&#39;s try out a few sample predicates. For example, we might say that our app shouldn’t show any destinations with a low priority:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">init</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token class-name">SortDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Destination</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _destinations <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token short-argument">$0</span><span class="token punctuation">.</span>priority <span class="token operator">&gt;=</span> <span class="token number">2</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> sort<span class="token punctuation">:</span> <span class="token punctuation">[</span>sort<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, we give <code>#Predicate</code> a closure that takes one object from the query and applies a test to it. In this case, does the object have a priority of at least 2?</p><p>Or we could write a predicate that only shows destinations that are upcoming in our trip, ignoring those that are older than now. We can&#39;t read <code>Date.now</code> inside the <code>#Predicate</code> macro, but if we take a local copy of it first then it will work fine. So, our predicate would be this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">init</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token class-name">SortDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Destination</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now</span>
<span class="line"></span>
<span class="line">    _destinations <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token short-argument">$0</span><span class="token punctuation">.</span>date <span class="token operator">&gt;</span> now</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> sort<span class="token punctuation">:</span> <span class="token punctuation">[</span>sort<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Those are both interesting, but in this project we&#39;re going to use a predicate to let the user search for specific destinations using SwiftUI&#39;s <code>searchable()</code> modifier.</p><p>As this will change while the app is running, specifying a dynamic filter is just the same as specifying a dynamic sort order: we need to create state in <code>ContentView</code>, then pass it into the initializer for <code>DestinationListingView</code>.</p><p>This takes four steps, starting with adding some new state in <code>ContentView</code> to store whatever is the user&#39;s current search text:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> searchText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We then need to bind that to a <code>searchable()</code> modifier, so put this next to <code>navigationTitle()</code> in <code>ContentView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $searchText<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Third, we need to update the initializer of <code>DestinationListingView</code> to accept a search string, and use it for the query predicate:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">init</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token class-name">SortDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Destination</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> searchString<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _destinations <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> searchString<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localizedStandardContains</span><span class="token punctuation">(</span>searchString<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> sort<span class="token punctuation">:</span> <span class="token punctuation">[</span>sort<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p><code>localizedStandardContains()</code> is almost always the best way to do user-facing string searches. If you use the regular <code>contains()</code> method you&#39;ll get case-sensitive searching.</p></div><p>Make sure you send a sample search into your preview, even if that&#39;s just an empty string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">DestinationListingView</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token class-name">Destination</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> searchString<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, we need to edit the way <code>DestinationListingView</code> is created in <code>ContentView</code>, so that it passes in both the current sort order and search string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">DestinationListingView</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> sortOrder<span class="token punctuation">,</span> searchString<span class="token punctuation">:</span> searchText<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And now we have dynamic filtering – nice!</p>`,21);function y(o,b){const a=i("VPCard"),p=i("VidStack");return d(),r("div",null,[s("h1",m,[s("a",k,[s("span",null,l(o.$frontmatter.title)+" 관련",1)])]),n(a,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,f,n(a,t(e({title:"Filtering the results from a SwiftData query | SwiftData by Example",desc:"Filtering the results from a SwiftData query",link:"https://hackingwithswift.com/quick-start/swiftdata/filtering-the-results-from-a-swiftdata-query",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,n(p,{src:"youtube/VyCLfLbA-s0"}),v])}const _=c(h,[["render",y],["__file","filtering-the-results-from-a-swiftdata-query.html.vue"]]),q=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/filtering-the-results-from-a-swiftdata-query.html","title":"Filtering the results from a SwiftData query","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Filtering the results from a SwiftData query","description":"Article(s) > Filtering the results from a SwiftData query","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Filtering the results from a SwiftData query"},{"property":"og:description","content":"Filtering the results from a SwiftData query"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/filtering-the-results-from-a-swiftdata-query.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/filtering-the-results-from-a-swiftdata-query.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Filtering the results from a SwiftData query"}],["meta",{"property":"og:description","content":"Article(s) > Filtering the results from a SwiftData query"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-10-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Filtering the results from a SwiftData query\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-10-12T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.07,"words":620},"filePathRelative":"hackingwithswift.com/swiftdata/filtering-the-results-from-a-swiftdata-query.md","localizedDate":"2023년 10월 12일","excerpt":"\\n"}');export{_ as comp,q as data};
