import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as k,e,n as v,g as b,w as l,d as s,a as p,f as i,r as o,o as _}from"./app-BgNevrm5.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},B={class:"table-of-contents"},A=n("hr",null,null,-1),C=n("a",{href:"https://youtu.be/nRd0ejHADss",target:"_blank",rel:"noopener noreferrer"},"<Beyond Passwords: Keycloak's Contributions to IAM(Identity and Access Management) + Security>",-1),E={href:"https://keycloak.org/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://kccncna2023.sched.com/event/1R2qR",target:"_blank",rel:"noopener noreferrer"},I=i(`<figure><img src="https://yozm.wishket.com/media/news/2427/그림0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이번 2부에서 살펴볼 내용은 다음과 같습니다.</p><div class="hint-container warning"><p class="hint-container-title">테스트를 위한 사전 준비 작업</p><ol><li>코드 및 사전 필요 구성 확인</li><li>Keycloak의 접근을 위한 HTTPS 인증서와 퍼블릭 환경에서 사용할 수 있는 도메인을 구성</li><li>키클락이 배포될 GKE 클러스터 생성을 진행하고 이후에 키클락을 생성된 GKE에 배포</li><li>HTTPS 인증서를 GKE 인그레스 컨트롤러에서 사용할 수 있도록 연결 작업을 진행</li><li>키클락에 접근해서 구글 OIDC에 접근해서 인증을 처리할 수 있는 설정을 진행</li><li>구글 클라우드에서 키클락의 외부 사용자 정보를 가져오도록 구성 추가</li><li>이메일 2차 인증 구성</li></ol></div><p>모두가 이러한 실습 환경을 꾸미고 테스트할 수 없다는 것을 알고 있기 때문에 가능한 자세하게 실습하는 느낌으로 설명하였습니다. 이를 통해서 내용을 개괄적으로 이해할 수 있으면 좋겠습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2427/그림1-1.png" alt="KS 통합 인증 다이어그램" tabindex="0" loading="lazy"><figcaption>KS 통합 인증 다이어그램</figcaption></figure><figure><img src="https://yozm.wishket.com/media/news/2427/그림1-2.png" alt="GKE 통합 인증 다이어그램 (차이점이 있답니다!!!)" tabindex="0" loading="lazy"><figcaption>GKE 통합 인증 다이어그램 (차이점이 있답니다!!!)</figcaption></figure><hr><h2 id="테스트를-위한-사전-준비-작업" tabindex="-1"><a class="header-anchor" href="#테스트를-위한-사전-준비-작업"><span>테스트를 위한 사전 준비 작업</span></a></h2><p>지난 번 게시글을 통해서 키클락에 대해 어느정도 이해하셨을 것으로 생각합니다.</p><p>이제 실제로 멀티 쿠버네티스 환경에 있는 인증들을 키클락을 통해서 통합 관리하는 방법에 대해서, 실습을 통해 배워보도록 하겠습니다. 통합 인증을 구성하기 위해서 앞서 보여드렸던 다이어그램과 같은 쿠버네티스 클러스터를 배포하고, 키클락을 구성하기 위해서 긴 사전 작업이 필요합니다.</p><h3 id="_1-코드-및-사전-필요-구성-확인" tabindex="-1"><a class="header-anchor" href="#_1-코드-및-사전-필요-구성-확인"><span>1. 코드 및 사전 필요 구성 확인</span></a></h3><p>실습을 진행하기 위해서 사용하는 스크립트 파일을 Git clone을 통해서 내려받습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/sysnet4admin/IaC.git</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Cloning into &#39;IaC&#39;...</span></span>
<span class="line"><span class="token comment"># remote: Enumerating objects: 2440, done.</span></span>
<span class="line"><span class="token comment"># remote: Counting objects: 100% (688/688), done.</span></span>
<span class="line"><span class="token comment"># remote: Compressing objects: 100% (282/282), done.</span></span>
<span class="line"><span class="token comment"># remote: Total 2440 (delta 394), reused 673 (delta 379), pack-reused 1752</span></span>
<span class="line"><span class="token comment"># Receiving objects: 100% (2440/2440), 17.93 MiB | 6.57 MiB/s, done.</span></span>
<span class="line"><span class="token comment"># Resolving deltas: 100% (1337/1337), done.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Keycloak으로 이동한 후에 디렉터리 구조를 살펴봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> IaC/Keycloak/</span>
<span class="line">tree</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># .</span></span>
<span class="line"><span class="token comment"># ├── oncloud-1.site</span></span>
<span class="line"><span class="token comment"># │   ├── Deploy-infra</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1-1.deploy-gke-env-w-keycloak.sh</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1-2.deploy-gke-ingress-4-https-keycloak.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1-3.clientconfig-gke-keycloak-w-oidc.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 2-1.deploy-eks-env-only.sh</span></span>
<span class="line"><span class="token comment"># │   │   ├── eksctl-config</span></span>
<span class="line"><span class="token comment"># │   │   │   └── keycloak-w-oidc.yaml</span></span>
<span class="line"><span class="token comment"># │   │   └── planB-keycloak-by-helm.yaml</span></span>
<span class="line"><span class="token comment"># │   ├── EKS</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1.clusterrolebinding-4-devops-group-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 2-oncloud-1.swtich-ctx-hoon-to-soojin.sh</span></span>
<span class="line"><span class="token comment"># │   │   └── 3.set-cred-4-oidc-user.sh</span></span>
<span class="line"><span class="token comment"># │   ├── GKE</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1.clusterrolebinding-4-devops-group-as-admin-NOTWORK.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 2-hoon.clusterrolebinding-4-devops-user-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># │   │   └── 2-soojin.clusterrolebinding-4-devops-user-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># │   └── kubelogin-installer.sh</span></span>
<span class="line"><span class="token comment"># ├── oncloud-2.site</span></span>
<span class="line"><span class="token comment"># │   ├── Deploy-infra</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1-1.deploy-gke-env-w-keycloak.sh</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1-2.deploy-gke-ingress-4-https-keycloak.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1-3.clientconfig-gke-keycloak-w-oidc.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 2-1.deploy-eks-env-only.sh</span></span>
<span class="line"><span class="token comment"># │   │   ├── eksctl-config</span></span>
<span class="line"><span class="token comment"># │   │   │   └── keycloak-w-oidc.yaml</span></span>
<span class="line"><span class="token comment"># │   │   └── planB-keycloak-by-helm.yaml</span></span>
<span class="line"><span class="token comment"># │   ├── EKS</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1.clusterrolebinding-4-devops-group-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 2-oncloud-2.swtich-ctx-hoon-to-soojin.sh</span></span>
<span class="line"><span class="token comment"># │   │   └── 3.set-cred-4-oidc-user.sh</span></span>
<span class="line"><span class="token comment"># │   ├── GKE</span></span>
<span class="line"><span class="token comment"># │   │   ├── 1.clusterrolebinding-4-devops-group-as-admin-NOTWORK.yaml</span></span>
<span class="line"><span class="token comment"># │   │   ├── 2-hoon.clusterrolebinding-4-devops-user-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># │   │   └── 2-soojin.clusterrolebinding-4-devops-user-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># │   └── kubelogin-installer.sh</span></span>
<span class="line"><span class="token comment"># ├── prerequisite-install-tools.sh</span></span>
<span class="line"><span class="token comment"># └── README.md</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 10 directories, 28 files</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),R=n("code",null,"Keycloak",-1),K=n("code",null,"prerequisite-install-tools.sh",-1),T=i(`<div class="hint-container note"><p class="hint-container-title">참고</p><p>이 부분을 실행한다고 해서 모든 필요 구성이 완료되지 않습니다. 환경에 따라 더 필요한 내용이 있을 수 있습니다.</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> prerequisite-install-tools.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2),x=n("code",null,"prerequisite-install-tools.sh",-1),S=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/usr/bin/env bash</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># krew</span></span>
<span class="line"><span class="token punctuation">(</span></span>
<span class="line"> <span class="token builtin class-name">set</span> -x<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>mktemp <span class="token parameter variable">-d</span><span class="token variable">)</span></span>&quot;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line"> <span class="token assign-left variable">OS</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;[:upper:]&#39;</span> <span class="token string">&#39;[:lower:]&#39;</span><span class="token variable">)</span></span>&quot;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line"> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/x86_64/amd64/&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/\\(arm\\)\\(64\\)\\?.*/\\1\\2/&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/aarch64$/arm64/&#39;</span><span class="token variable">)</span></span>&quot;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line"> <span class="token assign-left variable">KREW</span><span class="token operator">=</span><span class="token string">&quot;krew-<span class="token variable">\${OS}</span>_<span class="token variable">\${ARCH}</span>&quot;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line"> <span class="token function">curl</span> <span class="token parameter variable">-fsSLO</span> <span class="token string">&quot;https://github.com/kubernetes-sigs/krew/releases/latest/download/<span class="token variable">\${KREW}</span>.tar.gz&quot;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line"> <span class="token function">tar</span> zxvf <span class="token string">&quot;<span class="token variable">\${KREW}</span>.tar.gz&quot;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line"> ./<span class="token string">&quot;<span class="token variable">\${KREW}</span>&quot;</span> <span class="token function">install</span> krew</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${KREW_ROOT<span class="token operator">:-</span>$HOME<span class="token operator">/</span>.krew}</span>/bin:<span class="token environment constant">$PATH</span>&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># eskctl</span></span>
<span class="line">brew <span class="token function">install</span> eksctl</span>
<span class="line"></span>
<span class="line"><span class="token comment"># kubelogin for GCP</span></span>
<span class="line">gcloud components <span class="token function">install</span> kubectl-oidc</span>
<span class="line"></span>
<span class="line"><span class="token comment"># kubelogin for AWS</span></span>
<span class="line">kubectl krew <span class="token function">install</span> oidc-login</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>해당 스크립트는 실습에 필요한 <code>gcloud</code>, <code>eksctl</code>, <code>krew</code>를 설치 또는 내려받습니다. 물론 이것 이외에도 환경에 따라 더 많은 사전 준비 작업이 필요할 수 있습니다. 사전에 필요한 내용들이 있다는 것을 명시적으로 알리기 위해서 작성된 스크립트라고 보면 됩니다.</p><h3 id="_2-keycloak의-접근을-위한-https-인증서와-퍼블릭-환경에서-사용할-수-있는-도메인을-구성" tabindex="-1"><a class="header-anchor" href="#_2-keycloak의-접근을-위한-https-인증서와-퍼블릭-환경에서-사용할-수-있는-도메인을-구성"><span>2. Keycloak의 접근을 위한 HTTPS 인증서와 퍼블릭 환경에서 사용할 수 있는 도메인을 구성</span></a></h3><p>이 실습에서 키클락 통합 인증에 필요 충족 조건인 HTTPS 프토토콜로 키클락으로 접속할 수 있게 조치하기 위해서, 구글 클라우드에서 관리하는 관리형 인증서(MANAGE CERTIFICATE)를 통해 인증서를 사용하도록 처리할 것입니다.</p><p>구글에서 관리하는 관리형 인증서를 사용하기 위해 필요한 것이 퍼블릭 환경에서 사용할 수 있는 도메인입니다.이와 같이 퍼블릭 클라우드 서비스를 이용하여 도메인을 통한 HTTPS 인증서 발급이 가능합니다. 이렇게 인증서를 발급하는 방식을 DNS Authorization이라고 합니다. AWS 이용시에는 Route53을 이용하면 됩니다.</p><p>도메인은 호스팅케이알, 가비아, goDaddy 와 같은 도메인 이름 등록기관 업체 홈페이지에서 일정 기간 동안 &#39;임대(lease)&#39;할 수 있습니다. 2편에서는 <code>oncloud-1.site</code> 라는 도메인을 사용해서 진행하도록 하겠습니다.</p><p>도메인을 구매하였다면 구글 클라우드에 Cloud DNS 서비스에 아래와 같이 현재 도메인을 연결해주도록 하겠습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2427/그림2.png" alt="글 클라우드의 Cloud DNS 도메인 등록 그리고 가비아 화면의 도메인 네임 서버" tabindex="0" loading="lazy"><figcaption>글 클라우드의 Cloud DNS 도메인 등록 그리고 가비아 화면의 도메인 네임 서버</figcaption></figure><h3 id="_3-키클락이-배포될-gke-클러스터-생성을-진행하고-이후에-키클락을-생성된-gke에-배포" tabindex="-1"><a class="header-anchor" href="#_3-키클락이-배포될-gke-클러스터-생성을-진행하고-이후에-키클락을-생성된-gke에-배포"><span>3. 키클락이 배포될 GKE 클러스터 생성을 진행하고 이후에 키클락을 생성된 GKE에 배포</span></a></h3>`,9),P=n("code",null,"./oncloud-1.site/Deploy-infra",-1),G=n("code",null,"1-1.deploy-gke-env-w-keycloak.sh",-1),D=i(`<div class="hint-container note"><p class="hint-container-title">Note</p><p>여기서부터 설명되는 코드는 일부만 발췌해서 설명하는 방식으로 진행되기 때문에 앞 뒤의 코드는 생략되어 있는 경우가 많습니다. 따라서 전체 코드를 살펴보자고 한다면, 해당 파일을 직접 열어서 보시는 것을 권장드립니다.</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># static ingress IP. It will attach to Domain</span></span>
<span class="line">gcloud compute addresses create hj-keycloak-oncloud-1-static-ip <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--global</span> <span class="token punctuation">\\</span></span>
<span class="line">--ip-version IPV4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>키클락이 사용할 공인 IP를 미리 예약하는 것입니다. 이렇게 예약된 공인 IP는 추후 키클락이 배포가 완료된 다음에 GKE에 내장 인그레스 컨트롤러를 통해서 HTTPS 접속이 가능한 도메인과 IP 주소 매핑이 진행됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Deploy GKE cluster for keycloak</span></span>
<span class="line">gcloud container clusters create <span class="token variable">$KUBE_CLUSTER</span> <span class="token punctuation">\\</span></span>
<span class="line">--num-nodes<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--zone</span><span class="token operator">=</span><span class="token variable">\${GCP_ZONE}</span> <span class="token punctuation">\\</span></span>
<span class="line">--no-enable-autorepair <span class="token punctuation">\\</span></span>
<span class="line">--no-enable-autoupgrade <span class="token punctuation">\\</span></span>
<span class="line">--location-policy<span class="token operator">=</span>BALANCED <span class="token punctuation">\\</span></span>
<span class="line">--enable-identity-service <span class="token punctuation">\\</span></span>
<span class="line">--cluster-version<span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${CLUSTER_VERSION}</span>&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">--release-channel<span class="token operator">=</span>None <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--labels</span><span class="token operator">=</span>keycloak<span class="token operator">=</span>oncloud-1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GKE 클러스터를 생성하는 명령입니다. 이때 GKE에서 키클락 통합 인증을 구성하기 위해 <code>--enable-identity-service</code> 옵션을 사용해서 외부 OIDC를 통한 쿠버네티스 클러스터 인증이 가능하도록 설정합니다. 또한 GKE 클러스터의 경우 자동으로 쿠버네티스 버전이 업그레이드되는 기능이 존재합니다. 이는 실습을 구성했을 때 버전에 따른 사이드 이펙트가 발생할 가능성이 있기 때문에 버전 자동 업그레이드가 진행되지 않도록 <code>--no-enable-autorepair</code>, <code>--no-enable-autoupgrade</code> 옵션을 같이 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Deploy keycloak</span></span>
<span class="line">helm <span class="token function">install</span> keycloak oci://registry-1.docker.io/bitnamicharts/keycloak <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--set</span> <span class="token assign-left variable">auth.adminUser</span><span class="token operator">=</span>admin <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--set</span> <span class="token assign-left variable">auth.adminPassword</span><span class="token operator">=</span>admin <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--set</span> <span class="token assign-left variable">production</span><span class="token operator">=</span>true <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--set</span> <span class="token assign-left variable">proxy</span><span class="token operator">=</span>edge <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--version</span> <span class="token number">17.1</span>.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GKE 클러스터가 생성된 다음 kubeconfig를 gcloud 명령으로 가져오게 됩니다. 그다음 OCI 차트 저장소로부터 키클락을 설치합니다. 이렇게 키클락을 설치하게 되면 키클락이 동작하는 데 필요한 포스트그레스큐엘 데이터베이스와 키클락이 배포가 됩니다. 이렇게 배포된 키클락의 초기 ID와 패스워드는 <code>admin</code> 입니다.</p><h3 id="_4-https-인증서를-gke-인그레스-컨트롤러에서-사용할-수-있도록-연결-작업을-진행" tabindex="-1"><a class="header-anchor" href="#_4-https-인증서를-gke-인그레스-컨트롤러에서-사용할-수-있도록-연결-작업을-진행"><span>4. HTTPS 인증서를 GKE 인그레스 컨트롤러에서 사용할 수 있도록 연결 작업을 진행</span></a></h3>`,8),q=n("code",null,"1-2.deploy-gke-ingress-4-https-keycloak.yaml",-1),O=n("code",null,"kubectl create",-1),j=n("code",null,"Ingress",-1),N=n("code",null,"ManagedCertificate",-1),H=n("code",null,"FrontendConfig",-1),W=n("code",null,"ManagedCertificate",-1),F=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">apiVersion: networking.gke.io/v1</span>
<span class="line">kind: ManagedCertificate</span>
<span class="line">metadata:</span>
<span class="line">  name: keycloak-managed-cert</span>
<span class="line">spec:</span>
<span class="line">  domains:</span>
<span class="line">    - <span class="token string">&quot;oncloud-1.site&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>oncloud-1.site</code> 도메인에 구글이 관리하는 인증서를 만들라는 내용을 담고 있습니다. 이때 <code>spec.domains</code> 아래로 적용이 되어야 하는 도메인을 입력해야 합니다. 여기서는 <code>oncloud-1.site</code>를 사용하도록 하겠습니다. 이렇게 구성하게 되면 외부에서 키클락 접속 시 <code>oncloud-1.site</code> 라는 도메인으로 접근이 가능합니다.</p><p>다음으로 <code>FrontendConfig</code>의 내용을 확인하겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">apiVersion: networking.gke.io/v1beta1</span>
<span class="line">kind: FrontendConfig</span>
<span class="line">metadata:</span>
<span class="line">  name: keycloak-config</span>
<span class="line">spec:</span>
<span class="line">  redirectToHttps:</span>
<span class="line">    enabled: <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>키클락에 첫 화면(프론트엔드)에 접속 시 사용할 네트워크 설정을 입력하는 오브젝트입니다. 여기서는 HTTP 프로토콜로 접속 시 자동으로 HTTPS로 리다이렉트를 처리하라는 내용에 설정이 되어 있습니다.</p><p>실제 인그레스(Ingress)가 생성되는 부분입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">apiVersion: networking.k8s.io/v1</span>
<span class="line">kind: Ingress</span>
<span class="line">metadata:</span>
<span class="line">  name: keycloak-ingress</span>
<span class="line">  annotations:</span>
<span class="line">    spec.ingressClassName: <span class="token string">&quot;gce&quot;</span></span>
<span class="line">    kubernetes.io/ingress.global-static-ip-name: <span class="token string">&quot;hj-keycloak-oncloud-1-static-ip&quot;</span></span>
<span class="line">    networking.gke.io/managed-certificates: <span class="token string">&quot;keycloak-managed-cert&quot;</span></span>
<span class="line">    networking.gke.io/v1beta1.FrontendConfig: <span class="token string">&quot;keycloak-config&quot;</span></span>
<span class="line">spec:</span>
<span class="line">  defaultBackend:</span>
<span class="line">    service:</span>
<span class="line">      name: keycloak</span>
<span class="line">      port:</span>
<span class="line">        number: <span class="token number">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이와 같은 설정을 <code>ingress</code> 오브젝트에서 애너테이션으로 참조해, GKE 내부 인그레스 컨트롤러를 통해 키클락을 외부에서 HTTPS 접속할 수 있도록 하는 것입니다. 위 과정을 통해서 키클락을 구성하는 경우 구글이 HTTPS 인증서를 발급하는 데 30분에서 2시간 정도가 소요됩니다.</p><h3 id="_5-키클락에-접근해서-구글-oidc에-접근해서-인증을-처리할-수-있는-설정을-진행" tabindex="-1"><a class="header-anchor" href="#_5-키클락에-접근해서-구글-oidc에-접근해서-인증을-처리할-수-있는-설정을-진행"><span>5. 키클락에 접근해서 구글 OIDC에 접근해서 인증을 처리할 수 있는 설정을 진행</span></a></h3>`,9),M=n("code",null,"https://oncloud-1.site",-1),V=n("p",null,[s("접속하면 다음과 같은 화면이 나타납니다. 나타난 화면에서 아이디는 "),n("code",null,"admin"),s(",비밀번호는 "),n("code",null,"admin"),s("을 입력하면 배포된 키클락에 접속할 수 있습니다.")],-1),$=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림3.png",alt:"클락 로그인 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"클락 로그인 화면")],-1),J=n("p",null,[s("접속이 되었다면 좌측 메뉴에 Realm이라고 하는 단위를 설정하는 드롭다운 UI가 있습니다. 현재는 "),n("code",null,"master"),s(" 값으로 지정이 되어있습니다. 이 Realm은 쿠버네티스의 네임스페이스처럼 키클락 사용자, 인증 대상 애플리케이션 그리고 역할과 같은 것들을 관리하는 공간이라고 이해하시면 됩니다.")],-1),U=n("code",null,"[Create Realm]",-1),L=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림4.png",alt:"클락 마스터 렐름 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"클락 마스터 렐름 화면")],-1),Z=n("code",null,"kubernetes",-1),Q=n("code",null,"[Create]",-1),X=n("code",null,"kubernetes",-1),Y=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림5.png",alt:"클락 kubernetes Realm을 만드는 설정 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"클락 kubernetes Realm을 만드는 설정 화면")],-1),nn=n("p",null,[s("다음으로 키클락에서 인증에 대상이 되는 단위를 지정하는 Client를 설정하도록 하겠습니다. 이를 위해 키클락 화면 좌측에 위치한 "),n("code",null,"Clients"),s(" 메뉴로 이동하겠습니다. 나타나는 화면에서 "),n("code",null,"Create client"),s(" 메뉴를 눌러서 새로운 Client를 생성하도록 하겠습니다.")],-1),sn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림6.png",alt:"클락 좌측 메뉴에서 Clients를 선택하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"클락 좌측 메뉴에서 Clients를 선택하는 화면")],-1),en=n("p",null,"Client를 생성하면 다음과 같은 화면이 나타납니다.",-1),an=n("code",null,"k8s-auth",-1),ln=n("strong",null,"OpenID Connect",-1),tn=n("code",null,"[Next]",-1),on=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림7.png",alt:"버네티스 클러스터 통합 인증을 위한 Client 설정 - 이름 설정",tabindex:"0",loading:"lazy"}),n("figcaption",null,"버네티스 클러스터 통합 인증을 위한 Client 설정 - 이름 설정")],-1),cn=n("code",null,"[On]",-1),pn=n("code",null,"[Next]",-1),dn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림8.png",alt:"버네티스 클러스터 통합 인증을 위한 Client 설정 - 인증/인가 옵션을 설정하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"버네티스 클러스터 통합 인증을 위한 Client 설정 - 인증/인가 옵션을 설정하는 화면")],-1),rn=n("code",null,"http://localhost:8000",-1),mn=n("code",null,"http://localhost:18000",-1),un=n("code",null,"[Save]",-1),gn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림9.png",alt:"버네티스 클러스터 통합 인증을 위한 Client 설정 - 인증/인가 옵션을 설정하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"버네티스 클러스터 통합 인증을 위한 Client 설정 - 인증/인가 옵션을 설정하는 화면")],-1),hn=n("code",null,"[Client scopes]",-1),kn=n("p",null,[s("먼저 Assigned client scope 목록에서 "),n("code",null,"k8s-auth-dedicated"),s("를 클릭합니다.")],-1),vn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림10.png",alt:"JWT에 필드를 추가하기 위해 Client scopes로 이동하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"JWT에 필드를 추가하기 위해 Client scopes로 이동하는 화면")],-1),bn=n("code",null,"group",-1),_n=n("code",null,"[From predefined mappers]",-1),yn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림11.png",alt:"JWT에 필드를 추가하기 위해 Add mapper > From predefined mappers을 선택하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"JWT에 필드를 추가하기 위해 Add mapper > From predefined mappers을 선택하는 화면")],-1),fn=n("code",null,"groups",-1),wn=n("code",null,"[Add]",-1),Bn=n("p",null,"이 'groups' mapper는 JWT groups 키에 사용자의 Realm Role을 매핑하는 역할을 합니다. 이를 통해서 사용자의 Realm role이 JWT에 groups 정보로 추가가 됩니다.",-1),An=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림12.png",alt:"JWT에 필드에 groups을 추가하기 위해 groups를 선택하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"JWT에 필드에 groups을 추가하기 위해 groups를 선택하는 화면")],-1),Cn=n("code",null,"[Create Role]",-1),En=n("img",{src:"https://yozm.wishket.com/media/news/2427/그림13.png",alt:'키클락 사용자에게 Role을 부여하기 위해서 <FontIcon icon="iconfont icon-select"/>을 누르는 화면',tabindex:"0",loading:"lazy"},null,-1),zn=n("code",null,"[Create Role]",-1),In=n("p",null,[s("JWT에 group 필드로 설정하는 값을 devops로 지정하기 위해서 Realm role의 이름을 "),n("strong",null,"devops"),s(" 로 설정하고 Save를 누릅니다.")],-1),Rn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림14.png",alt:"키클락 사용자에게 Role을 부여하기 위해서 Role을 만드는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"키클락 사용자에게 Role을 부여하기 위해서 Role을 만드는 화면")],-1),Kn=n("p",null,[s("키클락에서 사용자를 추가하였을 때 사용자 관리를 위한 그룹이 필요합니다. 좌측에 "),n("strong",null,"Groups"),s(" 메뉴로 이동해서 "),n("code",null,"devops"),s(" 그룹을 만들도록 하겠습니다.")],-1),Tn=n("img",{src:"https://yozm.wishket.com/media/news/2427/그림15.png",alt:'키클락 사용자를 모으기 위한 Group을 만들기 위해 <FontIcon icon="iconfont icon-select"/>을 누르는 화면',tabindex:"0",loading:"lazy"},null,-1),xn=n("code",null,"[Create Group]",-1),Sn=n("code",null,"devops-group",-1),Pn=n("code",null,"[Create]",-1),Gn=i('<figure><img src="https://yozm.wishket.com/media/news/2427/그림16.png" alt=" 키클락 그룹을 생성하는 화면" tabindex="0" loading="lazy"><figcaption><code>devops-group</code> 키클락 그룹을 생성하는 화면</figcaption></figure><p><code>devops-group</code> 그룹이 생성되었다면, 그룹 단위로 역할을 부여해 devops-group에 있는 사람들은 devops 역할을 가질 수 있도록&#39;Role mapping&#39; 탭으로 이동한 후, <strong>Assign role</strong>를 누릅니다.</p><figure><img src="https://yozm.wishket.com/media/news/2427/그림17.png" alt=" 키클락 그룹에 role을 할당 하기 위해서 Assign role을 누르는 화면" tabindex="0" loading="lazy"><figcaption><code>devops-group</code> 키클락 그룹에 role을 할당 하기 위해서 Assign role을 누르는 화면</figcaption></figure><p>앞서 생성한 devops 역할을 <code>devops-group</code> 그룹에 설정하기 위해서 devops 체크박스를 선택한 다음에 <strong>Assign</strong>을 누릅니다.</p><figure><img src="https://yozm.wishket.com/media/news/2427/그림18.png" alt=" 키클락 그룹에 devops role을 할당하는 화면" tabindex="0" loading="lazy"><figcaption><code>devops-group</code> 키클락 그룹에 devops role을 할당하는 화면</figcaption></figure><p>이 과정을 통해서 우리는 통합 인증에 필요한 인증 설정을 완료하였습니다. 다음으로는 실습 편의를 위하여 키클락 외부로부터 사용자가 키클락에 등록이 될 때 기본적으로 <code>devops-group</code>에 추가되도록 설정하도록 하겠습니다.</p><p>좌측 하단에 <strong>Realm settings</strong> 메뉴 아래 User registration 탭으로 이동합니다. 나타난 화면에서 <strong>Default groups</strong>탭을 선택 하고 <strong>Add groups</strong>버튼을 클릭합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2427/그림19.png" alt="kubernetes Realm의 기본 그룹을 설정하는 화면" tabindex="0" loading="lazy"><figcaption>kubernetes Realm의 기본 그룹을 설정하는 화면</figcaption></figure><p>최초 사용자가 <code>devops-group</code> 그룹에 들어갈 수 있도록 <code>devops-group</code>을 선택 후 <strong>Add</strong>를 클릭합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2427/그림20.png" alt=" 키클락 그룹을 기본 그룹으로 설정하는 화면" tabindex="0" loading="lazy"><figcaption><code>devops-group</code> 키클락 그룹을 기본 그룹으로 설정하는 화면</figcaption></figure><p>Add 버튼을 누른 후 아래와 같이 Realm에 새롭게 추가되는 사용자에 대해서 <code>devops-group</code>에 추가되도록 설정한 것을 확인할 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2427/그림21.png" alt=" 키클락 그룹이 기본 그룹으로 설정된 화면" tabindex="0" loading="lazy"><figcaption><code>devops-group</code> 키클락 그룹이 기본 그룹으로 설정된 화면</figcaption></figure><h3 id="_6-구글-클라우드에서-키클락의-외부-사용자-정보를-가져오도록-구성-추가" tabindex="-1"><a class="header-anchor" href="#_6-구글-클라우드에서-키클락의-외부-사용자-정보를-가져오도록-구성-추가"><span>6. 구글 클라우드에서 키클락의 외부 사용자 정보를 가져오도록 구성 추가</span></a></h3>',13),Dn={href:"https://console.cloud.google.com/apis/credentials",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"[+ CREATE CREDENTIALS]",-1),On=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림22.png",alt:"구글 클라우드 콘솔에서 구글 API 사용을 위한 설정 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"구글 클라우드 콘솔에서 구글 API 사용을 위한 설정 화면")],-1),jn=n("strong",null,"Web application",-1),Nn=n("code",null,"hj-keycloak-oncloud-1-cred",-1),Hn=n("code",null,"[Create]",-1),Wn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림23.png",alt:"키클락에서 사용할 구글 API 설정 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"키클락에서 사용할 구글 API 설정 화면")],-1),Fn=n("p",null,"생성을 완료하면 keycloak Client의 Client ID와 Client Secret이 출력된 팝업으로 나타납니다.",-1),Mn=n("p",null,"Client ID와 Client Secret은 키클락과 구글 사용자 인증정보를 연결해주는 역할을 합니다.",-1),Vn=n("p",null,"이 부분은 팝업으로 보기 어려우므로 [그림 25]를 통한 연결 구조로 다시 한번 설명하겠습니다.",-1),$n=n("p",null,"정보를 확인하였다면 다시 키클락에서 Identity providers 메뉴로 이동한 후, 구글을 선택해서 구글 사용자가 키클락에 등록될 수 있도록 합니다.",-1),Jn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림24.png",alt:"구글 API 연동하기 위한 키클락 Identity providers 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"구글 API 연동하기 위한 키클락 Identity providers 화면")],-1),Un={href:"https://console.cloud.google.com/apis/credentials",target:"_blank",rel:"noopener noreferrer"},Ln=n("code",null,"hj-keycloak-oncloud-1-cred",-1),Zn=n("strong",null,"Client ID",-1),Qn=n("strong",null,"Client secret",-1),Xn=i("<ul><li>키클락 &gt; Identity providers 메뉴 &gt; Google <ul><li>General settings <ul><li><strong>Client ID</strong>: 구글 클라우드 콘솔 &gt; Google API &amp; Services &gt; Credentials &gt; <code>hj-keycloak-oncloud-1-cred</code> Client ID</li><li><strong>Client Secret</strong>: 구글 클라우드 콘솔 &gt; Google API &amp; Services &gt; Credentials &gt; <code>hj-keycloak-oncloud-1-cred</code> Client secret</li></ul></li></ul></li></ul><p>여기서 Client ID와 Client Secret은 공개키와 개인키 역할을 합니다. Client ID는 공개되어 있지만, Client ID를 통해 받은 JWT를 복호화 하는 역할은 Client Secret이 수행합니다. 그렇기 때문에 Client Secret은 공개되면 안 되는 중요한 정보입니다.</p>",2),Yn={href:"https://console.cloud.google.com/apis/credentials",target:"_blank",rel:"noopener noreferrer"},ns=n("ul",null,[n("li",null,[s("구글 클라우드 콘솔 > Google API & Services > Credentials 메뉴 > "),n("code",null,"hj-keycloak-oncloud-1-cred"),n("ul",null,[n("li",null,[s("Authorized redirect URIs "),n("ul",null,[n("li",null,[n("strong",null,"URIs"),s(": 키클락 > Identity providers > Google > General settings의 ‘Redirected URI’")])])])])])],-1),ss=n("p",null,"이를 그림으로 표현하면 다음과 같습니다.",-1),es=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림25.png",alt:"키클락과 구글 API 간 서로 필요한 정보를 입력하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"키클락과 구글 API 간 서로 필요한 정보를 입력하는 화면")],-1),as=n("code",null,"[Save]",-1),ls=n("h3",{id:"_7-이메일-2차-인증-구성",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-이메일-2차-인증-구성"},[n("span",null,"7. 이메일 2차 인증 구성")])],-1),ts={href:"https://aws.amazon.com/blogs/containers/introducing-oidc-identity-provider-authentication-amazon-eks/",target:"_blank",rel:"noopener noreferrer"},is={href:"https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"[Manage account]",-1),cs=n("img",{src:"https://yozm.wishket.com/media/news/2427/그림26.png",alt:'이메일 인증을 설정하기 위해서 먼저 <FontIcon icon="iconfont icon-select"/>로 이동하는 화면',tabindex:"0",loading:"lazy"},null,-1),ps=n("code",null,"Manage account",-1),ds=n("code",null,"[Personal info]",-1),rs=n("img",{src:"https://yozm.wishket.com/media/news/2427/그림27.png",alt:'관리자 이메일 설정을 위한 <FontIcon icon="iconfont icon-select"/>로 이동하는 화면',tabindex:"0",loading:"lazy"},null,-1),ms=n("code",null,"[Personal Info]",-1),us=n("code",null,"[Save]",-1),gs=n("ul",null,[n("li",null,[n("strong",null,"Email"),s(": 사용 가능한 Email (예: Gmail, Naver 등)")]),n("li",null,[n("strong",null,"First name"),s(": 이름")]),n("li",null,[n("strong",null,"Last name"),s(": 성")])],-1),hs=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림28.png",alt:"관리자 이메일에 필요한 설정 값을 입력",tabindex:"0",loading:"lazy"}),n("figcaption",null,"관리자 이메일에 필요한 설정 값을 입력")],-1),ks=n("img",{src:"https://yozm.wishket.com/media/news/2427/그림29.png",alt:'다시 진행하던 이메일 발송 설정을 하기 위해 상단의 <FontIcon icon="iconfont icon-select"/>을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),vs=n("code",null,"[Back to security admin console]",-1),bs=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2427/그림30.png",alt:"오른쪽 상단에 admin의 이름이 변경된 것을 확인합니다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"오른쪽 상단에 admin의 이름이 변경된 것을 확인합니다.")],-1),_s=n("code",null,"[On]",-1),ys=i('<figure><img src="https://yozm.wishket.com/media/news/2427/그림31.png" alt="이메일 확인 옵션을 활성화" tabindex="0" loading="lazy"><figcaption>이메일 확인 옵션을 활성화</figcaption></figure><p>이메일 인증에 대한 옵션이 켜졌다면, 이메일을 보내기 위한 설정을 진행하기 위해서 Realm Settings에 Email 탭으로 이동합니다. Email 탭의 Template 설정을 아래와 같이 구성합니다.</p><ul><li>키클락 &gt; Realm settings 메뉴 &gt; Email 탭 <ul><li>Template <ul><li><strong>From *</strong>: 이메일 계정</li><li><strong>From display name</strong>: Keycloak Admin</li><li><strong>Reply to</strong>: 이메일 계정</li><li><strong>Reply to display name</strong>: Keycloak Admin</li><li><strong>Envelope from</strong>: Keycloak Admin</li></ul></li></ul></li></ul><figure><img src="https://yozm.wishket.com/media/news/2427/그림32.png" alt="이메일 발송을 위한 Template를 설정하는 화면" tabindex="0" loading="lazy"><figcaption>이메일 발송을 위한 Template를 설정하는 화면</figcaption></figure><p>Email 탭 아래 Connection &amp; Authentication 설정을 아래와 같이 구성합니다.</p><ul><li>키클락 &gt; Realm settings &gt; Email <ul><li>Connection &amp; Authentication <ul><li><strong>Host</strong>: smtp.gmail.com (발송하는 smtp에 따라 설정은 다름)</li><li><strong>Port</strong>: 465</li><li>Encryption <ul><li><strong>Enable SSL</strong>: On</li><li><strong>Enable StartTLS</strong>: On</li></ul></li><li><strong>Username</strong>: Gmail 계정 (발송하는 smtp에 따라 다름)</li><li><strong>Password</strong>: 계정 비밀번호</li></ul></li></ul></li></ul>',6),fs=n("img",{src:"https://yozm.wishket.com/media/news/2427/그림33.png",alt:'입력 후, <FontIcon icon="iconfont icon-select"/>를 눌러서 저장합니다.',tabindex:"0",loading:"lazy"},null,-1),ws=n("code",null,"[Save]",-1),Bs=n("p",null,"길고 험난한 사전 작업을 완료했습니다. 앞으로는 키클락의 Client를 활용해 여러 쿠버네티스 클러스터의 인증을 OIDC를 통해서 처리하는 실습을 진행하도록 하겠습니다.",-1);function As(d,Cs){const r=o("VPCard"),t=o("router-link"),m=o("SiteInfo"),u=o("VidStack"),c=o("RouteLink"),a=o("FontIcon");return _(),h("div",null,[n("h1",f,[n("a",w,[n("span",null,k(d.$frontmatter.title)+" 관련",1)])]),e(r,v(b({title:"Kubernetes > Article(s)",desc:"Article(s)",link:"/devops/k8s/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",B,[n("ul",null,[n("li",null,[e(t,{to:"#테스트를-위한-사전-준비-작업"},{default:l(()=>[s("테스트를 위한 사전 준비 작업")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#_1-코드-및-사전-필요-구성-확인"},{default:l(()=>[s("1. 코드 및 사전 필요 구성 확인")]),_:1})]),n("li",null,[e(t,{to:"#_2-keycloak의-접근을-위한-https-인증서와-퍼블릭-환경에서-사용할-수-있는-도메인을-구성"},{default:l(()=>[s("2. Keycloak의 접근을 위한 HTTPS 인증서와 퍼블릭 환경에서 사용할 수 있는 도메인을 구성")]),_:1})]),n("li",null,[e(t,{to:"#_3-키클락이-배포될-gke-클러스터-생성을-진행하고-이후에-키클락을-생성된-gke에-배포"},{default:l(()=>[s("3. 키클락이 배포될 GKE 클러스터 생성을 진행하고 이후에 키클락을 생성된 GKE에 배포")]),_:1})]),n("li",null,[e(t,{to:"#_4-https-인증서를-gke-인그레스-컨트롤러에서-사용할-수-있도록-연결-작업을-진행"},{default:l(()=>[s("4. HTTPS 인증서를 GKE 인그레스 컨트롤러에서 사용할 수 있도록 연결 작업을 진행")]),_:1})]),n("li",null,[e(t,{to:"#_5-키클락에-접근해서-구글-oidc에-접근해서-인증을-처리할-수-있는-설정을-진행"},{default:l(()=>[s("5. 키클락에 접근해서 구글 OIDC에 접근해서 인증을 처리할 수 있는 설정을 진행")]),_:1})]),n("li",null,[e(t,{to:"#_6-구글-클라우드에서-키클락의-외부-사용자-정보를-가져오도록-구성-추가"},{default:l(()=>[s("6. 구글 클라우드에서 키클락의 외부 사용자 정보를 가져오도록 구성 추가")]),_:1})]),n("li",null,[e(t,{to:"#_7-이메일-2차-인증-구성"},{default:l(()=>[s("7. 이메일 2차 인증 구성")]),_:1})])])])])]),A,e(m,{name:"키클락 구성을 위한 기나긴 사전 작업 한번에 보기 | 요즘IT",desc:"KubeCon + Cloud Native North America 2023에서 발표한 <Beyond Passwords: Keycloak's Contributions to IAM(Identity and Access Management) + Security>를 정리한 글입니다. 발표 내용을 3회로 나누어 발행합니다. 1부에서는 키클락에 대한 기능 소개와 이점에 대해 살펴보았습니다. 이번 2부에서는 키클락을 구성하기 위해 실행해야 할 사전 작업을 알아보고, 3부에서는 키클락을 사용하여 EKS, GKE와 같은 관리형 쿠버네티스 클러스터를 통합인증 하여 관리하는 방법에 대해 살펴봅니다.",url:"https://yozm.wishket.com/magazine/detail/2427/",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",preview:"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC1-1.png"}),e(u,{src:"youtube/nRd0ejHADss"}),n("p",null,[s("KubeCon + Cloud Native North America 2023에서 발표한 "),C,s("를 정리한 글입니다. 발표 내용을 3회로 나누어 발행합니다. "),e(c,{to:"/yozm.wishket.com/2425.html"},{default:l(()=>[s("1부")]),_:1}),s("에서는 "),n("a",E,[e(a,{icon:"fas fa-globe"}),s("키클락")]),s("에 대한 기능 소개와 이점에 대해 살펴보았습니다. 이번 2부에서는 키클락을 구성하기 위해 실행해야 할 사전 작업을 알아보고, 3부에서는 키클락을 사용하여 EKS, GKE와 같은 관리형 쿠버네티스 클러스터를 통합인증 하여 관리하는 방법에 대해 살펴봅니다. 발표 자료는 "),n("a",z,[e(a,{icon:"fas fa-globe"}),s("KubeCon NA 2023 홈페이지")]),s("에서 다운받으실 수 있습니다.")]),n("ul",null,[n("li",null,[s("1부: "),e(c,{to:"/yozm.wishket.com/2425.html"},{default:l(()=>[s("신원확인, 통합인증관리 오픈소스 ‘키클락’을 알아보자")]),_:1})]),n("li",null,[n("strong",null,[s("2부: "),e(c,{to:"/yozm.wishket.com/2427.html"},{default:l(()=>[s("키클락 구성을 위한 기나긴 사전 작업 한번에 보기")]),_:1})])]),n("li",null,[s("3부: "),e(c,{to:"/yozm.wishket.com/2429.html"},{default:l(()=>[s("키클락을 활용한 통합 인증 실습하기")]),_:1})])]),p(" TODO: add VPCard "),I,n("p",null,[s("."),e(a,{icon:"fas fa-folder-open"}),R,s(" 디렉터리에 있는 "),e(a,{icon:"iconfont icon-shell"}),K,s(" 셸 스크립트를 실행합니다.")]),T,n("blockquote",null,[n("p",null,[s("."),e(a,{icon:"iconfont icon-shell"}),x])]),S,n("p",null,[s("위 단계를 전부 진행했다면 이제 키클락을 배포할 GKE 클러스터 배포를 위해서 1번 단계에서 내려받은 디렉터리에서 "),e(a,{icon:"fas fa-folder-open"}),P,s(" 디렉터리로 이동합니다. 나타난 디렉터리에서 "),e(a,{icon:"iconfont icon-shell"}),G,s("셸 스크립트를 실행하도록 하겠습니다. 이 셸 스크립트는 셸 환경 변수로 구글 클라우드 프로젝트, GKE가 배포되는 지역(Zone), GKE의 클러스터 이름과 클러스터 버전을 입력받아서 구글 클라우드로 공인 IP를 생성하고, GKE 클러스터를 입력 값에 맞게 설정한 다음 helm을 통하여 키클락을 배포하도록 설정하고 있습니다.코드 내용 중 일부를 확인해보면서 GKE 클러스터 생성부터 키클락이 배포되는지 정리해보겠습니다.")]),D,n("p",null,[s("현재 디렉터리의 "),e(a,{icon:"iconfont icon-yaml"}),q,s(" 을 "),e(a,{icon:"iconfont icon-shell"}),O,s(" 을 통해 쿠버네티스 오브젝트를 배포합니다. 이 때 "),j,s("와 함께 "),N,s(", "),H,s(" 와 같은 구글 클라우드의 커스텀 오브젝트가 같이 배포됩니다. 먼저 "),W,s("의 내용을 살펴보겠습니다.")]),F,n("p",null,[s("먼저 GKE에 배포가 완료된 키클락의 주소인 ["),e(a,{icon:"fas fa-globe"}),M,s("] 로 접속해보겠습니다.")]),V,$,J,n("p",null,[s("이 화면에서 쿠버네티스 통합 인증을 위한 목적으로 사용할 다른 Realm를 생성하기 위해서 "),e(a,{icon:"iconfont icon-select"}),U,s("을 누릅니다.")]),L,n("p",null,[s("Create realm 화면에서 쿠버네티스 클러스터 통합 인증을 위해서 Realm name에 "),Z,s("를 입력하고 "),e(a,{icon:"iconfont icon-select"}),Q,s(" 버튼을 눌러 "),X,s(" 라는 realm을 생성하도록 하겠습니다.")]),Y,nn,sn,en,n("p",null,[s("클라이언트는 쿠버네티스 클러스터 인증에 사용될 것이기 때문에 구분을 위해서 클라이언트 ID와 이름을 모두 "),an,s("로 설정합니다. 다음으로, 인증 시 사용할 클라이언트 타입을 "),ln,s("로 설정하도록 하겠습니다. 여기서 사용하는 OpenID Connect는 JWT(Json Web Token)을 이용하여 사용자 정보를 받아서 사용자의 신원을 확인하는 인증 프로토콜입니다. 마지막으로 Always display in UI 값을 On으로 설정한 다음 "),e(a,{icon:"iconfont icon-select"}),tn,s("를 눌러 다음으로 이동하겠습니다.")]),on,n("p",null,[s("Client에 대해서 인증과 인가 설정을 모두 활성화하여야 통합 인증이 가능하므로, Client Authentication 및 Client Authorization 모두 <으로>"),e(a,{icon:"iconfont icon-select"}),cn,s("으로 선택한 다음 "),e(a,{icon:"iconfont icon-select"}),pn,s("를 눌러서 다음으로 이동하겠습니다.")]),dn,n("p",null,[s("클라이언트가 인증 사업자(IdP, Identity provider)를 통하여 인증이 완료된 다음에, id 정보를 전달할 곳을 설정하기 위한 화면입니다. 여기서 Valid redirect URIs를 ["),e(a,{icon:"fas fa-globe"}),rn,s("] 그리고 ["),e(a,{icon:"fas fa-globe"}),mn,s("]으로 설정한 다음 "),e(a,{icon:"iconfont icon-select"}),un,s("를 눌러서 Client 생성을 완료합니다.")]),gn,n("p",null,[s("이번 실습에서는 사용자 정보에 기본 그룹 정보를 함께 포함시켜서 쿠버네티스 인증을 처리하고자 합니다. 이렇게 하는 이유는 쿠버네티스에서 직접 RBAC을 통해서 인가를 하기 위해서이며, RBAC을 기본 그룹 단위로 하는 이유는 특별한 설정을 하지 않아도 기본 적용되어 사용이 편리하기 때문입니다.위의 내용을 처리하기 위해서 "),e(a,{icon:"iconfont icon-select"}),hn,s(" 탭 메뉴로로 이동합니다.")]),kn,vn,n("p",null,[bn,s(" 필드를 JWT에 추가하기 위해서 Add mapper 드롭다운 버튼의 "),e(a,{icon:"iconfont icon-select"}),_n,s("를 클릭합니다.")]),yn,n("p",null,[s("Add predefined mappers 팝업(또는 모달)이 열립니다. 이 중 "),fn,s(" 를 선택하고 "),e(a,{icon:"iconfont icon-select"}),wn,s(" 버튼을 클릭합니다.")]),Bn,An,n("p",null,[s("다음으로 사용자에게 적용할 Realm Role을 만들기 위해서 키클락 좌측 메뉴에 위치한 Realm roles 메뉴로 이동 후 "),e(a,{icon:"iconfont icon-select"}),Cn,s("버튼을 클릭합니다.")]),n("figure",null,[En,n("figcaption",null,[s("키클락 사용자에게 Role을 부여하기 위해서 "),e(a,{icon:"iconfont icon-select"}),zn,s("을 누르는 화면")])]),In,Rn,Kn,n("figure",null,[Tn,n("figcaption",null,[s("키클락 사용자를 모으기 위한 Group을 만들기 위해 "),e(a,{icon:"iconfont icon-select"}),xn,s("을 누르는 화면")])]),n("p",null,[s("Realm Role과 혼선이 생기지 않도록 그룹의 이름을 "),Sn,s("으로 설정하고 "),e(a,{icon:"iconfont icon-select"}),Pn,s("를 누릅니다.")]),Gn,n("p",null,[s("앞서 [그림 1] 다이어그램에서 구글 API를 통해서 사용자를 가져오는 것을 확인할 수 있습니다. 이는 구글 API를 통해 구글 사용자 정보를 키클락에 저장시키는 기능인 Identity providers를 사용해서 연동을 진행합니다. 이 연동을 구성하기 위해서 먼저 구글 API에 접근할 수 있는 권한을 설정해야 합니다. 따라서구글 클라우드 콘솔에서 "),n("a",Dn,[e(a,{icon:"fa-brands fa-google"}),s("Google API & Services > Credentials 메뉴")]),s("로 이동하여서 연동 정보를 받은 후 키클락에서 구글 로그인을 통한 사용자 정보를 받을 수 있도록 처리하겠습니다.")]),n("p",null,[s("구글 클라우드 콘솔 이동하였을 때 상단의 "),e(a,{icon:"iconfont icon-select"}),qn,s("를 클릭하고 OAuth client ID를 선택합니다.")]),On,n("p",null,[s("Application type은 현재 키클락이 웹으로 배포되어있으니 "),jn,s("으로 설정하고, 이름은 "),Nn,s("로 설정하고 "),e(a,{icon:"iconfont icon-select"}),Hn,s("를 누릅니다.")]),Wn,Fn,Mn,Vn,$n,Jn,n("p",null,[s("구글 클라우드의 "),n("a",Un,[e(a,{icon:"fa-brands fa-google"}),s("Google API & Services > Credentials 메뉴")]),s("에서 생성한 Client ID("),Ln,s(")의 "),Zn,s("와 "),Qn,s(" 값을 Google API & Services의 keycloak Client에서 명시된 Client ID와 Client secret 값으로 입력합니다.")]),Xn,n("p",null,[s("구글 클라우드의 "),n("a",Yn,[e(a,{icon:"fa-brands fa-google"}),s("Google API & Services > Credentials 메뉴")]),s("에서 생성한 Client ID(hj-keycloak-oncloud-1-cred)의 Authorized redirect URIs 주소를Keycloak의 Redirect URI주소로 입력합니다.")]),ns,ss,es,n("p",null,[s("키클락과 구글 클라우드 콘솔에 대해서 값을 위와 같이 같이 설정한 후, 키클락의 설정을 적용하기 위해 "),e(a,{icon:"iconfont icon-select"}),as,s("를 클릭합니다.")]),ls,n("p",null,[n("a",ts,[e(a,{icon:"fa-brands fa-aws"}),s("EKS")]),s(" 등 관리형 쿠버네티스 서비스들은 "),n("a",is,[e(a,{icon:"fa-brands fa-aws"}),s("OIDC")]),s(" 방식의 인증을 구성할 때, 사용자 인증하는 방식으로 이메일 인증을 요구합니다. 이런 보안 요구사항을 만족하기 위해서 이메일 인증 옵션을 켠 후, 구글 SMTP 서버를 사용해서 이메일을 보낼 수 있는 설정을 진행하도록 하겠습니다.")]),n("p",null,[s("키클락에서 이메일 인증 기능을 통해 이메일 발송을 설정하기 위해서, 키클락 관리자에 정보를 채워야합니다. 따라서 우측 상단 admin 드롭다운을 클릭한 다음에 "),e(a,{icon:"iconfont icon-select"}),os,s("를 누릅니다.")]),n("figure",null,[cs,n("figcaption",null,[s("이메일 인증을 설정하기 위해서 먼저 "),e(a,{icon:"iconfont icon-select"}),ps,s("로 이동하는 화면")])]),n("p",null,[s("눌러서 나타난 화면에서 관리자 정보를 변경하기 위해서 "),e(a,{icon:"iconfont icon-select"}),ds,s(" 를 클릭합니다.")]),n("figure",null,[rs,n("figcaption",null,[s("관리자 이메일 설정을 위한 "),e(a,{icon:"iconfont icon-select"}),ms,s("로 이동하는 화면")])]),n("p",null,[s("관리자의 이메일과 이름을 입력 후 "),e(a,{icon:"iconfont icon-select"}),us,s("를 클릭합니다.")]),gs,hs,n("figure",null,[ks,n("figcaption",null,[s("다시 진행하던 이메일 발송 설정을 하기 위해 상단의 "),e(a,{icon:"iconfont icon-select"}),vs,s("을 클릭합니다.")])]),bs,n("p",null,[s("사용자의 이메일 인증을 사용하기 위해서 Realm settings 메뉴의 로그인 탭에서 스크롤을 내려 Verify email 옵션을 "),e(a,{icon:"iconfont icon-select"}),_s,s("으로 설정합니다.")]),ys,n("figure",null,[fs,n("figcaption",null,[s("입력 후, "),e(a,{icon:"iconfont icon-select"}),ws,s("를 눌러서 저장합니다.")])]),Bs,p(" TODO: 2차가공 ")])}const Is=g(y,[["render",As],["__file","2427.html.vue"]]),Rs=JSON.parse('{"path":"/yozm.wishket.com/2427.html","title":"키클락 구성을 위한 기나긴 사전 작업 한번에 보기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"키클락 구성을 위한 기나긴 사전 작업 한번에 보기","description":"Article(s) > 키클락 구성을 위한 기나긴 사전 작업 한번에 보기","icon":"iconfont icon-k8s","category":["Kubernetes","VM","CNCF","IAM","KeyCloak","Google","Google Cloud","GCP","GKE","Amazon","AWS","EKS","Article(s)"],"tag":["blog","yozm.wishket.com","kubernetes","vm","cncf","iam","keycloak","google","googlecloud","google-cloud","gcp","gcp-gke","amazon","aws","aws-eks","oidc"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 키클락 구성을 위한 기나긴 사전 작업 한번에 보기"},{"property":"og:description","content":"키클락 구성을 위한 기나긴 사전 작업 한번에 보기"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2427.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2427.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"키클락 구성을 위한 기나긴 사전 작업 한번에 보기"}],["meta",{"property":"og:description","content":"Article(s) > 키클락 구성을 위한 기나긴 사전 작업 한번에 보기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC1-1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC1-1.png"}],["meta",{"name":"twitter:image:alt","content":"키클락 구성을 위한 기나긴 사전 작업 한번에 보기"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"vm"}],["meta",{"property":"article:tag","content":"cncf"}],["meta",{"property":"article:tag","content":"iam"}],["meta",{"property":"article:tag","content":"keycloak"}],["meta",{"property":"article:tag","content":"google"}],["meta",{"property":"article:tag","content":"googlecloud"}],["meta",{"property":"article:tag","content":"google-cloud"}],["meta",{"property":"article:tag","content":"gcp"}],["meta",{"property":"article:tag","content":"gcp-gke"}],["meta",{"property":"article:tag","content":"amazon"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"aws-eks"}],["meta",{"property":"article:tag","content":"oidc"}],["meta",{"property":"article:published_time","content":"2024-01-23T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"키클락 구성을 위한 기나긴 사전 작업 한번에 보기\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC0.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC1-1.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC1-2.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC2.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC3.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC4.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC5.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC6.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC7.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC8.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC9.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC10.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC11.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC12.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC13.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC14.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC15.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC16.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC17.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC18.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC19.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC20.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC21.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC22.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC23.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC24.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC25.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC26.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC27.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC28.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC29.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC30.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC31.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC32.png\\",\\"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC33.png\\"],\\"datePublished\\":\\"2024-01-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/devops/k8s/articles/README.md","date":"2024-01-23T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2427/%EA%B7%B8%EB%A6%BC1-1.png"},"headers":[{"level":2,"title":"테스트를 위한 사전 준비 작업","slug":"테스트를-위한-사전-준비-작업","link":"#테스트를-위한-사전-준비-작업","children":[{"level":3,"title":"1. 코드 및 사전 필요 구성 확인","slug":"_1-코드-및-사전-필요-구성-확인","link":"#_1-코드-및-사전-필요-구성-확인","children":[]},{"level":3,"title":"2. Keycloak의 접근을 위한 HTTPS 인증서와 퍼블릭 환경에서 사용할 수 있는 도메인을 구성","slug":"_2-keycloak의-접근을-위한-https-인증서와-퍼블릭-환경에서-사용할-수-있는-도메인을-구성","link":"#_2-keycloak의-접근을-위한-https-인증서와-퍼블릭-환경에서-사용할-수-있는-도메인을-구성","children":[]},{"level":3,"title":"3. 키클락이 배포될 GKE 클러스터 생성을 진행하고 이후에 키클락을 생성된 GKE에 배포","slug":"_3-키클락이-배포될-gke-클러스터-생성을-진행하고-이후에-키클락을-생성된-gke에-배포","link":"#_3-키클락이-배포될-gke-클러스터-생성을-진행하고-이후에-키클락을-생성된-gke에-배포","children":[]},{"level":3,"title":"4. HTTPS 인증서를 GKE 인그레스 컨트롤러에서 사용할 수 있도록 연결 작업을 진행","slug":"_4-https-인증서를-gke-인그레스-컨트롤러에서-사용할-수-있도록-연결-작업을-진행","link":"#_4-https-인증서를-gke-인그레스-컨트롤러에서-사용할-수-있도록-연결-작업을-진행","children":[]},{"level":3,"title":"5. 키클락에 접근해서 구글 OIDC에 접근해서 인증을 처리할 수 있는 설정을 진행","slug":"_5-키클락에-접근해서-구글-oidc에-접근해서-인증을-처리할-수-있는-설정을-진행","link":"#_5-키클락에-접근해서-구글-oidc에-접근해서-인증을-처리할-수-있는-설정을-진행","children":[]},{"level":3,"title":"6. 구글 클라우드에서 키클락의 외부 사용자 정보를 가져오도록 구성 추가","slug":"_6-구글-클라우드에서-키클락의-외부-사용자-정보를-가져오도록-구성-추가","link":"#_6-구글-클라우드에서-키클락의-외부-사용자-정보를-가져오도록-구성-추가","children":[]},{"level":3,"title":"7. 이메일 2차 인증 구성","slug":"_7-이메일-2차-인증-구성","link":"#_7-이메일-2차-인증-구성","children":[]}]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.38,"words":1915},"filePathRelative":"yozm.wishket.com/2427.md","localizedDate":"2024년 1월 23일","excerpt":"\\n"}');export{Is as comp,Rs as data};
