import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as e,g as p,d as a,f as l,r as o,o as k}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),h=n("hr",null,null,-1),b=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>You can write both unit tests and UI tests for SwiftData using XCTest and XCUITest, but unit parts are a little tricky thanks to the tight integration of SwiftData and SwiftUI.</p><p>Writing unit tests with SwiftData is tricky because we need to be able to access our data model directly. If you&#39;re making queries by hand, perhaps because you&#39;re using MVVM or if you have other models being created and inserted outside of SwiftUI, then you&#39;ll be able to write unit tests just fine.</p><p>Let&#39;s demonstrate this with some code.</p><p>First, here&#39;s a simple SwiftData model we can work with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> director<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>director <span class="token operator">=</span> director</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>releaseYear <span class="token operator">=</span> releaseYear</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rather than querying that directly using <code>@Query</code>, we&#39;re going to query it using a fetch descriptor inside a view model. This takes a little more work, but it also means we can write unit tests by instantiating the view model directly – we can bypass SwiftUI entirely.</p><p>So, here&#39;s some code that creates a view model capable of adding and deleting sample data, and also fetching a list of movies on demand:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">ContentView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Observable</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ViewModel</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">let</span> modelContext<span class="token punctuation">:</span> <span class="token class-name">ModelContext</span></span>
<span class="line">        <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">init</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> <span class="token class-name">ModelContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>modelContext <span class="token operator">=</span> modelContext</span>
<span class="line">            <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">func</span> <span class="token function-definition function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> redOctober <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;The Hunt for Red October&quot;</span></span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;John McTiernan&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> sneakers <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sneakers&quot;</span></span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Phil Alden Robinson&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">1992</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> endLiss <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Endliss Possibilities: The Casey Liss Story&quot;</span></span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Erin Liss&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">2006</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>redOctober<span class="token punctuation">)</span></span>
<span class="line">            modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sneakers<span class="token punctuation">)</span></span>
<span class="line">            modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>endLiss<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">func</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">func</span> <span class="token function-definition function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> descriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                movies <span class="token operator">=</span> <span class="token keyword">try</span> modelContext<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fetch failed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can display all that data in a simple SwiftUI view that creates an instance of the view model and displays its results in a list:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> viewModel<span class="token punctuation">:</span> <span class="token class-name">ViewModel</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">.</span>movies<span class="token punctuation">)</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Directed by: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">movie<span class="token punctuation">.</span>director</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;MovieDB&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add Samples&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> viewModel<span class="token punctuation">.</span>addSamples<span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Clear&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> viewModel<span class="token punctuation">.</span>clear<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> <span class="token class-name">ModelContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> viewModel <span class="token operator">=</span> <span class="token class-name">ViewModel</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> modelContext<span class="token punctuation">)</span></span>
<span class="line">        _viewModel <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">:</span> viewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),y=n("code",null,"[New]",-1),g=n("code",null,"[Target]",-1),C=l(`<p>Now open your test file. We&#39;re going to write a unit test in a moment, but first we need some small changes:</p><ol><li>Add <code>@testable import YourAppTests</code> to the top of the file, changing <code>YourAppTests</code> to be whatever your main module is called. This gives us access to all the data types inside the main project.</li><li>Add <code>import SwiftData</code> below that, so we can make containers and contexts freely.</li><li>Mark your <code>XCTestCase</code> with the <code>@MainActor</code> attribute, so we can access the main context freely.</li></ol><p>At last we can actually write a real test for our view model. This will simply create the view model and assert that there are 0 movies by default:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testAppStartsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>isStoredInMemoryOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> sut <span class="token operator">=</span> <span class="token class-name">ContentView</span><span class="token punctuation">.</span><span class="token class-name">ViewModel</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> container<span class="token punctuation">.</span>mainContext<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>sut<span class="token punctuation">.</span>movies<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 0 movies when the app is first launched.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The name <code>sut</code> is common in unit tests, and is short for &quot;system under test.&quot;</p></div><p>Yes, I know it&#39;s a lot of work for a small test, but now that all the setup is in place we can add more tests easily. For example, we could add a test to make sure the <code>addSamples()</code> method creates exactly three samples:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testCreatingSamplesWorks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>isStoredInMemoryOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> sut <span class="token operator">=</span> <span class="token class-name">ContentView</span><span class="token punctuation">.</span><span class="token class-name">ViewModel</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> container<span class="token punctuation">.</span>mainContext<span class="token punctuation">)</span></span>
<span class="line">    sut<span class="token punctuation">.</span><span class="token function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>sut<span class="token punctuation">.</span>movies<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 3 movies after adding sample data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or a test to make sure the <code>clear()</code> method removes all the movies that were created:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testCreatingAndClearingLeavesAppEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>isStoredInMemoryOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> sut <span class="token operator">=</span> <span class="token class-name">ContentView</span><span class="token punctuation">.</span><span class="token class-name">ViewModel</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> container<span class="token punctuation">.</span>mainContext<span class="token punctuation">)</span></span>
<span class="line">    sut<span class="token punctuation">.</span><span class="token function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    sut<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>sut<span class="token punctuation">.</span>movies<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 0 movies after deleting all data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These work well, although making the configuration, container, and view model each time is a bit repetitive. If that annoys you, consider adding a small protocol and extension to your test file, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">protocol</span> <span class="token class-name">ViewModelTestable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> <span class="token class-name">ModelContext</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">ContentView</span><span class="token punctuation">.</span><span class="token class-name">ViewModel</span><span class="token punctuation">:</span> <span class="token class-name">ViewModelTestable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Our view model can only conform to this protocol if it&#39;s declared as a <code>final</code> class, which is why this was added earlier.</p></div><p>And now we can add a helper method to our <code>XCTestCase</code> class that&#39;s able to create and configure the view model for us:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">make</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">ViewModelTestable</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>isStoredInMemoryOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">T</span><span class="token punctuation">(</span>modelContext<span class="token punctuation">:</span> container<span class="token punctuation">.</span>mainContext<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This makes our test code much simpler:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testCreatingSamplesWorks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> sut <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">make</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">:</span> <span class="token class-name">ContentView</span><span class="token punctuation">.</span><span class="token class-name">ViewModel</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    sut<span class="token punctuation">.</span><span class="token function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>sut<span class="token punctuation">.</span>movies<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 3 movies after adding sample data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s particularly nice if you&#39;re fond of the &quot;given, when, then&quot; or &quot;arrange, act, assert&quot; model:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testCreatingSamplesWorks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Given</span></span>
<span class="line">    <span class="token keyword">let</span> sut <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">make</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">:</span> <span class="token class-name">ContentView</span><span class="token punctuation">.</span><span class="token class-name">ViewModel</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// When</span></span>
<span class="line">    sut<span class="token punctuation">.</span><span class="token function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Then</span></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>sut<span class="token punctuation">.</span>movies<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 3 movies after adding sample data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Anyway, as you can see unit testing can work great with SwiftData – as long as you&#39;re happy to pull your data access out into a separate view model. This does make tracking updates significantly harder, but hopefully we&#39;ll get some sort of <code>NSFetchedResultsController</code> equivalent soon…</p>`,19);function M(i,x){const t=o("VPCard"),c=o("FontIcon");return k(),r("div",null,[n("h1",v,[n("a",w,[n("span",null,d(i.$frontmatter.title)+" 관련",1)])]),s(t,e(p({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,h,s(t,e(p({title:"How to write unit tests for your SwiftData code | SwiftData by Example",desc:"How to write unit tests for your SwiftData code",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-write-unit-tests-for-your-swiftdata-code",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[a("That's all our setup code complete, so we can now start writing unit tests. Go to the File menu and choose "),s(c,{icon:"iconfont icon-select"}),y,a(" > "),g,a(". Select Unit Testing Bundle, then press Next and Finish to create a new set of unit tests.")]),C])}const T=u(m,[["render",M],["__file","how-to-write-unit-tests-for-your-swiftdata-code.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-write-unit-tests-for-your-swiftdata-code.html","title":"How to write unit tests for your SwiftData code","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to write unit tests for your SwiftData code","description":"Article(s) > How to write unit tests for your SwiftData code","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to write unit tests for your SwiftData code"},{"property":"og:description","content":"How to write unit tests for your SwiftData code"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-write-unit-tests-for-your-swiftdata-code.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-write-unit-tests-for-your-swiftdata-code.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to write unit tests for your SwiftData code"}],["meta",{"property":"og:description","content":"Article(s) > How to write unit tests for your SwiftData code"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to write unit tests for your SwiftData code\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.78,"words":1133},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-write-unit-tests-for-your-swiftdata-code.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{T as comp,_ as data};
