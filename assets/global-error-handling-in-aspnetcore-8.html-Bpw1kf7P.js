import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,b as n,t as v,e as a,n as h,g,w as e,d as s,f as i,r as o,o as b}from"./app-BgNevrm5.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},_=n("hr",null,null,-1),E=n("strong",null,"avoiding exceptions entirely.",-1),H=i('<p>But they will inevitably happen in your applications, and you need to handle them.</p><p>You can implement a global exception handling mechanism or handle only specific exceptions.</p><p>ASP.NET Core gives you a few options on how to implement this. So which one should you choose?</p><p>Today, I want to show you an <em>old</em> and <em>new</em> way to handle exceptions in ASP.NET Core 8.</p><hr><h2 id="old-way-exception-handling-midleware" tabindex="-1"><a class="header-anchor" href="#old-way-exception-handling-midleware"><span>Old Way: Exception Handling Midleware</span></a></h2><p>The standard to implement exception handling in ASP.NET Core is using middleware. Middleware allows you to introduce logic before or after executing HTTP requests. You can easily extend this to implement exception handling. Add a <code>try-catch</code> statement in the middleware and return an error HTTP response.</p>',7),T=n("strong",null,"3 ways to create middleware",-1),C=n("strong",null,"request delegates",-1),S=n("strong",null,"convention",-1),A=n("code",null,"IMiddleware",-1),I=i(`<p>The convention-based approach requires you to define an <code>InvokeAsync</code> method.</p><p>Here&#39;s an <code>ExceptionHandlingMiddleware</code> defined by convention:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionHandlingMiddleware</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ExceptionHandlingMiddleware<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ExceptionHandlingMiddleware</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ExceptionHandlingMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _next <span class="token operator">=</span> next<span class="token punctuation">;</span></span>
<span class="line">        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span></span>
<span class="line">                exception<span class="token punctuation">,</span> <span class="token string">&quot;Exception occurred: {Message}&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> problemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Status <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError<span class="token punctuation">,</span></span>
<span class="line">                Title <span class="token operator">=</span> <span class="token string">&quot;Server Error&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span></span>
<span class="line">                StatusCodes<span class="token punctuation">.</span>Status500InternalServerError<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsJsonAsync</span><span class="token punctuation">(</span>problemDetails<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),N=n("code",null,"ExceptionHandlingMiddleware",-1),q={href:"https://rfc-editor.org/rfc/rfc7807.html",target:"_blank",rel:"noopener noreferrer"},P=i(`<p>You also need to add this middleware to the ASP.NET Core request pipeline:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExceptionHandlingMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="new-way-iexceptionhandler" tabindex="-1"><a class="header-anchor" href="#new-way-iexceptionhandler"><span>New Way: IExceptionHandler</span></a></h2>`,4),R={href:"https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-8.0",target:"_blank",rel:"noopener noreferrer"},j={href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler?view=aspnetcore-8.0",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"IExceptionHandler",-1),M=n("code",null,"IExceptionHandler",-1),B=i(`<p>This interface has only one <code>TryHandleAsync</code> method.</p><p><code>TryHandleAsync</code> attempts to handle the specified exception within the ASP.NET Core pipeline. If the exception can be handled, it should return <code>true</code>. If the exception can&#39;t be handled, it should return <code>false</code>. This allows you to implement custom exception-handling logic for different scenarios.</p><p>Here&#39;s a <code>GlobalExceptionHandler</code> implementation:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IExceptionHandler</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>GlobalExceptionHandler<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">GlobalExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>GlobalExceptionHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">TryHandleAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Exception</span> exception<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span></span>
<span class="line">            exception<span class="token punctuation">,</span> <span class="token string">&quot;Exception occurred: {Message}&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> problemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Status <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError<span class="token punctuation">,</span></span>
<span class="line">            Title <span class="token operator">=</span> <span class="token string">&quot;Server error&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> problemDetails<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> httpContext<span class="token punctuation">.</span>Response</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WriteAsJsonAsync</span><span class="token punctuation">(</span>problemDetails<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="configuring-iexceptionhandler-implementations" tabindex="-1"><a class="header-anchor" href="#configuring-iexceptionhandler-implementations"><span>Configuring IExceptionHandler Implementations</span></a></h2><p>You need two things to add an <code>IExceptionHandler</code> implementation to the ASP.NET Core request pipeline:</p>`,7),F=n("li",null,[s("Register the "),n("code",null,"IExceptionHandler"),s(" service with dependency injection")],-1),G={href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.diagnostics.exceptionhandlermiddleware?view=aspnetcore-8.0",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"ExceptionHandlerMiddleware",-1),V=n("code",null,"AddExceptionHandler",-1),Y=n("code",null,"GlobalExceptionHandler",-1),W=n("strong",null,"singleton lifetime",-1),J=n("code",null,"AddProblemDetails",-1),O={href:"https://rfc-editor.org/rfc/rfc7807.html",target:"_blank",rel:"noopener noreferrer"},U=i(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExceptionHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GlobalExceptionHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddProblemDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You also need to call <code>UseExceptionHandler</code> to add the <code>ExceptionHandlerMiddleware</code> to the request pipeline:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="chaining-exception-handlers" tabindex="-1"><a class="header-anchor" href="#chaining-exception-handlers"><span>Chaining Exception Handlers</span></a></h2><p>You can add multiple <code>IExceptionHandler</code> implementations, and they&#39;re called in the order they are registered. A possible use case for this is using exceptions for flow control.</p><p>You can define custom exceptions like <code>BadRequestException</code> and <code>NotFoundException</code>. They correspond with the HTTP status code you would return from the API.</p><p>Here&#39;s a <code>BadRequestExceptionHandler</code> implementation:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">BadRequestExceptionHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IExceptionHandler</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>BadRequestExceptionHandler<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">BadRequestExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>BadRequestExceptionHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">TryHandleAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Exception</span> exception<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token class-name">BadRequestException</span> badRequestException<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span></span>
<span class="line">            badRequestException<span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;Exception occurred: {Message}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            badRequestException<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> problemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Status <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">,</span></span>
<span class="line">            Title <span class="token operator">=</span> <span class="token string">&quot;Bad Request&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            Detail <span class="token operator">=</span> badRequestException<span class="token punctuation">.</span>Message</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> problemDetails<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> httpContext<span class="token punctuation">.</span>Response</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WriteAsJsonAsync</span><span class="token punctuation">(</span>problemDetails<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here&#39;s a <code>NotFoundExceptionHandler</code> implementation:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">NotFoundExceptionHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IExceptionHandler</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>NotFoundExceptionHandler<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">NotFoundExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>NotFoundExceptionHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">TryHandleAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Exception</span> exception<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token class-name">NotFoundException</span> notFoundException<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span></span>
<span class="line">            notFoundException<span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;Exception occurred: {Message}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            notFoundException<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> problemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Status <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status404NotFound<span class="token punctuation">,</span></span>
<span class="line">            Title <span class="token operator">=</span> <span class="token string">&quot;Not Found&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            Detail <span class="token operator">=</span> notFoundException<span class="token punctuation">.</span>Message</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> problemDetails<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> httpContext<span class="token punctuation">.</span>Response</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WriteAsJsonAsync</span><span class="token punctuation">(</span>problemDetails<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You also need to register both exception handlers by calling <code>AddExceptionHandler</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExceptionHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BadRequestExceptionHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExceptionHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NotFoundExceptionHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>BadRequestExceptionHandler</code> will execute first and try to handle the exception. If the exception isn&#39;t handled, <code>NotFoundExceptionHandler</code> will execute next and attempt to handle the exception.</p><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Using middleware for exception handling is an excellent solution in ASP.NET Core. However, it&#39;s great that we have new options using the <code>IExceptionHandler</code> interface. I will use the new approach in ASP.NET Core 8 projects.</p>`,17),z=n("strong",null,"Result pattern",-1),K={href:"https://github.com/dotnet/aspnetcore/issues/46280#issuecomment-1527898867",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"dotnet/aspnetcore",-1),$=n("figure",null,[n("img",{src:"https://milanjovanovic.tech/blogs/mnw_066/fowler_comment.png?imwidth=3840",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Q={href:"https://youtu.be/WCCkEe_Hy2Y",target:"_blank",rel:"noopener noreferrer"},X=n("strong",null,"check out this video.",-1),nn=n("p",null,"Thanks for reading, and stay awesome!",-1);function sn(c,an){const r=o("VPCard"),p=o("router-link"),d=o("SiteInfo"),t=o("RouteLink"),l=o("FontIcon"),u=o("VidStack");return b(),m("div",null,[n("h1",w,[n("a",x,[n("span",null,v(c.$frontmatter.title)+" 관련",1)])]),a(r,h(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[a(p,{to:"#old-way-exception-handling-midleware"},{default:e(()=>[s("Old Way: Exception Handling Midleware")]),_:1})]),n("li",null,[a(p,{to:"#new-way-iexceptionhandler"},{default:e(()=>[s("New Way: IExceptionHandler")]),_:1})]),n("li",null,[a(p,{to:"#configuring-iexceptionhandler-implementations"},{default:e(()=>[s("Configuring IExceptionHandler Implementations")]),_:1})]),n("li",null,[a(p,{to:"#chaining-exception-handlers"},{default:e(()=>[s("Chaining Exception Handlers")]),_:1})]),n("li",null,[a(p,{to:"#takeaway"},{default:e(()=>[s("Takeaway")]),_:1})])])]),_,a(d,{name:"Global Error Handling in ASP.NET Core 8",desc:"Exceptions are for exceptional situations. But they will inevitably happen in your applications, and you need to handle them. You can implement a global exception handling mechanism or handle only specific exceptions. ASP.NET Core gives you a few options on how to implement this. So which one should you choose? Today, I want to show you an old and new way to handle exceptions in ASP.NET Core 8.",url:"https://milanjovanovic.tech/blog/global-error-handling-in-aspnetcore-8/",logo:"https://milanjovanovic.tech/profile_favico.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_066.png"}),n("p",null,[s("Exceptions are for exceptional situations. I even wrote about "),a(t,{to:"/milanjovanovic.tech/functional-error-handling-in-dotnet-with-the-result-pattern.html"},{default:e(()=>[E]),_:1})]),H,n("p",null,[s("There are "),a(t,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:e(()=>[T]),_:1}),s(" in ASP.NET Core:")]),n("ul",null,[n("li",null,[s("Using "),a(t,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html#adding-middleware-with-request-delegates"},{default:e(()=>[C]),_:1})]),n("li",null,[s("By "),a(t,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html#adding-middleware-by-convention"},{default:e(()=>[S]),_:1})]),n("li",null,[a(t,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html#adding-factory-based-middleware"},{default:e(()=>[A]),_:1})])]),I,n("p",null,[s("The "),N,s(" will catch any unhandled exception and return a "),n("a",q,[a(l,{icon:"fas fa-globe"}),s("Problem Details")]),s(" response. You can decide how much information you want to return to the caller. In this example, I'm hiding the exception details.")]),P,n("p",null,[n("a",R,[a(l,{icon:"fa-brands fa-microsoft"}),s("ASP.NET Core 8")]),s(" introduces a new "),n("a",j,[a(l,{icon:"fa-brands fa-microsoft"}),D]),s(" abstraction for managing exceptions. The built-in exception handler middleware uses "),M,s(" implementations to handle exceptions.")]),B,n("ol",null,[F,n("li",null,[s("Register the "),n("a",G,[a(l,{icon:"fa-brands fa-microsoft"}),L]),s(" with the request pipeline")])]),n("p",null,[s("You call the "),V,s(" method to register the "),Y,s(" as a service. It's registered with a "),a(t,{to:"/milanjovanovic.tech/improving-aspnetcore-dependency-injection-with-scrutor.html"},{default:e(()=>[W]),_:1}),s(". So be careful about injecting services with a different lifetime.")]),n("p",null,[s("I'm also calling "),J,s(" to generate a "),n("a",O,[a(l,{icon:"fas fa-globe"}),s("Problem Details")]),s(" response for common exceptions.")]),U,n("p",null,[s("I'm very much against using exceptions for flow control. Exceptions are a last resort when you can't continue normal application execution. The "),a(t,{to:"/milanjovanovic.tech/functional-error-handling-in-dotnet-with-the-result-pattern.html"},{default:e(()=>[z]),_:1}),s(" is a better alternative.")]),n("p",null,[s("Exceptions are also "),n("a",K,[s("extremely expensive ("),a(l,{icon:"iconfont icon-github"}),Z,s(")")]),s(", as David Fowler noted:")]),$,n("p",null,[s("If you want to get rid of exceptions in your code, "),n("a",Q,[a(l,{icon:"fa-brands fa-youtube"}),X])]),a(u,{src:"youtube/WCCkEe_Hy2Y"}),nn])}const ln=k(y,[["render",sn],["__file","global-error-handling-in-aspnetcore-8.html.vue"]]),on=JSON.parse('{"path":"/milanjovanovic.tech/global-error-handling-in-aspnetcore-8.html","title":"Global Error Handling in ASP.NET Core 8","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Global Error Handling in ASP.NET Core 8","description":"Article(s) > Global Error Handling in ASP.NET Core 8","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Global Error Handling in ASP.NET Core 8"},{"property":"og:description","content":"Global Error Handling in ASP.NET Core 8"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/global-error-handling-in-aspnetcore-8.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/global-error-handling-in-aspnetcore-8.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Global Error Handling in ASP.NET Core 8"}],["meta",{"property":"og:description","content":"Article(s) > Global Error Handling in ASP.NET Core 8"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_066.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_066.png"}],["meta",{"name":"twitter:image:alt","content":"Global Error Handling in ASP.NET Core 8"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2023-12-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Global Error Handling in ASP.NET Core 8\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_066/fowler_comment.png?imwidth=3840\\"],\\"datePublished\\":\\"2023-12-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/cs/articles/README.md","date":"2023-12-02T00:00:00.000Z","isOriginal":false,"cover":"https://milanjovanovic.tech/blog-covers/mnw_066.png"},"headers":[{"level":2,"title":"Old Way: Exception Handling Midleware","slug":"old-way-exception-handling-midleware","link":"#old-way-exception-handling-midleware","children":[]},{"level":2,"title":"New Way: IExceptionHandler","slug":"new-way-iexceptionhandler","link":"#new-way-iexceptionhandler","children":[]},{"level":2,"title":"Configuring IExceptionHandler Implementations","slug":"configuring-iexceptionhandler-implementations","link":"#configuring-iexceptionhandler-implementations","children":[]},{"level":2,"title":"Chaining Exception Handlers","slug":"chaining-exception-handlers","link":"#chaining-exception-handlers","children":[]},{"level":2,"title":"Takeaway","slug":"takeaway","link":"#takeaway","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4,"words":1199},"filePathRelative":"milanjovanovic.tech/global-error-handling-in-aspnetcore-8.md","localizedDate":"2023년 12월 2일","excerpt":"\\n"}');export{ln as comp,on as data};
