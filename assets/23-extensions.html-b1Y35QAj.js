import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as u,e as s,n as i,g as o,d as e,f as c,r as l,o as h}from"./app-BgNevrm5.js";const m={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),v=c(`<p>Extensions let us modify Swift’s data types to add new functionality, and so on in a really clean way – our new code is indistinguishable from existing code.</p><p>Let&#39;s start with an extension that adds one to an integer. Yes, I realize this is essentially just <code>+= 1</code>, but we&#39;re starting simple. First, add this integer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> myInt <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now add this to the playground, just beneath the <code>import UIKit</code> statement:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>As that method contains only a single line of code that must return a value, you can remove the <code>return</code> keyword entirely.</p></div><p><code>extension Int</code> tells Swift that we want to add functionality to its <code>Int</code> struct. We could have used <code>String</code>, <code>Array</code>, or whatever instead, but <code>Int</code> is a nice easy one to start.</p><p>How the extension works will become clear once you use it. Put this line just below the end of the extension:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">myInt<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/extensions-1@2x.png" alt="Calling  creates the Integer 1." tabindex="0" loading="lazy"><figcaption>Calling <code>plusOne</code> creates the Integer 1.</figcaption></figure><p>In the playground output you&#39;ll now see 0 for the first line and 1 for the second, so calling <code>plusOne()</code> has returned a number one higher than the number we called it on.</p><p>The extension has been added to all integers, so you can even call it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token number">5</span><span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When you do that, you&#39;ll see 6 in the output column.</p><p>Our extension adds 1 to its input number and returns it to the caller, but <em>doesn&#39;t</em> modify the original value. Try typing this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> myInt <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">myInt<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">myInt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using a variable by itself tells the playground just to output its value, so in the output column you&#39;ll see 10, then 11, then 10 again. This is the original value, the return from the <code>plusOne()</code> method, and the original, unchanged value.</p><p>To push things a little further, let&#39;s modify the <code>plusOne()</code> method so that it doesn&#39;t return anything, instead modifying the instance itself – i.e., the input integer.</p><p>To make that happen, you might think we need to do something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That removes the return value because we aren&#39;t returning anything now, and it uses the <code>+=</code> operator to add one to <code>self</code>. But this won&#39;t work, and in fact Xcode will give you a wonderfully indecipherable error message: &quot;Left side of mutating operator isn&#39;t mutable: &#39;self&#39; is immutable&quot;</p><p>What Xcode really means is that it Swift doesn&#39;t let you modify <code>self</code> inside an extension by default. The reason is that we could call <code>plusOne()</code> using <code>5.plusOne()</code>, and clearly you can&#39;t modify the number 5 to mean something else.</p><p>So, Swift forces you to declare the method <code>mutating</code>, meaning that it will change its input. Change your extension to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>…and now the error message will go away. Once you have declared a method as being <code>mutating</code>, Swift knows it will change values so it won&#39;t let you use it with constants. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> myInt <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">myInt<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> otherInt <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">otherInt<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first integer will be modified correctly, but the second will fail because Swift won&#39;t let you modify constants.</p><p>It&#39;s extremely common for developers to use extensions to add functionality to things. In some ways, extensions are similar to subclasses, so why use extensions at all?</p><p>The main reason is extensibility: extensions work across all data types, and they don&#39;t conflict when you have more than one. That is, we could make a <code>Dog</code> subclass that adds <code>bark()</code>, but what if we find some open source code that contains a <code>doTricks()</code> method? We would have to copy and paste it in to our subclass, or perhaps even subclass again.</p>`,29),y=n("code",null,"Type+Modifier.swift",-1),b=n("code",null,"String+RandomLetter.swift",-1),x=c(`<p>If you find yourself trimming whitespace off strings frequently, you&#39;ll probably get tired of using this monstrosity:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trimmingCharacters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whitespacesAndNewlines<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>…so why not just make an extension like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token function">trimmingCharacters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whitespacesAndNewlines<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/extensions-2@2x.png" alt="Using  removes surrounding whitespace from a String." tabindex="0" loading="lazy"><figcaption>Using <code>trim</code> removes surrounding whitespace from a String.</figcaption></figure><p>You can extend as much as you want, although it&#39;s good practice to keep differing functionality separated into individual files.</p>`,6);function _(p,I){const t=l("VPCard"),a=l("FontIcon");return h(),d("div",null,[n("h1",g,[n("a",f,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),s(t,i(o({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,w,s(t,i(o({title:"Extensions | Hacking with iOS",desc:"Extensions",link:"https://hackingwithswift.com/read/0/23/extensions",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,n("p",null,[e("With extensions you can have ten different pieces of functionality in ten different files – they can all modify the same type directly, and you don't need to subclass anything. A common naming scheme for naming your extension files is "),s(a,{icon:"fa-brands fa-swift"}),y,e(", for example "),s(a,{icon:"fa-brands fa-swift"}),b,e(".")]),x])}const j=r(m,[["render",_],["__file","23-extensions.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/read/00/23-extensions.html","title":"Extensions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Extensions","description":"Article(s) > Extensions","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Extensions"},{"property":"og:description","content":"Extensions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/23-extensions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/23-extensions.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Extensions"}],["meta",{"property":"og:description","content":"Article(s) > Extensions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/extensions-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Extensions\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/extensions-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/extensions-2@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.93,"words":879},"filePathRelative":"hackingwithswift.com/read/00/23-extensions.md","excerpt":"\\n"}');export{j as comp,E as data};
