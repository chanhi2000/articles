import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as g,e as a,n as m,g as r,w as c,d as s,a as i,f as e,r as o,o as k}from"./app-BgNevrm5.js";const w={},y={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},x=n("hr",null,null,-1),z=n("p",null,"태블릿PC에서 주로 쓰이던 arm64 아키텍처가 애플의 M1 노트북에 적용되며, arm64 기반 노트북 시장이 가파르게 성장하기 시작했습니다.",-1),A=n("img",{src:"https://yozm.wishket.com/media/news/2658/image6.png",alt:'arm 기반 노트북 시장 성장에 대한 예상치 <br/><출처: <FontIcon icon="fas fa-globe"/>Techpowerup>',tabindex:"0",loading:"lazy"},null,-1),E=n("br",null,null,-1),T={href:"https://techpowerup.com/307094/arm-based-pcs-to-nearly-double-market-share-by-2027-says-report#g307094-1",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"일반 노트북 시장뿐만 아니라 각 클라우드 사에서도 독자적으로 개발한 arm64 기반 컴퓨팅 인스턴스를 출시하고 있습니다. 성공적인 전환을 통해 효과적으로 TCO(총소유비용)를 절감한 사례들 역시 속속 나오고 있습니다.",-1),R=n("img",{src:"https://yozm.wishket.com/media/news/2658/image4.png",alt:'대표적인 arm64 기반의 컴퓨팅 인스턴스인 AWS사의 그래비톤 <br/><출처: <FontIcon icon="fa-brands fa-aws"/>AWS>',tabindex:"0",loading:"lazy"},null,-1),L=n("br",null,null,-1),B={href:"https://aws.amazon.com/ko/ec2/graviton/",target:"_blank",rel:"noopener noreferrer"},M=e('<p>이러한 흐름에 발맞춰 쿠버네티스 컨트롤 플레인 노드의 구성 요소 또한 arm64 기반을 지원하는 추세입니다. 다양한 컨테이너 이미지 역시 x86-64(amd64)와 함께 arm64를 지원하고 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2658/image23.png" alt="x86-64와 arm64 로고" tabindex="0" loading="lazy"><figcaption>x86-64와 arm64 로고</figcaption></figure><p>따라서 나만의 arm64 기반 쿠버네티스 클러스터를 만들어 보며 이러한 변화에 대비할 수 있는 시간을 가져보도록 하겠습니다.</p><hr><h2 id="주요-단계-overview" tabindex="-1"><a class="header-anchor" href="#주요-단계-overview"><span>주요 단계 overview</span></a></h2><p>arm64 기반 쿠버네티스 클러스터를 만드는 과정은 다음과 같이 진행됩니다.</p><blockquote><ol><li><strong>arm64 기반 쿠버네티스 클러스터를 배포하기 위한 소프트웨어 설치하기</strong></li><li><strong>설치한 소프트웨어로 쿠버네티스 클러스터 구성하기</strong></li><li><strong>터미널 프로그램으로 구성된 쿠버네티스 클러스터를 확인하고, 간단한 애플리케이션 배포하기</strong></li></ol></blockquote><p>이처럼 간단한 3단계로도 실제 arm64 기반 쿠버네티스 클러스터를 구성할 수 있습니다. 시작해 볼까요?</p><p><img src="https://yozm.wishket.com/media/news/2658/image19.png" alt="쿠버네티스 클러스터 v1.30 로고 &lt;br/&gt;&lt;출처: &lt;FontIcon icon=&quot;iconfont icon-k8s&quot;/&gt;Kubernetes" loading="lazy">&gt;</p><hr><h2 id="arm64-기반-쿠버네티스-클러스터-구축하기" tabindex="-1"><a class="header-anchor" href="#arm64-기반-쿠버네티스-클러스터-구축하기"><span>arm64 기반 쿠버네티스 클러스터 구축하기</span></a></h2><h3 id="_1-arm64-기반-쿠버네티스-클러스터를-배포하기-위한-소프트웨어-설치하기" tabindex="-1"><a class="header-anchor" href="#_1-arm64-기반-쿠버네티스-클러스터를-배포하기-위한-소프트웨어-설치하기"><span>1. arm64 기반 쿠버네티스 클러스터를 배포하기 위한 소프트웨어 설치하기</span></a></h3>',12),S={href:"https://github.com/sysnet4admin/_Lecture_k8s_learning.kit",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"sysnet4admin/_Lecture_k8s_learning.kit",-1),N=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/sysnet4admin/_Lecture_k8s_learning.kit</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Cloning into &#39;_Lecture_k8s_learning.kit&#39;...</span></span>
<span class="line"><span class="token comment"># remote: Enumerating objects: 4956, done.</span></span>
<span class="line"><span class="token comment"># ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C=e(`<p>먼저 내려받은 소스 디렉터리 가운데 ch2/2.4로 이동합시다. 해당 디렉터리에는 arm64 기반 배포를 위한 소프트웨어, 터미널 프로그램 그리고 관련 내용들이 있습니다.</p><p>설치해야 하는 소프트웨어는 다음 3가지입니다. 순서대로 설치 과정을 짚어보겠습니다.</p><ul><li>VM웨어 퓨전 (VMware Fusion)</li><li>베이그런트 (Vagrant)</li><li>타비 (Tabby)</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> _Lecture_k8s_learning.kit/ch2/2.4 </span>
<span class="line">ll</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># total 0</span></span>
<span class="line"><span class="token comment"># drwxr-xr-x@ 8 hj staff   256B Jun 11 14:24 k8s-adv/</span></span>
<span class="line"><span class="token comment"># drwxr-xr-x@ 6 hj staff   1928 Jun 11 14:24 scripts/</span></span>
<span class="line"><span class="token comment"># drwxr-xr-x@ 4 hj staff   128B Jun 11 14:24 tabby-v1.0.207/ 96B Jun 11 14:24 vagrant-v2.4.1/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),P=e(`<h4 id="vm웨어-퓨전-vmware-fusion-설치" tabindex="-1"><a class="header-anchor" href="#vm웨어-퓨전-vmware-fusion-설치"><span>VM웨어 퓨전(VMware Fusion) 설치</span></a></h4><p>VM웨어 퓨전을 설치하려면 brew install을 그대로 쓸 수도 있습니다. 그러나 호환성 유지를 위해 준비된 rb를 이용해 고정된 <strong>v13.5.2</strong> 버전의 <strong>VM웨어 퓨전</strong>을 설치하겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">brwe <span class="token function">install</span> <span class="token parameter variable">--cask</span> ./vmware-fusion-v13.5.2/vmware-fusion.rb</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># ==&gt; Auto-updating Homebrew..</span></span>
<span class="line"><span class="token comment"># Adjust how often this is run with HOMEBREW_AUTO_UPDATE_SECS or disable with HOMEBREW_NO_AUTO_UPDATE. Hide these hints with HOMEBREW_NO_ENV_HINTS (see \`man brew).</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading</span></span>
<span class="line"><span class="token comment"># http://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.5.2/23775688/uni versal/core/com.vmware.fusion.zip.tar</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading from</span></span>
<span class="line"><span class="token comment"># https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.5.2/23775688/un iversal/core/com.vmware.fusion.zip.tar</span></span>
<span class="line"><span class="token comment">################################################################ 100.0%</span></span>
<span class="line"><span class="token comment"># ==&gt; Installing Cask vmware-fusion</span></span>
<span class="line"><span class="token comment"># ==&gt; Moving App &#39;VMware Fusion.app&#39; to &#39;/Applications/VMware Fusion.app&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmnet-cfgcli&#39; to &#39;/opt/homebrew/bin/vmnet-cfgcli&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmnet-cli&#39; to &#39;/opt/homebrew/bin/vmnet-cli&#39; </span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmnet-dhcpd&#39; to &#39;/opt/homebrew/bin/vmnet-dhcpd&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmnet-natd&#39; to &#39;/opt/homebrew/bin/vmnet-natd&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmnet-netifup&#39; to &#39;/opt/homebrew/bin/vmnet-netifup&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmnet-sniffer&#39; to &#39;/opt/homebrew/bin/vmnet-sniffer*</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmrest&#39; to &#39;/opt/homebrew/bin/vmrest&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmrun&#39; to &#39;/opt/homebrew/bin/vmrun&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmss2core&#39; to &#39;/opt/homebrew/bin/vmss2core*</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;ovftool&#39; to &#39;/opt/homebrew/bin/ovftool&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-aewp&#39; to &#39;/opt/homebrew/bin/vmware-aewp&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-authd&#39; to &#39;/opt/homebrew/bin/vmware-authd&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-id&#39; to &#39;/opt/homebrew/bin/vmware-id&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-ntfs&#39; to &#39;/opt/homebrew/bin/vmware-ntfs&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-rawdiskAuthTool&#39; to &#39;/ opt/homebrew/bin/vmware-rawdiskAuthTool&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-rawdiskCreator&#39; to &#39;/opt/homebrew/bin/vmware-rawdiskCreator&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-remotemks&#39; to &#39;/opt/homebrew/bin/vmware-remotemks&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-usbarbitrator&#39; to &#39;/opt/homebrew/bin/vmware-usbarbitrator&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-vdiskmanager to &#39;/opt/homebrew/bin/vmware-vdiskmanager&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-vmdkserver&#39; to &#39;/opt/homebrew/bin/vmware-vmdkserver&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-vmx&#39; to &#39;/opt/homebrew/bin/vmware-vmx&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-vmx-debug&#39; to &#39;/opt/homebrew/bin/vmware-vmx-debug&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-vmx-stats&#39; to &#39;/opt/homebrew/bin/vmware-vmx-stats&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmware-cloneBootCamp&#39; to &#39;/opt/homebrew/bin/vmware-cloneBootCamp</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vctl&#39; to &#39;/opt/homebrew/bin/vctl&#39; 3</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Binary &#39;vmnet-bridge&#39; to &#39;/opt/homebrew/bin/vmnet-bridge&#39;</span></span>
<span class="line highlighted"><span class="token comment"># Password: </span></span>
<span class="line"><span class="token comment"># vmware-fusion was successfully installed!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),I=n("p",null,[s("설치가 끝난 후에는 "),n("strong",null,"반드시 VM웨어 퓨전을 시작하고 개인 사용자 라이센스를 동의"),s("해 주셔야 합니다.")],-1),U=n("img",{src:"https://yozm.wishket.com/media/news/2658/image1.png",alt:'VM웨어 퓨전 무료 공지 <br/><출처: <FontIcon icon="fas fa-globe"/>VMware blog>',tabindex:"0",loading:"lazy"},null,-1),O=n("br",null,null,-1),D={href:"https://blogs.vmware.com/cloud-foundation/2024/05/14/vmware-desktop-hypervisor-pro-apps-now-available-for-personal-use/",target:"_blank",rel:"noopener noreferrer"},H=e(`<div class="hint-container info"><p class="hint-container-title">VM웨어 퓨전</p><p>최근, VM웨어를 인수한 브로드컴에서는 VM웨어 퓨전 v13.5.2부터 개인 사용자에게 이를 무료로 제공한다고 발표했습니다. 물론 이전에도 회원 가입만 하면 따로 개인용 라이센스를 발급받아서 입력할 수 있었지만, 전면적인 무료 계획을 발표한 것이죠. 이 글을 발행하는 2024년 7월 기준, arm64 개인 사용자에게는 어느 무엇보다도 VM웨어 퓨전이 편하고 강력한 하이퍼바이저 도구일 것입니다. 따라서 여기서는 VM웨어 퓨전을 사용해서 실습 환경을 구성합니다.</p></div><p>그다음은 유틸리티 설치입니다. 우리는 <strong>vagrant-vmware-utility v1.0.22</strong>를 설치합니다. 해당 유틸리티는 곧이어 설치할 베이그런트에서 VM웨어에 필요한 기능을 요청할 때 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">brwe <span class="token function">install</span> <span class="token parameter variable">--cask</span> ./vagrant-vmware-utility-1.0.22/vagrant-vmware-utility.rb </span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading https://releases.hashicorp.com/vagrant-vmware-utility/1.0.22/vagrant-vmware-utility_1.0.22_darwin_amd64.dmg </span></span>
<span class="line"><span class="token comment"># Already downloaded: /Users/hj/Library/Caches/Homebrew/downloads/3c4fc35e6cba00b55837775a667e140 3d2be10fea8525b75f1beb88b074df283--vagrant-vmware-utility_1.0.22_darwin_amd 64.dmg </span></span>
<span class="line"><span class="token comment"># ==&gt; Installing Cask vagrant-vmware-utility </span></span>
<span class="line"><span class="token comment"># ==&gt; Running installer for vagrant-vmware-utility with sudo; the password may be necessary. </span></span>
<span class="line"><span class="token comment"># installer: Package name is Vagrant VMware Utility </span></span>
<span class="line"><span class="token comment"># installer: Installing at base path / </span></span>
<span class="line"><span class="token comment"># installer: The install was successful. </span></span>
<span class="line"><span class="token comment"># vagrant-vmware-utility was successfully installed!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),F=n("p",null,"이렇게 설치한 VM웨어 유틸리티를 서비스 형태로 시작하려면 launchctl을 거쳐 로드해야 합니다. 그러나 문제가 생겼을 때는, 이를 계속 다시 실행해야 할 수도 있습니다. 또한 네트워크 문제인 경우 netstat 명령으로 이를 점검해야 할 수도 있습니다.",-1),q=n("code",null,"copy_launchctl-all-vmware-utility.sh",-1),J=n("code",null,"copy_netstat-anvp.sh",-1),K=n("code",null,"/usr/local/bin",-1),W=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> ./scripts/copy_launchctl-all-vmware-utility.sh</span>
<span class="line"><span class="token function">sudo</span> ./scripts/copy_netstat-anvp.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G=e(`<p>해당 스크립트로 생성한 명령은 아래와 같습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">netstat-anvp <span class="token comment">#열려 있는 네트워크 포트 및 정보 확인</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Active Internet connections (including servers)</span></span>
<span class="line"><span class="token comment"># Proto Recv-Q Send-Q  Local Address    Foreign Address</span></span>
<span class="line"><span class="token comment"># tcp6  0      0       *.49365          *.*</span></span>
<span class="line"><span class="token comment"># [생략]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Y=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">launchctl-<span class="token operator">&lt;</span>tab<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># launchctl (Interfaces with launchd)</span></span>
<span class="line"><span class="token comment"># launchctl-load-vmware-utility (command)     # vmware-utility를 로드함 </span></span>
<span class="line"><span class="token comment"># launchctl-reload-vmware-utility (command)   # vmware-utility를 다시 로드함</span></span>
<span class="line"><span class="token comment"># launchctl-unload-vmware-utility (command)   # vmware-utility를 로드하지 않은 상태로 되돌림</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Z=e(`<p>그다음, <code>vmware-utility</code>를 서비스로 로드하겠습니다. 베이그런트와 정상적으로 소통하기 위함입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">launchctl-load-vmware-utility</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Q=n("code",null,"vf_net_create_vnet2.sh",-1),X=n("strong",null,"192.168.1.0",-1),$=e(`<p>진행 도중에 일부 인터페이스에서 실패할 수 있는데요. vmnet7을 생성하고 설정을 적용하는 것이 주목적이므로 vmnet7만 문제없다면 괜찮습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> ./scripts/vf_net_create_vnet2.sh</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Library Loaded</span></span>
<span class="line"><span class="token comment"># vmnetcfg: vnlvnetcfgadd successfully added key: value - VNET_7_DHCP: no</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Library Loaded</span></span>
<span class="line"><span class="token comment"># vmnetcfg: vnlvnetcfgadd successfully added key:value - VNET_7_HOSTONLY_SUBNET:192.168.1.0</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Library Loaded</span></span>
<span class="line"><span class="token comment"># vmnetcfg: vnlvnetcfgadd successfully added key:value - VNET_7_HOSTONLY_NETMASK:255.255.255.0</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Library Loaded</span></span>
<span class="line"><span class="token comment"># vmnetcfg: vnlvnetcfgadd successfully added key:value - VNET_7_NAT:yes</span></span>
<span class="line"><span class="token comment">#  </span></span>
<span class="line"><span class="token comment"># Library Loaded </span></span>
<span class="line"><span class="token comment"># vmnetcfg: vnlvnetcfgadd successfully added key:value - VNET_7_VIRTUAL_ADAPTER:yes</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Stopped all configured services on all networks</span></span>
<span class="line"><span class="token comment"># Backed up existing network settings to backup file &quot;/tmp/vmware.LHp0fq&quot;</span></span>
<span class="line"><span class="token comment"># Restored network settings</span></span>
<span class="line"><span class="token comment"># Stopped all configured services on all networks</span></span>
<span class="line"><span class="token comment"># Enabled hostonly virtual adapter on vmnet1</span></span>
<span class="line"><span class="token comment"># Failed to start DHCP service on vmnet1</span></span>
<span class="line"><span class="token comment"># Failed to start NAT service on vmnet7</span></span>
<span class="line"><span class="token comment"># Enabled hostonly virtual adapter on vmnet7</span></span>
<span class="line"><span class="token comment"># Failed to start NAT service on vmnet8</span></span>
<span class="line"><span class="token comment"># Enabled hostonly virtual adapter on vmnet8</span></span>
<span class="line"><span class="token comment"># Failed to start DHCP service on vmnet8</span></span>
<span class="line"><span class="token comment"># Failed to start some/all services</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),nn=e(`<h4 id="베이그런트-vagrant-설치" tabindex="-1"><a class="header-anchor" href="#베이그런트-vagrant-설치"><span>베이그런트(Vagrant) 설치+</span></a></h4><p>베이그런트(Vagrant) 역시 고정 버전을 설치합니다. 지정된 rb를 활용해 <strong>v2.4.1</strong>의 베이그런트를 설치합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> ./vagrant-v2.4.1/vagrant.rb</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># ==&gt; Auto-updating Homebrew...</span></span>
<span class="line"><span class="token comment"># Adjust how often this is run with HOMEBREW_AUTO_UPDATE_SECS or disable with HOMEBREW_NO_AUTO_UPDATE. Hide these hints with HOMEBREW_NO_ENV_HINTS (see \`man brew\`).</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading</span></span>
<span class="line"><span class="token comment"># https://releases.hashicorp.com/vagrant/2.4.1/vagrant_2.4.1_darwin_arm64.dmg</span></span>
<span class="line"><span class="token comment"># Already downloaded:</span></span>
<span class="line"><span class="token comment"># /Users/hj/Library/Caches/Homebrew/downloads/4b70740a5b8c3e37fa35305a64490aa c6ab9a1a9155e877c27e82fdff65d61fc--vagrant_2.4.1_darwin_arm64.dmg</span></span>
<span class="line"><span class="token comment"># ==&gt; Installing Cask vagrant</span></span>
<span class="line"><span class="token comment"># ==&gt; Running installer for vagrant with sudo; the password may be necessary.</span></span>
<span class="line"><span class="token comment"># installer: Package name is Vagrant</span></span>
<span class="line"><span class="token comment"># installer: Upgrading at base path /</span></span>
<span class="line"><span class="token comment"># installer: The upgrade was successful.</span></span>
<span class="line"><span class="token comment"># vagrant was successfully installed!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),sn=e(`<p>베이그런트가 VM웨어와 정상적으로 통신하려면 <code>vmware-utility</code> 뿐만 아니라 별도 플러그인이 필요합니다. 우리는 <code>vagrant-vmware-desktop</code> 플러그인을 설치하겠습니다. 이 플러그인은 베이그런트 버전에 따라 설치되기 때문에, 따로 이를 고정해 줄 필요는 없습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">vagrant plugin <span class="token function">install</span> vagrant-vmware-desktop</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Installing the &#39;vagrant-vmware-desktop&#39; plugin. This can take a few minutes...</span></span>
<span class="line"><span class="token comment"># Fetching vagrant-vmware-desktop-3.0.3.gem</span></span>
<span class="line"><span class="token comment"># Installed the plugin &#39;vagrant-vmware-desktop (3.0.3)&#39;!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),an=n("h4",{id:"타비-tabby-설치",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#타비-tabby-설치"},[n("span",null,"타비(Tabby) 설치+")])],-1),en=n("code",null,"rb",-1),ln=n("strong",null,"v1.0.207",-1),tn=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">brew <span class="token function">install</span> --cask./tabby-v1.0.207/tabby.rb</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading </span></span>
<span class="line"><span class="token comment"># https://github.com/Eugeny/tabby/releases/download/v1.0.207/tabby-1.0.207-macos-arm64.zip</span></span>
<span class="line"><span class="token comment"># Already downloaded: </span></span>
<span class="line"><span class="token comment"># /Users/hj/Library/Caches/Homebrew/downloads/6ac0899dd17d84fb668f23226094b67 4bf7f5615155b29ba53a109c4d519e782--tabby-1.0.207-macos-arm64.zip</span></span>
<span class="line"><span class="token comment"># ==&gt; Installing Cask tabby</span></span>
<span class="line"><span class="token comment"># ==&gt; Moving App &#39;Tabby.app&#39; to &#39;/Applications/Tabby.app&#39; </span></span>
<span class="line"><span class="token comment"># tabby was successfully installed!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),cn=n("code",null,"config.yaml",-1),on=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cp</span> ./tabby-v1.0.207/config.yaml ~/Library/Application<span class="token punctuation">\\</span> Support/tabby</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),pn=n("h3",{id:"_2-설치한-소프트웨어로-쿠버네티스-클러스터-구성하기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-설치한-소프트웨어로-쿠버네티스-클러스터-구성하기"},[n("span",null,"2. 설치한 소프트웨어로 쿠버네티스 클러스터 구성하기")])],-1),mn=n("p",null,"이제 쿠버네티스 클러스터를 구성할 차례입니다. 이 과정을 개략적으로 그리면 다음과 같습니다.",-1),rn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2658/image15.png",alt:"베이그런트, VM웨어 퓨전 그리고 타비의 관계",tabindex:"0",loading:"lazy"}),n("figcaption",null,"베이그런트, VM웨어 퓨전 그리고 타비의 관계")],-1),dn=n("code",null,"k8s-adv",-1),vn=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> k8s-adv/ </span>
<span class="line">ll</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># total 48</span></span>
<span class="line"><span class="token comment"># -rw-r--r--@ 1 hj staff   2.3K Jun 11 14:24 Vagrantfile</span></span>
<span class="line"><span class="token comment"># -rwxr-xr-x@ 1 hj staff   1.8K Jun 11 14:24 controlplane_node.sh*</span></span>
<span class="line"><span class="token comment"># -rwxr-xr-x@ 1 hj staff   738B Jun 11 14:24 extra_k8s_pkgs.sh*</span></span>
<span class="line"><span class="token comment"># -rwxr-xr-x@ 1 hj staff   1.4K Jun 11 14:24 k8s_env_build.sh*</span></span>
<span class="line"><span class="token comment"># -rwxr-xr-x@ 1 hj staff   1.0K Jun 11 14:24 k8s_pkg_cfg.sh*</span></span>
<span class="line"><span class="token comment"># -rwxr-xr-x@ 1 hj staff   166B Jun 11 14:24 worker_nodes.sh*</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),un=e(`<p>쿠버네티스 클러스터 구성은 <code>vagrant up</code> 명령으로 시작합니다.</p><p>이때 VM웨어 퓨전의 제약으로 화면에 구성을 시작하는 가상 머신이 계속 팝업될 겁니다. 이 부분을 따로 건드릴 필요도, 여기로 접속할 필요도 없습니다. VM웨어 퓨전 상에 구성된 가상 머신을 확인하려고 설정한 옵션 때문에 이렇게 동작할 뿐입니다. vagrant up 모든 과정이 완료되면 아래와 같은 코드를 볼 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">vagrant up</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;cp-k8s-1.30.1&#39; up with &#39;vmware_desktop&#39; provider...</span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;w1-k8s-1.30.1&#39; up with &#39;vmware_desktop&#39; provider...</span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;w2-k8s-1.30.1&#39; up with &#39;vmware_desktop&#39; provider...</span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;w3-k8s-1.30.1&#39; up with &#39;vmware_desktop&#39; provider...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.30.1: Box sysnet4admin/Ubuntu-k8s&#39; could not be found.</span></span>
<span class="line"><span class="token comment"># Attempting to find and install...</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.30.1: Box Provider: vmware_desktop, vmware_fusion, vmware_workstation</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.30.1: Box Version: &gt;= 0</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.30.1: Loading metadata for box sysnet4admin/Ubuntu-k8s&#39;</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.30.1: URL: https://vagrantcloud.com/api/v2/vagrant/sysnet4admin/Ubuntu-k8s</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.30.1: Adding box sysnet4admin/Ubuntu-k8s&#39; (v0.8.5) for provider: vmware_desktop (arm64)</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.30.1: Downloading: https://vagrantcloud.com/sysnet4admin/boxes/Ubuntu-k8s/versions/0.8.5/provi ders/vmware_desktop/arm64/vagrant.box</span></span>
<span class="line"><span class="token comment"># Progress: 10% (Rate: 1733k/s, Estimated time remaining: 0:04:00)</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.30.1: Successfully added box &#39;sysnet4admin/Ubuntu-k8s&#39; (v0.8.5) for &#39;vmware_desktop (arm64&#39;! </span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.30.1: Cloning VMware VM: &#39;sysnet4admin/Ubuntu-k8s&#39;. This can take some time... ==&gt; cp-k8s-1.30.1: Checking if box sysnet4admin/Ubuntu-k8s&#39; version &#39;0.8.5&#39; is up to date...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.30.1: Verifying vmnet devices are healthy...</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># [중략]</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#     w3-k8s-1.30.1: This node has joined the cluster:</span></span>
<span class="line"><span class="token comment">#     w3-k8s-1.30.1: * Certificate signing request was sent to apiserver and a response was received.</span></span>
<span class="line"><span class="token comment">#     w3-k8s-1.30.1: * The Kubelet was informed of the new secure connection details.</span></span>
<span class="line"><span class="token comment">#     w3-k8s-1.30.1:</span></span>
<span class="line"><span class="token comment">#     w3-k8s-1.30.1: Run &#39;kubectl get nodes&#39; on the control-plane to see this node join the cluster.</span></span>
<span class="line"><span class="token comment">#     w3-k8s-1.30.1:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),bn=n("h3",{id:"_3-터미널-프로그램으로-구성된-쿠버네티스-클러스터를-확인하고-간단한-애플리케이션-배포하기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-터미널-프로그램으로-구성된-쿠버네티스-클러스터를-확인하고-간단한-애플리케이션-배포하기"},[n("span",null,"3. 터미널 프로그램으로 구성된 쿠버네티스 클러스터를 확인하고, 간단한 애플리케이션 배포하기")])],-1),hn=n("p",null,"배포한 쿠버네티스 클러스터 노드에 접속하려면, 이를 위해 설치한 터미널 프로그램 타비를 실행하면 됩니다.",-1),gn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2658/image11.png",alt:"타비를 처음 실행하면 아래처럼 프로필을 선택할 수 있습니다. 우리는 를 선택할 겁니다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,[s("타비를 처음 실행하면 아래처럼 프로필을 선택할 수 있습니다. 우리는 "),n("code",null,"cp-k8s"),s("를 선택할 겁니다.")])],-1),kn=n("img",{src:"https://yozm.wishket.com/media/news/2658/image26.png",alt:'를 선택한 다음에는 호스트 키 확인을 요청해야 합니다. <FontIcon icon="iconfont icon-select"/>을 누르고 계속 진행합니다.',tabindex:"0",loading:"lazy"},null,-1),wn=n("code",null,"cp-k8s",-1),yn=n("code",null,"[허용 후 키 저장]",-1),_n=e(`<p><code>cp-k8s</code>에 접속했나요? <code>k get nodes</code> 그리고 <code>k get po -A</code>를 입력해 배포가 정상적으로 이루어졌는지 확인합시다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">k get nodes</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME    STATUS  ROLES          AGE    VERSION</span></span>
<span class="line"><span class="token comment"># cp-k8s  Ready   control-plane  9m7s   v1.30.1</span></span>
<span class="line"><span class="token comment"># w1-k8s  Ready                  6m31s  v1.30.1</span></span>
<span class="line"><span class="token comment"># w2-k8s  Ready                  4m8s   v1.30.1</span></span>
<span class="line"><span class="token comment"># w3-k8s  Ready                  2m28s  v1.30.1</span></span>
<span class="line"></span>
<span class="line">k get po <span class="token parameter variable">-A</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAMESPACE       NAME                                      READY  STATUS             RESTARTS      AGE</span></span>
<span class="line"><span class="token comment"># kube-system     calico-kube-controllers-6cdb97b867-hhl9q  1/1    Running            0             8m27s</span></span>
<span class="line"><span class="token comment"># kube-system     calico-node-bkgkz                         1/1    Running            0             4m145</span></span>
<span class="line"><span class="token comment"># kube-system     calico-node-dk72k                         1/1    Running            0             8m28s</span></span>
<span class="line"><span class="token comment"># kube-system     calico-node-h8wp2                         1/1    Running            0             6m37s</span></span>
<span class="line"><span class="token comment"># kube-system     calico-node-sbqg8                         0/1    Init:2/3           1 (26s ago)   2m34s</span></span>
<span class="line"><span class="token comment"># kube-system     coredns-7db6d8ff4d-6d2mv                  1/1    Running            0             8m27s</span></span>
<span class="line"><span class="token comment"># kube-system     coredns-7db6d8ff4d-hj7lg                  1/1    Running            0             8m27s</span></span>
<span class="line"><span class="token comment"># kube-system     etcd-cp-k8s                               1/1    Running            1 (9m5s ago)  9m13s</span></span>
<span class="line"><span class="token comment"># kube-system     kube-apiserver-cp-k8s                     1/1    Running            1 (9m4s ago)  9m13s</span></span>
<span class="line"><span class="token comment"># kube-system     kube-controller-manager-cp-k8s            1/1    Running            1 (9m4s ago)  9m13s</span></span>
<span class="line"><span class="token comment"># kube-system     kube-proxy-2hbfv                          1/1    Running            0             2m34s</span></span>
<span class="line"><span class="token comment"># kube-system     kube-proxy-4wfzw                          1/1    Running            0             4m14s</span></span>
<span class="line"><span class="token comment"># kube-system     kube-proxy-f58wx                          1/1    Running            0             8m28s</span></span>
<span class="line"><span class="token comment"># kube-system     kube-proxy-s8pmp                          1/1    Running            0             6m37s</span></span>
<span class="line"><span class="token comment"># kube-system     kube-scheduler-cp-k8s                     1/1    Running            1 (9m4s ago)  9m13s</span></span>
<span class="line"><span class="token comment"># metallb-system  controller-57cf8fbb89-qntjh               1/1    Running            0             8m27s</span></span>
<span class="line"><span class="token comment"># metallb-system  speaker-4z8rb                             0/1    ContainerCreating  0             21s</span></span>
<span class="line"><span class="token comment"># metallb-system  speaker-hvxqq                             1/1    Running            0             5m6s</span></span>
<span class="line"><span class="token comment"># metallb-system  speaker-mg7pb                             1/1    Running            0             2m36s </span></span>
<span class="line"><span class="token comment"># metallb-system  speaker-q6fk9                             1/1    Running            0             7m53s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),fn=e(`<p>로드밸런서 생성에 도움을 주는 MetalLB IP Pool이 정상 동작하는지도 확인해 보겠습니다. <code>k get ipaddresspools.metallb.io -A</code>를 입력하고 아래와 같은 화면이 나오는지 확인하겠습니다. 해당 내용은 접속하고 바로 보이지는 않습니다. <code>cp-k8s</code> 배포를 완료한 다음 약 10분 후에 동작하도록 설계되었죠. 따라서 아래 화면이 나오지 않는다면, 좀 더 기다립니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">k get ipaddresspools.metallb.io <span class="token parameter variable">-A</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAMESPACE       NAME          AUTO ASSIGN  AVOID BUGGY IPS   ADDRESSES</span></span>
<span class="line"><span class="token comment"># metallb-system  k8s-svc-pool  true         false             [&quot;192.168.1.11-192.168.1.99&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),xn=e(`<p>다음 단계입니다. 쿠버네티스 클러스터가 arm64 환경에서 정상 동작하는지 확인하기 위해 <code>sysnet4admin/chk-info</code> 컨테이너를 디플로이먼트로 배포하고, 이렇게 배포한 디플로이먼트를 로드밸런서로 노출합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">k create deploy chk-info <span class="token parameter variable">--image</span><span class="token operator">=</span>sysnet4admin/chk-info</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># deployment.apps/chk-info created</span></span>
<span class="line">k expose deploy chk-info <span class="token parameter variable">--type</span><span class="token operator">=</span>LoadBalancer <span class="token parameter variable">--port</span> <span class="token number">80</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># service/chk-info exposed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),zn=e(`<p>배포한 디플로이먼트 형태의 파드와 로드밸런서 서비스도 확인합시다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">k get po,svc</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                           READY  STATUS   RESTARTS  AGE</span></span>
<span class="line"><span class="token comment"># pod/chk-info-5576c79965-kph92  1/1    Running  0         25s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)       AGE</span></span>
<span class="line"><span class="token comment"># service/chk-info    Load Balancer  10.104.129.5  192.168.1.11  80:31189/TCP  9s</span></span>
<span class="line"><span class="token comment"># service/kubernetes  ClusterIP      10.96.0.1                   443/TCP       13m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),An=n("p",null,[s("정말 마지막 단계입니다. 웹 브라우저를 띄우고 로드밸런서 IP인 "),n("code",null,"192.168.1.11"),s("을 입력해 봅시다. 아래와 유사한 결과가 나오셨나요?")],-1),En=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2658/image14.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Tn=n("p",null,"아무 문제 없나요? 이제 여러분도 arm64 환경에서 동작하는 쿠버네티스 클러스터를 구축한 것입니다!",-1),Vn=n("hr",null,null,-1),Rn=n("h2",{id:"마치며",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#마치며"},[n("span",null,"마치며")])],-1),Ln=n("p",null,"지금까지 베이그런트와 VM웨어 퓨전을 활용해 매우 손쉽게 arm64 기반 쿠버네티스 클러스터를 구축해 보았습니다. 글에서는 미리 작성한 Vagrantfile과 여기에서 호출한 내용으로 손쉽게 구현했는데요. 이때 사용한 스크립트 파일을 더 면밀하게 이해한다면, 쿠버네티스를 깊이 있게 학습할 때 큰 도움이 될 것입니다.",-1),Bn=n("p",null,"시간 여유가 있을 때, (없어도 낼 수 있으면 좋겠지만요) 이렇게 호출한 스크립트와 주석을 보고 쿠버네티스를 깊이 이해해 보는 것은 어떨까요?",-1);function Mn(d,Sn){const p=o("VPCard"),t=o("router-link"),v=o("SiteInfo"),l=o("FontIcon"),u=o("VidStack");return k(),h("div",null,[n("h1",y,[n("a",_,[n("span",null,g(d.$frontmatter.title)+" 관련",1)])]),a(p,m(r({title:"Kubernetes > Article(s)",desc:"Article(s)",link:"/devops/k8s/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(p,m(r({title:"macOS > Article(s)",desc:"Article(s)",link:"/devops/macos/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(p,m(r({title:"Vagrant > Article(s)",desc:"Article(s)",link:"/devops/vagrant/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[a(t,{to:"#주요-단계-overview"},{default:c(()=>[s("주요 단계 overview")]),_:1})]),n("li",null,[a(t,{to:"#arm64-기반-쿠버네티스-클러스터-구축하기"},{default:c(()=>[s("arm64 기반 쿠버네티스 클러스터 구축하기")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_1-arm64-기반-쿠버네티스-클러스터를-배포하기-위한-소프트웨어-설치하기"},{default:c(()=>[s("1. arm64 기반 쿠버네티스 클러스터를 배포하기 위한 소프트웨어 설치하기")]),_:1})]),n("li",null,[a(t,{to:"#_2-설치한-소프트웨어로-쿠버네티스-클러스터-구성하기"},{default:c(()=>[s("2. 설치한 소프트웨어로 쿠버네티스 클러스터 구성하기")]),_:1})]),n("li",null,[a(t,{to:"#_3-터미널-프로그램으로-구성된-쿠버네티스-클러스터를-확인하고-간단한-애플리케이션-배포하기"},{default:c(()=>[s("3. 터미널 프로그램으로 구성된 쿠버네티스 클러스터를 확인하고, 간단한 애플리케이션 배포하기")]),_:1})])])]),n("li",null,[a(t,{to:"#마치며"},{default:c(()=>[s("마치며")]),_:1})])])]),x,a(v,{name:"새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64) | 요즘IT",desc:"태블릿PC에서 주로 쓰이던 arm64 아키텍처가 애플의 M1 노트북에 적용되며 arm64 기반 노트북 시장이 가파르게 성장하기 시작했습니다. 일반 노트북 시장뿐만 아니라 각 클라우드 사에서도 독자적으로 개발한 arm64 기반 컴퓨팅 인스턴스를 출시하고 있습니다. 이러한 흐름에 발맞춰 쿠버네티스 컨트롤 플레인 노드의 구성 요소 또한 arm64 기반을 지원하는 추세입니다. 따라서 나만의 arm64 기반 쿠버네티스 클러스터를 만들어 보며 이러한 변화에 대비할 수 있는 시간을 가져보도록 하겠습니다.",url:"https://yozm.wishket.com/magazine/detail/2658/",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",preview:"https://yozm.wishket.com/media/news/2658/image15.png"}),z,n("figure",null,[A,n("figcaption",null,[s("arm 기반 노트북 시장 성장에 대한 예상치 "),E,s("<출처: "),n("a",T,[a(l,{icon:"fas fa-globe"}),s("Techpowerup")]),s(">")])]),V,n("figure",null,[R,n("figcaption",null,[s("대표적인 arm64 기반의 컴퓨팅 인스턴스인 AWS사의 그래비톤 "),L,s("<출처: "),n("a",B,[a(l,{icon:"fa-brands fa-aws"}),s("AWS")]),s(">")])]),M,n("p",null,[s("손쉽게 설치할 수 있도록 이미 구성이 완료된 "),n("a",S,[s("깃허브 소스 ("),a(l,{icon:"iconfont icon-github"}),j,s(")")]),s("를 클론해서 로컬에 내려받습니다.")]),N,i(" ![](https://yozm.wishket.com/media/news/2658/1.png) "),C,i(" ![](https://yozm.wishket.com/media/news/2658/2.png) "),P,i(" ![](https://yozm.wishket.com/media/news/2658/3.png) "),I,n("figure",null,[U,n("figcaption",null,[s("VM웨어 퓨전 무료 공지 "),O,s("<출처: "),n("a",D,[a(l,{icon:"fas fa-globe"}),s("VMware blog")]),s(">")])]),H,i(" ![](https://yozm.wishket.com/media/news/2658/4.png) "),F,n("p",null,[s("따라서 이를 손쉽게 하기 위해 작성한 스크립트 2가지("),a(l,{icon:"iconfont icon-shell"}),q,s(", "),a(l,{icon:"iconfont icon-shell"}),J,s(")를 실행하겠습니다. "),a(l,{icon:"fas fa-folder-open"}),K,s(" 밑에 명령어 형태로 만들어 두겠습니다.")]),W,i(" ![](https://yozm.wishket.com/media/news/2658/5.png) "),G,i(" ![](https://yozm.wishket.com/media/news/2658/6.png) "),Y,i(" ![](https://yozm.wishket.com/media/news/2658/7.png) "),Z,i(" ![](https://yozm.wishket.com/media/news/2658/8.png) "),n("p",null,[s("쿠버네티스 클러스터가 호스트 시스템과 통신할 인터페이스도 추가해야 합니다. 우리는 "),a(l,{icon:"iconfont icon-shell"}),Q,s("를 실행할 겁니다. 이 스크립트는 VM웨어의 vmnet7 인터페이스를 생성해 호스트와 "),X,s(" 네트워크로 통신할 수 있게 해줍니다.")]),$,i(" ![](https://yozm.wishket.com/media/news/2658/9.png) "),nn,i(" ![](https://yozm.wishket.com/media/news/2658/10.png) "),sn,i(" ![](https://yozm.wishket.com/media/news/2658/11.png) "),an,n("p",null,[s("마지막으로 쿠버네티스 클러스터 배포 이후, 접속을 도와주는 터미널 프로그램 타비를 설치합니다. 타비 역시 원활한 호환을 위해 "),a(l,{icon:"iconfont icon-ruby"}),en,s("를 이용해 "),ln,s("을 설치합니다.")]),tn,i(" ![](https://yozm.wishket.com/media/news/2658/12.png) "),n("p",null,[s("설치를 마쳤나요? 접속 정보를 미리 입력해 둔 파일 ("),a(l,{icon:"iconfont icon-yaml"}),cn,s(")을 복사해 적용하며 따로 입력하는 번거로움을 줄이겠습니다.")]),on,i(" ![](https://yozm.wishket.com/media/news/2658/13.png) "),pn,mn,rn,n("p",null,[s("가장 먼저 베이그런트에서 VM웨어 퓨전으로 요청할 내용들을 담은 "),a(l,{icon:"fas fa-folder-open"}),dn,s(" 디렉터리로 이동하겠습니다. 해당 디렉터리의 구성은 다음과 같습니다.")]),vn,i(" ![](https://yozm.wishket.com/media/news/2658/14.png) "),un,i(" ![](https://yozm.wishket.com/media/news/2658/15.png) "),bn,hn,gn,n("figure",null,[kn,n("figcaption",null,[wn,s("를 선택한 다음에는 호스트 키 확인을 요청해야 합니다. "),a(l,{icon:"iconfont icon-select"}),yn,s("을 누르고 계속 진행합니다.")])]),_n,i(" ![](https://yozm.wishket.com/media/news/2658/16.png) "),fn,i(" ![](https://yozm.wishket.com/media/news/2658/17.png) "),xn,i(" ![](https://yozm.wishket.com/media/news/2658/18.png) "),zn,i(" ![](https://yozm.wishket.com/media/news/2658/19.png) "),An,En,Tn,Vn,Rn,Ln,Bn,a(u,{src:"youtube/v7EJ4BHNNMk"})])}const Cn=b(w,[["render",Mn],["__file","2658.html.vue"]]),Pn=JSON.parse('{"path":"/yozm.wishket.com/2658.html","title":"새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)","description":"Article(s) > 새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)","icon":"iconfont icon-k8s","category":["DevOps","Kubernetes","macOS","Vagrant","Article(s)"],"tag":["blog","yozm.wishket.com","kubernetes","k8s"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)"},{"property":"og:description","content":"새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2658.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2658.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)"}],["meta",{"property":"og:description","content":"Article(s) > 새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2658/image15.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2658/image15.png"}],["meta",{"name":"twitter:image:alt","content":"새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"k8s"}],["meta",{"property":"article:published_time","content":"2024-07-04T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"새로 산 맥북으로 쿠버네티스 클러스터 구축하기 (feat. arm64)\\",\\"image\\":[\\"https://techpowerup.com/307094/arm-based-pcs-to-nearly-double-market-share-by-2027-says-report#g307094-1\\",\\"https://aws.amazon.com/ko/ec2/graviton/\\",\\"https://yozm.wishket.com/media/news/2658/image23.png\\",\\"https://kubernetes.io/blog/2024/04/17/kubernetes-v1-30-release/\\",\\"https://yozm.wishket.com/media/news/2658/1.png\\",\\"https://yozm.wishket.com/media/news/2658/2.png\\",\\"https://yozm.wishket.com/media/news/2658/3.png\\",\\"https://blogs.vmware.com/cloud-foundation/2024/05/14/vmware-desktop-hypervisor-pro-apps-now-available-for-personal-use/\\",\\"https://yozm.wishket.com/media/news/2658/4.png\\",\\"https://yozm.wishket.com/media/news/2658/5.png\\",\\"https://yozm.wishket.com/media/news/2658/6.png\\",\\"https://yozm.wishket.com/media/news/2658/7.png\\",\\"https://yozm.wishket.com/media/news/2658/8.png\\",\\"https://yozm.wishket.com/media/news/2658/9.png\\",\\"https://yozm.wishket.com/media/news/2658/10.png\\",\\"https://yozm.wishket.com/media/news/2658/11.png\\",\\"https://yozm.wishket.com/media/news/2658/12.png\\",\\"https://yozm.wishket.com/media/news/2658/13.png\\",\\"https://yozm.wishket.com/media/news/2658/image15.png\\",\\"https://yozm.wishket.com/media/news/2658/14.png\\",\\"https://yozm.wishket.com/media/news/2658/15.png\\",\\"https://yozm.wishket.com/media/news/2658/image11.png\\",\\"https://yozm.wishket.com/media/news/2658/image26.png\\",\\"https://yozm.wishket.com/media/news/2658/16.png\\",\\"https://yozm.wishket.com/media/news/2658/17.png\\",\\"https://yozm.wishket.com/media/news/2658/18.png\\",\\"https://yozm.wishket.com/media/news/2658/19.png\\",\\"https://yozm.wishket.com/media/news/2658/image14.png\\"],\\"datePublished\\":\\"2024-07-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/devops/k8s/articles/README.md","date":"2024-07-04T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2658/image15.png"},"headers":[{"level":2,"title":"주요 단계 overview","slug":"주요-단계-overview","link":"#주요-단계-overview","children":[]},{"level":2,"title":"arm64 기반 쿠버네티스 클러스터 구축하기","slug":"arm64-기반-쿠버네티스-클러스터-구축하기","link":"#arm64-기반-쿠버네티스-클러스터-구축하기","children":[{"level":3,"title":"1. arm64 기반 쿠버네티스 클러스터를 배포하기 위한 소프트웨어 설치하기","slug":"_1-arm64-기반-쿠버네티스-클러스터를-배포하기-위한-소프트웨어-설치하기","link":"#_1-arm64-기반-쿠버네티스-클러스터를-배포하기-위한-소프트웨어-설치하기","children":[]},{"level":3,"title":"2. 설치한 소프트웨어로 쿠버네티스 클러스터 구성하기","slug":"_2-설치한-소프트웨어로-쿠버네티스-클러스터-구성하기","link":"#_2-설치한-소프트웨어로-쿠버네티스-클러스터-구성하기","children":[]},{"level":3,"title":"3. 터미널 프로그램으로 구성된 쿠버네티스 클러스터를 확인하고, 간단한 애플리케이션 배포하기","slug":"_3-터미널-프로그램으로-구성된-쿠버네티스-클러스터를-확인하고-간단한-애플리케이션-배포하기","link":"#_3-터미널-프로그램으로-구성된-쿠버네티스-클러스터를-확인하고-간단한-애플리케이션-배포하기","children":[]}]},{"level":2,"title":"마치며","slug":"마치며","link":"#마치며","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.27,"words":1880},"filePathRelative":"yozm.wishket.com/2658.md","localizedDate":"2024년 7월 4일","excerpt":"\\n"}');export{Cn as comp,Pn as data};
