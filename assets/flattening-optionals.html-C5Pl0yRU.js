import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as t,n as a,g as e,d as i,a as u,f as g,r as l,o as h}from"./app-BgNevrm5.js";const m={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Available from Swift 5.0")],-1),b={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),S=n("code",null,"try?",-1),C=g(`<p>Here’s a practical example that demonstrates the change:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> id <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">getMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// complicated code here</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;No messages&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> messages <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> user<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>User</code> struct has a failable initializer, because we want to make sure folks create users with a valid ID. The <code>getMessages()</code> method would in theory contain some sort of complicated code to get a list of all the messages for the user, so it’s marked as <code>throws</code>; I’ve made it return a fixed string so the code compiles.</p><p>The key line is the last one: because the user is optional it uses optional chaining, and because <code>getMessages()</code> can throw it uses <code>try?</code> to convert the throwing method into an optional, so we end up with a nested optional. In Swift 4.2 and earlier this would make <code>messages</code> a <code>String??</code> – an optional optional string – but in Swift 5.0 and later <code>try?</code> won’t wrap values in an optional if they are already optional, so <code>messages</code> will just be a <code>String?</code>.</p><p>This new behavior matches the existing behavior of optional chaining and conditional typecasting. That is, you could use optional chaining a dozen times in a single line of code if you wanted, but you wouldn’t end up with 12 nested optionals. Similarly, if you used optional chaining with <code>as?</code>, you would still end up with only one level of optionality, because that’s usually what you want.</p>`,5),F={class:"hint-container details"},T=n("summary",null,"Other Changes in Swift 5.0",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-2-to-5-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function A(c,I){const s=l("VPCard"),o=l("FontIcon");return h(),r("div",null,[n("h1",f,[n("a",w,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),t(s,a(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,y,t(s,a(e({title:"Flattening nested optionals resulting from try? | Changes in Swift 5.0",desc:"Flattening nested optionals resulting from try?",link:"https://hackingwithswift.com/swift/5.0/flattening-optionals",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("p",null,[n("a",b,[i("SE-0230 ("),t(o,{icon:"iconfont icon-github"}),_,i(")")]),i(" modifies the way "),S,i(" works so that nested optionals are flattened to become regular optionals. This makes it work the same way as optional chaining and conditional typecasts, both of which flatten optionals in earlier Swift versions.")]),C,n("details",F,[T,t(s,a(e({title:"Raw strings | Changes in Swift 5.0",desc:"Raw strings",link:"/hackingwithswift.com/swift/5.0/raw-strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,a(e({title:"A standard Result type | Changes in Swift 5.0",desc:"A standard Result type",link:"/hackingwithswift.com/swift/5.0/result.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,a(e({title:"Customizing string interpolation | Changes in Swift 5.0",desc:"Customizing string interpolation",link:"/hackingwithswift.com/swift/5.0/string-interpolation.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,a(e({title:"Dynamically callable types | Changes in Swift 5.0",desc:"Dynamically callable types",link:"/hackingwithswift.com/swift/5.0/dynamically-callable-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,a(e({title:"Handling future enum cases | Changes in Swift 5.0",desc:"Handling future enum cases",link:"/hackingwithswift.com/swift/5.0/handling-future-enum-cases.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),u(` 
\`\`\`component VPCard
{
  "title": "Flattening nested optionals resulting from try? | Changes in Swift 5.0",
  "desc": "Flattening nested optionals resulting from try?",
  "link": "/hackingwithswift.com/swift/5.0/flattening-optionals.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),t(s,a(e({title:"Checking for integer multiples | Changes in Swift 5.0",desc:"Checking for integer multiples",link:"/hackingwithswift.com/swift/5.0/integer-multiples.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,a(e({title:"Transforming and unwrapping dictionary values with compactMapValues() | Changes in Swift 5.0",desc:"Transforming and unwrapping dictionary values with compactMapValues()",link:"/hackingwithswift.com/swift/5.0/compactmapvalues.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[t(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.0 playground")])])])])}const M=p(m,[["render",A],["__file","flattening-optionals.html.vue"]]),N=JSON.parse('{"path":"/hackingwithswift.com/swift/5.0/flattening-optionals.html","title":"Flattening nested optionals resulting from try?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Flattening nested optionals resulting from try?","description":"Article(s) > Flattening nested optionals resulting from try?","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Flattening nested optionals resulting from try?"},{"property":"og:description","content":"Flattening nested optionals resulting from try?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/flattening-optionals.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/flattening-optionals.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Flattening nested optionals resulting from try?"}],["meta",{"property":"og:description","content":"Article(s) > Flattening nested optionals resulting from try?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Flattening nested optionals resulting from try?\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.28,"words":685},"filePathRelative":"hackingwithswift.com/swift/5.0/flattening-optionals.md","excerpt":"\\n"}');export{M as comp,N as data};
