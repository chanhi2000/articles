import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as d,g as m,w as e,f as k,r as o,o as g,d as t}from"./app-BgNevrm5.js";const h={},v={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},f=n("hr",null,null,-1),y=k(`<p>Rate limiting is a technique to limit the number of requests to a server or an API.</p><p>A limit is introduced within a given time period to prevent server overload and protect against abuse.</p><p>In ASP.NET Core 7, we have a built-in rate limiter middleware that&#39;s easy to integrate into your API.</p><p>Let&#39;s see how we can work with rate limiting.</p><hr><h2 id="what-is-rate-limiting" tabindex="-1"><a class="header-anchor" href="#what-is-rate-limiting"><span>What Is Rate Limiting?</span></a></h2><p>Rate limiting is about restricting the number of requests to an API, usually within a specific time window or based on other criteria.</p><p>This is practical for a few reasons:</p><ul><li>Prevents overloading of servers or applications</li><li>Improves security and guards against DDoS attacks</li><li>Reduces costs by preventing unnecessary resource usage</li></ul><p>In a multi-tenant application, each unique user can have a limitation on the number of API requests.</p><hr><h2 id="configuring-rate-limiting" tabindex="-1"><a class="header-anchor" href="#configuring-rate-limiting"><span>Configuring Rate Limiting</span></a></h2><p>ASP.NET Core 7 introduced built-in rate limiting middleware in the <code>Microsoft.AspNetCore.RateLimiting</code> namespace.</p><p>To add rate limiting to your application, you first need to register the rate limiting services:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>RejectionStatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status429TooManyRequests<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// We&#39;ll talk about adding specific rate limiting policies later.</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I suggest updating the <code>RejectionStatusCode</code> to <code>429 (Too Many Requests)</code> because it&#39;s more correct. The default value is <code>503 (Service Unavailable)</code>.</p><p>And you also have to apply the <code>RateLimitingMiddleware</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">UseRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That&#39;s everything you&#39;ll need.</p><p>Let&#39;s see the rate limiting algorithms we can use.</p><hr><h2 id="fixed-window-limiter" tabindex="-1"><a class="header-anchor" href="#fixed-window-limiter"><span>Fixed Window Limiter</span></a></h2><p>The <code>AddFixedWindowLimiter</code> method configures a fixed window limiter.</p><p>The <code>Window</code> value determines the time window.</p><p>When a time window expires, a new one starts, and the request limit is reset.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>rateLimiterOptions <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    rateLimiterOptions<span class="token punctuation">.</span><span class="token function">AddFixedWindowLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;fixed&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        options<span class="token punctuation">.</span>PermitLimit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>Window <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueProcessingOrder <span class="token operator">=</span> QueueProcessingOrder<span class="token punctuation">.</span>OldestFirst<span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueLimit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="sliding-window-limiter" tabindex="-1"><a class="header-anchor" href="#sliding-window-limiter"><span>Sliding Window Limiter</span></a></h2><p>The sliding window algorithm is similar to the fixed window, but it introduces segments in a window.</p><p>Here&#39;s how it works:</p><ul><li>Each time window is divided into multiple segments</li><li>The window slides one segment each segment interval</li><li>The segment interval is (window_time)/(segments_per_window)</li><li>When a segment expires, the requests taken in that segment are added to the current segment</li></ul><p>The <code>AddSlidingWindowLimiter</code> method configures a sliding window limiter.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>rateLimiterOptions <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    rateLimiterOptions<span class="token punctuation">.</span><span class="token function">AddSlidingWindowLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;sliding&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        options<span class="token punctuation">.</span>PermitLimit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>Window <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>SegmentsPerWindow <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueProcessingOrder <span class="token operator">=</span> QueueProcessingOrder<span class="token punctuation">.</span>OldestFirst<span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueLimit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="token-bucket-limiter" tabindex="-1"><a class="header-anchor" href="#token-bucket-limiter"><span>Token Bucket Limiter</span></a></h2><p>The token bucket algorithm is similar to the sliding window, but instead of adding back the requests from the expired segment, a fixed number of tokens are added after each replenishment period.</p><p>The total number of tokens can never exceed the token limit.</p><p>The <code>AddTokenBucketLimiter</code> method configures a token bucket limiter.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>rateLimiterOptions <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    rateLimiterOptions<span class="token punctuation">.</span><span class="token function">AddTokenBucketLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        options<span class="token punctuation">.</span>TokenLimit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueProcessingOrder <span class="token operator">=</span> QueueProcessingOrder<span class="token punctuation">.</span>OldestFirst<span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueLimit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>ReplenishmentPeriod <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>TokensPerPeriod <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>AutoReplenishment <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When <code>AutoReplenishment</code> is <code>true</code>, an internal timer will execute every <code>ReplenishmentPeriod</code> and replenish the tokens.</p><hr><h2 id="concurrency-limiter" tabindex="-1"><a class="header-anchor" href="#concurrency-limiter"><span>Concurrency Limiter</span></a></h2><p>The concurrency limiter is the most straightforward algorithm, and it just limits the number of concurrent requests.</p><p>The <code>AddConcurrencyLimiter</code> method configures a concurrency limiter.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>rateLimiterOptions <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    rateLimiterOptions<span class="token punctuation">.</span><span class="token function">AddConcurrencyLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;concurrency&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        options<span class="token punctuation">.</span>PermitLimit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueProcessingOrder <span class="token operator">=</span> QueueProcessingOrder<span class="token punctuation">.</span>OldestFirst<span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>QueueLimit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There&#39;s no time component involved in this case. The only parameter is the number of concurrent requests.</p><hr><h2 id="using-rate-limiting-in-your-api" tabindex="-1"><a class="header-anchor" href="#using-rate-limiting-in-your-api"><span>Using Rate Limiting In Your API</span></a></h2><p>Now that we have configured our rate limiting policies, let&#39;s see how we can use them in our API.</p><p>There are slight differences between controllers and minimal API endpoints, so I&#39;ll cover them in separate examples.</p><h3 id="controllers" tabindex="-1"><a class="header-anchor" href="#controllers"><span>Controllers</span></a></h3><p>To add rate limiting on a controller we use the <code>EnableRateLimiting</code> and <code>DisableRateLimiting</code> attributes.</p><p><code>EnableRateLimiting</code> can be applied on the controller or on the individual endpoints.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EnableRateLimiting</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;fixed&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionsController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ISender</span> _sender<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">TransactionsController</span><span class="token punctuation">(</span><span class="token class-name">ISender</span> sender<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _sender <span class="token operator">=</span> sender<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EnableRateLimiting</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;sliding&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">GetTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">await</span> _sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTransactionsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DisableRateLimiting</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">GetTransactionById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">await</span> _sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTransactionByIdQuery</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the previous example:</p><ul><li>All endpoints in the <code>TransactionsController</code> will use a <strong>fixed window</strong> policy</li><li>The <code>GetTransactions</code> endpoint will use a <strong>sliding window</strong> policy</li><li>The <code>GetTransactionById</code> endpoint won&#39;t have any rate limiting applied</li></ul><h3 id="minimal-apis" tabindex="-1"><a class="header-anchor" href="#minimal-apis"><span>Minimal APIs</span></a></h3><p>In a Minimal API endpoint you can configure the rate limit policy by calling <code>RequireRateLimiting</code> and specifying the policy name.</p><p>We&#39;re using the <strong>token bucket</strong> policy in this example.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/transactions&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">ISender</span> sender<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">await</span> sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetTransactionsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">RequireRateLimiting</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="closing-thoughts" tabindex="-1"><a class="header-anchor" href="#closing-thoughts"><span>Closing Thoughts</span></a></h2><p>It&#39;s great that we can quickly introduce <strong>rate limiting</strong> in ASP.NET Core.</p><p>You can choose from one of the existing rate limiter algorithms:</p><ul><li>Fixed window</li><li>Sliding window</li><li>Token bucket</li><li>Concurrency</li></ul><p>Here are some resources if you want to learn more about rate limiting:</p>`,66),T=n("p",null,"I'm excited to try out rate limiting in my projects.",-1),L=n("p",null,"That's all for today.",-1),R=n("p",null,"Have an awesome Saturday!",-1);function A(p,_){const l=o("VPCard"),a=o("router-link"),i=o("SiteInfo");return g(),r("div",null,[n("h1",v,[n("a",b,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),s(l,d(m({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[s(a,{to:"#what-is-rate-limiting"},{default:e(()=>[t("What Is Rate Limiting?")]),_:1})]),n("li",null,[s(a,{to:"#configuring-rate-limiting"},{default:e(()=>[t("Configuring Rate Limiting")]),_:1})]),n("li",null,[s(a,{to:"#fixed-window-limiter"},{default:e(()=>[t("Fixed Window Limiter")]),_:1})]),n("li",null,[s(a,{to:"#sliding-window-limiter"},{default:e(()=>[t("Sliding Window Limiter")]),_:1})]),n("li",null,[s(a,{to:"#token-bucket-limiter"},{default:e(()=>[t("Token Bucket Limiter")]),_:1})]),n("li",null,[s(a,{to:"#concurrency-limiter"},{default:e(()=>[t("Concurrency Limiter")]),_:1})]),n("li",null,[s(a,{to:"#using-rate-limiting-in-your-api"},{default:e(()=>[t("Using Rate Limiting In Your API")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#controllers"},{default:e(()=>[t("Controllers")]),_:1})]),n("li",null,[s(a,{to:"#minimal-apis"},{default:e(()=>[t("Minimal APIs")]),_:1})])])]),n("li",null,[s(a,{to:"#closing-thoughts"},{default:e(()=>[t("Closing Thoughts")]),_:1})])])]),f,s(i,{name:"How To Use Rate Limiting In ASP.NET Core",desc:"Rate limiting is a technique to limit the number of requests to a server or an API. A limit is introduced within a given time period to prevent server overload and protect against abuse. In ASP.NET Core 7 we have a built-in rate limiter middleware, that's easy to integrate into your API.",url:"https://milanjovanovic.tech/blog/how-to-use-rate-limiting-in-aspnet-core/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_032.png"}),y,s(i,{name:"Rate Limiting pattern",desc:"You can use a rate limiting pattern to help you avoid or minimize throttling errors.",url:"https://learn.microsoft.com/en-us/azure/architecture/patterns/rate-limiting-pattern",logo:"/imagea/content/learn.microsoft.com/favicon.ico",preview:"/imagea/content/learn.microsoft.com/open-graph-image.png"}),s(i,{name:"Announcing Rate Limiting for .NET",desc:"Announcing built-in Rate Limiting support in .NET 7. Rate limiting provides a way to protect a resource to avoid overwhelming your app.",url:"https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/",logo:"/assets/image/devblogs.microsoft.com/favicon.jpg",preview:"/assets/image/devblogs.microsoft.com/open-graph-image.png"}),T,L,R])}const I=c(h,[["render",A],["__file","how-to-use-rate-limiting-in-aspnet-core.html.vue"]]),S=JSON.parse('{"path":"/milanjovanovic.tech/how-to-use-rate-limiting-in-aspnet-core.html","title":"How To Use Rate Limiting In ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Use Rate Limiting In ASP.NET Core","description":"Article(s) > How To Use Rate Limiting In ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How To Use Rate Limiting In ASP.NET Core"},{"property":"og:description","content":"How To Use Rate Limiting In ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-rate-limiting-in-aspnet-core.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-rate-limiting-in-aspnet-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Use Rate Limiting In ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > How To Use Rate Limiting In ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_032.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_032.png"}],["meta",{"name":"twitter:image:alt","content":"How To Use Rate Limiting In ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2023-04-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Use Rate Limiting In ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_032.png\\"],\\"datePublished\\":\\"2023-04-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2023-04-08T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_032.png"},"headers":[{"level":2,"title":"What Is Rate Limiting?","slug":"what-is-rate-limiting","link":"#what-is-rate-limiting","children":[]},{"level":2,"title":"Configuring Rate Limiting","slug":"configuring-rate-limiting","link":"#configuring-rate-limiting","children":[]},{"level":2,"title":"Fixed Window Limiter","slug":"fixed-window-limiter","link":"#fixed-window-limiter","children":[]},{"level":2,"title":"Sliding Window Limiter","slug":"sliding-window-limiter","link":"#sliding-window-limiter","children":[]},{"level":2,"title":"Token Bucket Limiter","slug":"token-bucket-limiter","link":"#token-bucket-limiter","children":[]},{"level":2,"title":"Concurrency Limiter","slug":"concurrency-limiter","link":"#concurrency-limiter","children":[]},{"level":2,"title":"Using Rate Limiting In Your API","slug":"using-rate-limiting-in-your-api","link":"#using-rate-limiting-in-your-api","children":[{"level":3,"title":"Controllers","slug":"controllers","link":"#controllers","children":[]},{"level":3,"title":"Minimal APIs","slug":"minimal-apis","link":"#minimal-apis","children":[]}]},{"level":2,"title":"Closing Thoughts","slug":"closing-thoughts","link":"#closing-thoughts","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.51,"words":1054},"filePathRelative":"milanjovanovic.tech/how-to-use-rate-limiting-in-aspnet-core.md","localizedDate":"2023년 4월 8일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{I as comp,S as data};
