import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,t as r,e as s,n as a,g as t,f as u,r as o,o as d}from"./app-BgNevrm5.js";const k={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),v=u(`<p>The next step is to add a left bar button item to our view controller, using the &quot;add&quot; system icon, and making it call a method called <code>showConnectionPrompt()</code>. We&#39;re going to make that method ask users whether they want to connect to an existing session with other people, or whether they want to create their own. Here&#39;s the code for the bar button item – put this in <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">navigationItem<span class="token punctuation">.</span>leftBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>barButtonSystemItem<span class="token punctuation">:</span> <span class="token punctuation">.</span>add<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>showConnectionPrompt<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Asking users to clarify how they want to take an action is of course the purpose of <code>UIAlertController</code> as an action sheet, and our <code>showConnectionPrompt()</code> method is going to use one to ask users what kind of connection they want to make. Put this code into your view controller:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">showConnectionPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Connect to others&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Host a session&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> startHosting<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Join a session&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> joinSession<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, here&#39;s where it gets trickier. Multipeer connectivity requires four new classes:</p><ol><li><code>MCSession</code> is the manager class that handles all multipeer connectivity for us.</li><li><code>MCPeerID</code> identifies each user uniquely in a session.</li><li><code>MCAdvertiserAssistant</code> is used when creating a session, telling others that we exist and handling invitations.</li><li><code>MCBrowserViewController</code> is used when looking for sessions, showing users who is nearby and letting them join.</li></ol><p>We&#39;re going to use all four of them in our app, but only three need to be properties.</p><p>Start by importing the multipeer framework:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">MultipeerConnectivity</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now add these to your view controller:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> peerID <span class="token operator">=</span> <span class="token class-name">MCPeerID</span><span class="token punctuation">(</span>displayName<span class="token punctuation">:</span> <span class="token class-name">UIDevice</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> mcSession<span class="token punctuation">:</span> <span class="token class-name">MCSession</span><span class="token operator">?</span></span>
<span class="line"><span class="token keyword">var</span> mcAdvertiserAssistant<span class="token punctuation">:</span> <span class="token class-name">MCAdvertiserAssistant</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although both the session and advertiser assistant are optional, that code creates the <code>MCPeerID</code> up front using the name of the current device, which will usually be something like &quot;Paul&#39;s iPhone&quot; – there’s no need to make an optional for that.</p><p>Depending on what users select in our alert controller, we need to call one of two methods: <code>startHosting()</code> or <code>joinSession()</code>. Because both of these are coming from the result of a <code>UIAction</code> being tapped, both methods must accept a <code>UIAlertAction</code> as their only parameter.</p><p>Before I show you the code to get multipeer connectivity up and running, I want to go over what they will do. Most important of all is that all multipeer services on iOS must declare a service type, which is a 15-digit string that uniquely identify your service. Those 15 digits can contain only the letters A-Z, numbers and hyphens, and it&#39;s usually preferred to include your company in there somehow.</p><p>Apple&#39;s example is, &quot;a text chat app made by ABC company could use the service type <code>abc-txtchat</code>&quot;; for this project I&#39;ll be using <code>hws-project25</code>.</p><p>This service type is used by both <code>MCAdvertiserAssistant</code> and <code>MCBrowserViewController</code> to make sure your users only see other users of the same app. They both also want a reference to your <code>MCSession</code> instance so they can take care of connections for you.</p><p>We&#39;re going to start by initializing our <code>MCSession</code> so that we&#39;re able to make connections. Put this code into <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">mcSession <span class="token operator">=</span> <span class="token class-name">MCSession</span><span class="token punctuation">(</span>peer<span class="token punctuation">:</span> peerID<span class="token punctuation">,</span> securityIdentity<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> encryptionPreference<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">required</span><span class="token punctuation">)</span></span>
<span class="line">mcSession<span class="token operator">?</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Our peer ID is used to create the session, along with the encryption option of <code>.required</code> to ensure that any data transferred is kept safe.</p><p>Don&#39;t worry about conforming to any extra protocols just yet; we&#39;ll do that in just a minute.</p><p>At this point, the code for <code>startHosting()</code> and <code>joinSession()</code> will look quite trivial. Here goes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">startHosting</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token class-name">UIAlertAction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> mcSession <span class="token operator">=</span> mcSession <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    mcAdvertiserAssistant <span class="token operator">=</span> <span class="token class-name">MCAdvertiserAssistant</span><span class="token punctuation">(</span>serviceType<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hws-project25&quot;</span></span><span class="token punctuation">,</span> discoveryInfo<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> session<span class="token punctuation">:</span> mcSession<span class="token punctuation">)</span></span>
<span class="line">    mcAdvertiserAssistant<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">joinSession</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token class-name">UIAlertAction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> mcSession <span class="token operator">=</span> mcSession <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> mcBrowser <span class="token operator">=</span> <span class="token class-name">MCBrowserViewController</span><span class="token punctuation">(</span>serviceType<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hws-project25&quot;</span></span><span class="token punctuation">,</span> session<span class="token punctuation">:</span> mcSession<span class="token punctuation">)</span></span>
<span class="line">    mcBrowser<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>mcBrowser<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re making our view controller the delegate of a second object, so that&#39;s two protocols we need to conform to in order to fix our current compile failures. Easily done: add <code>MCSessionDelegate</code> and <code>MCBrowserViewControllerDelegate</code> to your class definition… and now there are even more errors, because we need to implement lots of new methods.</p>`,23);function f(i,y){const e=o("VPCard"),p=o("VidStack");return d(),l("div",null,[n("h1",m,[n("a",h,[n("span",null,r(i.$frontmatter.title)+" 관련",1)])]),s(e,a(t({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,g,s(e,a(t({title:"Going peer to peer: MCSession, MCBrowserViewControll | Hacking with iOS",desc:"Going peer to peer: MCSession, MCBrowserViewControll",link:"https://hackingwithswift.com/read/25/3/going-peer-to-peer-mcsession-mcbrowserviewcontroller",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(p,{src:"youtube/p_8TRJAoevA"}),v])}const S=c(k,[["render",f],["__file","03-going-peer-to-peer-mcsession-mcbrowserviewcontroller.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/read/25/03-going-peer-to-peer-mcsession-mcbrowserviewcontroller.html","title":"Going peer to peer: MCSession, MCBrowserViewControll","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Going peer to peer: MCSession, MCBrowserViewControll","description":"Article(s) > Going peer to peer: MCSession, MCBrowserViewControll","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Going peer to peer: MCSession, MCBrowserViewControll"},{"property":"og:description","content":"Going peer to peer: MCSession, MCBrowserViewControll"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/25/03-going-peer-to-peer-mcsession-mcbrowserviewcontroller.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/25/03-going-peer-to-peer-mcsession-mcbrowserviewcontroller.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Going peer to peer: MCSession, MCBrowserViewControll"}],["meta",{"property":"og:description","content":"Article(s) > Going peer to peer: MCSession, MCBrowserViewControll"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Going peer to peer: MCSession, MCBrowserViewControll\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.91,"words":872},"filePathRelative":"hackingwithswift.com/read/25/03-going-peer-to-peer-mcsession-mcbrowserviewcontroller.md","excerpt":"\\n"}');export{S as comp,A as data};
