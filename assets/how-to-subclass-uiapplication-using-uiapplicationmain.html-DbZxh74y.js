import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as p,e as n,n as a,g as e,a as i,r,o as u}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},d={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),f=t("hr",null,null,-1),w=t("blockquote",null,[t("p",null,"Available from iOS 10.0")],-1),b=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),i(`
/quick-start/swiftui/how-to-create-multi-column-lists-using-table">How to create multi-column lists using Table 
/quick-start/concurrency/how-to-use-mainactor-to-run-code-on-the-main-queue">How to use @MainActor to run code on the main queue 
/quick-start/swiftui/how-to-add-advanced-text-styling-using-attributedstring">How to add advanced text styling using AttributedString 
/quick-start/swiftui/swiftui-tips-and-tricks">SwiftUI tips and tricks 
/quick-start/swiftui/all-swiftui-property-wrappers-explained-and-compared">All SwiftUI property wrappers explained and compared</a>
`)],-1);function A(s,y){const o=r("VPCard");return u(),l("div",null,[t("h1",m,[t("a",d,[t("span",null,p(s.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(o,a(e({title:"UIKit - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/uikit/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,f,n(o,a(e({title:"How to subclass UIApplication using UIApplicationMain | UIKit - free Swift example code",desc:"How to subclass UIApplication using UIApplicationMain",link:"https://hackingwithswift.com/example-code/uikit/how-to-subclass-uiapplication-using-uiapplicationmain",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,i(" TODO: ÏûëÏÑ± "),i('\nSubclassing `UIApplication` allows you to override functionality such as opening URLs or changing your icon, but it‚Äôs a non-trivial task in Swift because of the `@UIApplicationMain` attribute.\n\nIf you look in your <FontIcon icon="fa-brands fa-swift"/>`AppDelegate.swift` file you‚Äôll see `@UIApplicationMain` appears directly before `class AppDelegate` ‚Äì this is a special attribute that tells the Swift compiler to generate code to launch your application using default settings.\n\n**You need to delete `@UIApplicationMain` from that file.** We‚Äôre going to replace it with custom code.\n\nWith that line deleted, create a new Cocoa Touch Class called ‚ÄúMyApplication‚Äù, making it subclass from `UIApplication`. We‚Äôre going to make our class override the `open()` method so that no part of our application can open URLs outside of <a href="https://www.hackingwithswift.com">https://www.hackingwithswift.com</a>:\n\n```swift\nimport UIKit\n\nclass MyApplication: UIApplication {\n    override func open(_ url: URL, options: [UIApplication.OpenExternalURLOptionsKey : Any] = [:], completionHandler completion: ((Bool) -> Void)? = nil) {\n        if let host = url.host, host.contains("hackingwithswift.com") {\n            super.open(url, options: options, completionHandler: completion)\n        } else {\n            completion?(false)\n        }\n    }\n}\n```\n\nThe third and final step is to create a file called <FontIcon icon="fa-brands fa-swift"/>`main.swift` that is responsible for launching our application. The name is important: it must be exactly <FontIcon icon="fa-brands fa-swift"/>`main.swift`, because that‚Äôs the only file that can contain top-level code ‚Äì i.e., code that isn‚Äôt wrapped inside a function, class, struct, or enum.\n\nSo, create a new Swift file called <FontIcon icon="fa-brands fa-swift"/>`main.swift`, and give it this code:\n\n```swift\nimport UIKit\n\nUIApplicationMain(\n    CommandLine.argc,\n    CommandLine.unsafeArgv, \n    NSStringFromClass(MyApplication.self),\n    NSStringFromClass(AppDelegate.self)\n)\n```\n\nYou have now subclassed `UIApplication` and can add any more customizations you need. It should go without saying that dumping code into a `UIApplication` subclass is no better than dumping code into `AppDelegate`.\n\n'),b])}const I=c(h,[["render",A],["__file","how-to-subclass-uiapplication-using-uiapplicationmain.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/example-code/uikit/how-to-subclass-uiapplication-using-uiapplicationmain.html","title":"How to subclass UIApplication using UIApplicationMain","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to subclass UIApplication using UIApplicationMain","description":"Article(s) > How to subclass UIApplication using UIApplicationMain","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-10.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to subclass UIApplication using UIApplicationMain"},{"property":"og:description","content":"How to subclass UIApplication using UIApplicationMain"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/uikit/how-to-subclass-uiapplication-using-uiapplicationmain.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/uikit/how-to-subclass-uiapplication-using-uiapplicationmain.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to subclass UIApplication using UIApplicationMain"}],["meta",{"property":"og:description","content":"Article(s) > How to subclass UIApplication using UIApplicationMain"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-10.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to subclass UIApplication using UIApplicationMain\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.82,"words":547},"filePathRelative":"hackingwithswift.com/example-code/uikit/how-to-subclass-uiapplication-using-uiapplicationmain.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{I as comp,_ as data};
