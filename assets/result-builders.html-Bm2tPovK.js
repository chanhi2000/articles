import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as t,g as i,d as a,a as k,f as p,r as o,o as m}from"./app-BgNevrm5.js";const v={},h={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),w=n("blockquote",null,[n("p",null,"Available from Swift 5.4")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"apple/swift-evolution",-1),_=p(`<p>First up, the most important part: result builders allow us to create a new value step by step by passing in a sequence of our choosing. They power large parts of SwiftUI’s view creation system, so that when we have a <code>VStack</code> with a variety of views inside, Swift silently groups them together into an internal <code>TupleView</code> type so that they can be stored as a single child of the <code>VStack</code> – it turns a sequence of views into a single view.</p><p>Result builders deserve their own detailed article, but I at least want to give you some small code examples so you can see them in action.</p><p>Here is a function that returns a single string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">makeSentence1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Why settle for a Duke when you can have a Prince?&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">makeSentence1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works great, but what if had several strings we wanted to join together? Just like SwiftUI, we might want to provide them all individually and have Swift figure it out, however this kind of code won’t work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// This is invalid Swift, and will not compile.</span></span>
<span class="line"><span class="token comment">// func makeSentence2() -&gt; String {</span></span>
<span class="line"><span class="token comment">//     &quot;Why settle for a Duke&quot;</span></span>
<span class="line"><span class="token comment">//     &quot;when you can have&quot;</span></span>
<span class="line"><span class="token comment">//     &quot;a Prince?&quot;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By itself, that code won’t work because Swift no longer understands what we mean. However, we could create a result builder that understands how to convert several strings into one string using whatever transformation we want, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@resultBuilder</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">SimpleStringBuilder</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildBlock</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> parts<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        parts<span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even though that’s a small amount of code, there’s a lot to unpack:</p><ul><li>The <code>@resultBuilder</code> attribute tells Swift the following type should be treated as a result builder. Previously this behavior was achieved using <code>@_functionBuilder</code>, which had an underscore to show that this wasn’t designed for general use.</li><li>Every result builder must provide at least one static method called <code>buildBlock()</code>, which should take in some sort of data and transform it. The example above takes in zero or more strings, joins them, and sends them back as a single string.</li><li>The end result is that our <code>SimpleStringBuilder</code> struct becomes a result builder, meaning that we can use <code>@SimpleStringBuilder</code> anywhere we need its string joining powers.</li></ul><p>There’s nothing to stop us from using <code>SimpleStringBuilder.buildBlock()</code> directly, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> joined <span class="token operator">=</span> <span class="token class-name">SimpleStringBuilder</span><span class="token punctuation">.</span><span class="token function">buildBlock</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Why settle for a Duke&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;when you can have&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;a Prince?&quot;</span></span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, because we used the <code>@resultBuilder</code> annotation with our <code>SimpleStringBuilder</code> struct, we can also apply that to functions, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@SimpleStringBuilder</span> <span class="token keyword">func</span> <span class="token function-definition function">makeSentence3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Why settle for a Duke&quot;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;when you can have&quot;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;a Prince?&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">makeSentence3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how we no longer need the commas at the end of each string – <code>@resultBuilder</code> automatically transforms each statement in <code>makeSentence()</code> into a single string by using <code>SimpleStringBuilder</code>.</p><p>In practice, result builders are capable of significantly more, accomplished by adding more methods to your builder type. For example, we could add if/else support to our <code>SimpleStringBuilder</code> by adding two extra methods that describe how we want to transform the data. In our code we don’t want to transform our strings at all, so we can send them right back:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@resultBuilder</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ConditionalStringBuilder</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildBlock</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> parts<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        parts<span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildEither</span><span class="token punctuation">(</span>first component<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> component</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildEither</span><span class="token punctuation">(</span>second component<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> component</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I know that looks like we’ve done almost no work, but now our functions are able to use conditions:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@ConditionalStringBuilder</span> <span class="token keyword">func</span> <span class="token function-definition function">makeSentence4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Why settle for a Duke&quot;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;when you can have&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token class-name">Bool</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;a Prince?&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;a King?&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">makeSentence4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Similarly, we could add support for loops by adding a <code>buildArray()</code> method to our builder type:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@resultBuilder</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ComplexStringBuilder</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildBlock</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> parts<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        parts<span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildEither</span><span class="token punctuation">(</span>first component<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> component</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildEither</span><span class="token punctuation">(</span>second component<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> component</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildArray</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> components<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        components<span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now we can use <code>for</code> loops:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@ComplexStringBuilder</span> <span class="token keyword">func</span> <span class="token function-definition function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">…&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Lift off!&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It feels almost like magic because the result builder system is doing almost all the work for us, and even though our example has been fairly simple I hope you can get a taste for the remarkable power result builders bring to Swift.</p>`,24),q={href:"https://bugs.swift.org/browse/SR-13188",target:"_blank",rel:"noopener noreferrer"},B=p(`<p>This is particularly helpful for custom SwiftUI views that use result builders, such as this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">CustomVStack</span><span class="token operator">&lt;</span><span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">&gt;</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> content<span class="token punctuation">:</span> <span class="token class-name">Content</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// custom functionality here</span></span>
<span class="line">            content</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x={href:"https://github.com/carson-katri/awesome-function-builders",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"carson-katri/awesome-function-builders",-1),j={class:"hint-container details"},R=n("summary",null,"Other Changes in Swift 5.4",-1),I={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-3-to-5-4.playground.zip",target:"_blank",rel:"noopener noreferrer"};function V(c,P){const e=o("VPCard"),l=o("FontIcon");return m(),u("div",null,[n("h1",h,[n("a",g,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(e,t(i({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,b,s(e,t(i({title:"Result builders | Changes in Swift 5.4",desc:"Result builders",link:"https://hackingwithswift.com/swift/5.4/result-builders",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,n("p",null,[a("Function builders unofficially arrived in Swift 5.1, but in the run up to Swift 5.4 they formally went through the Swift Evolution proposal process as "),n("a",y,[a("SE-0289 ("),s(l,{icon:"iconfont icon-github"}),S,a(")")]),a(" in order to be discussed and refined. As part of that process they were renamed to result builders to better reflect their actual purpose, and even acquired some new functionality.")]),_,n("p",null,[a("It’s worth adding that Swift 5.4 extends the result builder system to "),n("a",q,[s(l,{icon:"fa-brands fa-swift"}),a("support attributes being placed on stored properties")]),a(", which automatically adjusts the implicit memberwise initializer for structs to apply the result builder.")]),B,n("p",null,[a("If you’d like to see more advanced, real-world examples of result builders in action, you should check out the "),n("a",x,[a("Awesome Function Builders repository on GitHub ("),s(l,{icon:"iconfont icon-github"}),C,a(")")]),a(".")]),n("details",j,[R,s(e,t(i({title:"Improved implicit member syntax | Changes in Swift 5.4",desc:"Improved implicit member syntax",link:"/hackingwithswift.com/swift/5.4/improved-implicit-member-syntax.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"Multiple variadic parameters in functions | Changes in Swift 5.4",desc:"Multiple variadic parameters in functions",link:"/hackingwithswift.com/swift/5.4/multiple-variadic-parameters-in-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"Local functions now support overloading | Changes in Swift 5.4",desc:"Local functions now support overloading",link:"/hackingwithswift.com/swift/5.4/local-functions-now-support-overloading.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"Creating variables that call a function of the same name | Changes in Swift 5.4",desc:"Creating variables that call a function of the same name",link:"/hackingwithswift.com/swift/5.4/local-variables-same-name.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k(` 
\`\`\`component VPCard
{
  "title": "Result builders | Changes in Swift 5.4",
  "desc": "Result builders",
  "link": "/hackingwithswift.com/swift/5.4/result-builders.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(e,t(i({title:"Property wrappers are now supported for local variables | Changes in Swift 5.4",desc:"Property wrappers are now supported for local variables",link:"/hackingwithswift.com/swift/5.4/local-property-wrappers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"Packages can now declare executable targets | Changes in Swift 5.4",desc:"Packages can now declare executable targets",link:"/hackingwithswift.com/swift/5.4/spm-executable-targets.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",I,[s(l,{icon:"fas fa-file-zipper"}),a("Download Swift 5.4 playground")])])])])}const E=r(v,[["render",V],["__file","result-builders.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swift/5.4/result-builders.html","title":"Result builders","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Result builders","description":"Article(s) > Result builders","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.4"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Result builders"},{"property":"og:description","content":"Result builders"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.4/result-builders.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.4/result-builders.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Result builders"}],["meta",{"property":"og:description","content":"Article(s) > Result builders"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.4"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Result builders\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.27,"words":1280},"filePathRelative":"hackingwithswift.com/swift/5.4/result-builders.md","excerpt":"\\n"}');export{E as comp,D as data};
