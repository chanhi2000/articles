import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as p,e,n as s,g as a,a as d,d as u,f as h,r as i,o as m}from"./app-BgNevrm5.js";const f={},g={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},b=t("nav",{class:"table-of-contents"},[t("ul")],-1),k=t("hr",null,null,-1),v=h(`<blockquote><p>Available from Swift 3.0</p></blockquote><p>This is the part where some people will start to drift off in confusion, which is a shame because it&#39;s important.</p><p>Here&#39;s are some quotes from the Swift API guidelines:</p><ul><li>&quot;When the operation is naturally described by a verb, use the verb‚Äôs imperative for the mutating method and apply the ‚Äúed‚Äù or ‚Äúing‚Äù suffix to name its nonmutating counterpart&quot;</li><li>&quot;Prefer to name the nonmutating variant using the verb‚Äôs past participle&quot;</li><li>&quot;When adding ‚Äúed‚Äù is not grammatical because the verb has a direct object, name the nonmutating variant using the verb‚Äôs present participle&quot;</li><li>&quot;When the operation is naturally described by a noun, use the noun for the nonmutating method and apply the ‚Äúform‚Äù prefix to name its mutating counterpart&quot;</li></ul><p>Got that? It&#39;s no surprise that Swift&#39;s rules are expressed using lingustic terminology ‚Äì it is after all a language! ‚Äì but this at least gives me a chance to feel smug that I did a second degree in English. What it means is that many methods are changing names in subtle and sometimes confusing ways.</p><p>Let&#39;s start with a couple of simple examples:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">myArray<span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">myArray<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">myArray<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">myArray<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each time Swift 3 modifies the method by adding a &quot;d&quot; to the end: this is a value that&#39;s being returned.</p><p>These rules are mostly innocent enough, but it causes confusion when it comes to array sorting. Swift 2.2 used <code>sort()</code> to return a sorted array, and <code>sortInPlace()</code> to sort an array in place. In Swift 3.0, <code>sort()</code> is renamed to <code>sorted()</code> (following the examples above), and <code>sortInPlace()</code> is renamed to <code>sort()</code>.</p><div class="hint-container info"><p class="hint-container-title">TL;DR</p><p>This means you need to be careful because in Swift 2.2 <code>sort()</code> returned a sorted array, but in Swift 3.0 <code>sort()</code> sorts the array in place.</p></div>`,10),y={class:"hint-container details"},_=t("summary",null,"Other Changes in Swift 3.0",-1),S={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-2-2-to-3-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function C(o,V){const n=i("VPCard"),r=i("FontIcon");return m(),l("div",null,[t("h1",g,[t("a",w,[t("span",null,p(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e(n,s(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,k,e(n,s(a({title:"Verbs and nouns | Changes in Swift 3.0",desc:"Verbs and nouns",link:"https://hackingwithswift.com/swift/3.0/verbs-and-nouns",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,t("details",y,[_,e(n,s(a({title:"All function parameters have labels unless you request otherwise | Changes in Swift 3.0",desc:"All function parameters have labels unless you request otherwise",link:"/hackingwithswift.com/swift/3.0/function-parameters.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(n,s(a({title:"Omit needless words | Changes in Swift 3.0",desc:"Omit needless words",link:"/hackingwithswift.com/swift/3.0/omit-needless-words.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(n,s(a({title:"UpperCamelCase has been replaced with lowerCamelCase for enums and properties | Changes in Swift 3.0",desc:"UpperCamelCase has been replaced with lowerCamelCase for enums and properties",link:"/hackingwithswift.com/swift/3.0/lower-camel-case.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(n,s(a({title:"Swifty importing of C functions | Changes in Swift 3.0",desc:"Swifty importing of C functions",link:"/hackingwithswift.com/swift/3.0/c-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Verbs and nouns | Changes in Swift 3.0",
  "desc": "Verbs and nouns",
  "link": "/hackingwithswift.com/swift/3.0/verbs-and-nouns.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),t("p",null,[t("a",S,[e(r,{icon:"fas fa-file-zipper"}),u("Download Swift 3.0 playground")])])])])}const x=c(f,[["render",C],["__file","verbs-and-nouns.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/swift/3.0/verbs-and-nouns.html","title":"Verbs and nouns","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Verbs and nouns","description":"Article(s) > Verbs and nouns","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-3.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Verbs and nouns"},{"property":"og:description","content":"Verbs and nouns"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/3.0/verbs-and-nouns.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/3.0/verbs-and-nouns.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Verbs and nouns"}],["meta",{"property":"og:description","content":"Article(s) > Verbs and nouns"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-3.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Verbs and nouns\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swift/2.2/increment-decrement.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.98,"words":594},"filePathRelative":"hackingwithswift.com/swift/3.0/verbs-and-nouns.md","excerpt":"\\n"}');export{x as comp,I as data};
