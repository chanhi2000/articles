import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as k,e as s,n as t,g as e,d as o,f as p,r as c,o as d}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),g=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Swift tasks can have a priority attached to them, such as <code>.high</code> or <code>.background</code>, but the priority can also be <code>nil</code> if no specific priority was assigned. This priority can be used by the system to determine which task should be executed next, but this isn’t guaranteed – think of it as a suggestion rather than a rule.</p><p>Creating a task with a priority look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fetchQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> downloadTask <span class="token operator">=</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>priority<span class="token punctuation">:</span> <span class="token punctuation">.</span>high<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/chapter.txt&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> downloadTask<span class="token punctuation">.</span>value</span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">fetchQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-control-the-priority-of-a-task-1.zip",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>Although you <em>can</em> directly assign a priority to a task when it’s created, if you don’t then Swift will follow three rules for deciding the priority automatically:</p><ol><li>If the task was created from another task, the child task will inherit the priority of the parent task.</li><li>If the new task was created directly from the main thread as opposed to a task, it’s automatically assigned the highest priority of <code>.userInitiated</code>.</li><li>If the new task wasn’t made by another task or the main thread, Swift will try to query the priority of the thread or give it a <code>nil</code> priority.</li></ol><p><strong>This means not specifying an exact priority is often a good idea because Swift will do The Right Thing.</strong></p><p>However, like I said you can also specify an exact priority from one of the following:</p><ul><li>The highest priority is <code>.high</code>, which is synonymous with <code>.userInitiated</code>. As the name implies, this should be used only for tasks that the user specifically started and is actively waiting for.</li><li>Next highest is <code>medium</code>, and again as the name implies this is a great choice for most of your tasks that the user isn’t actively waiting for.</li><li>Next is <code>.low</code>, which is synonymous with <code>.utility</code>. This is the best choice for anything long enough to require a progress bar to be displayed, such as copying files or importing data.</li><li>The lowest priority is <code>.background</code>, which is for any work the user can’t see, such as building a search index. This could in theory take hours to complete.</li></ul><p>Like I said, priority inheritance helps get us a sensible priority by default, particularly when creating tasks in response to a user interface action.</p><p>For example, we could build a simple SwiftUI app using a single task, and we don’t need to provide a specific priority –it will automatically run as high priority because it was started from our UI:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> jokeText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>jokeText<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fetch new joke&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> fetchJoke<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">fetchJoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://icanhazdadjoke.com&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">            <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">            request<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Swift Concurrency by Example&quot;</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;User-Agent&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            request<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;text/plain&quot;</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Accept&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> request<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">let</span> jokeString <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                jokeText <span class="token operator">=</span> jokeString</span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                jokeText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Load failed.&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),_={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-control-the-priority-of-a-task-2.zip",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[o("Any task can query its current priority using "),n("code",null,"Task.currentPriority"),o(", but this works from anywhere – if it’s called in a function that is not currently part of a task, Swift will query the system for an answer or send back "),n("code",null,".medium"),o(".")],-1),T={class:"hint-container details"},q=n("summary",null,"Similar solutions…",-1);function S(l,H){const a=c("VPCard"),i=c("FontIcon");return d(),u("div",null,[n("h1",m,[n("a",w,[n("span",null,k(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,y,s(a,t(e({title:"How to control the priority of a task | Swift Concurrency by Example",desc:"How to control the priority of a task",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-control-the-priority-of-a-task",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("blockquote",null,[n("p",null,[n("a",v,[s(i,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),b,n("blockquote",null,[n("p",null,[n("a",_,[s(i,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),x,n("details",T,[q,s(a,t(e({title:"Understanding how priority escalation works | Swift Concurrency by Example",desc:"Understanding how priority escalation works",link:"/hackingwithswift.com/concurrency/understanding-how-priority-escalation-works.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"What’s the difference between a task and a detached task? | Swift Concurrency by Example",desc:"What’s the difference between a task and a detached task?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-a-task-and-a-detached-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create and use task local values | Swift Concurrency by Example",desc:"How to create and use task local values",link:"/hackingwithswift.com/concurrency/how-to-create-and-use-task-local-values.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to run tasks using SwiftUI’s task() modifier | Swift Concurrency by Example",desc:"How to run tasks using SwiftUI’s task() modifier",link:"/hackingwithswift.com/concurrency/how-to-run-tasks-using-swiftuis-task-modifier.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to cancel a Task | Swift Concurrency by Example",desc:"How to cancel a Task",link:"/hackingwithswift.com/concurrency/how-to-cancel-a-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const U=r(h,[["render",S],["__file","how-to-control-the-priority-of-a-task.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-control-the-priority-of-a-task.html","title":"How to control the priority of a task","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to control the priority of a task","description":"Article(s) > How to control the priority of a task","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to control the priority of a task"},{"property":"og:description","content":"How to control the priority of a task"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-control-the-priority-of-a-task.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-control-the-priority-of-a-task.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to control the priority of a task"}],["meta",{"property":"og:description","content":"Article(s) > How to control the priority of a task"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to control the priority of a task\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.17,"words":951},"filePathRelative":"hackingwithswift.com/concurrency/how-to-control-the-priority-of-a-task.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{U as comp,I as data};
