import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as t,g as e,d as i,a as d,f as k,r as p,o as g}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),y=k(`<blockquote><p>Available from Swift 4.0</p></blockquote><p>One of the most intriguing proposals for Swift 4 was to add some new functionality to dictionaries to make them more powerful, and also to make them behave more like you would expect in certain situations.</p><p>Let&#39;s start with a simple example: filtering dictionaries in Swift 3 does <em>not</em> return a new dictionary. Instead, it returns an array of tuples with key/value labels. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> cities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Shanghai&quot;</span></span><span class="token punctuation">:</span> <span class="token number">24_256_800</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Karachi&quot;</span></span><span class="token punctuation">:</span> <span class="token number">23_500_000</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Beijing&quot;</span></span><span class="token punctuation">:</span> <span class="token number">21_516_000</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Seoul&quot;</span></span><span class="token punctuation">:</span> <span class="token number">9_995_000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> massiveCities <span class="token operator">=</span> cities<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>value <span class="token operator">&gt;</span> <span class="token number">10_000_000</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>After that code runs you can&#39;t read <code>massiveCities[&quot;Shanghai&quot;]</code> because it is no longer a dictionary. Instead, you need to use <code>massiveCities[0].value</code>, which isn&#39;t great.</p><p>As of Swift 4 this behaves more like you would expect: you get back a new dictionary. Obviously this will break any existing code that relies on the tuple-array return type.</p><p>Similarly, the <code>map()</code> method on dictionaries never quite worked the way many people hoped: you got a key-value tuple passed in, and could return a single value to be added to an array. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> populations <span class="token operator">=</span> cities<span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That hasn&#39;t changed in Swift 4, but there is a new method called <code>mapValues()</code> that is going to be much more useful because it lets you transform the values and place them back into a dictionary using the original keys.</p><p>For example, this code will round and stringify all city populations, then put them back into a new dictionary with the same keys of Shanghai, Karachi, and Seoul:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> roundedCities <span class="token operator">=</span> cities<span class="token punctuation">.</span>mapValues <span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span> <span class="token operator">/</span> <span class="token number">1_000_000</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> million people&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>(In case you were wondering, it&#39;s not safe to map dictionary keys because you might create duplicates by accident.)</p><p>Easily my favorite new dictionary addition is a <code>grouping</code> initializer, which converts a sequence into a dictionary of sequences that are grouped by whatever you want. Continuing our <code>cities</code> example, we could use <code>cities.keys</code> to get back an array of city names, then group them by their first letter, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> groupedCities <span class="token operator">=</span> <span class="token class-name">Dictionary</span><span class="token punctuation">(</span>grouping<span class="token punctuation">:</span> cities<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>characters<span class="token punctuation">.</span>first<span class="token operator">!</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>groupedCities<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That will output the following:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token property">&quot;B&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;S&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Shanghai&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Seoul&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;K&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Karachi&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Alternatively, we could group the cities based on the length of their names like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> groupedCities <span class="token operator">=</span> <span class="token class-name">Dictionary</span><span class="token punctuation">(</span>grouping<span class="token punctuation">:</span> cities<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>count <span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>groupedCities<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That will output the following:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Seoul&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Karachi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Shanghai&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, it&#39;s now possible to access a dictionary key and provide a default value to use if the key is missing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;city&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Nashville&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> person<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, any experienced developer will probably argue that&#39;s better written using nil coalescing, and I agree. You could write this line instead using the current version of Swift:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> person<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>However, that doesn&#39;t work when you&#39;re <em>modifying</em> the dictionary value rather than just reading it. You can&#39;t modify a dictionary value in place because accessing its key returns an optional – the key might not exist, after all. With Swift 4&#39;s default dictionary values you can write much more succinct code, such as this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> favoriteTVShows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Red Dwarf&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Blackadder&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Fawlty Towers&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Red Dwarf&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> favoriteCounts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> show <span class="token keyword">in</span> favoriteTVShows <span class="token punctuation">{</span></span>
<span class="line">    favoriteCounts<span class="token punctuation">[</span>show<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That loops over every string in <code>favoriteTVShows</code>, and uses a dictionary called <code>favoriteCounts</code> to keep track of how often each item appears. We can modify the dictionary in one line of code because we know it will always have a value: either the default value of 0, or some higher number based on previous counting.</p>`,27),b={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"apple/swift-evolution",-1),_={class:"hint-container details"},S=n("summary",null,"Other Changes in Swift 4.0",-1),C={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-3-1-to-4-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function x(l,I){const a=p("VPCard"),o=p("FontIcon");return g(),r("div",null,[n("h1",m,[n("a",f,[n("span",null,u(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,v,s(a,t(e({title:"Improved dictionary functionality | Changes in Swift 4.0",desc:"Improved dictionary functionality",link:"https://hackingwithswift.com/swift/4.0/dictionaries",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("p",null,[i("For more information see "),n("a",b,[i("the Swift Evolution proposal for these new features ("),s(o,{icon:"iconfont icon-github"}),q,i(")")]),i(".")]),n("details",_,[S,s(a,t(e({title:"Encoding and decoding data using Codable | Changes in Swift 4.0",desc:"Encoding and decoding data using Codable",link:"/hackingwithswift.com/swift/4.0/codable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Multi-line string literals | Changes in Swift 4.0",desc:"Multi-line string literals",link:"/hackingwithswift.com/swift/4.0/multiline-strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Improved keypaths for key-value coding | Changes in Swift 4.0",desc:"Improved keypaths for key-value coding",link:"/hackingwithswift.com/swift/4.0/keypaths.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Improved dictionary functionality | Changes in Swift 4.0",
  "desc": "Improved dictionary functionality",
  "link": "/hackingwithswift.com/swift/4.0/dictionaries.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Strings are collections again | Changes in Swift 4.0",desc:"Strings are collections again",link:"/hackingwithswift.com/swift/4.0/strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"One-sided ranges | Changes in Swift 4.0",desc:"One-sided ranges",link:"/hackingwithswift.com/swift/4.0/one-sided-ranges.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",C,[s(o,{icon:"fas fa-file-zipper"}),i("Download Swift 4.0 playground")])])])])}const T=c(h,[["render",x],["__file","dictionaries.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/swift/4.0/dictionaries.html","title":"Improved dictionary functionality","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Improved dictionary functionality","description":"Article(s) > Improved dictionary functionality","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Improved dictionary functionality"},{"property":"og:description","content":"Improved dictionary functionality"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.0/dictionaries.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.0/dictionaries.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Improved dictionary functionality"}],["meta",{"property":"og:description","content":"Article(s) > Improved dictionary functionality"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Improved dictionary functionality\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.07,"words":920},"filePathRelative":"hackingwithswift.com/swift/4.0/dictionaries.md","excerpt":"\\n"}');export{T as comp,V as data};
