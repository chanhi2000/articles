import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,t as p,e as s,n,g as e,f as r,r as l,o as u}from"./app-BgNevrm5.js";const h={},d={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},k=t("nav",{class:"table-of-contents"},[t("ul")],-1),w=t("hr",null,null,-1),g=r(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>A regular SwiftData query loads all matchings objects into memory for immediate use, but sometimes you don&#39;t actually need the data because you just want to show how many matches there were.</p><p>For times like this, you should use the <code>fetchCount()</code> method of your model context. This returns how many objects matches your predicate without loading those objects into memory, which means it executes several orders of magnitude faster and uses almost no memory.</p><p>As an example, if you wanted to know how many employees had a salary over $100,000 you should prefer to write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> descriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Employee</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>predicate<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>salary <span class="token operator">&gt;</span> <span class="token number">100_000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">fetchCount</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That does the entire counting in the database, wasting no time or memory.</p><p>In contrast, using a regular fetch <em>then</em> performing a count loads all the objects into memory for no real reason. So, this kind of code is a bad idea:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> descriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Employee</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>predicate<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>salary <span class="token operator">&gt;</span> <span class="token number">100_000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> objects <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> objects<span class="token punctuation">.</span>count</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function f(o,y){const a=l("VPCard");return u(),c("div",null,[t("h1",d,[t("a",m,[t("span",null,p(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),s(a,n(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,w,s(a,n(e({title:"How to count results without loading them | SwiftData by Example",desc:"How to count results without loading them",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-count-results-without-loading-them",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g])}const _=i(h,[["render",f],["__file","how-to-count-results-without-loading-them.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-count-results-without-loading-them.html","title":"How to count results without loading them","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to count results without loading them","description":"Article(s) > How to count results without loading them","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to count results without loading them"},{"property":"og:description","content":"How to count results without loading them"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-count-results-without-loading-them.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-count-results-without-loading-them.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to count results without loading them"}],["meta",{"property":"og:description","content":"Article(s) > How to count results without loading them"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to count results without loading them\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.05,"words":316},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-count-results-without-loading-them.md","localizedDate":"2023ÎÖÑ 9Ïõî 30Ïùº","excerpt":"\\n"}');export{_ as comp,x as data};
