import{_}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,b as e,t as b,e as s,n as g,g as x,w as o,d as n,f as a,r as c,o as v}from"./app-BgNevrm5.js";const y={},k={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},A=e("hr",null,null,-1),I=a(`<p>파이썬을 오래 사용해왔지만 파이썬으로 만들어진 프로그램을 배포할 때는 항상 파이썬 가상 환경을 사용했습니다.</p><p>이 글에서 살펴보는 <code>pipx</code>가 사용되는 것은 여러 웹 사이트나 문서에서 많이 봐왔지만, 처음엔 &#39;늘 사용하던 파이썬 가상 환경만 사용하면 됐지… 뭘 더 배워야 하나&#39; 했습니다. 하지만 <code>pipx</code>를 사용하고 나니 제가 콘솔 스크립트가 포함된 파이썬 프로그램을 배포하는 과정이 엄청 지저분했구나 하는 생각이 들었습니다. 여러분도 제가 느낀 이런 천지가 개벽하는 느낌을 받을 수 있으면 좋겠습니다. 그래서 여러분에게도 <code>pipx</code>를 소개하고자 합니다. 프로그램을 개발할 수 있는 프로그래밍 언어는 파이썬을 비롯해 C, C++, 자바, Rust, Golang 등 다양하지만, 여기에서는 파이썬으로 만들어진 프로그램을 배포하는 방법을 살펴보겠습니다. 파이썬을 사용해 개발을 진행하는 경우 일반적으로는 대다수의 개발자가 문서나 샘플을 찾아보거나 또는 ChatGPT와 같은 친구들을 통해 도움을 받아 프로그램을 개발합니다. 그에 반해서 프로그램 배포는 &#39;어떻게든 되지 않을까? 그건 쓰는 사람의 몫 아니야?&#39; 하는 식으로 무관심합니다.</p><p>실제로 프로그램을 개발하기 위해서 사용하는 여러 라이브러리를 설치하는 것은 매우 쉽습니다. 단순히 <code>pip</code> 명령을 사용하는 것만으로도 라이브러리를 설치하거나 업그레이드할 수 있기 때문입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> package_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4),z={href:"https://pypi.org",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"pip",-1),C=e("code",null,"npm",-1),R=e("code",null,"yarn",-1),S=e("code",null,"pip",-1),F=e("code",null,"gradle",-1),T=e("code",null,"npm",-1),X=a('<hr><h2 id="console-script-콘솔-스크립트" tabindex="-1"><a class="header-anchor" href="#console-script-콘솔-스크립트"><span>Console Script (콘솔 스크립트)</span></a></h2><p>파이썬은 다른 언어와 달리 파이썬 프로그램을 패키징할 때 파이썬 파일을 셸<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>에서 직접 실행할 수 있도록 구성해두면 운영체제에 해당 패키지를 설치했을 때 실행 파일을 만들어주는 기능이 있습니다.</p><p>이것을 “Console Script (콘솔 스크립트)”로 부릅니다. 콘솔 스크립트를 사용하면 셸에서 빠르게 파이썬 패키지에서 제공하는 기능을 사용할 수 있습니다.</p><h3 id="콘솔-스크립트를-사용하지-않는다면" tabindex="-1"><a class="header-anchor" href="#콘솔-스크립트를-사용하지-않는다면"><span>콘솔 스크립트를 사용하지 않는다면</span></a></h3>',5),V=e("code",null,"asana_project_sync.py",-1),E=e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote2"},"[2]"),e("a",{class:"footnote-anchor",id:"footnote-ref2"})],-1),N=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">source</span> .venv/bin/activate</span>
<span class="line">python asana_project_sync.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),J=e("code",null,"asana_project_sync.py",-1),M=e("code",null,"if __name__ == “__main__”",-1),B=e("code",null,"main()",-1),D=e("code",null,"python",-1),U=e("p",null,"여기까지만 들어도 머리가 어질어질하시죠? 그렇지만 아직 어질어질하실때가 아닙니다. 파이썬 스크립트가 있는 경로를 찾아 들어가서 프로그램을 실행해야 합니다.",-1),G=e("p",null,"정리하면, 셸에서 직접 실행 가능한 파이썬 프로그램을 실행하기 위해 다음과 같은 과정을 거쳐야 합니다.",-1),K=e("li",null,"파이썬 가상 환경 진입",-1),L=e("code",null,"pip show",-1),Q=e("li",null,"패키지 설치 위치로 이동",-1),Z=e("code",null,"python",-1),q=e("p",null,"셸에서 직접 실행 가능한 파이썬 스크립트 실행을 위해 이렇게 매번 4번의 과정을 거쳐야만 합니다. 아무리 우리가 셸을 사용하는 데 익숙하다곤 하지만, 프로그램 실행 과정에서 타이핑 오류를 내거나 프로그램에 제공해야 하는 인자를 생략한다거나 하는 실수를 내기도 쉽습니다.",-1),O=e("p",null,"그래서 셸에서 파이썬 스크립트를 바로 사용하기 위해 콘솔 스크립트가 사용됩니다. 콘솔 스크립트는 파이썬 패키징을 할 때 만들어지며, 위 과정에서 설명한 것처럼 터미널에서 명령어로 직접 실행할 수 있습니다. 다행스럽게도 파이썬은 패키징할 때 특정 파이썬 스크립트에 있는 함수 하나를 프로그램 진입점으로 삼아 콘솔 스크립트를 만들어주는 기능이 제공됩니다. 콘솔 스크립트가 제공되는 패키지는 파이썬 패키지를 설치했을 때 셸에서 콘솔 스크립트 이름을 입력하고 실행하기만 하면 됩니다.",-1),$=e("code",null,"asana_project_sync.py",-1),H=e("code",null,"main",-1),W=e("code",null,"asana_project_sync",-1),Y=a('<h3 id="콘솔-스크립트를-사용한다면" tabindex="-1"><a class="header-anchor" href="#콘솔-스크립트를-사용한다면"><span>콘솔 스크립트를 사용한다면</span></a></h3><p>이제 우리의 터미널 프로그램에서 콘솔 스크립트를 실행하는 방법을 살펴보겠습니다.</p><ol><li>파이썬 가상 환경 진입</li><li><code>asana_project_sync</code> 명령 실행</li></ol><p>여러분이 보시기에 어떤가요? 앞에서 살펴봤던 과정과 비교해 봐도 콘솔 스크립트를 사용해 파이썬 스크립트를 실행하는 방법이 훨씬 쉬운 것 같죠? 실제로도 콘솔 스크립트를 사용하면 파이썬 스크립트에는 <code>__name__</code>이 <code>__main__</code>인지 비교하는 <code>if</code> 문이 없어도 되기에 훨씬 더 단순한 실행 방법을 가지게 됩니다.</p><hr><h2 id="pipx를-시작하기에-앞서" tabindex="-1"><a class="header-anchor" href="#pipx를-시작하기에-앞서"><span>PIPX를 시작하기에 앞서</span></a></h2><p>이제 <code>pipx</code> 이야기를 하겠습니다. 파이썬 가상 환경을 만들고 콘솔 스크립트를 사용해 프로그램을 실행하는 과정으로 만족한다면 <code>pipx</code> 같은 도구가 왜 필요할지 의아할 것입니다. 실제로 <code>pipx</code>를 사용하기 위해서는 파이썬이 설치되어 있어야 하기도 합니다. 이런 점에 있어서는 자바 언어도 마찬가지입니다. 자바로 만들어진 프로그램을 배포할 때 JVM이 설치되는 컴퓨터에 이미 있거나 개발자가 해당 프로그램에 JVM이 함께 배포합니다.</p><p>지금까지 살펴본 것처럼 콘솔 스크립트를 사용하면 파이썬 스크립트를 쉽게 실행할 수 있음에도 불구하고 파이썬 가상 환경을 생성해야 한다는 단점이 있습니다. 여러분이 윈도우나 맥 운영체제 사용자면 단순히 &#39;시스템에 설치되어 있는 파이썬 환경에 콘솔 스크립트를 제공하는 파이썬 패키지를 설치하면 되지, 뭐가 문제야!&#39;라고 할 수도 있습니다.</p><p>하지만 시스템에 설치된 파이썬 환경은 글로벌 환경으로 여기에 직접 설치하게 되면 프로그램마다 사용하는 라이브러리 버전들이 달라 프로그램이 실행 과정에서 문제가 발생하기도 합니다.</p>',9),ee={href:"https://peps.python.org/pep-0668",target:"_blank",rel:"noopener noreferrer"},ne=a('<p>PEP 668에서 권장하는 바에 따르면 파이썬 패키지를 배포할 때 선호되는 방법은 가능한 경우 파이썬 가상 환경을 사용하는 것입니다. 이런 이유로 인해 파이썬 가상 환경이 존재한다고 가정한 것입니다.</p><p>그렇지만 콘솔 스크립트를 사용하기 위해 콘솔 스크립트가 설치된 파이썬 가상 환경을 활성화하고 콘솔 스크립트를 실행하는 것은 불편할 수밖에 없죠. 무엇보다 다수의 사용자가 이용하게 만드는 과정에서 “가상 환경”을 만들고 파이썬 가상 환경을 활성화하는 과정부터 순탄치 않을 가능성이 높습니다.</p><hr><h2 id="pipx-설치하기" tabindex="-1"><a class="header-anchor" href="#pipx-설치하기"><span>PIPX 설치하기</span></a></h2><p>Flask 개발자인 Armin Ronacher는 콘솔 스크립트를 셸에서 파이썬 가상 환경에 진입하지 않고도 사용할 수 있도록 해주는 파이썬 프로그램인 <code>pipsi</code>라는 프로그램을 개발했습니다.</p><p>파이썬 패키징 위원회(Python Packaging Authority)는 <code>pipsi</code>와 NodeJS의 <code>npx</code>에서 영향을 받아 콘솔 스크립트가 제공되는 파이썬 패키지 관리 도구인 <code>pipx</code>를 개발했습니다. <code>pipx</code>를 사용해 콘솔 스크립트가 제공되는 파이썬 패키지를 설치하면 사용자가 파이썬 가상 환경을 만들고 가상 환경을 활성화하고 콘솔 스크립트를 실행하는 과정을 거치지 않아도 됩니다.</p><p><code>pipx</code>를 사용하려면 먼저 파이썬 글로벌 환경에 먼저 <code>pipx</code>를 설치해야 합니다. 운영체제별로 다음과 같이 설치합니다.</p>',7),se=e("p",null,"관리자 모드의 “명령 프롬프트” 또는 “파워셸”에서 실행합니다.",-1),oe=e("div",{class:"language-bat line-numbers-mode","data-highlighter":"prismjs","data-ext":"bat","data-title":"bat"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"pip install pipx"),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),te=e("p",null,[n("homebrew가 설치되어 있을 때만 "),e("code",null,"brew"),n(" 명령을 사용합니다.")],-1),ae=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(" pip "),e("span",{class:"token function"},"install"),n(" pipx")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brew가 있을 경우")]),n(`
`),e("span",{class:"line"},[n("brew "),e("span",{class:"token function"},"install"),n(" pipx")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ie=e("p",null,"데비안 또는 우분투 계열",-1),le=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(),e("span",{class:"token function"},"install"),n(" pipx")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),pe=e("p",null,"레드햇 계열의 모든 리눅스",-1),ce=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(" dnf "),e("span",{class:"token function"},"install"),n(" pipx")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),de=a(`<p>리눅스의 경우 앞에서 언급한 것처럼 번들링된 파이썬이 설치됩니다. 여기에 <code>root</code> 사용자가 직접 패키지를 설치할 수 없으므로 배포본 저장소에서 직접 제공하는 패키지를 설치합니다. <code>pipx</code>를 설치한 다음에는 반드시 다음 명령을 실행해야 합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pipx ensurepath</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2),re=e("code",null,"pipx",-1),he=e("code",null,"ensurepath",-1),ue=e("code",null,"pipx",-1),me=a(`<hr><h2 id="pipx로-패키지-설치하기" tabindex="-1"><a class="header-anchor" href="#pipx로-패키지-설치하기"><span>PIPX로 패키지 설치하기</span></a></h2><p><code>pipx</code>로 패키지를 설치하려면 다음과 같이 합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pipx <span class="token function">install</span> package_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4),_e=e("code",null,"pipx install",-1),fe=e("code",null,"<User Folder>/.local/bin",-1),be=e("code",null,"cowsay",-1),ge=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pipx <span class="token function">install</span> cowsay</span>
<span class="line">cowsay moooo</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#   -----</span></span>
<span class="line"><span class="token comment"># &lt; moooo &gt;</span></span>
<span class="line"><span class="token comment">#   -----</span></span>
<span class="line"><span class="token comment">#    \\   ^__^</span></span>
<span class="line"><span class="token comment">#     \\  (oo)\\_______</span></span>
<span class="line"><span class="token comment">#        (__)\\       )\\/\\</span></span>
<span class="line"><span class="token comment">#            ||----w |</span></span>
<span class="line"><span class="token comment">#            ||     ||</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cosway</code>는 유닉스 터미널에서 아스키 문자 기반으로 그림을 표시하는 아스키아트와 메시지를 출력하는 프로그램으로 펄(Perl)을 비롯하여 파이썬 패키지로도 만들어져 있습니다.</p>`,2),xe=e("code",null,"pipx",-1),ve=e("code",null,"pipx",-1),ye=e("code",null,"<User Folder>/.local/bin",-1),ke=a(`<hr><h2 id="pipx에서-패키지-제거하기" tabindex="-1"><a class="header-anchor" href="#pipx에서-패키지-제거하기"><span><code>pipx</code>에서 패키지 제거하기</span></a></h2><p><code>pipx</code>를 사용해 설치한 패키지를 더 이상 사용하지 않는다면 시스템에서 제거해야 합니다. 앞에서 설치한 <code>cowsay</code> 패키지가 대표적으로 한 번만 사용하고 사용하지 않는 패키지입니다. 다음과 같이 패키지를 제거할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pipx uninstall package_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4),we=e("code",null,"<User Folder>/.local/bin",-1),Pe=a('<hr><h2 id="pipx-더-살펴보기" tabindex="-1"><a class="header-anchor" href="#pipx-더-살펴보기"><span><code>pipx</code> 더 살펴보기</span></a></h2><p>앞에서 <code>pipx</code>를 사용해 파이썬 패키지를 설치하고 제거하는 방법을 살펴보았습니다. 그럼 이제 이런 궁금증이 생길지도 모르겠습니다.</p><blockquote><p>Q. <code>pipx</code>가 있으면 <code>pip</code>는 더 이상 사용하지 않는 것인가요?</p><p>Q. <code>pipx</code>를 사용하면 <code>pipenv</code>나 <code>poetry</code> 같은 도구는 안 써도 되나요?</p><p>Q. <code>pipx</code>를 이미 설치된 <code>pipx</code>를 사용해 설치할 수도 있나요?</p></blockquote><p>첫 번째 궁금증부터 살펴보면 <code>pipx</code>는 실제로는 <code>pip</code>를 한 번 더 감싼 도구이기 때문에 <code>pip</code>를 사용하지 않는 것은 아닙니다. 어디까지나 콘솔 스크립트가 제공되는 파이썬 패키지 배포에 사용되는 도구라고 생각하시면 됩니다.</p><p>두 번째 궁금증에 대한 답입니다. <code>pipx</code>는 파이썬 패키지 배포에 사용되는 도구지만, <code>pipenv</code>나 <code>poetry</code>는 파이썬 패키지를 개발하기 위해 사용되는 도구이기 때문에 다른 성격의 도구라고 말할 수 있습니다. 다만 이들 도구는 콘솔 스크립트를 제공하기 때문에 <code>pipx</code> 명령으로 설치해서 사용하기도 합니다.</p><p>세 번째 궁금증에 대한 답은 권장되지 않는다 입니다. 별도의 <code>pipx-in-pipx</code> 프로젝트를 통해 시도할 수 있습니다. 하지만 권장되지 않으니까 가능하면 시도하지 않기를 바랍니다.</p><p><code>pipx</code>가 유용한 경우는 파이썬 패키징을 위해 사용하는 <code>pipenv</code>, <code>poetry</code>, <code>pdm</code>과 파이썬 패키지 환경을 구성해주는 <code>django-admin</code>, <code>cookiecutter</code> 와 같이 파이썬 버전에 상관없이 사용하는 도구를 사용할 때입니다. 시스템에 파이썬 3.7, 3.8, 3.9, 3.10, 3.11, 3.12 등이 모두 설치되어 있다고 한다면 <code>pipenv</code>, <code>poetry</code> 같은 도구를 모든 파이썬 환경에 설치하는 것은 불편하기도 할뿐더러 문제를 일으킬 소지도 있습니다.</p><p>하나 더, 리눅스 배포본에서 기본으로 번들링되어 제공하는 <code>pipx</code> 패키지는 그 버전이 매우 낮습니다. 가능하다면 최신 <code>pipx</code> 패키지 파일을 찾아 설치하시길 권장합니다. 이 글을 쓰는 당시의 <code>pipx</code> 최신 버전은 1.4.3입니다.</p><hr><h2 id="마무리" tabindex="-1"><a class="header-anchor" href="#마무리"><span>마무리</span></a></h2><p>이 글에서 설명하진 않았지만 <code>pipx</code>는 <code>pypi</code>에서 패키지를 설치하는 것 외에도 사용자가 지정하는 외부 패키지 저장소에서 패키지를 설치하는 것도 가능합니다. 이 과정에서 사용자 인증 방식에 대한 부분도 있는데 이 부분은 여러분이 궁금해하시면 답글 달아드릴게요.</p><p>우리는 어떤 프로그램을 사용하기 위해 운영체제에 “프로그램 설치”란 과정을 거쳐 프로그램을 사용하게 됩니다. 우리가 일상적으로 사용하는 오피스 프로그램, 크롬 웹 브라우저, 노션과 같은 프로그램이 바로 이런 과정을 거치게 됩니다. 프로그램을 실행하는 운영체제가 윈도우면 “.exe” 확장자를 가진 파일이 프로그램을 실행하게 될 것이고, 리눅스나 맥<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>이면 실행 권한을 가지고 있는 파일이기만 하면 됩니다.</p><p>하지만 우리가 별도로 만든 프로그램이라면 어떨까요? 떠올리기 쉬운 방법은 프로그램 구동에 필요한 라이브러리들과 실행 파일을 모으고, “인스톨러” 프로그램을 사용해서 “인스톨 패키지”를 만들고, 프로그램 실행이 허락되는 운영체제에서 “인스톨 프로그램”을 사용해 설치하는 것입니다.</p><p>파이썬도 여러 운영체제에 우리가 만든 프로그램을 배포하기 위해 개별 운영체제에서 실행 가능한 파일로 만들기 위해 <code>cx_freeze</code>나 <code>pyinstaller</code> 같은 라이브러리를 사용할 수 있습니다.</p>',15),Ae=a('<p>지금까지 <code>pipx</code>로 CLI 실행 파일을 제공하는 파이썬 프로그램을 파이썬이 설치된 환경에 쉽게 설치하는 방법을 살펴봤습니다. 다음에 뵙겠습니다.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>셸은 운영체제에서 사용하는 터미널 프로그램을 의미합니다. 윈도우는 “명령 프롬프트”, “파워셸”을, 맥이나 리눅스는 “터미널” 프로그램을 사용해 셸을 시작할 수 있습니다. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>편의상 맥이나 리눅스 환경의 터미널 프롬프트를 사용합니다. <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>맥은 GUI 프로그램을 배포하기 위해 별도로 사용되는 App 패키징 방식이 있습니다. 이 방식은 터미널에선 직접 사용할 수 없습니다. <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li></ol></section>',3);function Ie(d,ze){const r=c("VPCard"),i=c("router-link"),h=c("SiteInfo"),t=c("FontIcon"),u=c("Tabs"),m=c("RouteLink");return v(),f("div",null,[e("h1",k,[e("a",w,[e("span",null,b(d.$frontmatter.title)+" 관련",1)])]),s(r,g(x({title:"Python > Article(s)",desc:"Article(s)",link:"/programming/py/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",P,[e("ul",null,[e("li",null,[s(i,{to:"#console-script-콘솔-스크립트"},{default:o(()=>[n("Console Script (콘솔 스크립트)")]),_:1}),e("ul",null,[e("li",null,[s(i,{to:"#콘솔-스크립트를-사용하지-않는다면"},{default:o(()=>[n("콘솔 스크립트를 사용하지 않는다면")]),_:1})]),e("li",null,[s(i,{to:"#콘솔-스크립트를-사용한다면"},{default:o(()=>[n("콘솔 스크립트를 사용한다면")]),_:1})])])]),e("li",null,[s(i,{to:"#pipx를-시작하기에-앞서"},{default:o(()=>[n("PIPX를 시작하기에 앞서")]),_:1})]),e("li",null,[s(i,{to:"#pipx-설치하기"},{default:o(()=>[n("PIPX 설치하기")]),_:1})]),e("li",null,[s(i,{to:"#pipx로-패키지-설치하기"},{default:o(()=>[n("PIPX로 패키지 설치하기")]),_:1})]),e("li",null,[s(i,{to:"#pipx에서-패키지-제거하기"},{default:o(()=>[n("pipx에서 패키지 제거하기")]),_:1})]),e("li",null,[s(i,{to:"#pipx-더-살펴보기"},{default:o(()=>[n("pipx 더 살펴보기")]),_:1})]),e("li",null,[s(i,{to:"#마무리"},{default:o(()=>[n("마무리")]),_:1})])])]),A,s(h,{name:"파이썬 애플리케이션 배포하기: pipx 편 | 요즘IT",desc:"파이썬 애플리케이션 배포하기: pipx 편",url:"https://yozm.wishket.com/magazine/detail/2536",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",preview:"https://yozm.wishket.com/media/news/2536/pipx_logo.png"}),I,e("p",null,[n("물론 pip 명령은 기본적으로 "),e("a",z,[s(t,{icon:"fa-brands fa-python"}),n("PyPI")]),n("에 등록된 패키지만 가져옵니다. 요즘 많이 사용되는 프로그래밍 언어도 "),j,n("와 같은 명령어나 방법을 제공합니다. 자바는 maven이나 gradle 같은 친구들을 사용해 라이브러리를 설치할 수 있고 NodeJS는 "),C,n("이나 "),R,n(" 명령을 사용해 라이브러리를 설치할 수 있습니다. "),S,n("와 마찬가지로 "),F,n("이나 "),T,n(" 같은 도구도 기본적으로 접속하는 공개된 라이브러리 저장소가 있습니다. 그렇지만 단순히 라이브러리를 설치하는 목적은 프로그램을 개발하기 위해 필요한 것이지, 실제로 우리가 사용하려는 프로그램이 이들 저장소를 통해 제공되지는 않습니다.")]),X,e("p",null,[n("콘솔 스크립트를 사용하지 않는 과정을 먼저 살펴보겠습니다. 예를 들어 Asana에서 데이터를 매일 새벽에 불러와 로컬 데이터베이스에 저장하는 기능을 가진 파이썬 스크립트인 "),s(t,{icon:"fa-brands fa-python"}),V,n(" 파일이 있다고 가정해보겠습니다. 이 스크립트를 사용하려면 먼저 파이썬 가상 환경"),E,n("으로 진입해서 셸에서 파이썬을 직접 실행해야 합니다.")]),N,e("p",null,[n("물론 python 명령에 직접 스크립트 파일 이름을 명시하는 것이기 때문에 "),s(t,{icon:"fa-brands fa-python"}),J,n("에는 "),M,n(" 로 시작하는 곳에서 "),B,n("과 함수를 만들어져 있어야 합니다.")]),e("p",null,[n("이렇게 셸에서 직접 실행 가능한 파이썬 스크립트가 더 많아지면 자연스레 해당 스크립트를 사용할 때마다 "),s(t,{icon:"fas fa-terminal"}),D,n(" 명령을 직접 명시해주는 수고로움을 보태야 합니다. 물론 맥이나 리눅스 환경의 파이썬 스크립트면 파일의 첫번째줄에 파이썬 인터프리터의 실행 경로를 명시하고 프로그램에 실행 권한을 제공해야 합니다.")]),U,G,e("ol",null,[K,e("li",null,[s(t,{icon:"fas fa-terminal"}),L,n(" 명령으로 파이썬 패키지 설치 위치 확인")]),Q,e("li",null,[s(t,{icon:"fas fa-terminal"}),Z,n(" 명령으로 스크립트 실행")])]),q,O,e("p",null,[n("예를 들어 스크립트가 실행하는 진입점이 "),s(t,{icon:"fa-brands fa-python"}),$,n(" 파일에 있는 "),H,n(" 함수이면 콘솔 스크립트의 이름은 "),W,n("로 명명할 수 있을 것입니다.")]),Y,e("p",null,[n("더욱이 리눅스 배포본들은 윈도우, 맥과 달리 파이썬으로 구현된 여러 프로그램이 시스템에서 직접 이용되고 있어, 리눅스 배포본 업체에서 직접 파이썬을 컴파일해서 번들링된 배포본 전용 패키지 파일로 제공합니다. 2021년 이전에는 시스템에 번들링된 파이썬 환경(글로벌 환경)에 root 사용자가 직접 관리하는 패키지(이를 외부 패키지로 부릅니다)를 설치하는 것이 가능했지만, 이로 인해 최악의 경우 리눅스를 재설치 해야 하는 상황까지 발생함에 따라 논의를 거쳐 "),e("a",ee,[s(t,{icon:"fa-brands fa-python"}),n("PEP 668")]),n("이 Accept 되었습니다.")]),ne,s(u,{id:"136",data:[{id:'<FontIcon icon="fa-brands fa-windows"/>윈도우'},{id:'<FontIcon icon="fa-brands fa-apple"/>맥'},{id:'<FontIcon icon="fa-brands fa-debian"/>리눅스(1)'},{id:'<FontIcon icon="fa-brands fa-redhat"/>리눅스(2)'}],active:0},{title0:o(({value:l,isActive:p})=>[s(t,{icon:"fa-brands fa-windows"}),n("윈도우")]),title1:o(({value:l,isActive:p})=>[s(t,{icon:"fa-brands fa-apple"}),n("맥")]),title2:o(({value:l,isActive:p})=>[s(t,{icon:"fa-brands fa-debian"}),n("리눅스(1)")]),title3:o(({value:l,isActive:p})=>[s(t,{icon:"fa-brands fa-redhat"}),n("리눅스(2)")]),tab0:o(({value:l,isActive:p})=>[se,oe]),tab1:o(({value:l,isActive:p})=>[te,ae]),tab2:o(({value:l,isActive:p})=>[ie,le]),tab3:o(({value:l,isActive:p})=>[pe,ce]),_:1}),de,e("p",null,[re,n(" 패키지를 설치하고 "),s(t,{icon:"fas fa-terminal"}),he,n(" 명령까지 실행했으면 이제 "),ue,n("를 사용해 패키지를 설치할 차례입니다.")]),me,e("p",null,[n("."),s(t,{icon:"fas fa-terminal"}),_e,n("로 설치된 파이썬 패키지의 콘솔 스크립트는 "),s(t,{icon:"fas fa-folder-open"}),fe,n(" 폴더 아래에 바로가기가 만들어집니다. 예제로 실행해볼 파이썬 패키지로 "),be,n("를 설치하고 실행하겠습니다.")]),ge,e("p",null,[xe,n("로 패키지를 설치하기만 하면 콘솔 스크립트 실행은 일반적인 프로그램을 실행하는 것과 크게 다르지 않습니다. "),ve,n("는 파이썬 패키지를 설치하기 위해 기본적으로 사용자 홈 폴더에 격리된 파이썬 가상 환경을 자동으로 생성합니다. 이 환경을 shared libs라고 합니다. 이렇게 격리된 가상 환경에 파이썬 패키지를 설치하고, "),s(t,{icon:"fas fa-folder-open"}),ye,n(" 폴더 아래에 콘솔스크립트의 바로가기(리눅스나 맥은 심볼릭 링크)를 생성합니다.")]),ke,e("p",null,[n("이렇게 제거된 파이썬 패키지는 "),s(t,{icon:"fas fa-folder-open"}),we,n(" 폴더에서도 콘솔 스크립트의 바로가기가 삭제됩니다.")]),Pe,e("p",null,[n("예전과 달리 요즘은 스마트폰의 영향으로 프로그램을 설치하고 삭제하는 행동이 숨 쉬는 것보다 쉬워진 것 같기도 한데요. 이전 글 '"),s(m,{to:"/yozm.wishket.com/2057.html"},{default:o(()=>[n("개발 런타임 환경 구축하기 - 파이썬pyenv")]),_:1}),n("편'에서 “프로그램 개발 환경”을 언급했을 때처럼, 예전엔 프로그램을 윈도우에 설치하는 것도 꽤 어렵고 힘든 일에 속했습니다. 믿어지지 않으시죠? 여러분 주변에 1990 ~ 2010년 사이에 컴퓨터를 사용하던 분들에게 물어보시면 '넌덜머리 난다'라는 말을 하시는 분이 있을 겁니다.")]),Ae])}const Re=_(y,[["render",Ie],["__file","2536.html.vue"]]),Se=JSON.parse('{"path":"/yozm.wishket.com/2536.html","title":"파이썬 애플리케이션 배포하기 - pipx 편","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"파이썬 애플리케이션 배포하기 - pipx 편","description":"Article(s) > 파이썬 애플리케이션 배포하기 - pipx 편","icon":"fa-brands fa-python","category":["Python","Article(s)"],"tag":["blog","yozm.wishket.com","python","py","pip"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 파이썬 애플리케이션 배포하기 - pipx 편"},{"property":"og:description","content":"파이썬 애플리케이션 배포하기 - pipx 편"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2536.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2536.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"파이썬 애플리케이션 배포하기 - pipx 편"}],["meta",{"property":"og:description","content":"Article(s) > 파이썬 애플리케이션 배포하기 - pipx 편"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2536/pipx_logo.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2536/pipx_logo.png"}],["meta",{"name":"twitter:image:alt","content":"파이썬 애플리케이션 배포하기 - pipx 편"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"pip"}],["meta",{"property":"article:published_time","content":"2024-04-09T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"파이썬 애플리케이션 배포하기 - pipx 편\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2536/pipx_logo.png\\"],\\"datePublished\\":\\"2024-04-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/py/articles/README.md","date":"2024-04-09T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2536/pipx_logo.png"},"headers":[{"level":2,"title":"Console Script (콘솔 스크립트)","slug":"console-script-콘솔-스크립트","link":"#console-script-콘솔-스크립트","children":[{"level":3,"title":"콘솔 스크립트를 사용하지 않는다면","slug":"콘솔-스크립트를-사용하지-않는다면","link":"#콘솔-스크립트를-사용하지-않는다면","children":[]},{"level":3,"title":"콘솔 스크립트를 사용한다면","slug":"콘솔-스크립트를-사용한다면","link":"#콘솔-스크립트를-사용한다면","children":[]}]},{"level":2,"title":"PIPX를 시작하기에 앞서","slug":"pipx를-시작하기에-앞서","link":"#pipx를-시작하기에-앞서","children":[]},{"level":2,"title":"PIPX 설치하기","slug":"pipx-설치하기","link":"#pipx-설치하기","children":[]},{"level":2,"title":"PIPX로 패키지 설치하기","slug":"pipx로-패키지-설치하기","link":"#pipx로-패키지-설치하기","children":[]},{"level":2,"title":"pipx에서 패키지 제거하기","slug":"pipx에서-패키지-제거하기","link":"#pipx에서-패키지-제거하기","children":[]},{"level":2,"title":"pipx 더 살펴보기","slug":"pipx-더-살펴보기","link":"#pipx-더-살펴보기","children":[]},{"level":2,"title":"마무리","slug":"마무리","link":"#마무리","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.83,"words":550},"filePathRelative":"yozm.wishket.com/2536.md","localizedDate":"2024년 4월 9일","excerpt":"\\n"}');export{Re as comp,Se as data};
