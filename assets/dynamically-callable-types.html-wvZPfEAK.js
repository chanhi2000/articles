import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as a,n as e,g as t,d as o,a as d,f as m,r as i,o as k}from"./app-BgNevrm5.js";const h={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.0")],-1),v={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),C=n("code",null,"@dynamicCallable",-1),S=m(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span>numberOfZeroes<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Into this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">dynamicallyCall</span><span class="token punctuation">(</span>withKeywordArguments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;numberOfZeroes&quot;</span></span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>@dynamicCallable</code> is the natural extension of Swift 4.2&#39;s <code>@dynamicMemberLookup</code>, and serves the same purpose: to make it easier for Swift code to work alongside dynamic languages such as Python and JavaScript.</p><p>To add this functionality to your own types, you need to add the <code>@dynamicCallable</code> attribute plus one or both of these methods:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withArguments args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withKeywordArguments args<span class="token punctuation">:</span> <span class="token class-name">KeyValuePairs</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first of those is used when you call the type without parameter labels (e.g. <code>a(b, c)</code>), and the second is used when you <em>do</em> provide labels (e.g. <code>a(b: cat, c: dog)</code>).</p><p><code>@dynamicCallable</code> is really flexible about which data types its methods accept and return, allowing you to benefit from all of Swift’s type safety while still having some wriggle room for advanced usage. So, for the first method (no parameter labels) you can use anything that conforms to <code>ExpressibleByArrayLiteral</code> such as arrays, array slices, and sets, and for the second method (with parameter labels) you can use anything that conforms to <code>ExpressibleByDictionaryLiteral</code> such as dictionaries and key value pairs.</p><p>As well as accepting a variety of inputs, you can also provide multiple overloads for a variety of outputs – one might return a string, one an integer, and so on. As long as Swift is able to resolve which one is used, you can mix and match all you want.</p><p>Let’s look at an example. First, here’s a <code>RandomNumberGenerator</code> struct that generates numbers between 0 and a certain maximum, depending on what input was passed in:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">RandomNumberGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">generate</span><span class="token punctuation">(</span>numberOfZeroes<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> maximum <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>numberOfZeroes<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span>maximum<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To switch that over to <code>@dynamicCallable</code> we’d write something like this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@dynamicCallable</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">RandomNumberGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withKeywordArguments args<span class="token punctuation">:</span> <span class="token class-name">KeyValuePairs</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> numberOfZeroes <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span>value <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> maximum <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> numberOfZeroes<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span>maximum<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That method can be called with any number of parameters, or perhaps zero, so we read the first value carefully and use nil coalescing to make sure there’s a sensible default.</p><p>We can now create an instance of <code>RandomNumberGenerator</code> and call it like a function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> random <span class="token operator">=</span> <span class="token class-name">RandomNumberGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span>numberOfZeroes<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you had used <code>dynamicallyCall(withArguments:)</code> instead – or at the same time, because you can have them both a single type – then you’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@dynamicCallable</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">RandomNumberGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withArguments args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> numberOfZeroes <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> maximum <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> numberOfZeroes<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span>maximum<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> random <span class="token operator">=</span> <span class="token class-name">RandomNumberGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are some important rules to be aware of when using <code>@dynamicCallable</code>:</p><ul><li>You can apply it to structs, enums, classes, and protocols.</li><li>If you implement <code>withKeywordArguments:</code> and don’t implement <code>withArguments:</code>, your type can still be called without parameter labels – you’ll just get empty strings for the keys.</li><li>If your implementations of <code>withKeywordArguments:</code> or <code>withArguments:</code> are marked as throwing, calling the type will also be throwing.</li><li>You can’t add <code>@dynamicCallable</code> to an extension, only the primary definition of a type.</li><li>You can still add other methods and properties to your type, and use them as normal.</li></ul><p>Perhaps more importantly, there is no support for method resolution, which means we must call the type directly (e.g. <code>random(numberOfZeroes: 5)</code>) rather than calling specific methods on the type (e.g. <code>random.generate(numberOfZeroes: 5)</code>). There is already some discussion on adding the latter using a method signature such as this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCallMethod</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> withKeywordArguments<span class="token punctuation">:</span> <span class="token class-name">KeyValuePairs</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If that became possible in future Swift versions it might open up some very interesting possibilities for test mocking.</p><p>In the meantime, <code>@dynamicCallable</code> is not likely to be widely popular, but it <em>is</em> hugely important for a small number of people who want interactivity with Python, JavaScript, and other languages.</p>`,24),x={class:"hint-container details"},D=n("summary",null,"Other Changes in Swift 5.0",-1),A={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-2-to-5-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function I(p,R){const s=i("VPCard"),l=i("FontIcon");return k(),r("div",null,[n("h1",g,[n("a",f,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),a(s,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,w,a(s,e(t({title:"Dynamically callable types | Changes in Swift 5.0",desc:"Dynamically callable types",link:"https://hackingwithswift.com/swift/5.0/dynamically-callable-types",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",v,[o("SE-0216 ("),a(l,{icon:"iconfont icon-github"}),_,o(")")]),o(" adds a new "),C,o(" attribute to Swift, which brings with it the ability to mark a type as being directly callable. It’s syntactic sugar rather than any sort of compiler magic, effectively transforming this code:")]),S,n("details",x,[D,a(s,e(t({title:"Raw strings | Changes in Swift 5.0",desc:"Raw strings",link:"/hackingwithswift.com/swift/5.0/raw-strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"A standard Result type | Changes in Swift 5.0",desc:"A standard Result type",link:"/hackingwithswift.com/swift/5.0/result.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"Customizing string interpolation | Changes in Swift 5.0",desc:"Customizing string interpolation",link:"/hackingwithswift.com/swift/5.0/string-interpolation.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Dynamically callable types | Changes in Swift 5.0",
  "desc": "Dynamically callable types",
  "link": "/hackingwithswift.com/swift/5.0/dynamically-callable-types.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),a(s,e(t({title:"Handling future enum cases | Changes in Swift 5.0",desc:"Handling future enum cases",link:"/hackingwithswift.com/swift/5.0/handling-future-enum-cases.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"Flattening nested optionals resulting from try? | Changes in Swift 5.0",desc:"Flattening nested optionals resulting from try?",link:"/hackingwithswift.com/swift/5.0/flattening-optionals.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"Checking for integer multiples | Changes in Swift 5.0",desc:"Checking for integer multiples",link:"/hackingwithswift.com/swift/5.0/integer-multiples.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,e(t({title:"Transforming and unwrapping dictionary values with compactMapValues() | Changes in Swift 5.0",desc:"Transforming and unwrapping dictionary values with compactMapValues()",link:"/hackingwithswift.com/swift/5.0/compactmapvalues.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",A,[a(l,{icon:"fas fa-file-zipper"}),o("Download Swift 5.0 playground")])])])])}const K=c(h,[["render",I],["__file","dynamically-callable-types.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/swift/5.0/dynamically-callable-types.html","title":"Dynamically callable types","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Dynamically callable types","description":"Article(s) > Dynamically callable types","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Dynamically callable types"},{"property":"og:description","content":"Dynamically callable types"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/dynamically-callable-types.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/dynamically-callable-types.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Dynamically callable types"}],["meta",{"property":"og:description","content":"Article(s) > Dynamically callable types"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dynamically callable types\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.55,"words":1064},"filePathRelative":"hackingwithswift.com/swift/5.0/dynamically-callable-types.md","excerpt":"\\n"}');export{K as comp,T as data};
