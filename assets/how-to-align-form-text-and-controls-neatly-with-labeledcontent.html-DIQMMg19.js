import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as u,e as s,n as e,g as i,d as t,f as l,r as c,o as m}from"./app-BgNevrm5.js";const h={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),b=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI&#39;s forms do a great job of making many views look good out of the box, but sometimes you need a little extra control to get exactly the right result – aligning text correctly, labelling custom views, or aligning controls that don&#39;t carry labels such as <code>Slider</code>.</p><p>In its simplest form, using <code>LabeledContent</code> is similar to using the <code>badge()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">LabeledContent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is important&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Value goes here&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent-1.zip",target:"_blank",rel:"noopener noreferrer"},y=l(`<p>This will place the title on the leading edge of the screen and the value on the trailing edge. The alignment will automatically adjust depending on your platform: iOS left aligns the title and right aligns the value, whereas macOS <em>right</em> aligns the title and <em>left</em> aligns the value. This is particularly important for forms on macOS, where other view types such as <code>TextField</code> and <code>Toggle</code> automatically align their title and value, whereas <code>Slider</code> would not.</p><p>On iOS this use of <code>LabeledContent</code> gives the same result as using <code>Text(&quot;This is important&quot;).badge(&quot;Value goes here&quot;)</code>, but the real power of <code>LabeledContent</code> is that it can take any view, whereas badges accepts only text and numbers.</p><p>So, we could use <code>LabeledContent</code> to show an image by passing a custom content closure:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">LabeledContent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is important&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;exclamationmark.triangle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent-2.zip",target:"_blank",rel:"noopener noreferrer"},_=l(`<p>But more importantly, we can also use it with any views that would not normally have a label, such as <code>Slider</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> brightness <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">LabeledContent</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $brightness<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Brightness&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent-3.zip",target:"_blank",rel:"noopener noreferrer"},S=l(`<p>This is particularly important on macOS, because it was place the label on the left-hand side of the form and the slider on the right.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>At the time of writing, some SwiftUI views such as <code>Stepper</code> will <em>not</em> use the title of your <code>LabeledContent</code> for VoiceOver. This makes them rather opaque in terms of accessibility support, so you should use them carefully.</p></div><p>If the title of your <code>LabeledContent</code> includes two pieces of text, iOS will automatically render the second text in a smaller, lighter font, making it look like a subtitle:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">LabeledContent</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Value&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Title&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Subtitle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),C={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent-4.zip",target:"_blank",rel:"noopener noreferrer"},T=l(`<p>In fact, it supports up to four pieces of text using this approach, with each one rendered smaller and lighter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">LabeledContent</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Value&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Title&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Subtitle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Subsubtitle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Subsubsubtitle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),L={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent-5.zip",target:"_blank",rel:"noopener noreferrer"},I=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"Tips"),n("p",null,[t("If you apply the "),n("code",null,"labelsHidden()"),t(" modifier to any "),n("code",null,"LabeledContent"),t(", the label title will be hidden while leaving the content visible.")])],-1),j={class:"hint-container details"},U=n("summary",null,"Similar solutions…",-1);function V(p,H){const a=c("VPCard"),o=c("FontIcon");return m(),d("div",null,[n("h1",g,[n("a",w,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),s(a,e(i({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,f,s(a,e(i({title:"How to align form text and controls neatly with LabeledContent | SwiftUI by Example",desc:"How to align form text and controls neatly with LabeledContent",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",v,[s(o,{icon:"fas fa-file-zipper"}),t("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",x,[s(o,{icon:"fas fa-file-zipper"}),t("Download this as an Xcode project")])])]),_,n("blockquote",null,[n("p",null,[n("a",q,[s(o,{icon:"fas fa-file-zipper"}),t("Download this as an Xcode project")])])]),S,n("blockquote",null,[n("p",null,[n("a",C,[s(o,{icon:"fas fa-file-zipper"}),t("Download this as an Xcode project")])])]),T,n("blockquote",null,[n("p",null,[n("a",L,[s(o,{icon:"fas fa-file-zipper"}),t("Download this as an Xcode project")])])]),I,n("details",j,[U,s(a,e(i({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(i({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(i({title:"Building a menu using List | SwiftUI by Example",desc:"Building a menu using List",link:"/hackingwithswift.com/swiftui/building-a-menu-using-list.html",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(i({title:"Basic form design | SwiftUI by Example",desc:"Basic form design",link:"/hackingwithswift.com/swiftui/basic-form-design.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(i({title:"Showing and hiding form rows | SwiftUI by Example",desc:"Showing and hiding form rows",link:"/hackingwithswift.com/swiftui/showing-and-hiding-form-rows.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const B=r(h,[["render",V],["__file","how-to-align-form-text-and-controls-neatly-with-labeledcontent.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent.html","title":"How to align form text and controls neatly with LabeledContent","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to align form text and controls neatly with LabeledContent","description":"Article(s) > How to align form text and controls neatly with LabeledContent","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to align form text and controls neatly with LabeledContent"},{"property":"og:description","content":"How to align form text and controls neatly with LabeledContent"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to align form text and controls neatly with LabeledContent"}],["meta",{"property":"og:description","content":"Article(s) > How to align form text and controls neatly with LabeledContent"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to align form text and controls neatly with LabeledContent\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftui/working-with-containers.md"},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.88,"words":863},"filePathRelative":"hackingwithswift.com/swiftui/how-to-align-form-text-and-controls-neatly-with-labeledcontent.md","excerpt":"\\n"}');export{B as comp,E as data};
