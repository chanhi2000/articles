import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as a,n as t,g as e,d as i,a as d,f as m,r as l,o as g}from"./app-BgNevrm5.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.0")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),V=n("code",null,"compactMapValues()",-1),q=n("code",null,"compactMap()",-1),C=n("code",null,"mapValues()",-1),M=m(`<p>As an example, here’s a dictionary of people in a race, along with the times they took to finish in seconds. One person did not finish, marked as “DNF”:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> times <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Hudson&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;38&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Clarke&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;42&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Robinson&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;35&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Hartis&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;DNF&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can use <code>compactMapValues()</code> to create a new dictionary with names and times as an integer, with the one DNF person removed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> finishers1 <span class="token operator">=</span> times<span class="token punctuation">.</span>compactMapValues <span class="token punctuation">{</span> <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Alternatively, you could just pass the <code>Int</code> initializer directly to <code>compactMapValues()</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> finishers2 <span class="token operator">=</span> times<span class="token punctuation">.</span><span class="token function">compactMapValues</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can also use <code>compactMapValues()</code> to unwrap optionals and discard nil values without performing any sort of transformation, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> people <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Sophie&quot;</span></span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Charlotte&quot;</span></span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;William&quot;</span></span><span class="token punctuation">:</span> <span class="token nil constant">nil</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> knownAges <span class="token operator">=</span> people<span class="token punctuation">.</span>compactMapValues <span class="token punctuation">{</span> <span class="token short-argument">$0</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),S={class:"hint-container details"},T=n("summary",null,"Other Changes in Swift 5.0",-1),A={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-2-to-5-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function x(c,R){const s=l("VPCard"),o=l("FontIcon");return g(),r("div",null,[n("h1",f,[n("a",w,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,v,a(s,t(e({title:"Transforming and unwrapping dictionary values with compactMapValues() | Changes in Swift 5.0",desc:"Transforming and unwrapping dictionary values with compactMapValues()",link:"https://hackingwithswift.com/swift/5.0/compactmapvalues",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",y,[i("SE-0218 ("),a(o,{icon:"iconfont icon-github"}),_,i(")")]),i(" adds a new "),V,i(" method to dictionaries, bringing together the "),q,i(" functionality from arrays (“transform my values, unwrap the results, then discard anything that’s nil”) with the "),C,i(" method from dictionaries (“leave my keys intact but transform my values”).")]),M,n("details",S,[T,a(s,t(e({title:"Raw strings | Changes in Swift 5.0",desc:"Raw strings",link:"/hackingwithswift.com/swift/5.0/raw-strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"A standard Result type | Changes in Swift 5.0",desc:"A standard Result type",link:"/hackingwithswift.com/swift/5.0/result.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"Customizing string interpolation | Changes in Swift 5.0",desc:"Customizing string interpolation",link:"/hackingwithswift.com/swift/5.0/string-interpolation.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"Dynamically callable types | Changes in Swift 5.0",desc:"Dynamically callable types",link:"/hackingwithswift.com/swift/5.0/dynamically-callable-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"Handling future enum cases | Changes in Swift 5.0",desc:"Handling future enum cases",link:"/hackingwithswift.com/swift/5.0/handling-future-enum-cases.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"Flattening nested optionals resulting from try? | Changes in Swift 5.0",desc:"Flattening nested optionals resulting from try?",link:"/hackingwithswift.com/swift/5.0/flattening-optionals.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"Checking for integer multiples | Changes in Swift 5.0",desc:"Checking for integer multiples",link:"/hackingwithswift.com/swift/5.0/integer-multiples.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Transforming and unwrapping dictionary values with compactMapValues() | Changes in Swift 5.0",
  "desc": "Transforming and unwrapping dictionary values with compactMapValues()",
  "link": "/hackingwithswift.com/swift/5.0/compactmapvalues.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n("p",null,[n("a",A,[a(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.0 playground")])])])])}const F=p(h,[["render",x],["__file","compactmapvalues.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/swift/5.0/compactmapvalues.html","title":"Transforming and unwrapping dictionary values with compactMapValues()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Transforming and unwrapping dictionary values with compactMapValues()","description":"Article(s) > Transforming and unwrapping dictionary values with compactMapValues()","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Transforming and unwrapping dictionary values with compactMapValues()"},{"property":"og:description","content":"Transforming and unwrapping dictionary values with compactMapValues()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/compactmapvalues.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.0/compactmapvalues.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Transforming and unwrapping dictionary values with compactMapValues()"}],["meta",{"property":"og:description","content":"Article(s) > Transforming and unwrapping dictionary values with compactMapValues()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Transforming and unwrapping dictionary values with compactMapValues()\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swift/4.2/caseiterable.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.87,"words":561},"filePathRelative":"hackingwithswift.com/swift/5.0/compactmapvalues.md","excerpt":"\\n"}');export{F as comp,I as data};
