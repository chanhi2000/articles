import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as e,g as p,d as a,f as i,r as o,o as k}from"./app-BgNevrm5.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),f=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>If you&#39;re using the <code>@Query</code> property wrapper to load your data, the only way to test your app is by writing UI tests. That macro relies on SwiftUI running, so you&#39;ll need to display your views and make assertions directly against them.</p><p>First, we need a model to test with. This creates a <code>Movie</code> model with three properties plus an initializer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> director<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>director <span class="token operator">=</span> director</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>releaseYear <span class="token operator">=</span> releaseYear</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, we need to inject that into our app&#39;s environment using the <code>modelContainer()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">modelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And third we need a sample SwiftUI view to test, such as this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Directed by: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">movie<span class="token punctuation">.</span>director</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;MovieDB&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add Samples&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> addSamples<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    </span>
<span class="line">        <span class="token keyword">let</span> redOctober <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;The Hunt for Red October&quot;</span></span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;John McTiernan&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> sneakers <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sneakers&quot;</span></span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Phil Alden Robinson&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">1992</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> endLiss <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Endliss Possibilities: The Casey Liss Story&quot;</span></span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Erin Liss&quot;</span></span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token number">2006</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>redOctober<span class="token punctuation">)</span></span>
<span class="line">        modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sneakers<span class="token punctuation">)</span></span>
<span class="line">        modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>endLiss<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),g=n("code",null,"[New]",-1),y=n("code",null,"[Target]",-1),q=i(`<p>The first UI test we&#39;ll write is simple enough: when the app is first launched there should be 0 movies in the list.</p><p>Add this to your <code>XCTestCase</code> subclass:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testAppStartsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token class-name">XCUIApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>cells<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 0 movies when the app is first launched.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That should pass just fine, so next we can write a test to check that there are 3 list rows once all the sample data has been added:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testAppCreatingSamplesWorks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token class-name">XCUIApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span>buttons<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Add Samples&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>cells<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 3 movies after adding sample data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That should pass too.</p><p>However, there&#39;s a problem: if you now run the <code>testAppStartsEmpty()</code> again you&#39;ll see it fails, because now there are three rows when the app launches.</p><p>This is where you need to introduce an important UI testing technique for SwiftData: your tests should always run in memory rather than writing to permanent storage, so that each time the tests start you have a clean slate.</p><p>We can&#39;t access our app&#39;s internals directly because this is a UI test rather than a unit test, but we <em>can</em> pass a custom launch argument then use that to adjust the way our app loads.</p><p>First modify the <code>testAppStartsEmpty()</code> method to add this line before the call to <code>launch()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">app<span class="token punctuation">.</span>launchArguments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;enable-testing&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That injects a special &quot;enable-testing&quot; string into the app&#39;s launch arguments, which we can check for at runtime.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>You should check for this launch argument only when the <code>#DEBUG</code> compilation condition is present, to avoid others activating test mode in the release version of your app.</p></div><p>We can now adjust our <code>App</code> struct so that we check for the &quot;enable-testing&quot; launch argument, and if it exists use an in-memory store:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">MovieTestsApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> modelContainer<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">modelContainer</span><span class="token punctuation">(</span>modelContainer<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> inMemory <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#if</span> DEBUG</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token class-name">CommandLine</span><span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;enable-testing&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            inMemory <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> configuration <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> isStoredInMemoryOnly<span class="token punctuation">:</span> inMemory<span class="token punctuation">)</span></span>
<span class="line">            modelContainer <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> configuration<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to load model container.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will solve the problem, but it also means we need to set the correct <code>launchArguments</code> value for every UI tests.</p><p>Honestly, that&#39;s exactly the kind of thing you&#39;re going to screw up sooner or later, so if I were you I&#39;d centralize creating and configuring your <code>XCUIApplication</code> in the <code>setUpWithError()</code> method, which automatically gets called before every tests.</p><p>So, your code would look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MovieTestsUITests</span><span class="token punctuation">:</span> <span class="token class-name">XCTestCase</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> app<span class="token punctuation">:</span> <span class="token class-name">XCUIApplication</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">setUpWithError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        continueAfterFailure <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        app <span class="token operator">=</span> <span class="token class-name">XCUIApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        app<span class="token punctuation">.</span>launchArguments <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;enable-testing&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">testAppStartsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>cells<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 0 movies when the app is first launched.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">testCreatingSamplesWorks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        app<span class="token punctuation">.</span>buttons<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Add Samples&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>cells<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 3 movies after adding sample data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point both our tests will pass repeatedly, and we&#39;re no longer stomping over any stored data in our app because it&#39;s all in memory.</p><p>We can write one more, this time building on a previous test so that we add some sample data, check that it worked, then <em>clear</em> the sample data and verify it&#39;s gone:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testClearingDataWorks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">testAppCreatingSamplesWorks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span>buttons<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Clear&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>cells<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;There should be 0 movies after deleting all data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, we&#39;re effectively testing SwiftData indirectly:</p><ol><li>We manipulate the UI like a user would</li><li>SwiftData silently updates our <code>@Query</code> property.</li><li>SwiftUI spots that change and reinvokes its <code>body</code> property.</li><li>We then make assertions against the updated UI state.</li></ol>`,24);function S(l,C){const t=o("VPCard"),c=o("FontIcon");return k(),r("div",null,[n("h1",v,[n("a",h,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(t,e(p({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,b,s(t,e(p({title:"How to write UI tests for your SwiftData code | SwiftData by Example",desc:"How to write UI tests for your SwiftData code",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-write-ui-tests-for-your-swiftdata-code",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,n("p",null,[a("That's our setup complete, so now we can focus on writing some UI tests. Go to the File menu and choose "),s(c,{icon:"iconfont icon-select"}),g,a(" > "),y,a(", then select UI Testing Bundle and click Next. The default values provided by Xcode are fine, so click Finish to create the test bundle, then open the UI tests file for editing.")]),q])}const A=u(m,[["render",S],["__file","how-to-write-ui-tests-for-your-swiftdata-code.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-write-ui-tests-for-your-swiftdata-code.html","title":"How to write UI tests for your SwiftData code","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to write UI tests for your SwiftData code","description":"Article(s) > How to write UI tests for your SwiftData code","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to write UI tests for your SwiftData code"},{"property":"og:description","content":"How to write UI tests for your SwiftData code"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-write-ui-tests-for-your-swiftdata-code.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-write-ui-tests-for-your-swiftdata-code.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to write UI tests for your SwiftData code"}],["meta",{"property":"og:description","content":"Article(s) > How to write UI tests for your SwiftData code"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to write UI tests for your SwiftData code\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.48,"words":1043},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-write-ui-tests-for-your-swiftdata-code.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{A as comp,U as data};
