import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as d,g as k,w as e,f as m,r as p,o as h,d as t}from"./app-BgNevrm5.js";const v={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},g=n("hr",null,null,-1),f=m(`<p>In this week&#39;s newsletter I want to talk about the <code>yield</code> keyword in <strong>C#</strong>. I think it&#39;s a powerful <strong>C#</strong> feature and I wanted to highlight the benefits.</p><p>The <code>yield</code> keyword tells the compiler that the method in which it appears is an <strong>iterator block</strong>. An iterator block, or method, returns an <code>IEnumerable</code> as the result. And the <code>yield</code> keyword is used to return the values for the <code>IEnumerable</code>.</p><p>An interesting thing aboug <code>IEnumerable</code> is that it is lazily evaluted. Calling a method with an iterator block doesn&#39;t run any code. It&#39;s only when the <code>IEnumerable</code> is iterated over, or enumerated, that we get the actual values. I&#39;ll talk about this more later.</p><p>Let&#39;s see how we can start using the <code>yield</code> keyword!</p><hr><h2 id="how-to-use-the-yield-keyword" tabindex="-1"><a class="header-anchor" href="#how-to-use-the-yield-keyword"><span>How To Use The Yield Keyword</span></a></h2><p>The <code>yield</code> keyword on it&#39;s own doesn&#39;t do anything, you have to combine it with the <code>return</code> or <code>break</code> statement:</p><ul><li><code>yield return</code>: provides the next value of the iterator</li><li><code>yield-break</code>: signals the end of iteration</li></ul><p>In every project I worked on, there&#39;s a piece of code similar to the following. You create a list to hold the results, add elements to the list, and return the list in the end.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> engineers <span class="token operator">=</span> <span class="token function">GetSoftwareEngineers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>SoftwareEngineer<span class="token punctuation">&gt;</span></span> <span class="token function">GetSoftwareEngineers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SoftwareEngineer<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        result<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoftwareEngineer</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> i</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can simplify the method using the <code>yield return</code> statement, and completely remove the intermediate list required to hold the results.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> engineers <span class="token operator">=</span> <span class="token function">GetSoftwareEngineers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>SoftwareEngineer<span class="token punctuation">&gt;</span></span> <span class="token function">GetSoftwareEngineers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoftwareEngineer</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> i</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, it&#39;s important to note these two implementation are fundamentally different from each other. In the first example, the entire list is populated and materialized. In the second example, the <code>IEnumerable</code> returned will not be materialized and you have to either iterate over it inside a <code>foreach</code> loop or call <code>ToList()</code>.</p><hr><h2 id="stopping-iteration-with-yield-break" tabindex="-1"><a class="header-anchor" href="#stopping-iteration-with-yield-break"><span>Stopping Iteration With Yield Break</span></a></h2><p>You can use the <code>yield break</code> statement to stop iteration and exit the iterator block. Typically you would do this when a certain condition is met, or you only want to return a specific set of values from the iterator block.</p><p>Here&#39;s an example where this would be useful:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">,</span> <span class="token function">TakeWhilePositive</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Output: 1, 2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">TakeWhilePositive</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> numbers<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num <span class="token keyword">in</span> numbers<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">yield</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="working-with-iasyncenumerable" tabindex="-1"><a class="header-anchor" href="#working-with-iasyncenumerable"><span>Working With IAsyncEnumerable</span></a></h2><p>In <strong>C# 8</strong> we got the <code>IAsyncEnumerable</code> type which allows us to iterate over a collection asynchronously with the <code>yield</code> statement.</p><p>For example, this can be useful when you want to call a thid-party API multiple times to fetch some data. A common situation is when you get a list of users from the database, and then have to call an external storage service to get profile picture information.</p><p>Without <code>IAsyncEnumerable</code> you would have to do something like this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUsersAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetUsersFromDbAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token keyword">in</span> users<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        user<span class="token punctuation">.</span>ProfileImage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetProfileImageAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> users<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// And you would call the method like this.</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetUsersAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token keyword">in</span> users<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, consider this same example with the use of <code>IAsyncEnumerable</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">IAsyncEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">GetUsersAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetUsersFromDbAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token keyword">in</span> users<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        user<span class="token punctuation">.</span>ProfileImage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetProfileImageAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// And you would call the method like this.</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token keyword">in</span> <span class="token function">GetUsersAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second implementation will iterate over the users returned from the database when they are yielded by the <code>IAsyncEnumerable</code>.</p><hr><h2 id="when-should-i-use-yield" tabindex="-1"><a class="header-anchor" href="#when-should-i-use-yield"><span>When Should I Use Yield?</span></a></h2><p>I&#39;ve found a few interesting practical applications for the <code>yield</code> keyword. One example is when implementing Domain-Driven Design value objects.</p><p>Value objects need to support structural equality. They need to implement a method that returns all of the equality components. Here&#39;s an example of that using the <code>yield return</code> statement:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Street <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Zip <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Country <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetEqualityComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> City<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> Street<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> Zip<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> Country<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function I(o,A){const i=p("VPCard"),a=p("router-link"),l=p("SiteInfo");return h(),r("div",null,[n("h1",y,[n("a",w,[n("span",null,u(o.$frontmatter.title)+" 관련",1)])]),s(i,d(k({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",b,[n("ul",null,[n("li",null,[s(a,{to:"#how-to-use-the-yield-keyword"},{default:e(()=>[t("How To Use The Yield Keyword")]),_:1})]),n("li",null,[s(a,{to:"#stopping-iteration-with-yield-break"},{default:e(()=>[t("Stopping Iteration With Yield Break")]),_:1})]),n("li",null,[s(a,{to:"#working-with-iasyncenumerable"},{default:e(()=>[t("Working With IAsyncEnumerable")]),_:1})]),n("li",null,[s(a,{to:"#when-should-i-use-yield"},{default:e(()=>[t("When Should I Use Yield?")]),_:1})])])]),g,s(l,{name:"How To Implement API Key Authentication In ASP.NET Core",desc:"In this week's newsletter I want to show you how to implement API Key authentication in ASP.NET Core. This authentication approach uses an API Key to authenticate the client of an API. You can pass the API Key to the API in a few ways, such as through the query string or a request header. I will show you how to implement API Key authentication where the API key is passed in a request header. But the implementation would be similar if we were to use any other approach. When would you want to use API Key authentication? This kind of authentication mechanism is common in Server-to-Server (S2S) communication. When your API serves request for other server-side applications to consume and integrate with. It's less common in client-server communication scenarios.",url:"https://milanjovanovic.tech/blog/csharp-yield-return-statement/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_022.png"}),f])}const T=c(v,[["render",I],["__file","how-to-implement-api-key-authentication-in-aspnet-core.html.vue"]]),_=JSON.parse('{"path":"/milanjovanovic.tech/how-to-implement-api-key-authentication-in-aspnet-core.html","title":"How To Implement API Key Authentication In ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Implement API Key Authentication In ASP.NET Core","description":"Article(s) > How To Implement API Key Authentication In ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How To Implement API Key Authentication In ASP.NET Core"},{"property":"og:description","content":"How To Implement API Key Authentication In ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/csharp-yield-return-statement.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-implement-api-key-authentication-in-aspnet-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Implement API Key Authentication In ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > How To Implement API Key Authentication In ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_022.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_022.png"}],["meta",{"name":"twitter:image:alt","content":"How To Implement API Key Authentication In ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2023-01-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Implement API Key Authentication In ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_022.png\\"],\\"datePublished\\":\\"2023-01-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2023-01-28T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_022.png"},"headers":[{"level":2,"title":"How To Use The Yield Keyword","slug":"how-to-use-the-yield-keyword","link":"#how-to-use-the-yield-keyword","children":[]},{"level":2,"title":"Stopping Iteration With Yield Break","slug":"stopping-iteration-with-yield-break","link":"#stopping-iteration-with-yield-break","children":[]},{"level":2,"title":"Working With IAsyncEnumerable","slug":"working-with-iasyncenumerable","link":"#working-with-iasyncenumerable","children":[]},{"level":2,"title":"When Should I Use Yield?","slug":"when-should-i-use-yield","link":"#when-should-i-use-yield","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.31,"words":994},"filePathRelative":"milanjovanovic.tech/how-to-implement-api-key-authentication-in-aspnet-core.md","localizedDate":"2023년 1월 28일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{T as comp,_ as data};
