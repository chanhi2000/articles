import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as s,t as c,e as a,n as e,g as t,f as l,r,o as u}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=s("nav",{class:"table-of-contents"},[s("ul")],-1),h=s("hr",null,null,-1),w=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData’s <code>#Predicate</code> macro lets us filter a wide variety of operations: data loaded through <code>@Query</code>, custom <code>FetchDescriptor</code> configurations, and also deleting lots of model objects using <code>delete(model:)</code> on a model context. All work in exactly the same way: we’re given one object of our model type, and need to return true or false depending on whether that object should be in the final results.</p><p>For example, if we had <code>Movie</code> and <code>Director</code> models, we could load all movies directed by Ridley Scott like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>director<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Ridley Scott&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p><code>#Predicate</code> works almost identically in each of those three cases, so although the examples given here use <code>@Query</code> they are almost identical elsewhere. The only actual difference is that <code>@Query</code> sometimes struggles to get type inference correct, so we need to specify <code>#Predicate&lt;SomeModelType&gt;</code> explicitly there.</p><p>There are a handful of important things to know about using <code>#Predicate</code>.</p><p>First, it’s a macro that converts your Swift code into a serious of <code>PredicateExpressions</code> objects. This means your predicate is checked at compile time for type safety, unlike the older <code>NSPredicate</code> from Core Data.</p><p>This means what looks like pure Swift code is in fact being evaluated and converted into something else entirely – something that SwiftData can ultimately convert to SQL to run with its queries.</p><p><strong>This process isn’t perfect.</strong> Some things that are type-safe will crash at runtime, sometimes you’ll find two almost identical predicates will behave differently, and many things just aren’t supported.</p><p>We can use predicates to filter strings using <code>contains()</code>, so this would return all three Back to the Future movies:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">starts</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Back to the Future&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>starts(with:)</code> is supported in predicates, but <code>hasPrefix()</code> and <code>hasSuffix()</code> are not.</p></div></div><p>String comparisons such as <code>starts(with:)</code> and <code>contains()</code> are case-sensitive. If you try using <code>movie.name.uppercased()</code> you’ll find <code>uppercased()</code> (and <code>lowercased()</code>) aren’t supported in predicates, and if you try using <code>movie.name.localizedUppercase</code> that <em>does</em> compile but then crashes at runtime.</p><p>Instead, you should perform a case-insensitive case search like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localizedStandardContains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;JAWS&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can create predicates that depend on relationships, for example showing only movies with a small cast:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">10</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, again here you need to be careful. This will work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>isEmpty</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But this will cause a crash at runtime:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>isEmpty <span class="token operator">==</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cunningly, this will actually build and run correctly:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    <span class="token operator">!</span>movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>isEmpty</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, that’s the same as writing <code>movie.cast.isEmpty == false</code>, but because it gets built differently by the <code>#Predicate</code> macro the result is a valid predicate.</p><p>If you need more complex logic, you can nest <code>if</code> conditions to a degree. For example, if we wanted to show all Steven Spielberg movies that cost more than $100,000,000 to make, we could use this predicate:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>director<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Steven&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> movie<span class="token punctuation">.</span>cost <span class="token operator">&gt;</span> <span class="token number">100_000_000</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, we <em>can’t</em> simplify that code to have a single <code>return</code> false, because predicates must be made up of a single expression. So this kind of code won’t compile:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>director<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Steven&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> movie<span class="token punctuation">.</span>cost <span class="token operator">&gt;</span> <span class="token number">100_000_000</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead, we need to use Boolean operators such as AND (<code>&amp;&amp;</code>) and OR (<code>||</code>) to phrase our conditions in a single expression, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>director<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Steven&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> movie<span class="token punctuation">.</span>cost <span class="token operator">&gt;</span> <span class="token number">100_000_000</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use a subset of relationship-querying methods. For example, if you wanted to avoid movies with Tom Cruise you would use this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token operator">!</span>movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>contains <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Again, using <code>== false</code> rather than <code>!</code> will crash at runtime.</p><p>This also works if you want to refer to properties from the parent object. For example, this finds all movies where the director is also one of the acting cast:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>contains <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>name <span class="token operator">==</span> movie<span class="token punctuation">.</span>director<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> directorsWhoActMovies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or you can use <code>filter()</code>, for example to search for movies that contain at least three child actors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>count <span class="token operator">&gt;=</span> <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, I’ve found that attempting to read any deeper properties inside these relationship-querying methods will fail. For example, looking for movies where everyone has relatively short names will always silently fail even when there is matching data:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>allSatisfy <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span>count <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or making a predicate to find movies where no cast member has been in more than three movies – this will also fail, except it will do so loudly with a full crash:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>cast<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>movies<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>isEmpty</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One last thing to be aware of is that when you’re using <code>@Query</code> you’ll find it difficult to refer to external values.</p><p>For example, if you want to look for movies that haven’t been released yet, you need to be able to compare against <code>Date.now</code>. However, we can’t create predicates that rely on external values, so we need to create a local copy of <code>Date.now</code> in order for it to be converted correctly:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">var</span> now<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>releaseDate <span class="token operator">&gt;</span> now</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">var</span> unreleasedMovies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you’re using <code>FetchDescriptor</code> or <code>delete(model:)</code>, just creating a local copy using <code>let now = Date.now</code> is enough.</p>`,38);function f(p,g){const n=r("VPCard");return u(),i("div",null,[s("h1",k,[s("a",m,[s("span",null,c(p.$frontmatter.title)+" 관련",1)])]),a(n,e(t({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,h,a(n,e(t({title:"How to filter SwiftData results with predicates | SwiftData by Example",desc:"How to filter SwiftData results with predicates",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-filter-swiftdata-results-with-predicates",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const x=o(d,[["render",f],["__file","how-to-filter-swiftdata-results-with-predicates.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-filter-swiftdata-results-with-predicates.html","title":"How to filter SwiftData results with predicates","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to filter SwiftData results with predicates","description":"Article(s) > How to filter SwiftData results with predicates","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to filter SwiftData results with predicates"},{"property":"og:description","content":"How to filter SwiftData results with predicates"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-filter-swiftdata-results-with-predicates.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-filter-swiftdata-results-with-predicates.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to filter SwiftData results with predicates"}],["meta",{"property":"og:description","content":"Article(s) > How to filter SwiftData results with predicates"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to filter SwiftData results with predicates\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.7,"words":1109},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-filter-swiftdata-results-with-predicates.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{x as comp,S as data};
