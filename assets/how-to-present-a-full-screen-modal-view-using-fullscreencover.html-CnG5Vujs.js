import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as r,e as s,n as a,g as t,f as u,r as i,o as d}from"./app-BgNevrm5.js";const m={},w={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),v=u(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI’s <code>fullScreenCover()</code> modifier gives us a presentation style for times when you want to cover as much of the screen as possible, and in code it works almost identically to regular sheets.</p><p>Regular sheets can be dismissed by dragging downwards on them, but that isn’t possible with views presented using <code>fullScreenCover()</code>. As a result, it’s important you provide a way to dismiss the presented view, probably using the <code>dismiss</code> environment key.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p><code>fullScreenCover()</code> is not available on macOS.</p></div><p>For example, this defines a simple <code>FullScreenModalView</code> struct that can dismiss itself, then presents it from <code>ContentView</code> when another button is pressed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">FullScreenModalView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>dismiss<span class="token punctuation">)</span> <span class="token keyword">var</span> dismiss</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ZStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Color</span><span class="token punctuation">.</span>primary<span class="token punctuation">.</span><span class="token function">edgesIgnoringSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dismiss Modal&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isPresented <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Present!&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            isPresented<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">fullScreenCover</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isPresented<span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token class-name">FullScreenModalView</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),f={class:"hint-container details"},b=n("summary",null,"Similar solutions…",-1);function y(o,S){const e=i("VPCard"),l=i("VidStack");return d(),p("div",null,[n("h1",w,[n("a",k,[n("span",null,r(o.$frontmatter.title)+" 관련",1)])]),s(e,a(t({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,g,s(e,a(t({title:"How to present a full screen modal view using fullScreenCover() | SwiftUI by Example",desc:"How to present a full screen modal view using fullScreenCover()",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,s(l,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover-1~dark.mp4"}),n("details",f,[b,s(e,a(t({title:"How to present a new view using sheets | SwiftUI by Example",desc:"How to present a new view using sheets",link:"/hackingwithswift.com/swiftui/how-to-present-a-new-view-using-sheets.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(t({title:"How to present multiple sheets | SwiftUI by Example",desc:"How to present multiple sheets",link:"/hackingwithswift.com/swiftui/how-to-present-multiple-sheets.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(t({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(t({title:"Displaying a detail screen with NavigationLink | SwiftUI by Example",desc:"Displaying a detail screen with NavigationLink",link:"/hackingwithswift.com/swiftui/displaying-a-detail-screen-with-navigationlink.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(t({title:"How to use decorative images to reduce screen reader clutter | SwiftUI by Example",desc:"How to use decorative images to reduce screen reader clutter",link:"/hackingwithswift.com/swiftui/how-to-use-decorative-images-to-reduce-screen-reader-clutter.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const H=c(m,[["render",y],["__file","how-to-present-a-full-screen-modal-view-using-fullscreencover.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover.html","title":"How to present a full screen modal view using fullScreenCover()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to present a full screen modal view using fullScreenCover()","description":"Article(s) > How to present a full screen modal view using fullScreenCover()","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to present a full screen modal view using fullScreenCover()"},{"property":"og:description","content":"How to present a full screen modal view using fullScreenCover()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to present a full screen modal view using fullScreenCover()"}],["meta",{"property":"og:description","content":"Article(s) > How to present a full screen modal view using fullScreenCover()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to present a full screen modal view using fullScreenCover()\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.7,"words":510},"filePathRelative":"hackingwithswift.com/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover.md","excerpt":"\\n"}');export{H as comp,V as data};
