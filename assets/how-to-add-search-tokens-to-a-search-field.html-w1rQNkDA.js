import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as u,e as n,n as t,g as e,d,f as i,r as o,o as k}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},w=s("nav",{class:"table-of-contents"},[s("ul")],-1),g=s("hr",null,null,-1),f=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 16</strong></p><p>SwiftUI&#39;s <code>searchable()</code> modifier lets us place a search bar directly into a <code>NavigationStack</code>, but along with just free-text search we can also allow the user to select search <em>tokens</em> – pre-filled chunks of text that represent a specific category or filter in your app.</p><p>This isn&#39;t <em>hard</em> to do, but it does require several steps. You need:</p><ul><li>A regular <code>searchable()</code> implementation that filters your results by the user&#39;s search text.</li><li>A custom data type to represent one search token. You can&#39;t just use strings or similar, because SwiftUI requires tokens to conform to <code>Identifiable</code>.</li><li>An array of all the tokens the user can select from. This might be a constant array, or it might be a published array of values that changes our time.</li><li>An array of all the tokens the user has entered. This is a subset of all the tokens, and should be factored into your filtering code.</li><li>Some code to decide how to render a single token in the list. This might be just a <code>Text</code> view, but it doesn&#39;t need to be.</li></ul><p>That might not sound <em>too</em> complex, but there&#39;s an extra wrinkle: the iOS implementation of <code>searchable()</code> will replace your search results with your suggested tokens by default, which makes the default search functionality a lot less useful. So, I prefer to ask users to activate token filtering specifically by starting with a “#” sign, similar to Twitter and Mastodon.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-search-tokens-to-a-search-field-1.png" alt="An iOS search bar showing the Sci-Fi token active, with the search text Incept." tabindex="0" loading="lazy"><figcaption>An iOS search bar showing the Sci-Fi token active, with the search text Incept.</figcaption></figure><p>Anyway, enough talk – here&#39;s a sample implementation of <code>searchable()</code> with token support:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Holds one uniquely identifiable movie.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Movie</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> genre<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Holds one token that we want the user to filter by. This *must* conform to Identifiable.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Token</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Whatever text the user has typed so far.</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> searchText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// All possible tokens we want to show to the user.</span></span>
<span class="line">    <span class="token keyword">let</span> allTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Token</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Action&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Comedy&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Drama&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Family&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sci-Fi&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// The list of tokens the user currently has selected.</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> currentTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Token</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// The list of tokens we want to show to the user right now. Activates token selection only when searchText starts with #.</span></span>
<span class="line">    <span class="token keyword">var</span> suggestedTokens<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Token</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> searchText<span class="token punctuation">.</span><span class="token function">starts</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;#&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> allTokens</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Some data to show and filter by.</span></span>
<span class="line">    <span class="token keyword">let</span> movies <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Avatar&quot;</span></span><span class="token punctuation">,</span> genre<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sci-Fi&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Inception&quot;</span></span><span class="token punctuation">,</span> genre<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sci-Fi&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Love Actually&quot;</span></span><span class="token punctuation">,</span> genre<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Comedy&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Movie</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Paddington&quot;</span></span><span class="token punctuation">,</span> genre<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Family&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// The real work: filter all the movies based on search text or tokens.</span></span>
<span class="line">    <span class="token keyword">var</span> searchResults<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// trim whitespace</span></span>
<span class="line">        <span class="token keyword">let</span> trimmedSearchText <span class="token operator">=</span> searchText<span class="token punctuation">.</span><span class="token function">trimmingCharacters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whitespaces<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> movies<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">if</span> searchText<span class="token punctuation">.</span>isEmpty <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// If we have search text, make sure this item matches.</span></span>
<span class="line">                <span class="token keyword">if</span> movie<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localizedCaseInsensitiveContains</span><span class="token punctuation">(</span>trimmedSearchText<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> currentTokens<span class="token punctuation">.</span>isEmpty <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// If we have search tokens, loop through them all to make sure one of them matches our movie.</span></span>
<span class="line">                <span class="token keyword">for</span> token <span class="token keyword">in</span> currentTokens <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">if</span> token<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localizedCaseInsensitiveContains</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>genre<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// This movie does *not* match any of our tokens, so it shouldn&#39;t be sent back.</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// If we&#39;re still here then the movie should be included.</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>searchResults<span class="token punctuation">)</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Movies+&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $searchText<span class="token punctuation">,</span> tokens<span class="token punctuation">:</span> $currentTokens<span class="token punctuation">,</span> suggestedTokens<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span>suggestedTokens<span class="token punctuation">)</span><span class="token punctuation">,</span> prompt<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Type to filter, or use # for tags&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> token <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-search-tokens-to-a-search-field-1.zip",target:"_blank",rel:"noopener noreferrer"},y=i('<p>There are a few things that are worth pointing out in that code:</p><ul><li>We figure out which tokens to suggest to the user inside a computed property, so we&#39;re able to enable or disable token selection dynamically. SwiftUI expects a binding for the resulting array, so I&#39;ve used <code>.constant(suggestedTokens)</code>.</li><li>We <em>don&#39;t</em> need to filter out the tokens the user has currently selected, because SwiftUI takes care of that automatically.</li><li>The <code>searchable()</code> prompt explicitly tells the user to type a “#” for tags.</li><li>The trailing closure for <code>searchable()</code> lets us tell SwiftUI to render each tag as some text showing its name.</li></ul><p>In practice, I suspect you&#39;re more likely to have multiple tags attached to each piece of data you&#39;re working with, in which case I&#39;d probably prefer Swift&#39;s <code>isSuperset(of:)</code> set operation for comparing the user&#39;s selected tags against those in your object. If you&#39;re working with lots of tokens, I would also suggest you filter your list of suggested tokens based on what the user has typed so far.</p><p>One last thing: although the iOS implementation of <code>searchable()</code> replaces your search results with the suggested tokens, this does <em>not</em> happen on macOS. Instead, your search tokens appear as a popup below the search box, leaving your search results visible at the same time – it&#39;s a much nicer experience.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-search-tokens-to-a-search-field-2.png" alt="A macOS search bar showing the Sci-Fi token active, with a popup menu below showing other available tags." tabindex="0" loading="lazy"><figcaption>A macOS search bar showing the Sci-Fi token active, with a popup menu below showing other available tags.</figcaption></figure>',5),S={class:"hint-container details"},T=s("summary",null,"Similar solutions…",-1);function x(p,q){const a=o("VPCard"),c=o("FontIcon");return k(),r("div",null,[s("h1",m,[s("a",v,[s("span",null,u(p.$frontmatter.title)+" 관련",1)])]),n(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,g,n(a,t(e({title:"How to add search tokens to a search field | SwiftUI by Example",desc:"How to add search tokens to a search field",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-add-search-tokens-to-a-search-field",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,s("blockquote",null,[s("p",null,[s("a",b,[n(c,{icon:"fas fa-file-zipper"}),d("Download this as an Xcode project")])])]),y,s("details",S,[T,n(a,t(e({title:"How to add a search bar to filter your data | SwiftUI by Example",desc:"How to add a search bar to filter your data",link:"/hackingwithswift.com/swiftui/how-to-add-a-search-bar-to-filter-your-data.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to add in-app purchases in SwiftUI | SwiftUI by Example",desc:"How to add in-app purchases in SwiftUI",link:"/hackingwithswift.com/swiftui/how-to-add-in-app-purchases-in-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"Two-way bindings in SwiftUI | SwiftUI by Example",desc:"Two-way bindings in SwiftUI",link:"/hackingwithswift.com/swiftui/two-way-bindings-in-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to add a border to a TextField | SwiftUI by Example",desc:"How to add a border to a TextField",link:"/hackingwithswift.com/swiftui/how-to-add-a-border-to-a-textfield.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to add Metal shaders to SwiftUI views using layer effects | SwiftUI by Example",desc:"How to add Metal shaders to SwiftUI views using layer effects",link:"/hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const A=l(h,[["render",x],["__file","how-to-add-search-tokens-to-a-search-field.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-add-search-tokens-to-a-search-field.html","title":"How to add search tokens to a search field","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to add search tokens to a search field","description":"Article(s) > How to add search tokens to a search field","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to add search tokens to a search field"},{"property":"og:description","content":"How to add search tokens to a search field"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-add-search-tokens-to-a-search-field.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-add-search-tokens-to-a-search-field.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to add search tokens to a search field"}],["meta",{"property":"og:description","content":"Article(s) > How to add search tokens to a search field"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-search-tokens-to-a-search-field-1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to add search tokens to a search field\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-search-tokens-to-a-search-field-1.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-search-tokens-to-a-search-field-2.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.2,"words":1259},"filePathRelative":"hackingwithswift.com/swiftui/how-to-add-search-tokens-to-a-search-field.md","excerpt":"\\n"}');export{A as comp,U as data};
