import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,t as l,e as a,n as t,g as e,f as c,r as u,o as r}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),h=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Although SwiftData was designed with SwiftUI in mind, it works great with UIKit too. However, the same drawbacks apply as when using SwiftData with MVVM in SwiftUI: you&#39;re responsible for fetching and syncing data yourself.</p><p>With UIKit the smartest approach is to use a diffable data source, so that UIKit handles table or collection view updates for you. It&#39;s then your job to update your SwiftData object list whenever something important changes, so that UIKit can sync those changes to your layout.</p><p>Let&#39;s look at a complete code sample.</p><p>First, we need a model to work with, so here&#39;s a simple one that tracks the name and birth year of a user:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftData</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> birthYear<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> birthYear<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>birthYear <span class="token operator">=</span> birthYear</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we need to define the sections we&#39;ll please in or list. We only have one here, but we still need to define it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> users</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now add some properties to your <code>UIViewController</code>: one to store the active model container, one to store a collection view, and one to store your data source:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> container<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> collectionView<span class="token punctuation">:</span> <span class="token class-name">UICollectionView</span><span class="token operator">!</span></span>
<span class="line"><span class="token keyword">var</span> dataSource<span class="token punctuation">:</span> <span class="token class-name">UICollectionViewDiffableDataSource</span><span class="token operator">&lt;</span><span class="token class-name">Section</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">&gt;?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>I&#39;ll be using a collection view in list mode because it provides maximum flexibility with styles, but this approach works equally well with table views.</p></div><p>Now we can add two methods to the view controller: one to create the collection view, making sure it expands to fill the full screen, and another to create the diffable data source, showing it how to display users the way we want.</p><p>Add these two now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createCollectionView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> configuration <span class="token operator">=</span> <span class="token class-name">UICollectionLayoutListConfiguration</span><span class="token punctuation">(</span>appearance<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> layout <span class="token operator">=</span> <span class="token class-name">UICollectionViewCompositionalLayout</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> configuration<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    collectionView <span class="token operator">=</span> <span class="token class-name">UICollectionView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> view<span class="token punctuation">.</span>bounds<span class="token punctuation">,</span> collectionViewLayout<span class="token punctuation">:</span> layout<span class="token punctuation">)</span></span>
<span class="line">    collectionView<span class="token punctuation">.</span>autoresizingMask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>flexibleWidth<span class="token punctuation">,</span> <span class="token punctuation">.</span>flexibleHeight<span class="token punctuation">]</span></span>
<span class="line">    view<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>collectionView<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    collectionView<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">UICollectionViewListCell</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forCellWithReuseIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;User&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    dataSource <span class="token operator">=</span> <span class="token class-name">UICollectionViewDiffableDataSource</span><span class="token operator">&lt;</span><span class="token class-name">Section</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>collectionView<span class="token punctuation">:</span> collectionView<span class="token punctuation">)</span> <span class="token punctuation">{</span> collectionView<span class="token punctuation">,</span> indexPath<span class="token punctuation">,</span> user <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">let</span> cell <span class="token operator">=</span> collectionView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withReuseIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;User&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token class-name">UIListContentConfiguration</span><span class="token punctuation">.</span><span class="token function">cell</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        content<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> was born in </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>birthYear</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span></span>
<span class="line">        cell<span class="token punctuation">.</span>contentConfiguration <span class="token operator">=</span> content</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> cell</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both of those need to be called when our view is loaded, which means writing a <code>loadView()</code> method like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">loadView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">createCollectionView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So far this is almost entirely vanilla UIKit code, but this next part is where SwiftData starts to come in: we need a method that loads all the users from our model container, places them into a diffable data snapshot, then applies that to our data source so our collection view updates</p><p>Add this now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">loadUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> descriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">try</span><span class="token operator">?</span> container<span class="token operator">?</span><span class="token punctuation">.</span>mainContext<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> snapshot <span class="token operator">=</span> <span class="token class-name">NSDiffableDataSourceSnapshot</span><span class="token operator">&lt;</span><span class="token class-name">Section</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    snapshot<span class="token punctuation">.</span><span class="token function">appendSections</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>users<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    snapshot<span class="token punctuation">.</span><span class="token function">appendItems</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span></span>
<span class="line">    dataSource<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">,</span> animatingDifferences<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you want to add sorting or filtering, you need to do it in the initializer for <code>FetchDescriptor</code>.</p></div><p>To finish up, we need to provide a <code>viewDidLoad()</code> method that creates our SwiftData model container and calls <code>loadUsers()</code> for the first time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    container <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">loadUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Although you <em>can</em> create multiple model containers, most people won&#39;t. Instead, create your model container then pass its main context between your views, as needed.</p></div><p>If you want to see it all working, we can add a simple <code>addSamples()</code> method like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> taylor <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span> birthYear<span class="token punctuation">:</span> <span class="token number">1989</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> beyonce <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Beyoncé&quot;</span></span><span class="token punctuation">,</span> birthYear<span class="token punctuation">:</span> <span class="token number">1981</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> ed <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Ed Sheeran&quot;</span></span><span class="token punctuation">,</span> birthYear<span class="token punctuation">:</span> <span class="token number">1991</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    container<span class="token operator">?</span><span class="token punctuation">.</span>mainContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>taylor<span class="token punctuation">)</span></span>
<span class="line">    container<span class="token operator">?</span><span class="token punctuation">.</span>mainContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>beyonce<span class="token punctuation">)</span></span>
<span class="line">    container<span class="token operator">?</span><span class="token punctuation">.</span>mainContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">loadUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can add some more code to <code>viewDidLoad()</code> to configure a navigation bar button. Make sure you embed your view controller in a navigation controller in order to make this toolbar button visible!</p><p>Add this to the end of <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Add Users&quot;</span></span></span>
<span class="line"></span>
<span class="line">navigationItem<span class="token punctuation">.</span>rightBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Add Samples&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>addSamples<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can go ahead and run the app – you&#39;ll see that tapping Add Samples correctly updates the list of users.</p><p>Again, in UIKit it is <em>your</em> responsibility to make sure your data source remains up to date at all times – the <code>@Query</code> macro is not available to do that task for you.</p>`,30);function f(p,b){const s=u("VPCard");return r(),i("div",null,[n("h1",k,[n("a",m,[n("span",null,l(p.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,v,a(s,t(e({title:"How to use SwiftData with UIKit | SwiftData by Example",desc:"How to use SwiftData with UIKit",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-use-swiftdata-with-uikit",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),h])}const S=o(d,[["render",f],["__file","how-to-use-swiftdata-with-uikit.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-use-swiftdata-with-uikit.html","title":"How to use SwiftData with UIKit","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use SwiftData with UIKit","description":"Article(s) > How to use SwiftData with UIKit","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use SwiftData with UIKit"},{"property":"og:description","content":"How to use SwiftData with UIKit"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-use-swiftdata-with-uikit.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-use-swiftdata-with-uikit.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use SwiftData with UIKit"}],["meta",{"property":"og:description","content":"Article(s) > How to use SwiftData with UIKit"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use SwiftData with UIKit\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.78,"words":834},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-use-swiftdata-with-uikit.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{S as comp,U as data};
