import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as a,n as t,g as e,d,f as c,r as o,o as h}from"./app-BgNevrm5.js";const k={},f={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Using async functions in Swift is done in two steps: declaring the function itself as being <code>async</code>, then calling that function using <code>await</code>.</p><p>For example, if we were building an app that wanted to download a whole bunch of temperature readings from a weather station, calculate the average temperature, then upload those results, then we might want to make all three of those async:</p><ol><li>Downloading data from the internet should always be done asynchronously, even a very small download can take a long time if the user has a bad cellphone connection.</li><li>Doing lots of mathematics might run quickly if the system is doing nothing else, but it might also take a long time if you have complex work and the system is busy doing something else.</li><li>Uploading data <em>to</em> the internet suffers from the same networking problems as downloading, and should always be done asynchronously.</li></ol><p>To actually <em>use</em> those functions we would then need to write a fourth function that calls them one by one and prints the response. This function also needs to be async, because in theory the three functions it calls could suspend and so it might also need to be suspended.</p><p>I’m not going to do the actual networking code here, because we’ll be looking a lot at networking later on. Instead, I want to focus on the structure of our functions so you can see how they fit together, so we’ll be using mock data here – random numbers for the weather data, and the string “OK” for our server response.</p><p>Here’s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fetchWeatherHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Double</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">100_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">calculateAverageTemperature</span><span class="token punctuation">(</span><span class="token keyword">for</span> records<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> total <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> average <span class="token operator">=</span> total <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>records<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> average</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">processWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> records <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchWeatherHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> average <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">calculateAverageTemperature</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> records<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">upload</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> average<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Server response: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">response</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">processWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),v={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-create-and-call-an-async-function-1.zip",target:"_blank",rel:"noopener noreferrer"},b=c(`<p>So, we have three simple async functions that fit together to form a sequence: download some data, process that data, then upload the result. That all gets stitched together into a cohesive flow using the <code>processWeather()</code> function, which can then be called from elsewhere.</p><p>That’s not a lot of code, but it <em>is</em> a lot of functionality:</p><ul><li>Every one of those <code>await</code> calls is a potential suspension point, which is why we marked it explicitly. Like I said, one async function can suspend as many times as is needed.</li><li>Swift will run each of the <code>await</code> calls in sequence, waiting for the previous one to complete. This is <em>not</em> going to run several things in parallel.</li><li>Each time an <code>await</code> call finishes, its final value gets assigned to one of our constants – <code>records</code>, <code>average</code>, and <code>response</code>. Once created this is just regular data, no different from if we had created it synchronously.</li><li>Because it calls async functions using <code>await</code>, it is <em>required</em> that <code>processWeather()</code> be itself an async function. If you remove that Swift will refuse to build your code.</li></ul><p>When reading async functions like this one, it’s good practice to look for the <code>await</code> calls because they are all places where unknown other amounts of work might take place before the next line of code executes.</p><p>Think of it a bit like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">processWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> records <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchWeatherHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// anything could happen here</span></span>
<span class="line">    <span class="token keyword">let</span> average <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">calculateAverageTemperature</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> records<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// or here</span></span>
<span class="line">    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">upload</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> average<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// or here</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Server response: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">response</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re only using local variables inside this function, so they are safe. However, if you were relying on properties from a class, for example, they might have changed between each of those <code>await</code> lines.</p><p>Swift provides ways of protecting against this using a system known as <em>actors</em> – more on that much later.</p>`,8),_={class:"hint-container details"},x=n("summary",null,"Similar solutions…",-1);function H(i,S){const s=o("VPCard"),l=o("FontIcon");return h(),r("div",null,[n("h1",f,[n("a",m,[n("span",null,u(i.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,y,a(s,t(e({title:"How to create and call an async function | Swift Concurrency by Example",desc:"How to create and call an async function",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-create-and-call-an-async-function",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("blockquote",null,[n("p",null,[n("a",v,[a(l,{icon:"fas fa-file-zipper"}),d("Download this as an Xcode project")])])]),b,n("details",_,[x,a(s,t(e({title:"How to call an async function using async let | Swift Concurrency by Example",desc:"How to call an async function using async let",link:"/hackingwithswift.com/concurrency/how-to-call-an-async-function-using-async-let.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to fix the error “async call in a function that does not support concurrency” | Swift Concurrency by Example",desc:"How to fix the error “async call in a function that does not support concurrency”",link:"/hackingwithswift.com/concurrency/how-to-fix-the-error-async-call-in-a-function-that-does-not-support-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"Why can’t we call async functions using async var? | Swift Concurrency by Example",desc:"Why can’t we call async functions using async var?",link:"/hackingwithswift.com/concurrency/why-cant-we-call-async-functions-using-async-var.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to call async throwing functions | Swift Concurrency by Example",desc:"How to call async throwing functions",link:"/hackingwithswift.com/concurrency/how-to-call-async-throwing-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"What calls the first async function? | Swift Concurrency by Example",desc:"What calls the first async function?",link:"/hackingwithswift.com/concurrency/what-calls-the-first-async-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const W=p(k,[["render",H],["__file","how-to-create-and-call-an-async-function.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.html","title":"How to create and call an async function","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create and call an async function","description":"Article(s) > How to create and call an async function","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create and call an async function"},{"property":"og:description","content":"How to create and call an async function"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create and call an async function"}],["meta",{"property":"og:description","content":"Article(s) > How to create and call an async function"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create and call an async function\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.5,"words":1051},"filePathRelative":"hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{W as comp,A as data};
