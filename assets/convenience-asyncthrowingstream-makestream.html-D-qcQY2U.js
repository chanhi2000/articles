import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as t,g as e,d as o,a as m,f as d,r as c,o as k}from"./app-BgNevrm5.js";const h={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.9")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0388-async-stream-factory.md",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"apple/swift-evolution",-1),_=n("code",null,"makeStream()",-1),C=n("code",null,"AsyncStream",-1),A=n("code",null,"AsyncThrowingStream",-1),T=d(`<p>So, rather than writing code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> _continuation<span class="token punctuation">:</span> <span class="token class-name">AsyncStream</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token class-name">Continuation</span><span class="token operator">!</span></span>
<span class="line"><span class="token keyword">let</span> stream <span class="token operator">=</span> <span class="token class-name">AsyncStream</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> _continuation <span class="token operator">=</span> <span class="token short-argument">$0</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> continuation <span class="token operator">=</span> _continuation<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now get both at the same time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token punctuation">(</span>newStream<span class="token punctuation">,</span> newContinuation<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">AsyncStream</span><span class="token punctuation">.</span><span class="token function">makeStream</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is going to be particularly welcome in places where you need to access the continuation outside of the current context, such as in a different method. For example, previously we might have written a simple number generator like this one, which needs to store the continuation as its own property in order to be able to call it from the <code>queueWork()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">OldNumberGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> continuation<span class="token punctuation">:</span> <span class="token class-name">AsyncStream</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token class-name">Continuation</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">var</span> stream<span class="token punctuation">:</span> <span class="token class-name">AsyncStream</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        stream <span class="token operator">=</span> <span class="token class-name">AsyncStream</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> continuation <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>continuation <span class="token operator">=</span> continuation</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">queueWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                continuation<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            continuation<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With the new <code>makeStream(of:)</code> method this code becomes much simpler:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">NewNumberGenerator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>stream<span class="token punctuation">,</span> continuation<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">AsyncStream</span><span class="token punctuation">.</span><span class="token function">makeStream</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">queueWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                continuation<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            continuation<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),x={class:"hint-container details"},N=n("summary",null,"Other Changes in Swift 5.9",-1),P={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-8-to-5-9.playground.zip",target:"_blank",rel:"noopener noreferrer"};function V(p,I){const a=c("VPCard"),i=c("FontIcon");return k(),r("div",null,[n("h1",g,[n("a",w,[n("span",null,u(p.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,v,s(a,t(e({title:"Convenience Async[Throwing]Stream.makeStream methods | Changes in Swift 5.9",desc:"Convenience Async[Throwing]Stream.makeStream methods",link:"https://hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",y,[o("SE-0388 ("),s(i,{icon:"iconfont icon-github"}),S,o(")")]),o(" adds a new "),_,o(" method to both "),C,o(" and "),A,o(" that sends back both the stream itself alongside its continuation.")]),T,n("details",x,[N,s(a,t(e({title:"if and switch expressions | Changes in Swift 5.9",desc:"if and switch expressions",link:"/hackingwithswift.com/swift/5.9/if-switch-expressions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Value and Type Parameter Packs | Changes in Swift 5.9",desc:"Value and Type Parameter Packs",link:"/hackingwithswift.com/swift/5.9/variadic-generics.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Macros | Changes in Swift 5.9",desc:"Macros",link:"/hackingwithswift.com/swift/5.9/macros.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Noncopyable structs and enums | Changes in Swift 5.9",desc:"Noncopyable structs and enums",link:"/hackingwithswift.com/swift/5.9/noncopyable-structs-and-enums.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"consume operator to end the lifetime of a variable binding | Changes in Swift 5.9",desc:"consume operator to end the lifetime of a variable binding",link:"/hackingwithswift.com/swift/5.9/consume-operator.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),m(` 
\`\`\`component VPCard
{
  "title": "Convenience Async[Throwing]Stream.makeStream methods | Changes in Swift 5.9",
  "desc": "Convenience Async[Throwing]Stream.makeStream methods",
  "link": "/hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Add sleep(for:) to Clock | Changes in Swift 5.9",desc:"Add sleep(for:) to Clock",link:"/hackingwithswift.com/swift/5.9/sleep-for-clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Discarding task groups | Changes in Swift 5.9",desc:"Discarding task groups",link:"/hackingwithswift.com/swift/5.9/discarding-task-groups.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",P,[s(i,{icon:"fas fa-file-zipper"}),o("Download Swift 5.9 playground")])])])])}const j=l(h,[["render",V],["__file","convenience-asyncthrowingstream-makestream.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream.html","title":"Convenience Async[Throwing]Stream.makeStream methods","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Convenience Async[Throwing]Stream.makeStream methods","description":"Article(s) > Convenience Async[Throwing]Stream.makeStream methods","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.9"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Convenience Async[Throwing]Stream.makeStream methods"},{"property":"og:description","content":"Convenience Async[Throwing]Stream.makeStream methods"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Convenience Async[Throwing]Stream.makeStream methods"}],["meta",{"property":"og:description","content":"Article(s) > Convenience Async[Throwing]Stream.makeStream methods"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.9"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Convenience Async[Throwing]Stream.makeStream methods\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.98,"words":593},"filePathRelative":"hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream.md","excerpt":"\\n"}');export{j as comp,D as data};
