import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as s,t as l,e as a,n as e,g as t,f as c,r,o as u}from"./app-BgNevrm5.js";const d={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},h=s("nav",{class:"table-of-contents"},[s("ul")],-1),v=s("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData&#39;s migrations allow us to update our data models over time, and <em>complex</em> migrations allow us to control how that migration happens by providing custom code.</p><p>As an example, if you want to change a model to make a property unique where it previously wasn&#39;t, that can be a lightweight migration only if there are no existing duplicate values for that property. However, if there <em>are</em> duplicates you must perform a complex migration by hand, telling SwiftData what the old and new version of the model look like, and providing custom logic to de-dupe your data.</p><p>Doing this requires four steps:</p><ol><li>You need to define multiple versions of our data model.</li><li>You wrap each of those versions inside an enum that conforms to the <code>VersionedSchema</code> protocol. (It’s an enum only because we won’t actually be instantiating these directly.)</li><li>You create another enum that conforms to the <code>SchemaMigrationPlan</code> protocol, which is where you&#39;ll handle the migrations between each model version.</li><li>You then create a custom <code>ModelContainer</code> configuration that knows to use the migration plan as needed.</li></ol><p>Let&#39;s put all this into practice with some sample code. First, we&#39;re going to create a simple <code>User</code> model that tracks a user&#39;s name and age, but we&#39;ll place it inside a <code>VersionedSchema</code> enum so that SwiftData is able to track future versions of this model:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">UsersSchemaV1</span><span class="token punctuation">:</span> <span class="token class-name">VersionedSchema</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> versionIdentifier <span class="token operator">=</span> <span class="token class-name">Schema</span><span class="token punctuation">.</span><span class="token class-name">Version</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> models<span class="token punctuation">:</span> <span class="token punctuation">[</span>any <span class="token class-name">PersistentModel</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@Model</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">        <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how that places the <code>User</code> class inside the schema, which means it’s neatly namespaced. There are also two important static properties there:</p><ul><li>The exact version of this schema, which for this simple version is 1.0.0. Treating this as semver is a good idea, which means the first number should change when something backward-incompatible is introduced, the second number should change when adding functionality that is backwards compatible, and the third should change when you make bug fixes.</li><li>The array of model types included in this migration, which for us is just a single value: <code>User.self</code>.</li></ul><p>We’d then make a second versioned schema for v2, with the uniqueness constraint applied:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">UsersSchemaV2</span><span class="token punctuation">:</span> <span class="token class-name">VersionedSchema</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> versionIdentifier <span class="token operator">=</span> <span class="token class-name">Schema</span><span class="token punctuation">.</span><span class="token class-name">Version</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> models<span class="token punctuation">:</span> <span class="token punctuation">[</span>any <span class="token class-name">PersistentModel</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@Model</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token attribute atrule">@Attribute</span><span class="token punctuation">(</span><span class="token punctuation">.</span>unique<span class="token punctuation">)</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">        <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s basically identical, with the only changes being the 2.0.0 version and <code>@Attribute(.unique)</code>.</p><p>Obviously we don’t want to have to constantly change our code to refer to <code>UsersSchemaV2.User</code> and so on, so it&#39;s a good idea to add a type alias so that <code>User</code> always points to whatever is your latest version:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">typealias</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token class-name">UsersSchemaV2</span><span class="token punctuation">.</span><span class="token class-name">User</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That completes the first two steps of our process, so the third step is to create a migration plan. This is defined as at least three properties:</p><ol><li>An array of all the versioned schemas you want to use.</li><li>One or more <code>MigrationStage</code> instances, defining how to move from one specific version to another.</li><li>A <code>stages</code> array that lists all the migration stages you have defined.</li></ol><p>Once you’ve done that, SwiftData will take care of all possible migrations for you – if your user has v4 installed and needs to migrate straight to v5, or if they have v1 installed and need to migrate through v2, v3, v4, and then onto v5.</p><p>In our case, we’d start out with an enum like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">UsersMigrationPlan</span><span class="token punctuation">:</span> <span class="token class-name">SchemaMigrationPlan</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We’d add to it an array of the two versioned schema we defined earlier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">var</span> schemas<span class="token punctuation">:</span> <span class="token punctuation">[</span>any <span class="token class-name">VersionedSchema</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token class-name">UsersSchemaV1</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">UsersSchemaV2</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Place these in their version order, so SwiftData can migrate between versions in order.</p></div><p>Then we’d add one migration stage. This can sometimes be lightweight, but here we&#39;re going to use a complex migration – sometimes called a heavyweight, or manual migration.</p><p>That means adding a property such as this one to the enum:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">let</span> migrateV1toV2 <span class="token operator">=</span> <span class="token class-name">MigrationStage</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span></span>
<span class="line">    fromVersion<span class="token punctuation">:</span> <span class="token class-name">UsersSchemaV1</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">    toVersion<span class="token punctuation">:</span> <span class="token class-name">UsersSchemaV2</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">    willMigrate<span class="token punctuation">:</span> <span class="token punctuation">{</span> context <span class="token keyword">in</span></span>
<span class="line">        <span class="token comment">// remove duplicates then save</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> didMigrate<span class="token punctuation">:</span> <span class="token nil constant">nil</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ll replace that comment in a moment, but first we need to finish the enum by listing all the migration stages we’ve defined. That’s just one here, but in a real app you’re likely to have several, probably mixing lightweight and custom stages as needed.</p><p>Add this to the enum now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">var</span> stages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">MigrationStage</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span>migrateV1toV2<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What remains is filling in the <code>// remove duplicates then save</code> comment with some actual code. In this situation we’ll be given the current model context filled with data, and it’s our job to clean it up somehow before triggering a save manually.</p><p>In this instance, our goal is to make sure that the <code>name</code> property of our users is unique, which means deleting keeping one instance of each name and deleting the rest, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token keyword">try</span> context<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">UsersSchemaV1</span><span class="token punctuation">.</span><span class="token class-name">User</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> usedNames <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> user <span class="token keyword">in</span> users <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> usedNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        context<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    usedNames<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> context<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that we have a migration plan in place, the final step is to create a custom <code>ModelContainer</code> configuration that knows to use the migration plan as needed.</p><p>This means going to your main <code>App</code> struct and giving it a new property to store a custom-configured model container:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> container<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We need to create this by hand, telling it to load the latest version of our <code>User</code> model (thanks to our type alias!), and also specifying the migration plan so it knows how to upgrade data. So, we need to give our <code>App</code> struct an initializer such as this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">            migrationPlan<span class="token punctuation">:</span> <span class="token class-name">UsersMigrationPlan</span><span class="token punctuation">.</span><span class="token keyword">self</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to initialize model container.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Last but not least, we need to adjust the <code>modelContainer()</code> modifier so that we pass in the <code>container</code> property we just configured rather than asking it to set up all the data from scratch:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">modelContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It’s a lot of work, but I hope you can see the importance of getting migration right – we’re being very clear on exactly how SwiftData should move between various versions of our data, thus hopefully ensuring user data never gets lost.</p>`,39);function w(i,b){const n=r("VPCard");return u(),p("div",null,[s("h1",m,[s("a",k,[s("span",null,l(i.$frontmatter.title)+" 관련",1)])]),a(n,e(t({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,v,a(n,e(t({title:"How to create a complex migration using VersionedSchema | SwiftData by Example",desc:"How to create a complex migration using VersionedSchema",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-create-a-complex-migration-using-versionedschema",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g])}const x=o(d,[["render",w],["__file","how-to-create-a-complex-migration-using-versionedschema.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-create-a-complex-migration-using-versionedschema.html","title":"How to create a complex migration using VersionedSchema","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create a complex migration using VersionedSchema","description":"Article(s) > How to create a complex migration using VersionedSchema","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create a complex migration using VersionedSchema"},{"property":"og:description","content":"How to create a complex migration using VersionedSchema"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-a-complex-migration-using-versionedschema.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-a-complex-migration-using-versionedschema.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create a complex migration using VersionedSchema"}],["meta",{"property":"og:description","content":"Article(s) > How to create a complex migration using VersionedSchema"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create a complex migration using VersionedSchema\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftdata/how-to-connect-swiftdata-to-swiftui.md","date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.11,"words":1232},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-create-a-complex-migration-using-versionedschema.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{x as comp,S as data};
