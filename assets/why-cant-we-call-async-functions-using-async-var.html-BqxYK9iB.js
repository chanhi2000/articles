import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,t as l,e as a,n as s,g as c,f as r,r as p,o as u}from"./app-BgNevrm5.js";const h={},y={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},d={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),f=r(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Swift‚Äôs <code>async let</code> syntax provides short, helpful syntax for running lots of work concurrently, allowing us to wait for them all later on. However, it only works as <code>async let</code> ‚Äì it‚Äôs not possible to use <code>async var</code>.</p><p>If you think about it, this restriction makes sense. Consider pseudocode like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fetchUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// complex networking here</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token function">fetchUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Justin Bieber&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Username is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That attempts to create a variable asynchronously, then writes to it directly. Have we cancelled the async work? If not, when the async work completes will it overwrite our new value? Do we still need to use <code>await</code> when reading the value even after we‚Äôve explicitly set it?</p><p>This kind of code would create all sorts of confusion, so it‚Äôs just not allowed ‚Äì <code>async let</code> is our only option.</p>`,6),m={class:"hint-container details"},k=n("summary",null,"Similar solutions‚Ä¶",-1);function v(e,b){const t=p("VPCard");return u(),i("div",null,[n("h1",y,[n("a",d,[n("span",null,l(e.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(t,s(c({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,g,a(t,s(c({title:"Why can‚Äôt we call async functions using async var? | Swift Concurrency by Example",desc:"Why can‚Äôt we call async functions using async var?",link:"https://hackingwithswift.com/quick-start/concurrency/why-cant-we-call-async-functions-using-async-var",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,n("details",m,[k,a(t,s(c({title:"How to call async throwing functions | Swift Concurrency by Example",desc:"How to call async throwing functions",link:"/hackingwithswift.com/concurrency/how-to-call-async-throwing-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(c({title:"How to call an async function using async let | Swift Concurrency by Example",desc:"How to call an async function using async let",link:"/hackingwithswift.com/concurrency/how-to-call-an-async-function-using-async-let.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(c({title:"How to create and call an async function | Swift Concurrency by Example",desc:"How to create and call an async function",link:"/hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(c({title:"How to fix the error ‚Äúasync call in a function that does not support concurrency‚Äù | Swift Concurrency by Example",desc:"How to fix the error ‚Äúasync call in a function that does not support concurrency‚Äù",link:"/hackingwithswift.com/concurrency/how-to-fix-the-error-async-call-in-a-function-that-does-not-support-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(t,s(c({title:"How to use continuations to convert completion handlers into async functions | Swift Concurrency by Example",desc:"How to use continuations to convert completion handlers into async functions",link:"/hackingwithswift.com/concurrency/how-to-use-continuations-to-convert-completion-handlers-into-async-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const S=o(h,[["render",v],["__file","why-cant-we-call-async-functions-using-async-var.html.vue"]]),C=JSON.parse('{"path":"/hackingwithswift.com/concurrency/why-cant-we-call-async-functions-using-async-var.html","title":"Why can‚Äôt we call async functions using async var?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Why can‚Äôt we call async functions using async var?","description":"Article(s) > Why can‚Äôt we call async functions using async var?","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Why can‚Äôt we call async functions using async var?"},{"property":"og:description","content":"Why can‚Äôt we call async functions using async var?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/why-cant-we-call-async-functions-using-async-var.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/why-cant-we-call-async-functions-using-async-var.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Why can‚Äôt we call async functions using async var?"}],["meta",{"property":"og:description","content":"Article(s) > Why can‚Äôt we call async functions using async var?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Why can‚Äôt we call async functions using async var?\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.84,"words":553},"filePathRelative":"hackingwithswift.com/concurrency/why-cant-we-call-async-functions-using-async-var.md","localizedDate":"2021ÎÖÑ 11Ïõî 28Ïùº","excerpt":"\\n"}');export{S as comp,C as data};
