import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as u,e as t,n as s,g as o,d as h,f as c,r as e,o as d}from"./app-BgNevrm5.js";const w={},k={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),m=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Just like their synchronous counterparts, Swift’s async functions can be throwing or non-throwing depending on how you want them to behave. However, there is a twist: although we mark the function as being <code>async throws</code>, we <em>call</em> the function using <code>try await</code> – the keyword order is flipped.</p><p>To demonstrate this in action, here’s a <code>fetchFavorites()</code> method that attempts to download some JSON from my server, decode it into an array of integers, and return the result:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fetchFavorites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/user-favorites.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> favorites <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token function">fetchFavorites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fetched </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">favorites<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> favorites.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to fetch favorites.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-call-async-throwing-functions-1.zip",target:"_blank",rel:"noopener noreferrer"},v=c("<p>Both fetching data and decoding it are throwing functions, so we need to use <code>try</code> in both those places. Those errors aren’t being handled in the function, so we need to mark <code>fetchFavorites()</code> as also being throwing so Swift can let any errors bubble up to whatever called it.</p><p>Notice that the function is marked <code>async throws</code> but the function <em>calls</em> are marked <code>try await</code> – like I said, the keyword order gets reversed. So, it’s “asynchronous, throwing” in the function definition, but “throwing, asynchronous” at the call site. Think of it as unwinding a stack.</p><p>Not only does <code>try await</code> read more easily than <code>await try</code>, but it’s also more reflective of what’s actually happening when our code executes: we’re waiting for some work to complete, and when it does complete we’ll check whether it ended up throwing an error or not.</p><p>Of course, the other possibility is that they could have <code>try await</code> at the call site and <code>throws async</code> on the function definition, and here’s what the Swift team says about that:</p><blockquote><p>“This order restriction is arbitrary, but it&#39;s not harmful, and it eliminates the potential for stylistic debates.”</p></blockquote><p>Personally, if I saw <code>throws async</code> I’d be more likely to write it as “this thing throws an async error” or similar, but as the quote above says ultimately the order is just arbitrary.</p>",6),_={class:"hint-container details"},x=n("summary",null,"Similar solutions…",-1);function H(i,S){const a=e("VPCard"),r=e("FontIcon");return d(),p("div",null,[n("h1",k,[n("a",f,[n("span",null,u(i.$frontmatter.title)+" 관련",1)])]),t(a,s(o({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),y,g,t(a,s(o({title:"How to call async throwing functions | Swift Concurrency by Example",desc:"How to call async throwing functions",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-call-async-throwing-functions",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),m,n("blockquote",null,[n("p",null,[n("a",b,[t(r,{icon:"fas fa-file-zipper"}),h("Download this as an Xcode project")])])]),v,n("details",_,[x,t(a,s(o({title:"Why can’t we call async functions using async var? | Swift Concurrency by Example",desc:"Why can’t we call async functions using async var?",link:"/hackingwithswift.com/concurrency/why-cant-we-call-async-functions-using-async-var.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(o({title:"How to call an async function using async let | Swift Concurrency by Example",desc:"How to call an async function using async let",link:"/hackingwithswift.com/concurrency/how-to-call-an-async-function-using-async-let.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(o({title:"How to create and call an async function | Swift Concurrency by Example",desc:"How to create and call an async function",link:"/hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(o({title:"How to fix the error “async call in a function that does not support concurrency” | Swift Concurrency by Example",desc:"How to fix the error “async call in a function that does not support concurrency”",link:"/hackingwithswift.com/concurrency/how-to-fix-the-error-async-call-in-a-function-that-does-not-support-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(o({title:"How to use continuations to convert completion handlers into async functions | Swift Concurrency by Example",desc:"How to use continuations to convert completion handlers into async functions",link:"/hackingwithswift.com/concurrency/how-to-use-continuations-to-convert-completion-handlers-into-async-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const T=l(w,[["render",H],["__file","how-to-call-async-throwing-functions.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-call-async-throwing-functions.html","title":"How to call async throwing functions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to call async throwing functions","description":"Article(s) > How to call async throwing functions","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to call async throwing functions"},{"property":"og:description","content":"How to call async throwing functions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-call-async-throwing-functions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-call-async-throwing-functions.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to call async throwing functions"}],["meta",{"property":"og:description","content":"Article(s) > How to call async throwing functions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to call async throwing functions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.56,"words":767},"filePathRelative":"hackingwithswift.com/concurrency/how-to-call-async-throwing-functions.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{T as comp,E as data};
