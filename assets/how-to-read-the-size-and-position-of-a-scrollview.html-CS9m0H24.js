import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as t,g as e,d as l,f as o,r as p,o as h}from"./app-BgNevrm5.js";const k={},w={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),g=o(`<blockquote><p>Updated for Xcode 16</p></blockquote><p><strong>Improved in iOS 18</strong></p><p>SwiftUI’s <code>onScrollGeometryChange()</code> modifier lets us be notified when a scroll view changes its content size (how much content it has), content offset (how far the user has scrolled), and more. The API is a little tricky to understand, so I&#39;ll show you an example then explain.</p><p>This code shows a scrolling list of rows. There is only 1 row at first, but another row is added every time you press a button:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>counter<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onScrollGeometryChange</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> geo <span class="token keyword">in</span></span>
<span class="line">                geo<span class="token punctuation">.</span>contentSize<span class="token punctuation">.</span>height</span>
<span class="line">            <span class="token punctuation">}</span> action<span class="token punctuation">:</span> <span class="token punctuation">{</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Height is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">newValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add a row&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                counter <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-read-the-size-and-position-of-a-scrollview-1.zip",target:"_blank",rel:"noopener noreferrer"},y=o(`<p>The important part is at the end: <code>onScrollGeometryChange()</code>. The parameters I&#39;ve provided are:</p><ul><li><code>Double.self</code>. This means we intend to focus on some kind of <code>Double</code> value. It doesn&#39;t say what it means, only that it will be a <code>Double</code>.</li><li>A trailing closure that accepts a <code>geo</code> parameter. This is a <code>ScrollGeometry</code> object, which is what lets us read the content size, offset, insets, and more. This must return a <code>Double</code>, because that&#39;s what we said would happen in the first parameter, and you should send back the value you want to watch.</li><li>A second trailing closure called <code>action</code>, which is called when the watched value from the previous closure changes.</li></ul><p>So, we&#39;re saying we want to watch the height of our content size, and whenever it changes print out the new value.</p><p><code>ScrollGeometry</code> has a variety of different values we can read, but be careful: if you watch a value that changes extremely frequently, you&#39;re generating a <em>lot</em> of work for SwiftUI and it&#39;s going to be pretty CPU-intensive.</p><p>For example, you could track the exact scroll offset of your scroll view like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> yOffset <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onScrollGeometryChange</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> geo <span class="token keyword">in</span></span>
<span class="line">                geo<span class="token punctuation">.</span>contentOffset<span class="token punctuation">.</span>y</span>
<span class="line">            <span class="token punctuation">}</span> action<span class="token punctuation">:</span> <span class="token punctuation">{</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span></span>
<span class="line">                yOffset <span class="token operator">=</span> newValue</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Offset: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">yOffset</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-read-the-size-and-position-of-a-scrollview-2.zip",target:"_blank",rel:"noopener noreferrer"},z=o('<div class="hint-container important"><p class="hint-container-title">Important</p><p>To be absolutely clear, that <code>action</code> closure will fire a <em>lot</em> when the user scrolls, and updating the UI 120 times a second will really burn through the user&#39;s battery. I would strongly recommend against using the above code in a shipping project, but hopefully at least it shows you how this modifier works!</p></div><p>Here are some tips to help you make the most of this API without overloading SwiftUI:</p><ul><li>Your transform closure will be called extremely frequently, so make it as fast as you can and make its return value change as <em>infrequently</em> as you can – you want to reduce how often your action closure is called.</li><li>Boiling your transformation down to a Boolean (e.g. &quot;are we at least past Y100&quot; or &quot;has the user moved to a negative scroll position?&quot;) is very efficient, because it flips states rarely and therefore calls your action closure rarely too.</li><li>If your action closure needs to update views, do so very carefully – if you&#39;re changing multiple views every time the user scrolls down a single point, you&#39;ll easily find your scroll performance is poor.</li><li>If possible, consider using <code>visualEffect()</code> or <code>scrollTransition()</code> instead.</li></ul>',3),S={class:"hint-container details"},x=n("summary",null,"Similar solutions…",-1);function I(c,V){const a=p("VPCard"),i=p("FontIcon");return h(),u("div",null,[n("h1",w,[n("a",m,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,v,s(a,t(e({title:"How to read the size and position of a scrollview | SwiftUI by Example",desc:"How to read the size and position of a scrollview",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-read-the-size-and-position-of-a-scrollview",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("blockquote",null,[n("p",null,[n("a",b,[s(i,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",_,[s(i,{icon:"fas fa-file-zipper"}),l("Download this as an Xcode project")])])]),z,n("details",S,[x,s(a,t(e({title:"How to detect when the size or position of a view changes | SwiftUI by Example",desc:"How to detect when the size or position of a view changes",link:"/hackingwithswift.com/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to position views in a grid using LazyVGrid and LazyHGrid | SwiftUI by Example",desc:"How to position views in a grid using LazyVGrid and LazyHGrid",link:"/hackingwithswift.com/swiftui/how-to-position-views-in-a-grid-using-lazyvgrid-and-lazyhgrid.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to position and style subviews that come from a different view | SwiftUI by Example",desc:"How to position and style subviews that come from a different view",link:"/hackingwithswift.com/swiftui/how-to-position-and-style-subviews-that-come-from-a-different-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const T=r(k,[["render",I],["__file","how-to-read-the-size-and-position-of-a-scrollview.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-read-the-size-and-position-of-a-scrollview.html","title":"How to read the size and position of a scrollview","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to read the size and position of a scrollview","description":"Article(s) > How to read the size and position of a scrollview","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to read the size and position of a scrollview"},{"property":"og:description","content":"How to read the size and position of a scrollview"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-the-size-and-position-of-a-scrollview.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-read-the-size-and-position-of-a-scrollview.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to read the size and position of a scrollview"}],["meta",{"property":"og:description","content":"Article(s) > How to read the size and position of a scrollview"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to read the size and position of a scrollview\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2024-06-21T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.32,"words":997},"filePathRelative":"hackingwithswift.com/swiftui/how-to-read-the-size-and-position-of-a-scrollview.md","localizedDate":"2024년 6월 21일","excerpt":"\\n"}');export{T as comp,U as data};
