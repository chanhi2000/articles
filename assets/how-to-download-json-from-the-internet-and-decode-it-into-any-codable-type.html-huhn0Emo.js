import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as t,g as e,d as o,f as u,r as p,o as k}from"./app-BgNevrm5.js";const m={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),v=u(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Fetching JSON from the network and using <code>Codable</code> to convert it into native Swift objects is probably the most common task for any Swift developer, usually followed by displaying that data in a <code>List</code> or <code>UITableView</code> depending on whether they are using SwiftUI or UIKit.</p><p>Well, using Swift’s concurrency features we can write a small but beautiful extension for <code>URLSession</code> that makes such work just a single line of code – you just tell iOS what data type to expect and the URL to fetch, and it will do the rest. To add some extra flexibility, we can also provide options to customize decoding strategies for keys, data, and dates, providing sensible defaults for each one to keep our call sites clear for the most common usages.</p><p>Here’s how it’s done:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">URLSession</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">decode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token omit keyword">_</span> type<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">        from url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span></span>
<span class="line">        keyDecodingStrategy<span class="token punctuation">:</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">.</span><span class="token class-name">KeyDecodingStrategy</span> <span class="token operator">=</span> <span class="token punctuation">.</span>useDefaultKeys<span class="token punctuation">,</span></span>
<span class="line">        dataDecodingStrategy<span class="token punctuation">:</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">.</span><span class="token class-name">DataDecodingStrategy</span> <span class="token operator">=</span> <span class="token punctuation">.</span>deferredToData<span class="token punctuation">,</span></span>
<span class="line">        dateDecodingStrategy<span class="token punctuation">:</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">.</span><span class="token class-name">DateDecodingStrategy</span> <span class="token operator">=</span> <span class="token punctuation">.</span>deferredToDate</span>
<span class="line">    <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span>  <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        decoder<span class="token punctuation">.</span>keyDecodingStrategy <span class="token operator">=</span> keyDecodingStrategy</span>
<span class="line">        decoder<span class="token punctuation">.</span>dataDecodingStrategy <span class="token operator">=</span> dataDecodingStrategy</span>
<span class="line">        decoder<span class="token punctuation">.</span>dateDecodingStrategy <span class="token operator">=</span> dateDecodingStrategy</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> decoded <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> decoded</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That does several things:</p><ol><li>It’s an extension on <code>URLSession</code>, so you can go ahead and create your own custom session with a unique configuration if needed.</li><li>It uses generics, so that it will work with anything that conforms to the <code>Decodable</code> protocol – that’s half of <code>Codable</code>, so if you use <code>Codable</code> it will work there too.</li><li>It uses <code>T.self</code> for the default data type, so if Swift can infer your type then you don’t need to repeat yourself.</li><li>It allows all errors to propane to your call site, so you can handle networking and/or decoding errors as needed.</li></ol><p>To use the extension in your own code, first define a type you want to work with, then go ahead and call <code>decode()</code> in whichever way you need:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">URLSession</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">decode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token omit keyword">_</span> type<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">        from url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span></span>
<span class="line">        keyDecodingStrategy<span class="token punctuation">:</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">.</span><span class="token class-name">KeyDecodingStrategy</span> <span class="token operator">=</span> <span class="token punctuation">.</span>useDefaultKeys<span class="token punctuation">,</span></span>
<span class="line">        dataDecodingStrategy<span class="token punctuation">:</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">.</span><span class="token class-name">DataDecodingStrategy</span> <span class="token operator">=</span> <span class="token punctuation">.</span>deferredToData<span class="token punctuation">,</span></span>
<span class="line">        dateDecodingStrategy<span class="token punctuation">:</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">.</span><span class="token class-name">DateDecodingStrategy</span> <span class="token operator">=</span> <span class="token punctuation">.</span>deferredToDate</span>
<span class="line">    <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span>  <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        decoder<span class="token punctuation">.</span>keyDecodingStrategy <span class="token operator">=</span> keyDecodingStrategy</span>
<span class="line">        decoder<span class="token punctuation">.</span>dataDecodingStrategy <span class="token operator">=</span> dataDecodingStrategy</span>
<span class="line">        decoder<span class="token punctuation">.</span>dateDecodingStrategy <span class="token operator">=</span> dateDecodingStrategy</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> decoded <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> decoded</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token constant">UUID</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> user<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Fetch and decode a specific type</span></span>
<span class="line">    <span class="token keyword">let</span> url1 <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/user-24601.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> url1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Downloaded </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Infer the type because Swift has a type annotation</span></span>
<span class="line">    <span class="token keyword">let</span> url2 <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/inbox.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Message</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Downloaded </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">messages<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> messages&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create a custom URLSession and decode a Double array from that</span></span>
<span class="line">    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">URLSessionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">default</span></span>
<span class="line">    config<span class="token punctuation">.</span>requestCachePolicy <span class="token operator">=</span> <span class="token punctuation">.</span>reloadIgnoringLocalAndRemoteCacheData</span>
<span class="line">    <span class="token keyword">let</span> session <span class="token operator">=</span> <span class="token class-name">URLSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> url3 <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/readings.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">let</span> readings <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Double</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> url3<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Downloaded </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">readings<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> readings&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Download error: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),f={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type-1.zip",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,[o("As you can see, with that small extension in place it becomes trivial to fetch and decode any type of "),n("code",null,"Codable"),o(" data with just one line of Swift.")],-1),S={class:"hint-container details"},D=n("summary",null,"Similar solutions…",-1);function _(c,C){const a=p("VPCard"),l=p("FontIcon");return k(),r("div",null,[n("h1",y,[n("a",w,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,g,s(a,t(e({title:"How to download JSON from the internet and decode it into any Codable type | Swift Concurrency by Example",desc:"How to download JSON from the internet and decode it into any Codable type",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("blockquote",null,[n("p",null,[n("a",f,[s(l,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),b,n("details",S,[D,s(a,t(e({title:"How to use continuations to convert completion handlers into async functions | Swift Concurrency by Example",desc:"How to use continuations to convert completion handlers into async functions",link:"/hackingwithswift.com/concurrency/how-to-use-continuations-to-convert-completion-handlers-into-async-functions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Understanding threads and queues | Swift Concurrency by Example",desc:"Understanding threads and queues",link:"/hackingwithswift.com/concurrency/understanding-threads-and-queues.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create and use task local values | Swift Concurrency by Example",desc:"How to create and use task local values",link:"/hackingwithswift.com/concurrency/how-to-create-and-use-task-local-values.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create and use an actor in Swift | Swift Concurrency by Example",desc:"How to create and use an actor in Swift",link:"/hackingwithswift.com/concurrency/how-to-create-and-use-an-actor-in-swift.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"What is an actor and why does Swift have them? | Swift Concurrency by Example",desc:"What is an actor and why does Swift have them?",link:"/hackingwithswift.com/concurrency/what-is-an-actor-and-why-does-swift-have-them.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const U=i(m,[["render",_],["__file","how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type.html.vue"]]),N=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type.html","title":"How to download JSON from the internet and decode it into any Codable type","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to download JSON from the internet and decode it into any Codable type","description":"Article(s) > How to download JSON from the internet and decode it into any Codable type","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to download JSON from the internet and decode it into any Codable type"},{"property":"og:description","content":"How to download JSON from the internet and decode it into any Codable type"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to download JSON from the internet and decode it into any Codable type"}],["meta",{"property":"og:description","content":"Article(s) > How to download JSON from the internet and decode it into any Codable type"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to download JSON from the internet and decode it into any Codable type\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/concurrency/important-do-not-use-an-actor-for-your-swiftui-data-models.md","next":"/hackingwithswift.com/concurrency/README.md","date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.28,"words":985},"filePathRelative":"hackingwithswift.com/concurrency/how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{U as comp,N as data};
