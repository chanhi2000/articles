import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as e,t as u,e as n,n as s,g as a,d as m,f as i,r as o,o as h}from"./app-BgNevrm5.js";const w={},v={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},k=e("nav",{class:"table-of-contents"},[e("ul")],-1),g=e("hr",null,null,-1),f=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>For data that should be shared with many views in your app, SwiftUI gives us the <code>@EnvironmentObject</code> property wrapper. This lets us share model data anywhere it&#39;s needed, while also ensuring that our views automatically stay updated when that data changes.</p><p>Think of <code>@EnvironmentObject</code> as a smarter, simpler way of using <code>@ObservedObject</code> on lots of views. Rather than creating some data in view A, then passing it to view B, then view C, then view D before finally using it, you can create it in view A and put it into the environment so that views B, C, and D will automatically have access to it.</p><p>Just like <code>@ObservedObject</code>, you never assign a value to an <code>@EnvironmentObject</code> property. Instead, it should be passed in from elsewhere, and ultimately you&#39;re probably going to want to use <code>@StateObject</code> to create it somewhere.</p><p>However, <em>unlike</em> <code>@ObservedObject</code> we don&#39;t pass our objects into other views by hand. Instead, we use send the data into a modifier called <code>environmentObject()</code>, which makes the object available in SwiftUI&#39;s environment for that view plus any others inside it.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>Environment objects <em>must</em> be supplied by an ancestor view – if SwiftUI can&#39;t find an environment object of the correct type you&#39;ll get a crash. This applies for previews too, so be careful.</p></div><p>To demonstrate environment objects, we&#39;re going to define three things:</p><ol><li>A <code>GameSettings</code> class that contains a single published property called <code>score</code>.</li><li>A <code>ScoreView</code> view that expects to receive a <code>GameSettings</code> object in the environment, and displays its <code>score</code> property.</li><li>A <code>ContentView</code> view that creates a <code>GameSettings</code> object, has a button to add 1 to its <code>score</code> property, and a <code>NavigationLink</code> to show the detail view.</li></ol><p>Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Our observable object class</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">GameSettings</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A view that expects to find a GameSettings object</span></span>
<span class="line"><span class="token comment">// in the environment, and shows its score.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ScoreView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@EnvironmentObject</span> <span class="token keyword">var</span> settings<span class="token punctuation">:</span> <span class="token class-name">GameSettings</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Score: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">settings<span class="token punctuation">.</span>score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A view that creates the GameSettings object,</span></span>
<span class="line"><span class="token comment">// and places it into the environment for the</span></span>
<span class="line"><span class="token comment">// navigation stack.</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> settings <span class="token operator">=</span> <span class="token class-name">GameSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// A button that writes to the environment settings</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Increase Score&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    settings<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">ScoreView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show Detail View&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),y={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-use-environmentobject-to-share-data-between-views-1.zip",target:"_blank",rel:"noopener noreferrer"},j=i('<p>There are several important parts I want to pick out in that code:</p><ol><li>Just like <code>@StateObject</code> and <code>@ObservedObject</code>, all classes used with <code>@EnvironmentObject</code> must conform to the <code>ObservableObject</code> protocol.</li><li>We put <code>GameSettings</code> into the environment for the navigation stack, which means all views inside the navigation stack can read that object if they want it, as well as any views that get shown by the navigation stack.</li><li>When you use the <code>@EnvironmentObject</code> property wrapper, you declare the type of thing you expect to receive but you do <em>not</em> create it – you&#39;re expecting to receive it from the environment, after all.</li><li>Because our detail view is shown inside the navigation stack, it will get access to the same environment, which in turn means it can read the <code>GameSettings</code> object we created.</li><li>We didn&#39;t need to explicitly associate the <code>GameSettings</code> instance in the environment with the <code>settings</code> property in <code>ScoreView</code> – SwiftUI automatically figured out that it has a <code>GameSettings</code> instance in the environment, so that&#39;s the one it uses.</li></ol><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Now that our views rely on an environment object being present, it&#39;s important that you also update your preview code to provide some example settings to use. For example, using something like <code>ScoreView().environmentObject(GameSettings())</code> for your preview ought to do it.</p></div><p>If you need to add multiple objects to the environment, you should add multiple <code>environmentObject()</code> modifiers – just call them one after the other.</p>',4),S={class:"hint-container details"},O=e("summary",null,"Similar solutions…",-1);function _(c,E){const t=o("VPCard"),l=o("FontIcon"),p=o("VidStack");return h(),d("div",null,[e("h1",v,[e("a",b,[e("span",null,u(c.$frontmatter.title)+" 관련",1)])]),n(t,s(a({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,g,n(t,s(a({title:"How to use @EnvironmentObject to share data between views | SwiftUI by Example",desc:"How to use @EnvironmentObject to share data between views",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-use-environmentobject-to-share-data-between-views",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,e("blockquote",null,[e("p",null,[e("a",y,[n(l,{icon:"fas fa-file-zipper"}),m("Download this as an Xcode project")])])]),n(p,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-environmentobject-to-share-data-between-views-1~dark.mp4"}),j,e("details",S,[O,n(t,s(a({title:"How to let users share content using the system share sheet | SwiftUI by Example",desc:"How to let users share content using the system share sheet",link:"/hackingwithswift.com/swiftui/how-to-let-users-share-content-using-the-system-share-sheet.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"What's the difference between @ObservedObject, @State, and @EnvironmentObject? | SwiftUI by Example",desc:"What's the difference between @ObservedObject, @State, and @EnvironmentObject?",link:"/hackingwithswift.com/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"What is the @EnvironmentObject property wrapper? | SwiftUI by Example",desc:"What is the @EnvironmentObject property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-environmentobject-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Adding items to an order with @EnvironmentObject | SwiftUI by Example",desc:"Adding items to an order with @EnvironmentObject",link:"/hackingwithswift.com/swiftui/adding-items-to-an-order-with-environmentobject.html",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"How to make a ScrollView snap with paging or between child views | SwiftUI by Example",desc:"How to make a ScrollView snap with paging or between child views",link:"/hackingwithswift.com/swiftui/how-to-make-a-scrollview-snap-with-paging-or-between-child-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const I=r(w,[["render",_],["__file","how-to-use-environmentobject-to-share-data-between-views.html.vue"]]),H=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-use-environmentobject-to-share-data-between-views.html","title":"How to use @EnvironmentObject to share data between views","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use @EnvironmentObject to share data between views","description":"Article(s) > How to use @EnvironmentObject to share data between views","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use @EnvironmentObject to share data between views"},{"property":"og:description","content":"How to use @EnvironmentObject to share data between views"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-environmentobject-to-share-data-between-views.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-environmentobject-to-share-data-between-views.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use @EnvironmentObject to share data between views"}],["meta",{"property":"og:description","content":"Article(s) > How to use @EnvironmentObject to share data between views"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use @EnvironmentObject to share data between views\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.52,"words":1056},"filePathRelative":"hackingwithswift.com/swiftui/how-to-use-environmentobject-to-share-data-between-views.md","excerpt":"\\n"}');export{I as comp,H as data};
