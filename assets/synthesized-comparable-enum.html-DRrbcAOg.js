import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as e,g as t,d as i,a as m,f as u,r as c,o as h}from"./app-BgNevrm5.js";const f={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Available from Swift 5.3")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),S=n("code",null,"Comparable",-1),C=n("code",null,"Comparable",-1),z=n("code",null,"<",-1),W=n("code",null,">",-1),x=u(`<p>For example, if we had an enum that describes clothing sizes we could ask Swift to synthesize <code>Comparable</code> conformance like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Size</span><span class="token punctuation">:</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> small</span>
<span class="line">    <span class="token keyword">case</span> medium</span>
<span class="line">    <span class="token keyword">case</span> large</span>
<span class="line">    <span class="token keyword">case</span> extraLarge</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now create two instances of that enum and compare them using <code>&lt;</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> shirtSize <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span>small</span>
<span class="line"><span class="token keyword">let</span> personSize <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span>large</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> shirtSize <span class="token operator">&lt;</span> personSize <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;That shirt is too small&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This synthesized conformance works great with associated values that are <code>Comparable</code>. For example, if we had an enum that described the football World Cup wins for a team, we might write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">WorldCupResult</span><span class="token punctuation">:</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> neverWon</span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">winner</span><span class="token punctuation">(</span>stars<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could then create several instances of that enum with varying values, and have Swift sort them:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> americanMen <span class="token operator">=</span> <span class="token class-name">WorldCupResult</span><span class="token punctuation">.</span>neverWon</span>
<span class="line"><span class="token keyword">let</span> americanWomen <span class="token operator">=</span> <span class="token class-name">WorldCupResult</span><span class="token punctuation">.</span><span class="token function">winner</span><span class="token punctuation">(</span>stars<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> japaneseMen <span class="token operator">=</span> <span class="token class-name">WorldCupResult</span><span class="token punctuation">.</span>neverWon</span>
<span class="line"><span class="token keyword">let</span> japaneseWomen <span class="token operator">=</span> <span class="token class-name">WorldCupResult</span><span class="token punctuation">.</span><span class="token function">winner</span><span class="token punctuation">(</span>stars<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> teams <span class="token operator">=</span> <span class="token punctuation">[</span>americanMen<span class="token punctuation">,</span> americanWomen<span class="token punctuation">,</span> japaneseMen<span class="token punctuation">,</span> japaneseWomen<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> sortedByWins <span class="token operator">=</span> teams<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>sortedByWins<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will sort the array so that the two teams who haven’t won the World Cup come first, then the Japanese women’s team, then the American women’s team – it considers the two <code>winner</code> cases to be higher than the two <code>neverWon</code> cases, and considers <code>winner(stars: 4)</code> to be higher than <code>winner(stars: 1)</code>.</p>`,9),R={class:"hint-container details"},M=n("summary",null,"Other Changes in Swift 5.3",-1),A={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-2-to-5-3.playground.zip",target:"_blank",rel:"noopener noreferrer"};function T(l,j){const a=c("VPCard"),o=c("FontIcon");return h(),r("div",null,[n("h1",g,[n("a",w,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,b,s(a,e(t({title:"Synthesized Comparable conformance for enums | Changes in Swift 5.3",desc:"Synthesized Comparable conformance for enums",link:"https://hackingwithswift.com/swift/5.3/synthesized-comparable-enum",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("p",null,[n("a",y,[i("SE-0266 ("),s(o,{icon:"iconfont icon-github"}),_,i(")")]),i(" lets us opt in to "),S,i(" conformance for enums that either have no associated values or have associated values that are themselves "),C,i(". This allows us to compare two cases from the same enum using "),z,i(", "),W,i(", and similar.")]),x,n("details",R,[M,s(a,e(t({title:"Multi-pattern catch clauses | Changes in Swift 5.3",desc:"Multi-pattern catch clauses",link:"/hackingwithswift.com/swift/5.3/multipattern-catch.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Multiple trailing closures | Changes in Swift 5.3",desc:"Multiple trailing closures",link:"/hackingwithswift.com/swift/5.3/multiple-trailing-closures.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),m(` 
\`\`\`component VPCard
{
  "title": "Synthesized Comparable conformance for enums | Changes in Swift 5.3",
  "desc": "Synthesized Comparable conformance for enums",
  "link": "/hackingwithswift.com/swift/5.3/synthesized-comparable-enum.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,e(t({title:"self is no longer required in many places | Changes in Swift 5.3",desc:"self is no longer required in many places",link:"/hackingwithswift.com/swift/5.3/removing-self.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Type-based program entry points | Changes in Swift 5.3",desc:"Type-based program entry points",link:"/hackingwithswift.com/swift/5.3/atmain.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"where clauses on contextually generic declarations | Changes in Swift 5.3",desc:"where clauses on contextually generic declarations",link:"/hackingwithswift.com/swift/5.3/where-clauses.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Enum cases as protocol witnesses | Changes in Swift 5.3",desc:"Enum cases as protocol witnesses",link:"/hackingwithswift.com/swift/5.3/enum-protocol-witnesses.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Refined didSet semantics | Changes in Swift 5.3",desc:"Refined didSet semantics",link:"/hackingwithswift.com/swift/5.3/refined-didset.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"A new Float16 type | Changes in Swift 5.3",desc:"A new Float16 type",link:"/hackingwithswift.com/swift/5.3/float16.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Swift Package Manager gains binary dependencies, resources, and more | Changes in Swift 5.3",desc:"Swift Package Manager gains binary dependencies, resources, and more",link:"/hackingwithswift.com/swift/5.3/spm-improvements.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",A,[s(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.3 playground")])])])])}const E=p(f,[["render",T],["__file","synthesized-comparable-enum.html.vue"]]),F=JSON.parse('{"path":"/hackingwithswift.com/swift/5.3/synthesized-comparable-enum.html","title":"Synthesized Comparable conformance for enums","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Synthesized Comparable conformance for enums","description":"Article(s) > Synthesized Comparable conformance for enums","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.3"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Synthesized Comparable conformance for enums"},{"property":"og:description","content":"Synthesized Comparable conformance for enums"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.3/synthesized-comparable-enum.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.3/synthesized-comparable-enum.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Synthesized Comparable conformance for enums"}],["meta",{"property":"og:description","content":"Article(s) > Synthesized Comparable conformance for enums"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.3"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Synthesized Comparable conformance for enums\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.38,"words":714},"filePathRelative":"hackingwithswift.com/swift/5.3/synthesized-comparable-enum.md","excerpt":"\\n"}');export{E as comp,F as data};
