import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,t as p,e as n,n as e,g as t,f as c,r,o as d}from"./app-BgNevrm5.js";const m={},u={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},k=a("nav",{class:"table-of-contents"},[a("ul")],-1),f=a("hr",null,null,-1),w=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>You’ll use the <code>@Model</code> macro with all your SwiftData model classes. It automatically makes your class load and store from SwiftData, adds support for observing changes, and also adds conformances for <code>Hashable</code>, <code>Identifiable</code>, <code>Observable</code>, and <code>PersistentModel</code>.</p><p>In a simple case, your code looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> emailAddress<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> emailAddress<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>emailAddress <span class="token operator">=</span> emailAddress</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That now becomes the source of truth for this data model – the complete definition of the data structure for that one type.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>The <code>@Model</code> macro requires your type be a class; it will not work on a struct.</p></div><p>Just marking the class with <code>@Model</code> automatically converts its stored properties into getters and setters that read/write the underlying SwiftData information, but it’s even smarter than that:</p><ol><li>Whenever a SwiftUI view reads one of the properties of a SwiftData model object, it will automatically watch that property for changes so the view can be recreated as needed. If you previously used <code>@Published</code> and similar to annotate properties, that is not needed with SwiftData.</li><li>SwiftData quietly groups multiple changes together to save in one pass, so even if you do all sorts of inserting, deleting, and updating, they’ll be batched for maximum performance.</li><li>Whenever one of these batches completes, SwiftData automatically saves all its outstanding changes, so your data is always kept safe.</li><li>Any computed properties <em>aren’t</em> affected by the macro, and won’t be stored inside SwiftData persistent storage.</li></ol><p>There are all sorts of ways to expand your models further. For example, we might say that every employee has a manager, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> emailAddress<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> manager<span class="token punctuation">:</span> <span class="token class-name">Employee</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> emailAddress<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> manager<span class="token punctuation">:</span> <span class="token class-name">Employee</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>emailAddress <span class="token operator">=</span> emailAddress</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>manager <span class="token operator">=</span> manager</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That introduces a <em>one-to-one relationship</em>: each manager has another manager, although it’s an optional <code>Employee</code> because someone at the very top of a company won’t have a manager. Relationships are covered in more detail later.</p><p>Another way we can add to our models is to add special attributes to individual properties. For example, we could say that every employee must have a unique email address:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token attribute atrule">@Attribute</span><span class="token punctuation">(</span><span class="token punctuation">.</span>unique<span class="token punctuation">)</span> <span class="token keyword">var</span> emailAddress<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> emailAddress<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>emailAddress <span class="token operator">=</span> emailAddress</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SwiftData will enforce this rule for us automatically, ensuring that no two users have the same email address.</p>`,14);function g(o,v){const s=r("VPCard");return d(),l("div",null,[a("h1",u,[a("a",h,[a("span",null,p(o.$frontmatter.title)+" 관련",1)])]),n(s,e(t({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,f,n(s,e(t({title:"How to define SwiftData models using the @Model macro | SwiftData by Example",desc:"How to define SwiftData models using the @Model macro",link:"https://hackingwithswift.com/quick-start/how-to-define-swiftdata-models-using-the-model-macro",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const S=i(m,[["render",g],["__file","how-to-define-swiftdata-models-using-the-model-macro.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-define-swiftdata-models-using-the-model-macro.html","title":"How to define SwiftData models using the @Model macro","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to define SwiftData models using the @Model macro","description":"Article(s) > How to define SwiftData models using the @Model macro","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to define SwiftData models using the @Model macro"},{"property":"og:description","content":"How to define SwiftData models using the @Model macro"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/how-to-define-swiftdata-models-using-the-model-macro.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-define-swiftdata-models-using-the-model-macro.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to define SwiftData models using the @Model macro"}],["meta",{"property":"og:description","content":"Article(s) > How to define SwiftData models using the @Model macro"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to define SwiftData models using the @Model macro\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swiftdata/how-to-enable-or-disable-autosave-for-a-modelcontext.md","date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.93,"words":579},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-define-swiftdata-models-using-the-model-macro.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{S as comp,D as data};
