import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as t,t as p,e as a,n as s,g as n,f as c,r as l,o as h}from"./app-BgNevrm5.js";const d={},u={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},w=t("nav",{class:"table-of-contents"},[t("ul")],-1),m=t("hr",null,null,-1),f=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI gives us a specific property wrapper for tracking the state of gestures, helpfully called <code>@GestureState</code>. Although you can accomplish the same using a simple <code>@State</code> property wrapper, <code>@GestureState</code> comes with the added ability that it automatically sets your property back to its initial value when the gesture ends, and itâ€™s usually significantly <em>faster</em> than using a simple <code>@State</code> as well.</p><p>For example, we might want to create a gesture that can drag views around. To do that, weâ€™d first need to create an <code>@GestureState</code> property to store how much the view has been moved, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@GestureState</span> <span class="token keyword">var</span> dragAmount <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">.</span>zero</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That has the default value of <code>CGSize.zero</code>, which means when the gesture ends it will return to that value automatically.</p><p>Next, we would attach an <code>offset()</code> modifier so that our view gets moved around by whatever value is in <code>dragAmount</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;niagara-falls&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>dragAmount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, we would attach a gesture that is bound to our <code>dragAmount</code> property, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;niagara-falls&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>dragAmount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">DragGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updating</span><span class="token punctuation">(</span>$dragAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> state<span class="token punctuation">,</span> transaction <span class="token keyword">in</span></span>
<span class="line">            state <span class="token operator">=</span> value<span class="token punctuation">.</span>translation</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Thereâ€™s quite a lot of code in there, so letâ€™s unpack it:</p><ol><li>The <code>DragGesture().updating()</code> code creates a new drag gesture, asking it to modify the value stored in <code>dragAmount</code> â€“ thatâ€™s our <code>CGSize</code>.</li><li>It takes a closure with three parameters: <code>value</code>, <code>state</code>, and <code>transaction</code>.</li><li>The <code>value</code> parameter is the current data for the drag â€“ where it started, how far itâ€™s moved, where itâ€™s predicted to end, and so on.</li><li>The <code>state</code> parameter is an <code>inout</code> value that is our property. So, rather than reading or writing <code>dragAmount</code> directly, inside this closure we should modify <code>state</code>.</li><li>The <code>transaction</code> parameter is an <code>inout</code> value that stores the whole animation context, giving us a little information about whatâ€™s going on such as whether this is a continuous or transient animation. Continuous animations might be produced by dragging a slider, whereas transient animations might be produced by tapping a button.</li><li>To make our view draggable, all we do is assign the current translation the drag straight to <code>state</code> (which is really <code>dragAmount</code> in this case), which in turn is used in the <code>offset()</code> modifier to move the view.</li></ol><p>Remember, one of the advantages of <code>@GestureState</code> is that it automatically sets the value of your property back to its initial value when the gesture ends. In this case, it means we can drag a view around all we want, and as soon as we let go it will snap back to its original position.</p>`,12),k={class:"hint-container details"},y=t("summary",null,"Similar solutionsâ€¦",-1);function v(i,b){const e=l("VPCard");return h(),r("div",null,[t("h1",u,[t("a",g,[t("span",null,p(i.$frontmatter.title)+" ê´€ë ¨",1)])]),a(e,s(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,m,a(e,s(n({title:"What is the @GestureState property wrapper? | SwiftUI by Example",desc:"What is the @GestureState property wrapper?",link:"https://hackingwithswift.com/quick-start/swiftui/what-is-the-gesturestate-property-wrapper",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,t("details",k,[y,a(e,s(n({title:"What is the @Published property wrapper? | SwiftUI by Example",desc:"What is the @Published property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-published-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,s(n({title:"What is the @ScaledMetric property wrapper? | SwiftUI by Example",desc:"What is the @ScaledMetric property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-scaledmetric-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,s(n({title:"What is the @ObservedObject property wrapper? | SwiftUI by Example",desc:"What is the @ObservedObject property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-observedobject-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,s(n({title:"What is the @AppStorage property wrapper? | SwiftUI by Example",desc:"What is the @AppStorage property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-appstorage-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(e,s(n({title:"What is the @Binding property wrapper? | SwiftUI by Example",desc:"What is the @Binding property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-binding-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const G=o(d,[["render",v],["__file","what-is-the-gesturestate-property-wrapper.html.vue"]]),W=JSON.parse('{"path":"/hackingwithswift.com/swiftui/what-is-the-gesturestate-property-wrapper.html","title":"What is the @GestureState property wrapper?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What is the @GestureState property wrapper?","description":"Article(s) > What is the @GestureState property wrapper?","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What is the @GestureState property wrapper?"},{"property":"og:description","content":"What is the @GestureState property wrapper?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-gesturestate-property-wrapper.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-gesturestate-property-wrapper.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"What is the @GestureState property wrapper?"}],["meta",{"property":"og:description","content":"Article(s) > What is the @GestureState property wrapper?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is the @GestureState property wrapper?\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.48,"words":745},"filePathRelative":"hackingwithswift.com/swiftui/what-is-the-gesturestate-property-wrapper.md","excerpt":"\\n"}');export{G as comp,W as data};
