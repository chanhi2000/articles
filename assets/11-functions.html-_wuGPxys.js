import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as s,n as i,g as o,w as p,f as m,r as a,o as h,d as l}from"./app-BgNevrm5.js";const f={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=n("hr",null,null,-1),y=m(`<p>Functions let you define re-usable pieces of code that perform specific pieces of functionality. Usually functions are able to receive some values to modify the way they work, but it&#39;s not required.</p><p>Let&#39;s start with a simple function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">favoriteAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;My favorite is Fearless&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-1@2x.png" alt="A function has been defined, but is not called." tabindex="0" loading="lazy"><figcaption>A function has been defined, but is not called.</figcaption></figure><p>If you put that code into your playground, nothing will be printed. And yes, it is correct. The reason nothing is printed is that we&#39;ve placed the &quot;My favorite is Fearless&quot; message into a function called <code>favoriteAlbum()</code>, and that code won&#39;t be called until we ask Swift to run the <code>favoriteAlbum()</code> function. To do that, add this line of code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">favoriteAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-2@2x.png" alt="A function is defined and called." tabindex="0" loading="lazy"><figcaption>A function is defined and called.</figcaption></figure><p>That runs the function (or &quot;calls&quot; it), so now you&#39;ll see &quot;My favorite is Fearless&quot; printed out.</p><p>As you can see, you define a function by writing <code>func</code>, then your function name, then open and close parentheses, then a block of code marked by open and close braces. You then call that function by writing its name followed by an open and close parentheses.</p><p>Of course, that&#39;s a silly example – that function does the same thing no matter what, so there&#39;s no point in it existing. But what if we wanted to print a different album each time? In that case, we could tell Swift we want our function to accept a value when it&#39;s called, then use that value inside it.</p><p>Let&#39;s do that now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">favoriteAlbum</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;My favorite is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That tells Swift we want the function to accept one value (called a &quot;parameter&quot;), named &quot;name&quot;, that should be a string. We then use string interpolation to write that favorite album name directly into our output message. To call the function now, you’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">favoriteAlbum</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-3@2x.png" alt="A function is passed  as a parameter." tabindex="0" loading="lazy"><figcaption>A function is passed <code>name</code> as a parameter.</figcaption></figure><p>You might still be wondering what the point is, given that it&#39;s still just one line of code. Well, imagine we used that function in 20 different places around a big app, then your head designer comes along and tells you to change the message to &quot;I love Fearless so much – it&#39;s my favorite!&quot; Do you really want to find and change all 20 instances in your code? Probably not. With a function you change it once, and everything updates.</p><p>You can make your functions accept as many parameters as you want, so let&#39;s make it accept a name and a year:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printAlbumRelease</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> was released in </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">year</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">printAlbumRelease</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token number">2008</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">printAlbumRelease</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Speak Now&quot;</span></span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token number">2010</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">printAlbumRelease</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token number">2012</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-4@2x.png" alt="A function with  and  parameters." tabindex="0" loading="lazy"><figcaption>A function with <code>name</code> and <code>year</code> parameters.</figcaption></figure><p>These function parameter names are important, and actually form part of the function itself. Sometimes you’ll see several functions with the same name, e.g. <code>handle()</code>, but with different parameter names to distinguish the different actions.</p><hr><h2 id="external-and-internal-parameter-names" tabindex="-1"><a class="header-anchor" href="#external-and-internal-parameter-names"><span>External and internal parameter names</span></a></h2><p>Sometimes you want parameters to be named one way when a function is called, but another way inside the function itself. This means that when you call a function it uses almost natural English, but inside the function the parameters have sensible names. This technique is employed very frequently in Swift, so it’s worth understanding now.</p><p>To demonstrate this, let’s write a function that prints the number of letters in a string. This is available using the <code>count</code> property of strings, so we could write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">countLettersInString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The string </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">string</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> has </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">string<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> letters.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that function in place, we could call it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">countLettersInString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-5@2x.png" alt="A function printing a string&#39;s character count." tabindex="0" loading="lazy"><figcaption>A function printing a string&#39;s character count.</figcaption></figure><p>While that certainly works, it’s a bit wordy. Plus it’s not the kind of thing you would say aloud: “count letters in string string hello”.</p><p>Swift’s solution is to let you specify one name for the parameter when it’s being called, and another inside the method. To use this, just write the parameter name twice – once for external, one for internal.</p><p>For example, we could name the parameter <code>myString</code> when it’s being called, and <code>str</code> inside the method, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">countLettersInString</span><span class="token punctuation">(</span>myString str<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The string </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">str</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> has </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">str<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> letters.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">countLettersInString</span><span class="token punctuation">(</span>myString<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-6@2x.png" alt="A function with different internal and external parameter" tabindex="0" loading="lazy"><figcaption>A function with different internal and external parameter</figcaption></figure><p>You can also specify an underscore, <code>_</code>, as the external parameter name, which tells Swift that it shouldn’t have any external name at all. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">countLettersInString</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> str<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The string </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">str</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> has </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">str<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> letters.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">countLettersInString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-7@2x.png" alt="A function with a blank external parameter name." tabindex="0" loading="lazy"><figcaption>A function with a blank external parameter name.</figcaption></figure><p>As you can see, that makes the line of code read like an English sentence: “count letters in string hello”.</p><p>While there are many cases when using <code>_</code> is the right choice, Swift programmers generally prefer to name all their parameters. And think about it: why do we need the word “String” in the function – what else would we want to count letters on?</p><p>So, what you’ll commonly see is external parameter names like “in”, “for”, and “with”, and more meaningful internal names. So, the “Swifty” way of writing this function is like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">countLetters</span><span class="token punctuation">(</span><span class="token keyword">in</span> string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The string </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">string</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> has </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">string<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> letters.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That means you call the function with the parameter name “in”, which would be meaningless inside the function. However, <em>inside</em> the function the same parameter is called “string”, which is more useful. So, the function can be called like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">countLetters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-8@2x.png" alt="A function with Swifty parameter names." tabindex="0" loading="lazy"><figcaption>A function with Swifty parameter names.</figcaption></figure><p>And <em>that</em> is truly Swifty code: “count letters in hello” reads like natural English, but the code is also clear and concise.</p><hr><h2 id="return-values" tabindex="-1"><a class="header-anchor" href="#return-values"><span>Return values</span></a></h2><p>Swift functions can return a value by writing <code>-&gt;</code> then a data type after their parameter list. Once you do this, Swift will ensure that your function will return a value no matter what, so again this is you making a promise about what your code does.</p><p>As an example, let&#39;s write a function that returns true if an album is one of Taylor Swift&#39;s, or false otherwise. This needs to accept one parameter (the name of the album to check) and will return a Boolean. Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">albumIsTaylor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Speak Now&quot;</span></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;1989&quot;</span></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you wanted to try your new <code>switch/case</code> knowledge, this function is a place where it would work well.</p><p>You can now call that by passing the album name in and acting on the result:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token function">albumIsTaylor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;That&#39;s one of hers!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Who made that?!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token function">albumIsTaylor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Blue&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;That&#39;s one of hers!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Who made that?!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-9@2x.png" alt="Using a function&#39;s return value in a conditional statement." tabindex="0" loading="lazy"><figcaption>Using a function&#39;s return value in a conditional statement.</figcaption></figure><p>If your function returns a value and has only one line of code inside it, you can omit the <code>return</code> keyword entirely – Swift knows a value must be sent back, and because there is only one line that must be the one that sends back a value.</p><p>For example, we could write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getMeaningOfLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">42</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or we could just write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getMeaningOfLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token number">42</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/functions-10@2x.png" alt="A function with an implied ." tabindex="0" loading="lazy"><figcaption>A function with an implied <code>return</code>.</figcaption></figure><p>This is used very commonly in SwiftUI code.</p>`,60);function x(c,q){const t=a("VPCard"),e=a("router-link"),u=a("VidStack");return h(),d("div",null,[n("h1",g,[n("a",w,[n("span",null,k(c.$frontmatter.title)+" 관련",1)])]),s(t,i(o({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n("nav",v,[n("ul",null,[n("li",null,[s(e,{to:"#external-and-internal-parameter-names"},{default:p(()=>[l("External and internal parameter names")]),_:1})]),n("li",null,[s(e,{to:"#return-values"},{default:p(()=>[l("Return values")]),_:1})])])]),b,s(t,i(o({title:"Functions | Hacking with iOS",desc:"Functions",link:"https://hackingwithswift.com/read/0/11/functions",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(u,{src:"youtube/dWQuOj1bnN8"}),y])}const _=r(f,[["render",x],["__file","11-functions.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/read/00/11-functions.html","title":"Functions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Functions","description":"Article(s) > Functions","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Functions"},{"property":"og:description","content":"Functions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/11-functions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/11-functions.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Functions"}],["meta",{"property":"og:description","content":"Article(s) > Functions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/functions-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Functions\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/functions-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-2@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-3@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-4@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-5@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-6@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-7@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-8@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-9@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/functions-10@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[{"level":2,"title":"External and internal parameter names","slug":"external-and-internal-parameter-names","link":"#external-and-internal-parameter-names","children":[]},{"level":2,"title":"Return values","slug":"return-values","link":"#return-values","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.69,"words":1407},"filePathRelative":"hackingwithswift.com/read/00/11-functions.md","excerpt":"\\n"}');export{_ as comp,T as data};
