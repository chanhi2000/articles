import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as k,e as s,n as m,g as v,w as e,d as a,f as p,r as t,o as b}from"./app-BgNevrm5.js";const g={},y={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},_=n("hr",null,null,-1),C=n("strong",null,"EF Core bulk update",-1),E=n("code",null,"ExecuteUpdate",-1),x=n("code",null,"ExecuteDelete",-1),T=n("code",null,"ExecuteUpdateAsync",-1),P=n("code",null,"ExecuteDeleteAsync",-1),A={href:"https://learn.microsoft.com/en-us/ef/core/saving/execute-insert-update-delete",target:"_blank",rel:"noopener noreferrer"},F=p(`<p>However, there&#39;s an <strong>important caveat</strong>: these bulk operations bypass the EF Core <strong>Change Tracker</strong>. This disconnect can lead to unexpected behavior if you&#39;re not aware of it.</p><p>In this week&#39;s issue, we&#39;ll dive into the details of bulk updates in EF Core.</p><hr><h2 id="understanding-the-ef-core-changetracker" tabindex="-1"><a class="header-anchor" href="#understanding-the-ef-core-changetracker"><span>Understanding the EF Core ChangeTracker</span></a></h2><p>When you load entities from the database with EF Core, the <code>ChangeTracker</code> starts tracking them. As you update properties, delete entities, or add new ones, the <code>ChangeTracker</code> records these changes.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Load a product</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> context<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    product<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">99.99</span><span class="token punctuation">;</span> <span class="token comment">// Modify a property</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// At this point, the ChangeTracker knows that &#39;product&#39; has been modified</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Add a new product</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> newProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;New Gadget&quot;</span><span class="token punctuation">,</span> Price <span class="token operator">=</span> <span class="token number">129.99</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    context<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>newProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Delete a product</span></span>
<span class="line">    context<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Persist all changes to the database</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you call <code>SaveChanges</code>, EF Core uses the <code>ChangeTracker</code> to determine which SQL commands to execute. This ensures that the database is perfectly synchronized with your modifications. The <code>ChangeTracker</code> acts as a bridge between your in-memory object model and your database.</p><p>If you&#39;re already familiar with how EF Core works, this serves mostly as a reminder.</p><hr><h2 id="bulk-updates-and-the-changetracker-disconnect" tabindex="-1"><a class="header-anchor" href="#bulk-updates-and-the-changetracker-disconnect"><span>Bulk Updates and the ChangeTracker Disconnect</span></a></h2>`,10),U=n("strong",null,"bulk updates in EF Core",-1),j=n("code",null,"ChangeTracker",-1),S=n("strong",null,"performance",-1),B=p(`<p>By directly executing SQL statements against the database, EF Core eliminates the overhead of tracking individual entity modifications.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Increase price of all electronics by 10%</span></span>
<span class="line">    context<span class="token punctuation">.</span>Products</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Category <span class="token operator">==</span> <span class="token string">&quot;Electronics&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ExecuteUpdate</span><span class="token punctuation">(</span></span>
<span class="line">            s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SetProperty</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Price<span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Price <span class="token operator">*</span> <span class="token number">1.10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// In-memory Product instances with Category == &quot;Electronics&quot;</span></span>
<span class="line">    <span class="token comment">// will STILL have their old price</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we&#39;re increasing the price of all products in the <code>Electronics</code> category by 10%. The <code>ExecuteUpdate</code> method efficiently translates the operation into a single SQL <code>UPDATE</code> statement.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">UPDATE</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">SET</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>Price<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>Price<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1.10</span></span>
<span class="line"><span class="token keyword">FROM</span> <span class="token punctuation">[</span>Products<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, if you inspect the <code>Product</code> instances that EF Core has already loaded into memory, you&#39;ll find that their <code>Price</code> properties haven&#39;t changed. This might seem surprising if you aren&#39;t aware of how bulk updates interact with the change tracker.</p><p>Everything we discussed up to this point also applies to the <code>ExecuteDelete</code> method.</p>`,6),D=n("strong",null,"EF Core interceptors",-1),N=n("code",null,"ExecuteUpdate",-1),I=n("code",null,"ExecuteDelete",-1),W=p(`<hr><h2 id="the-problem-maintaining-consistency" tabindex="-1"><a class="header-anchor" href="#the-problem-maintaining-consistency"><span>The Problem: Maintaining Consistency</span></a></h2><p>If <code>ExecuteUpdate</code> completes successfully, the changes are directly committed to the database. This is because bulk operations bypass the <code>ChangeTracker</code> and don&#39;t participate in the usual transaction managed by <code>SaveChanges</code>.</p><p>If <code>SaveChanges</code> subsequently fails due to an error (e.g., validation error, database constraint violation, connection issue), you&#39;ll be in an inconsistent state. The changes made by <code>ExecuteUpdate</code> are already persisted. Any changes made &quot;in memory&quot; are lost.</p><p>The most reliable way to ensure consistency is to wrap both <code>ExecuteUpdate</code> and the operations that lead to <code>SaveChanges</code> in a transaction:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        context<span class="token punctuation">.</span>Products</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Category <span class="token operator">==</span> <span class="token string">&quot;Electronics&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ExecuteUpdate</span><span class="token punctuation">(</span></span>
<span class="line">                s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SetProperty</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Price<span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Price <span class="token operator">*</span> <span class="token number">1.10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ... other operations that modify entities</span></span>
<span class="line"></span>
<span class="line">        context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// You could also let the transaction go out of scope.</span></span>
<span class="line">        <span class="token comment">// This would automatically rollback any changes.</span></span>
<span class="line">        transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Proceed to handle the exception...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <code>SaveChanges</code> fails, the transaction will be rolled back, reverting the changes made by both <code>ExecuteUpdate</code> and any other operations within the transaction. This keeps your database in a consistent state.</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>EF Core bulk update features, <code>ExecuteUpdate</code> and <code>ExecuteDelete</code>, are invaluable tools for optimizing performance. By bypassing the <code>ChangeTracker</code> and executing raw SQL directly, they deliver significant speed improvements compared to traditional methods.</p><p>However, it&#39;s crucial to be mindful of the potential pitfalls associated with this approach. The disconnect between in-memory entities and the database state can lead to unexpected results if not handled correctly.</p>`,11),q=n("strong",null,"database transaction",-1),K=n("p",null,"I hope this was helpful, and I'll see you next week.",-1),M={class:"hint-container note"},R=n("p",{class:"hint-container-title"},"P.S.",-1),Y={href:"https://github.com/m-jovanovic/ef-bulk-updates",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"m-jovanovic/ef-bulk-updates",-1);function V(r,J){const u=t("VPCard"),o=t("router-link"),i=t("SiteInfo"),c=t("RouteLink"),l=t("FontIcon");return b(),h("div",null,[n("h1",y,[n("a",f,[n("span",null,k(r.$frontmatter.title)+" 관련",1)])]),s(u,m(v({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[s(o,{to:"#understanding-the-ef-core-changetracker"},{default:e(()=>[a("Understanding the EF Core ChangeTracker")]),_:1})]),n("li",null,[s(o,{to:"#bulk-updates-and-the-changetracker-disconnect"},{default:e(()=>[a("Bulk Updates and the ChangeTracker Disconnect")]),_:1})]),n("li",null,[s(o,{to:"#the-problem-maintaining-consistency"},{default:e(()=>[a("The Problem: Maintaining Consistency")]),_:1})]),n("li",null,[s(o,{to:"#summary"},{default:e(()=>[a("Summary")]),_:1})])])]),_,s(i,{name:"What You Need To Know About EF Core Bulk Updates",desc:"EF Core 7 introduced two powerful new methods, ExecuteUpdate and ExecuteDelete. However, there's an important caveat: these bulk operations bypass the EF Core Change Tracker.",url:"https://milanjovanovic.tech/blog/what-you-need-to-know-about-ef-core-bulk-updates/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_095.png"}),n("p",null,[a("When you're dealing with thousands or even millions of records, efficiency is king. That's where "),s(c,{to:"/milanjovanovic.tech/how-to-use-the-new-bulk-update-feature-in-ef-core-7.html"},{default:e(()=>[C]),_:1}),a(" capabilities come into play.")]),n("p",null,[a("EF Core 7 introduced two powerful new methods, "),E,a(" and "),x,a(". They're designed to simplify bulk updates in your database. Both methods have their respective async overloads - "),T,a(" and "),P,a(". "),n("a",A,[s(l,{icon:"fa-brands fa-microsoft"}),a("EF bulk updates")]),a(" offer significant performance advantages over traditional approaches.")]),F,n("p",null,[a("Now, let's focus on how "),s(c,{to:"/milanjovanovic.tech/how-to-use-the-new-bulk-update-feature-in-ef-core-7.html"},{default:e(()=>[U]),_:1}),a(" interact with the "),j,a(" - or rather, how they don't interact with it. This design decision might seem counterintuitive, but there's a solid reason behind it: "),S,a(".")]),B,n("p",null,[s(c,{to:"/milanjovanovic.tech/how-to-use-ef-core-interceptors.html"},{default:e(()=>[D]),_:1}),a(" do not trigger for "),N,a(" and "),I,a(" operations. If you need to track or modify bulk update operations, you can create database triggers that fire whenever a relevant table is updated or deleted. This allows you to log details and perform additional actions.")]),W,n("p",null,[a("My rule of thumb is to create an explicit "),s(c,{to:"/milanjovanovic.tech/working-with-transactions-in-ef-core.html"},{default:e(()=>[q]),_:1}),a(" when I want to make additional entity changes. We can be confident that all the changes will persist in the database or none of them will.")]),K,n("div",M,[R,n("p",null,[a("Get the "),n("a",Y,[a("source code ("),s(l,{icon:"iconfont icon-github"}),L,a(")")]),a(" and try out the examples from this issue.")]),s(i,{name:"m-jovanovic/ef-bulk-updates",desc:"A sample project demonstrating how to work with EF bulk updates in a transactional way",url:"https://github.com/m-jovanovic/ef-bulk-updates",logo:"https://avatars.githubusercontent.com/u/34191235?s=48&v=4",preview:"https://opengraph.githubassets.com/87b407630b85269c4b35e9af8e6561455cc6fabc9c9db7e963731fd926832456/m-jovanovic/ef-bulk-updates"})])])}const O=d(g,[["render",V],["__file","what-you-need-to-know-about-ef-core-bulk-updates.html.vue"]]),Q=JSON.parse('{"path":"/milanjovanovic.tech/what-you-need-to-know-about-ef-core-bulk-updates.html","title":"What You Need To Know About EF Core Bulk Updates","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What You Need To Know About EF Core Bulk Updates","description":"Article(s) > What You Need To Know About EF Core Bulk Updates","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What You Need To Know About EF Core Bulk Updates"},{"property":"og:description","content":"What You Need To Know About EF Core Bulk Updates"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/what-you-need-to-know-about-ef-core-bulk-updates.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/what-you-need-to-know-about-ef-core-bulk-updates.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What You Need To Know About EF Core Bulk Updates"}],["meta",{"property":"og:description","content":"Article(s) > What You Need To Know About EF Core Bulk Updates"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_095.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_095.png"}],["meta",{"name":"twitter:image:alt","content":"What You Need To Know About EF Core Bulk Updates"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What You Need To Know About EF Core Bulk Updates\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_095.png\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2024-06-22T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_095.png"},"headers":[{"level":2,"title":"Understanding the EF Core ChangeTracker","slug":"understanding-the-ef-core-changetracker","link":"#understanding-the-ef-core-changetracker","children":[]},{"level":2,"title":"Bulk Updates and the ChangeTracker Disconnect","slug":"bulk-updates-and-the-changetracker-disconnect","link":"#bulk-updates-and-the-changetracker-disconnect","children":[]},{"level":2,"title":"The Problem: Maintaining Consistency","slug":"the-problem-maintaining-consistency","link":"#the-problem-maintaining-consistency","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.79,"words":1137},"filePathRelative":"milanjovanovic.tech/what-you-need-to-know-about-ef-core-bulk-updates.md","localizedDate":"2024년 6월 22일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{O as comp,Q as data};
