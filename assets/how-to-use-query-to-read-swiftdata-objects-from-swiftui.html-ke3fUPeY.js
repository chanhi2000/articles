import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as s,t as c,e as n,n as t,g as e,f as l,r,o as u}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=s("nav",{class:"table-of-contents"},[s("ul")],-1),h=s("hr",null,null,-1),w=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData provides the <code>@Query</code> macro for querying model objects from a SwiftUI view, optionally providing a sort order, a filter predicate, and either a custom animation or a custom transaction to handle changing results smoothly. Even better, <code>@Query</code> automatically stays up to date every time your data changes, and will reinvoke your SwiftUI view so it stays in sync.</p><p>As an example, we could define two related models for a <code>Movie</code> and <code>Director</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>movies <span class="token operator">=</span> movies</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> director<span class="token punctuation">:</span> <span class="token class-name">Director</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token class-name">Director</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>director <span class="token operator">=</span> director</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now we could display a list of all movies, sorted by their title, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">AuthorsView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Director: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">movie<span class="token punctuation">.</span>director<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Movie Time&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, SwiftData automatically provides us with the director names property, even though that&#39;s provided through a relationship. SwiftData loads these relationships lazily – if there&#39;s a relationship you don&#39;t use, it won&#39;t be fetched.</p><p>::: important:</p><p>When you use <code>@Query</code> to load SwiftData objects in your view, that query is run immediately when your view is displayed. This means you should be careful to avoid loading large amounts of data, because it might cause your user interface to freeze temporarily.</p><p>:::</p><p>There are lots of ways of customizing <code>@Query</code>, such as providing a filter using <code>#Predicate</code>. For example, we might write a filter to show only movies by James Cameron:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>director<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;James Cameron&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also get more fine-grained control over the sort order, either by asking for it to be reversed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or by providing an array of sort descriptors, where they get applied in order:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>releaseYear<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That sorts movies alphabetically by their title, but if any movies have the same name they&#39;ll be sorted by their release year descending.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Your views can have as many <code>@Query</code> properties as you need, although if there&#39;s more than three I&#39;d start to wonder if there were a more efficient approach.</p></div><p>For more advanced purposes, you can provide a custom <code>FetchDescriptor</code> that you&#39;ve configured with extra options such as a fetch limit or offset. This takes a little thinking because some fetch descriptor options are available only after the descriptor is initialized.</p><p>I&#39;ve found the easiest way to do this is using a static property for the descriptor, so I can reference it freely in the query. For example, if I wanted to show the 10 most recent movies I&#39;d use a reverse release year sort plus a fetch limit of 10, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">var</span> descriptor<span class="token punctuation">:</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> descriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>releaseYear<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    descriptor<span class="token punctuation">.</span>fetchLimit <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">    <span class="token keyword">return</span> descriptor</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token keyword">var</span> latestMovies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Regardless of how it&#39;s created, the <code>@Query</code> macro works only inside SwiftUI views. Swift won&#39;t stop you using it elsewhere, it just won&#39;t work!</p></div>`,22);function f(o,y){const a=r("VPCard");return u(),i("div",null,[s("h1",k,[s("a",m,[s("span",null,c(o.$frontmatter.title)+" 관련",1)])]),n(a,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,h,n(a,t(e({title:"How to use @Query to read SwiftData objects from SwiftUI | SwiftData by Example",desc:"How to use @Query to read SwiftData objects from SwiftUI",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-use-query-to-read-swiftdata-objects-from-swiftui",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const S=p(d,[["render",f],["__file","how-to-use-query-to-read-swiftdata-objects-from-swiftui.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-use-query-to-read-swiftdata-objects-from-swiftui.html","title":"How to use @Query to read SwiftData objects from SwiftUI","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use @Query to read SwiftData objects from SwiftUI","description":"Article(s) > How to use @Query to read SwiftData objects from SwiftUI","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use @Query to read SwiftData objects from SwiftUI"},{"property":"og:description","content":"How to use @Query to read SwiftData objects from SwiftUI"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-use-query-to-read-swiftdata-objects-from-swiftui.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-use-query-to-read-swiftdata-objects-from-swiftui.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use @Query to read SwiftData objects from SwiftUI"}],["meta",{"property":"og:description","content":"Article(s) > How to use @Query to read SwiftData objects from SwiftUI"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-22T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use @Query to read SwiftData objects from SwiftUI\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-22T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.37,"words":711},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-use-query-to-read-swiftdata-objects-from-swiftui.md","localizedDate":"2023년 9월 22일","excerpt":"\\n"}');export{S as comp,D as data};
