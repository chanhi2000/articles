import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,t as c,e as o,n as a,g as i,f as l,r as p,o as d}from"./app-BgNevrm5.js";const h={},u={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},m=t("nav",{class:"table-of-contents"},[t("ul")],-1),f=t("hr",null,null,-1),w=l("<p>One of the most powerful features Apple introduced in iOS 9 is called GameplayKit. It&#39;s a library designed to handle non-drawing game functionality such as artificial intelligence, path finding and randomness, and it is pretty dazzling in its scope, so I was really looking forward to write a tutorial about it.</p><p>In this project, we&#39;re going to create a Four-in-a-Row (4IR) game, and I&#39;m going to be honest with you: I&#39;ve cheated a bit. You see, Apple already released some sample code for a 4IR game based on GameplayKit, and it works pretty well.</p><p>Why, then, am I choosing to write a tutorial based on it? Well, for some reason known only to Apple, the source code for the project isn&#39;t up to their usual standard. Not only is it in Objective-C, but it includes arcane C functions like <code>memcpy()</code>, it uses <code>CABasicAnimation</code> and <code>CAShapeLayer</code> when regular <code>UIView</code> functionality would do, and includes a 90-line method to detect wins that can be replaced with code a third that size and easier to understand.</p><p>Frustrating things further, this sample code is what&#39;s used to document GameplayKit, so you&#39;re kind of stuck trying to learn about a very large new technology while studying an unfriendly project, or reading the documentationâ€¦ that&#39;s about the same unfriendly project. I wanted to produce a project that was easier to understand and easier to learn, then produce a tutorial that explained how it all worked.</p><p>So, I took the Objective-C code and rewrote it in Swift. I then simplified the structure to make it more useful for learners, renamed some methods to make more sense, then cleaned up the user interface. Where it wasn&#39;t too strange I have tried to keep Apple&#39;s original structure, so if you choose to check out their original source code you won&#39;t be too lost â€“ look for FourInARow in the Apple sample code. I accept any and all blame for bugs introduced in the Swift conversion process!</p><p>You might well say, &quot;well, if you didn&#39;t like the 4IR game, how about Apple&#39;s DemoBots sample code? That&#39;s really cool, and it uses GameplayKit!&quot; Yes, it does use GameplayKit. But it&#39;s also made up of 84 Swift files, 6,952 images, 14 SKS files for effects and scenes, and a custom shader. Cool: yes. Easy to learn from: not really. By all means download it, but this tutorial is aimed at people just getting started with GameplayKit.</p><p>So, please go ahead and create a new project in Xcode, choosing the Single View App template. Name it Project34, and choose Swift for your language. When it&#39;s created, please lock the app orientation to landscape and set it to be iPad-only.</p>",7);function y(n,k){const e=p("VPCard");return d(),s("div",null,[t("h1",u,[t("a",g,[t("span",null,c(n.$frontmatter.title)+" ê´€ë ¨",1)])]),o(e,a(i({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,f,o(e,a(i({title:"Setting up | Hacking with iOS",desc:"Setting up",link:"https://hackingwithswift.com/read/34/1/setting-up",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w])}const _=r(h,[["render",y],["__file","01-setting-up.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/read/34/01-setting-up.html","title":"Setting up","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Setting up","description":"Article(s) > Setting up","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Setting up"},{"property":"og:description","content":"Setting up"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/34/01-setting-up.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/34/01-setting-up.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Setting up"}],["meta",{"property":"og:description","content":"Article(s) > Setting up"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Setting up\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.96,"words":589},"filePathRelative":"hackingwithswift.com/read/34/01-setting-up.md","excerpt":"\\n"}');export{_ as comp,A as data};
