import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,t as l,e as n,n as i,g as a,a as e,r as h,o as g}from"./app-BgNevrm5.js";const u={},d={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},m=t("nav",{class:"table-of-contents"},[t("ul")],-1),p=t("hr",null,null,-1),f=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),e(`
/quick-start/concurrency/how-to-call-async-throwing-functions">How to call async throwing functions 
/example-code/testing/how-to-test-asynchronous-functions-using-expectation">How to test asynchronous functions using expectation() 
/example-code/language/what-is-a-throwing-function">What is a throwing function? 
/example-code/testing/how-to-do-conditional-test-tear-down-using-addteardownblock">How to do conditional test tear down using addTeardownBlock() 
/example-code/language/how-to-pass-the-fizz-buzz-test">How to pass the Fizz Buzz test</a>
`)],-1);function y(s,k){const o=h("VPCard");return g(),c("div",null,[t("h1",d,[t("a",w,[t("span",null,l(s.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(o,i(a({title:"Testing - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/testing/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,p,n(o,i(a({title:"How to test throwing functions | Testing - free Swift example code",desc:"How to test throwing functions",link:"https://hackingwithswift.com/example-code/testing/how-to-test-throwing-functions",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),e(" TODO: ÏûëÏÑ± "),e(' \nOne of the many brilliant features of Swift‚Äôs error handling system is its ability to throw errors during tests and have them considered as failures. That is, if you mark your test using `throws` you run any throwing code inside that test and if it throws an error the test will be marked as a failure.\n\nFor example, if I have an `ImageGenerator` struct that has a throwing method called `generateImages()`, I could test it out using code like this:\n\n```swift\nfunc testFailingExample() throws {\n    let generator = ImageGenerator()\n    let result = try generator.generateImages()\n    XCTAssertTrue(result, "Image generation should complete successfully.")\n}\n```\n\nThat creates an instance of the struct, attempts to run its `generateImages()` method, then asserts that the result of the method was true. If `generateImages()` throws an error it won‚Äôt be caught inside the test ‚Äì there‚Äôs no `do`/`catch` blocks in there ‚Äì so instead it will bubble up to the `XCTestCase`, which will automatically mark the test as being failed.\n\nAlthough this approach works well for individual throwing methods like you see above, I don‚Äôt think you should use it for more complex tests because you can mask failures too easily. If you have three throwing function calls inside a single test, it‚Äôs a better idea to wrap them individually in `do`/`catch` blocks so you can deal with the error inline by calling `XCTFail()` at the point of failure.\n\n'),f])}const x=r(u,[["render",y],["__file","how-to-test-throwing-functions.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/example-code/testing/how-to-test-throwing-functions.html","title":"How to test throwing functions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to test throwing functions","description":"Article(s) > How to test throwing functions","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to test throwing functions"},{"property":"og:description","content":"How to test throwing functions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/testing/how-to-test-throwing-functions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/testing/how-to-test-throwing-functions.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to test throwing functions"}],["meta",{"property":"og:description","content":"Article(s) > How to test throwing functions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2018-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to test throwing functions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2018-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.52,"words":457},"filePathRelative":"hackingwithswift.com/example-code/testing/how-to-test-throwing-functions.md","localizedDate":"2018ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{x as comp,T as data};
