import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,t as c,e as a,n as t,g as e,f as l,r as u,o as r}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),h=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>One of the very first questions I had about SwiftData was “how do you merge two <code>ModelContext</code> objects?” The answer is you can’t – or at least not directly, in the same way we would have merged two <code>NSManagedObjectContext</code> instances. Instead, the best we can do is spin off a new model context from a model container, make changes there, then save those changes back into the container when you’re ready.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This solution works, but SwiftUI often screws up its animations. This isn’t ideal, and I have yet to find a workaround for it, so if you have a better idea please let me know!</p></div><p>To demonstrate merging using this workaround, we first need a trivial data model to work with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Issue</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, we need a <code>ContentView</code> that is able to create some sample data, then navigate to edit a single <code>Issue</code> when it’s selected.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>On selection, this needs to show your editing view using the <code>id</code> property of the object to edit, alongside your model container so you can load it in the separate model context. This is a process sometimes called <em>rehydrating</em> the object: we don&#39;t want to share a single model object across two model contexts, so instead we pass the identifier and load it separately in our new context.</p><p>Here’s an example <code>ContentView</code> doing that:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext</span>
<span class="line">    <span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Issue</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> issues<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Issue</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>issues<span class="token punctuation">)</span> <span class="token punctuation">{</span> issue <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> issue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>issue<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Issue</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> issue <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">EditingView</span><span class="token punctuation">(</span>issueID<span class="token punctuation">:</span> issue<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> modelContext<span class="token punctuation">.</span>container<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Discarding Test&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Create Samples&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> createSamples<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Creates 10 sample issues</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">createSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token class-name">Issue</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> issue <span class="token operator">=</span> <span class="token class-name">Issue</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Issue </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>issue<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now for the important part: we need an <code>EditingView</code> that accepts an object ID and a model container, spins up its own local model context with autosave disabled, and loads the editing object using that context.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">EditingView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>dismiss<span class="token punctuation">)</span> <span class="token keyword">var</span> dismiss</span>
<span class="line">    <span class="token attribute atrule">@Bindable</span> <span class="token keyword">var</span> issue<span class="token punctuation">:</span> <span class="token class-name">Issue</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> modelContext<span class="token punctuation">:</span> <span class="token class-name">ModelContext</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create a local context, then load the issue that was requested or use a default if it can&#39;t be found.</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>issueID<span class="token punctuation">:</span> <span class="token class-name">PersistentIdentifier</span><span class="token punctuation">,</span> <span class="token keyword">in</span> container<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        modelContext <span class="token operator">=</span> <span class="token class-name">ModelContext</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span></span>
<span class="line">        modelContext<span class="token punctuation">.</span>autosaveEnabled <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        issue <span class="token operator">=</span> modelContext<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> issueID<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">Issue</span> <span class="token operator">??</span> <span class="token class-name">Issue</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;New Issue&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Edit the name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $issue<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Discard&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// Exit without saving.</span></span>
<span class="line">                <span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Save&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// Save then exit.</span></span>
<span class="line">                <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using this approach means we have isolated all changes made in <code>EditingView</code> inside its local context, meaning that we can either exit without saving or merge those changes back into the main model container.</p><p>So, it <em>doesn’t</em> solve the problem of merging one context into another, but at least it gives us something close!</p></div>`,7);function g(p,b){const s=u("VPCard");return r(),i("div",null,[n("h1",k,[n("a",m,[n("span",null,c(p.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,w,a(s,t(e({title:"How to merge two model contexts | SwiftData by Example",desc:"How to merge two model contexts",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-merge-two-model-contexts",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),h])}const x=o(d,[["render",g],["__file","how-to-merge-two-model-contexts.html.vue"]]),C=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-merge-two-model-contexts.html","title":"How to merge two model contexts","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to merge two model contexts","description":"Article(s) > How to merge two model contexts","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to merge two model contexts"},{"property":"og:description","content":"How to merge two model contexts"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-merge-two-model-contexts.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-merge-two-model-contexts.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to merge two model contexts"}],["meta",{"property":"og:description","content":"Article(s) > How to merge two model contexts"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to merge two model contexts\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.08,"words":624},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-merge-two-model-contexts.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{x as comp,C as data};
