import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as k,e as s,n as e,g as o,d as a,f as p,r as l,o as d}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),v=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Swift’s tasks use <em>cooperative cancellation</em>, which means that although we can tell a task to stop work, the task itself is free to completely ignore that instruction and carry on for as long as it wants. This is a feature rather than a bug: if cancelling a task made it stop work immediately, the task might leave your program in an inconsistent state.</p><p>There are seven things to know when working with task cancellation:</p><ol><li>You can explicitly cancel a task by calling its <code>cancel()</code> method.</li><li>Any task can check <code>Task.isCancelled</code> to determine whether the task has been cancelled or not.</li><li>You can call the <code>Task.checkCancellation()</code> method, which will throw a <code>CancellationError</code> if the task has been cancelled or do nothing otherwise.</li><li>Some parts of Foundation automatically check for task cancellation and will throw their own cancellation error even without your input.</li><li>If you’re using <code>Task.sleep()</code> to wait for some amount of time to pass, cancelling your task will automatically terminate the sleep and throw a <code>CancellationError</code>.</li><li>If the task is part of a group and any part of the group throws an error, the other tasks will be cancelled and awaited.</li><li>If you have started a task using SwiftUI’s <code>task()</code> modifier, that task will automatically be canceled when the view disappears.</li></ol><p>We can explore a few of these in code. First, here’s a function that uses a task to fetch some data from a URL, decodes it into an array, then returns the average:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getAverageTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> fetchTask <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/readings.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> readings <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Double</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> sum <span class="token operator">=</span> readings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> sum <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>readings<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> fetchTask<span class="token punctuation">.</span>value</span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Average temperature: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to get data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">getAverageTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),y={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-cancel-a-task-1.zip",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>Now, there is no explicit cancellation in there, but there <em>is</em> implicit cancellation because the <code>URLSession.shared.data(from:)</code> call will check to see whether its task is still active before continuing. If the task has been cancelled, <code>data(from:)</code> will automatically throw a <code>URLError</code> and the rest of the task won’t execute.</p><p>However, that implicit check happens <em>before</em> the network call, so it’s unlikely to be an actual cancellation point in practice. As most of our users are likely to be using mobile network connections, the network call is likely to take most of the time of this task, particularly if the user has a poor connection.</p><p>So, we could upgrade our task to explicitly check for cancellation <em>after</em> the network request, using <code>Task.checkCancellation()</code>. This is a static function call because it will always apply to whatever task it’s called inside, and it needs to be called using <code>try</code> so that it can throw a <code>CancellationError</code> if the task <em>has</em> been cancelled.</p><p>Here’s the new function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getAverageTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> fetchTask <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/readings.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">checkCancellation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> readings <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Double</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> sum <span class="token operator">=</span> readings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> sum <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>readings<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> fetchTask<span class="token punctuation">.</span>value</span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Average temperature: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to get data.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">getAverageTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),T={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-cancel-a-task-2.zip",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>As you can see, it just takes one call to <code>Task.checkCancellation()</code> to make sure our task isn’t wasting time calculating data that’s no longer needed.</p><p>If you want to handle cancellation yourself – if you need to clean up some resources or perform some other calculations, for example – then instead of calling <code>Task.checkCancellation()</code> you should check the value of <code>Task.isCancelled</code> instead. This is a simple Boolean that returns the current cancellation state, which you can then act on however you want.</p><p>To demonstrate this, we could rewrite our function a third time so that cancelling the task or failing to fetch data returns an average temperature of 0. This time we’re going to cancel the task ourselves as soon as it’s created, but because we’re always returning a default value we no longer need to handle errors when reading the task’s result:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getAverageTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> fetchTask <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/readings.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">let</span> readings <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Double</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> sum <span class="token operator">=</span> readings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> sum <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>readings<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    fetchTask<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> fetchTask<span class="token punctuation">.</span>value</span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Average temperature: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">getAverageTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-cancel-a-task-3.zip",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,[a("Now we have one implicit cancellation point with the "),n("code",null,"data(from:)"),a(" call, and an explicit one with the check on "),n("code",null,"Task.isCancelled"),a(". If either one is triggered, the task will return 0 rather than throw an error.")],-1),S=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"Tips"),n("p",null,[a("You can use both "),n("code",null,"Task.checkCancellation()"),a(" and "),n("code",null,"Task.isCancelled"),a(" from both synchronous and asynchronous functions. Remember, async functions can call synchronous functions freely, so checking for cancellation can be just as important to avoid doing unnecessary work.")])],-1),q={class:"hint-container details"},A=n("summary",null,"Similar solutions…",-1);function H(i,D){const t=l("VPCard"),c=l("FontIcon");return d(),u("div",null,[n("h1",m,[n("a",w,[n("span",null,k(i.$frontmatter.title)+" 관련",1)])]),s(t,e(o({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,g,s(t,e(o({title:"How to cancel a Task | Swift Concurrency by Example",desc:"How to cancel a Task",link:"https://hackingwithswift.com/quick-start/concurrency/how-to-cancel-a-task",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("blockquote",null,[n("p",null,[n("a",y,[s(c,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),b,n("blockquote",null,[n("p",null,[n("a",T,[s(c,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),_,n("blockquote",null,[n("p",null,[n("a",x,[s(c,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),C,S,n("details",q,[A,s(t,e(o({title:"How to cancel a task group | Swift Concurrency by Example",desc:"How to cancel a task group",link:"/hackingwithswift.com/concurrency/how-to-cancel-a-task-group.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,e(o({title:"What’s the difference between a task and a detached task? | Swift Concurrency by Example",desc:"What’s the difference between a task and a detached task?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-a-task-and-a-detached-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,e(o({title:"How to create and use task local values | Swift Concurrency by Example",desc:"How to create and use task local values",link:"/hackingwithswift.com/concurrency/how-to-create-and-use-task-local-values.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,e(o({title:"What’s the difference between async let, tasks, and task groups? | Swift Concurrency by Example",desc:"What’s the difference between async let, tasks, and task groups?",link:"/hackingwithswift.com/concurrency/whats-the-difference-between-async-let-tasks-and-task-groups.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,e(o({title:"How to run tasks using SwiftUI’s task() modifier | Swift Concurrency by Example",desc:"How to run tasks using SwiftUI’s task() modifier",link:"/hackingwithswift.com/concurrency/how-to-run-tasks-using-swiftuis-task-modifier.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const E=r(h,[["render",H],["__file","how-to-cancel-a-task.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-cancel-a-task.html","title":"How to cancel a Task","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to cancel a Task","description":"Article(s) > How to cancel a Task","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to cancel a Task"},{"property":"og:description","content":"How to cancel a Task"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-cancel-a-task.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-cancel-a-task.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to cancel a Task"}],["meta",{"property":"og:description","content":"Article(s) > How to cancel a Task"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2024-04-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to cancel a Task\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2024-04-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.13,"words":1240},"filePathRelative":"hackingwithswift.com/concurrency/how-to-cancel-a-task.md","localizedDate":"2024년 4월 30일","excerpt":"\\n"}');export{E as comp,U as data};
