import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as a,n as d,g as h,w as t,f as m,r as o,o as k,d as e}from"./app-BgNevrm5.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=n("hr",null,null,-1),w=m(`<p>A transaction is a sequence of one or more SQL operations that are treated as a single unit of work. In the context of a database, a transaction allows you to perform multiple operations that either all succeed or none at all. This ensures that your database remains in a consistent state, even in the face of errors or unexpected issues.</p><p>For example, if you are transferring money between two bank accounts, you would want both the debit from one account and the credit to the other to succeed or fail together. If one operation fails, the other should not be executed to maintain consistency.</p><hr><h2 id="why-use-transactions" tabindex="-1"><a class="header-anchor" href="#why-use-transactions"><span>Why Use Transactions?</span></a></h2><ol><li><strong>Atomicity</strong>: Transactions ensure that a series of operations are treated as a single unit. If one operation fails, none of the operations will be applied to the database.</li><li><strong>Consistency</strong>: Transactions help maintain the integrity of the database by ensuring that all rules and constraints are followed.</li><li><strong>Isolation</strong>: Each transaction operates independently of others, preventing unintended interference.</li><li><strong>Durability</strong>: Once a transaction is committed, the changes are permanent, even in the event of a system failure.</li></ol><hr><h2 id="when-to-use-transactions" tabindex="-1"><a class="header-anchor" href="#when-to-use-transactions"><span>When to Use Transactions?</span></a></h2><p>You should use transactions when:</p><ul><li>Performing multiple related operations that must succeed or fail together.</li><li>Modifying critical data that requires consistency and integrity.</li><li>Working with operations that can potentially fail, such as financial transactions or data migrations.</li></ul><hr><h2 id="how-to-manage-transactions-in-python" tabindex="-1"><a class="header-anchor" href="#how-to-manage-transactions-in-python"><span>How to Manage Transactions in Python</span></a></h2><p>In SQLite, transactions are managed using the <code>BEGIN</code>, <code>COMMIT</code>, and <code>ROLLBACK</code> commands. However, when using the <code>sqlite3</code> module in Python, you typically manage transactions through the connection object.</p><h3 id="starting-a-transaction" tabindex="-1"><a class="header-anchor" href="#starting-a-transaction"><span>Starting a Transaction</span></a></h3><p>A transaction begins implicitly when you execute any SQL statement. To start a transaction explicitly, you can use the <code>BEGIN</code> command:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cursor.execute(&quot;BEGIN;&quot;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>However, it’s usually unnecessary to start a transaction manually, as SQLite starts a transaction automatically when you execute an SQL statement.</p><h3 id="how-to-commit-a-transaction" tabindex="-1"><a class="header-anchor" href="#how-to-commit-a-transaction"><span>How to Commit a Transaction</span></a></h3><p>To save all changes made during a transaction, you use the <code>commit()</code> method. This makes all modifications permanent in the database.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We have already used the <code>commit()</code> method in the above provided examples.</p><h3 id="rolling-back-a-transaction" tabindex="-1"><a class="header-anchor" href="#rolling-back-a-transaction"><span>Rolling Back a Transaction</span></a></h3><p>If something goes wrong and you want to revert the changes made during a transaction, you can use the <code>rollback()</code> method. This will undo all changes made since the transaction started.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="example-of-using-transactions-in-python" tabindex="-1"><a class="header-anchor" href="#example-of-using-transactions-in-python"><span>Example of Using Transactions in Python</span></a></h2><p>To illustrate the use of transactions in a real-world scenario, we’ll create a new table called <code>Customers</code> to manage customer accounts. In this example, we’ll assume each customer has a <code>balance</code>. We will add two customers to this table and perform a funds transfer operation between them.</p><p>First, let&#39;s create the <code>Customers</code> table and insert two customers:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create the Customers table and add two customers</span></span>
<span class="line"><span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">    cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Create Customers table</span></span>
<span class="line">    create_customers_table <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">    CREATE TABLE IF NOT EXISTS Customers (</span>
<span class="line">        id INTEGER PRIMARY KEY AUTOINCREMENT,</span>
<span class="line">        name TEXT NOT NULL UNIQUE,</span>
<span class="line">        balance REAL NOT NULL</span>
<span class="line">    );</span>
<span class="line">    &#39;&#39;&#39;</span></span>
<span class="line">    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>create_customers_table<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Insert two customers</span></span>
<span class="line">    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;INSERT INTO Customers (name, balance) VALUES (?, ?);&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;Ashutosh&#39;</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;INSERT INTO Customers (name, balance) VALUES (?, ?);&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;Krishna&#39;</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let’s perform the funds transfer operation between Ashutosh and Krishna:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">transfer_funds</span><span class="token punctuation">(</span>from_customer<span class="token punctuation">,</span> to_customer<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">        cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># Start a transaction</span></span>
<span class="line">            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;BEGIN;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># Deduct amount from the sender</span></span>
<span class="line">            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;UPDATE Customers SET balance = balance - ? WHERE name = ?;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>amount<span class="token punctuation">,</span> from_customer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment"># Add amount to the receiver</span></span>
<span class="line">            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;UPDATE Customers SET balance = balance + ? WHERE name = ?;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>amount<span class="token punctuation">,</span> to_customer<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># Commit the changes</span></span>
<span class="line">            connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string-interpolation"><span class="token string">f&quot;Transferred </span><span class="token interpolation"><span class="token punctuation">{</span>amount<span class="token punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">{</span>from_customer<span class="token punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">{</span>to_customer<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># If an error occurs, rollback the transaction</span></span>
<span class="line">            connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Transaction failed: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Example usage</span></span>
<span class="line">transfer_funds<span class="token punctuation">(</span><span class="token string">&#39;Ashutosh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Krishna&#39;</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we first created a <code>Customers</code> table and inserted two customers, Ashutosh with a balance of ₹100, and Krishna with a balance of ₹50. We then performed a funds transfer of ₹80 from Ashutosh to Krishna. By using transactions, we ensure that both the debit from Ashutosh&#39;s account and the credit to Krishna&#39;s account are executed as a single atomic operation, maintaining data integrity in the event of any errors. If the transfer fails (for example, due to insufficient funds), the transaction will roll back, leaving both accounts unchanged.</p>`,31);function T(i,_){const c=o("VPCard"),s=o("router-link"),l=o("SiteInfo");return k(),r("div",null,[n("h1",b,[n("a",v,[n("span",null,u(i.$frontmatter.title)+" 관련",1)])]),a(c,d(h({title:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",link:"/freecodecamp.org/work-with-sqlite-in-python-handbook/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[a(s,{to:"#why-use-transactions"},{default:t(()=>[e("Why Use Transactions?")]),_:1})]),n("li",null,[a(s,{to:"#when-to-use-transactions"},{default:t(()=>[e("When to Use Transactions?")]),_:1})]),n("li",null,[a(s,{to:"#how-to-manage-transactions-in-python"},{default:t(()=>[e("How to Manage Transactions in Python")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#starting-a-transaction"},{default:t(()=>[e("Starting a Transaction")]),_:1})]),n("li",null,[a(s,{to:"#how-to-commit-a-transaction"},{default:t(()=>[e("How to Commit a Transaction")]),_:1})]),n("li",null,[a(s,{to:"#rolling-back-a-transaction"},{default:t(()=>[e("Rolling Back a Transaction")]),_:1})])])]),n("li",null,[a(s,{to:"#example-of-using-transactions-in-python"},{default:t(()=>[e("Example of Using Transactions in Python")]),_:1})])])]),y,a(l,{name:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",url:"https://freecodecamp.org/news/work-with-sqlite-in-python-handbook/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}),w])}const A=p(g,[["render",T],["__file","how-to-use-transactions.html.vue"]]),q=JSON.parse('{"path":"/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-use-transactions.html","title":"How to Use Transactions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to Use Transactions","description":"Article(s) > (7/11) How to Work with SQLite in Python – A Handbook for Beginners","category":["Python","SQLite","Article(s)"],"tag":["blog","freecodecamp.org","py","python","sqlite"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > (7/11) How to Work with SQLite in Python – A Handbook for Beginners"},{"property":"og:description","content":"How to Use Transactions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-use-transactions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-use-transactions.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Use Transactions"}],["meta",{"property":"og:description","content":"Article(s) > (7/11) How to Work with SQLite in Python – A Handbook for Beginners"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"name":"twitter:image:alt","content":"How to Use Transactions"}],["meta",{"property":"article:author","content":"Ashutosh Krishna"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"sqlite"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Use Transactions\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Krishna\\"}]}"]],"date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Ashutosh Krishna","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"},"headers":[{"level":2,"title":"Why Use Transactions?","slug":"why-use-transactions","link":"#why-use-transactions","children":[]},{"level":2,"title":"When to Use Transactions?","slug":"when-to-use-transactions","link":"#when-to-use-transactions","children":[]},{"level":2,"title":"How to Manage Transactions in Python","slug":"how-to-manage-transactions-in-python","link":"#how-to-manage-transactions-in-python","children":[{"level":3,"title":"Starting a Transaction","slug":"starting-a-transaction","link":"#starting-a-transaction","children":[]},{"level":3,"title":"How to Commit a Transaction","slug":"how-to-commit-a-transaction","link":"#how-to-commit-a-transaction","children":[]},{"level":3,"title":"Rolling Back a Transaction","slug":"rolling-back-a-transaction","link":"#rolling-back-a-transaction","children":[]}]},{"level":2,"title":"Example of Using Transactions in Python","slug":"example-of-using-transactions-in-python","link":"#example-of-using-transactions-in-python","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":3.23,"words":968},"filePathRelative":"freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-use-transactions.md","localizedDate":"2024년 10월 2일","excerpt":"\\n","copyright":{"author":"Ashutosh Krishna"}}');export{A as comp,q as data};
