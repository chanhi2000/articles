import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as t,t as d,e as s,n as a,g as e,d as i,f as l,r as c,o as g}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},k=t("nav",{class:"table-of-contents"},[t("ul")],-1),w=t("hr",null,null,-1),v=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 15</strong></p><p>SwiftUI provides a <code>foregroundStyle()</code> modifier to control the way text, images, and shapes are styled all at once. In its simplest form this is similar to using <code>foregroundStyle()</code> with <code>.secondary</code>, but not only does it unlock more of the semantic colors – <code>.tertiary</code> and <code>.quaternary</code>, it also adds support for anything that conforms to <code>ShapeStyle</code>.</p><p>So, here&#39;s an example of an image and some text rendered using quaternary style, which is the lowest of four importance levels for content:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;clock.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Set the time&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>quaternary<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-provide-visual-structure-using-foreground-styles-1.zip",target:"_blank",rel:"noopener noreferrer"},y=l(`<p>A clock symbol beside the words “Set the time”, both in faint grey.</p><p>Like I said, anything that conforms to <code>ShapeStyle</code> also works, meaning that we can render our <code>HStack</code> with a red to black linear gradient using the same modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;clock.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Set the time&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span></span>
<span class="line">        colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span></span>
<span class="line">        endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),S={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-provide-visual-structure-using-foreground-styles-2.zip",target:"_blank",rel:"noopener noreferrer"},_=t("figure",null,[t("img",{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-provide-visual-structure-using-foreground-styles-2~dark.png",alt:"A clock symbol beside the words “Set the time”, both with a gradient running from red at the top to black at the bottom.",tabindex:"0",loading:"lazy"}),t("figcaption",null,"A clock symbol beside the words “Set the time”, both with a gradient running from red at the top to black at the bottom.")],-1),x={class:"hint-container details"},H=t("summary",null,"Similar solutions…",-1);function q(r,I){const n=c("VPCard"),o=c("FontIcon");return g(),u("div",null,[t("h1",m,[t("a",f,[t("span",null,d(r.$frontmatter.title)+" 관련",1)])]),s(n,a(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,w,s(n,a(e({title:"How to provide visual structure using foreground styles | SwiftUI by Example",desc:"How to provide visual structure using foreground styles",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-provide-visual-structure-using-foreground-styles",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,t("blockquote",null,[t("p",null,[t("a",b,[s(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),y,t("blockquote",null,[t("p",null,[t("a",S,[s(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),_,t("details",x,[H,s(n,a(e({title:"How to detect when your app moves to the background or foreground with scenePhase | SwiftUI by Example",desc:"How to detect when your app moves to the background or foreground with scenePhase",link:"/hackingwithswift.com/swiftui/how-to-detect-when-your-app-moves-to-the-background-or-foreground-with-scenephase.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,a(e({title:"How to add visual effect blurs | SwiftUI by Example",desc:"How to add visual effect blurs",link:"/hackingwithswift.com/swiftui/how-to-add-visual-effect-blurs.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,a(e({title:"How to provide relative sizes using GeometryReader | SwiftUI by Example",desc:"How to provide relative sizes using GeometryReader",link:"/hackingwithswift.com/swiftui/how-to-provide-relative-sizes-using-geometryreader.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,a(e({title:"How to get custom colors and transparency with SF Symbols | SwiftUI by Example",desc:"How to get custom colors and transparency with SF Symbols",link:"/hackingwithswift.com/swiftui/how-to-get-custom-colors-and-transparency-with-sf-symbols.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(n,a(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const P=p(h,[["render",q],["__file","how-to-provide-visual-structure-using-foreground-styles.html.vue"]]),z=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-provide-visual-structure-using-foreground-styles.html","title":"How to provide visual structure using foreground styles","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to provide visual structure using foreground styles","description":"Article(s) > How to provide visual structure using foreground styles","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to provide visual structure using foreground styles"},{"property":"og:description","content":"How to provide visual structure using foreground styles"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-provide-visual-structure-using-foreground-styles.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-provide-visual-structure-using-foreground-styles.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to provide visual structure using foreground styles"}],["meta",{"property":"og:description","content":"Article(s) > How to provide visual structure using foreground styles"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-provide-visual-structure-using-foreground-styles-2~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to provide visual structure using foreground styles\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-provide-visual-structure-using-foreground-styles-2~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.99,"words":598},"filePathRelative":"hackingwithswift.com/swiftui/how-to-provide-visual-structure-using-foreground-styles.md","excerpt":"\\n"}');export{P as comp,z as data};
