import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,t as r,e as n,n as s,g as t,f as d,r as o,o as u}from"./app-BgNevrm5.js";const h={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},w=a("nav",{class:"table-of-contents"},[a("ul")],-1),g=a("hr",null,null,-1),f=d(`<p>With this change, our code is both better and worse. It&#39;s better because it no longer blocks the main thread while the JSON downloads from Whitehouse.gov. It&#39;s worse because we&#39;re pushing work to the background thread, <em>and any further code called in that work will also be on the background thread</em>.</p><p>This change also introduced some confusion: the <code>showError()</code> call will get called regardless of what the loading does. Yes, there’s still a call to <code>return</code> in the code, but it now effectively does nothing – it’s returning from the closure that was being executed asynchronously, not from the whole method.</p><p>The combination of these problems means that regardless of whether the download succeeds or fails, <code>showError()</code> will be called. And if the download succeeds, the JSON will be parsed on the background thread and the table view&#39;s <code>reloadData()</code> will be called on the background thread – and the error will be shown regardless.</p><p>Let’s fix those problems, starting with the user interface background work. It&#39;s OK to parse the JSON on a background thread, but <em>it&#39;s never OK to do user interface work there</em>.</p><p>That&#39;s so important it bears repeating twice: <strong>it&#39;s never OK to do user interface work on the background thread</strong>.</p><p>If you&#39;re on a background thread and want to execute code on the main thread, you need to call <code>async()</code> again. This time, however, you do it on <code>DispatchQueue.main</code>, which is the main thread, rather than one of the global quality of service queues.</p><p>We <em>could</em> modify our code to have <code>async()</code> before every call to <code>showError()</code> and <code>parse()</code>, but that&#39;s both ugly and inefficient. Instead, it&#39;s better to place the <code>async()</code> call inside <code>showError()</code>, wrapping up the whole <code>UIAlertController</code> code, and also inside <code>parse()</code>, but only where the table view is being reloaded. The actual JSON parsing can happily stay on the background thread.</p><p>So, inside the <code>parse()</code> method find this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">tableView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>…and replace it with this new code, bearing in mind again the need for <code>self.</code> to make our capturing clear:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>tableView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To stop <code>showError()</code> being called regardless of the result of our fetch call, we need to move it inside the call to <code>DispatchQueue.global()</code> in <code>viewDidLoad()</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token punctuation">.</span>userInitiated<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlString<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember, we need to add <code>self.</code> to the <code>showError()</code> call because it’s inside a closure now.</p><p>But this has created a second problem: <code>showError()</code> creates and shows a <code>UIAlertController</code> – we now have user interface work happening on a background thread, which is always a bad idea.</p><p>So, we need to modify <code>showError()</code> to push that work back to the main thread, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Loading error&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;There was a problem loading the feed; please check your connection and try again.&quot;</span></span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">        ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point, this code is in a better place: we do all the slow work off the main thread, then push work back to the main thread when we want to do user interface work. This background/foreground bounce is common, and you&#39;ll see it again in later projects.</p>`,18);function b(i,v){const e=o("VPCard"),c=o("VidStack");return u(),l("div",null,[a("h1",k,[a("a",m,[a("span",null,r(i.$frontmatter.title)+" 관련",1)])]),n(e,s(t({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,g,n(e,s(t({title:"Back to the main thread: DispatchQueue.main | Hacking with iOS",desc:"Back to the main thread: DispatchQueue.main",link:"https://hackingwithswift.com/read/9/4/back-to-the-main-thread-dispatchqueuemain",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n(c,{src:"youtube/8Q7JNnPBvXw"}),f])}const D=p(h,[["render",b],["__file","04-back-to-the-main-thread-dispatchqueuemain.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/read/09/04-back-to-the-main-thread-dispatchqueuemain.html","title":"Back to the main thread: DispatchQueue.main","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Back to the main thread: DispatchQueue.main","description":"Article(s) > Back to the main thread: DispatchQueue.main","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Back to the main thread: DispatchQueue.main"},{"property":"og:description","content":"Back to the main thread: DispatchQueue.main"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/09/04-back-to-the-main-thread-dispatchqueuemain.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/09/04-back-to-the-main-thread-dispatchqueuemain.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Back to the main thread: DispatchQueue.main"}],["meta",{"property":"og:description","content":"Article(s) > Back to the main thread: DispatchQueue.main"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Back to the main thread: DispatchQueue.main\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.38,"words":713},"filePathRelative":"hackingwithswift.com/read/09/04-back-to-the-main-thread-dispatchqueuemain.md","excerpt":"\\n"}');export{D as comp,S as data};
