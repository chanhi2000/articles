import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as d,g as m,w as a,f as h,r as i,o as k,d as t}from"./app-BgNevrm5.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},w=n("hr",null,null,-1),f=h(`<p>Indexing is a powerful technique used in databases to improve query performance. An index is essentially a data structure that stores the location of rows based on specific column values, much like an index at the back of a book helps you quickly locate a topic.</p><p>Without an index, SQLite has to scan the entire table row by row to find the relevant data, which becomes inefficient as the dataset grows. By using an index, SQLite can jump directly to the rows you need, significantly speeding up query execution.</p><hr><h2 id="how-to-populate-the-database-with-fake-data" tabindex="-1"><a class="header-anchor" href="#how-to-populate-the-database-with-fake-data"><span>How to Populate the Database with Fake Data</span></a></h2><p>To effectively test the impact of indexing, we need a sizable dataset. Instead of manually adding records, we can use the <code>faker</code> library to quickly generate fake data. In this section, we’ll generate 10,000 fake records and insert them into our <code>Students</code> table. This will simulate a real-world scenario where databases grow large, and query performance becomes important.</p><p>We will use the <code>executemany()</code> method to insert the records as below:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"><span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Initialize the Faker library</span></span>
<span class="line">fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;en_IN&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">insert_fake_students</span><span class="token punctuation">(</span>num_records<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Generate and insert fake student data into the Students table.&quot;&quot;&quot;</span></span>
<span class="line">    fake_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fake<span class="token punctuation">.</span>random_int<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                  fake<span class="token punctuation">.</span>email<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_records<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Use &#39;with&#39; to handle the database connection</span></span>
<span class="line">    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">        cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Insert fake data into the Students table</span></span>
<span class="line">        cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">        INSERT INTO Students (name, age, email) </span>
<span class="line">        VALUES (?, ?, ?);</span>
<span class="line">        &#39;&#39;&#39;</span><span class="token punctuation">,</span> fake_data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>num_records<span class="token punctuation">}</span></span><span class="token string"> fake student records inserted successfully.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Insert 10,000 fake records into the Students table</span></span>
<span class="line">insert_fake_students<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By running this script, 10,000 fake student records will be added to the <code>Students</code> table. In the next section, we&#39;ll query the database and compare the performance of queries with and without indexing.</p><h2 id="how-to-query-without-indexes" tabindex="-1"><a class="header-anchor" href="#how-to-query-without-indexes"><span>How to Query Without Indexes</span></a></h2><p>In this section, we’ll query the <code>Students</code> table without any indexes to observe how SQLite performs when there are no optimizations in place. This will serve as a baseline to compare the performance when we add indexes later.</p><p>Without indexes, SQLite performs a full table scan, which means that it must check every row in the table to find matching results. For small datasets, this is manageable, but as the number of records grows, the time taken to search increases dramatically. Let’s see this in action by running a basic <code>SELECT</code> query to search for a specific student by name and measure how long it takes.</p><p>First, we’ll query the <code>Students</code> table by looking for a student with a specific name. We’ll log the time taken to execute the query using Python’s <code>time</code> module to measure the performance.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">query_without_index</span><span class="token punctuation">(</span>search_name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Query the Students table by name without an index and measure the time taken.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Connect to the database using &#39;with&#39;</span></span>
<span class="line">    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">        cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Measure the start time</span></span>
<span class="line">        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter_ns<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Perform a SELECT query to find a student by name</span></span>
<span class="line">        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">        SELECT * FROM Students WHERE name = ?;</span>
<span class="line">        &#39;&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>search_name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Fetch all results (there should be only one or a few in practice)</span></span>
<span class="line">        results <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Measure the end time</span></span>
<span class="line">        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter_ns<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Calculate the total time taken</span></span>
<span class="line">        elapsed_time <span class="token operator">=</span> <span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Display the results and the time taken</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Query completed in </span><span class="token interpolation"><span class="token punctuation">{</span>elapsed_time<span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> microseconds.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Results:&quot;</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Example: Searching for a student by name</span></span>
<span class="line">query_without_index<span class="token punctuation">(</span><span class="token string">&#39;Ojasvi Dhawan&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s the output:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Query completed in 1578.10000 microseconds.</span>
<span class="line">Results: [(104, &#39;Ojasvi Dhawan&#39;, 21, &#39;lavanya26@example.com&#39;)]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>By running the above script, you&#39;ll see how long it takes to search the <code>Students</code> table without any indexes. For example, if there are 10,000 records in the table, the query might take 1000-2000 microseconds depending on the size of the table and your hardware. This may not seem too slow for a small dataset, but the performance will degrade as more records are added.</p><p>We use <code>time.perf_counter_ns()</code> to measure the time taken for the query execution in nanoseconds. This method is highly accurate for benchmarking small time intervals. We convert the time to microseconds(<code>us</code>) for easier readability.</p><hr><h2 id="introducing-the-query-plan" tabindex="-1"><a class="header-anchor" href="#introducing-the-query-plan"><span>Introducing the Query Plan</span></a></h2><p>When working with databases, understanding how queries are executed can help you identify performance bottlenecks and optimize your code. SQLite provides a helpful tool for this called <code>EXPLAIN QUERY PLAN</code>, which allows you to analyze the steps SQLite takes to retrieve data.</p><p>In this section, we’ll introduce how to use <code>EXPLAIN QUERY PLAN</code> to visualize and understand the inner workings of a query—specifically, how SQLite performs a full table scan when no index is present.</p><p>Let’s use <code>EXPLAIN QUERY PLAN</code> to see how SQLite retrieves data from the <code>Students</code> table without any indexes. We’ll search for a student by name, and the query plan will reveal the steps SQLite takes to find the matching rows.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">explain_query</span><span class="token punctuation">(</span>search_name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Explain the query execution plan for a SELECT query without an index.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">        cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Use EXPLAIN QUERY PLAN to analyze how the query is executed</span></span>
<span class="line">        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">        EXPLAIN QUERY PLAN</span>
<span class="line">        SELECT * FROM Students WHERE name = ?;</span>
<span class="line">        &#39;&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>search_name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Fetch and display the query plan</span></span>
<span class="line">        query_plan <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Query Plan:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> step <span class="token keyword">in</span> query_plan<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Example: Analyzing the query plan for searching by name</span></span>
<span class="line">explain_query<span class="token punctuation">(</span><span class="token string">&#39;Ojasvi Dhawan&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you run this code, SQLite will return a breakdown of how it plans to execute the query. Here’s an example of what the output might look like:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Query Plan:</span>
<span class="line">(2, 0, 0, &#39;SCAN Students&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This indicates that SQLite is scanning the entire <code>Students</code> table (a full table scan) to find the rows where the <code>name</code> column matches the provided value (<code>Ojasvi Dhawan</code>). Since there is no index on the <code>name</code> column, SQLite must examine each row in the table.</p><hr><h2 id="how-to-create-an-index" tabindex="-1"><a class="header-anchor" href="#how-to-create-an-index"><span>How to Create an Index</span></a></h2><p>Creating an index on a column allows SQLite to find rows more quickly during query operations. Instead of scanning the entire table, SQLite can use the index to jump directly to the relevant rows, significantly speeding up queries—especially those involving large datasets.</p><p>To create an index, use the following SQL command:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token keyword">index</span><span class="token operator">-</span>name <span class="token keyword">ON</span> <span class="token keyword">table</span> <span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this example, we will create an index on the <code>name</code> column of the <code>Students</code> table. Here’s how you can do it using Python:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">create_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Create an index on the name column of the Students table.&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">        cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># SQL command to create an index on the name column</span></span>
<span class="line">        create_index_query <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">        CREATE INDEX IF NOT EXISTS idx_name ON Students (name);</span>
<span class="line">        &#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Measure the start time</span></span>
<span class="line">        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter_ns<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Execute the SQL command to create the index</span></span>
<span class="line">        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>create_index_query<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Measure the start time</span></span>
<span class="line">        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter_ns<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Commit the changes</span></span>
<span class="line">        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Index on &#39;name&#39; column created successfully!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Calculate the total time taken</span></span>
<span class="line">        elapsed_time <span class="token operator">=</span> <span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Display the results and the time taken</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Query completed in </span><span class="token interpolation"><span class="token punctuation">{</span>elapsed_time<span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> microseconds.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Call the function to create the index</span></span>
<span class="line">create_index<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Index on &#39;name&#39; column created successfully!</span>
<span class="line">Query completed in 102768.60000 microseconds.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Even though creating the index takes this long (102768.6 microseconds), it&#39;s a one-time operation. You will still get substantial speed-up when running multiple queries. In the following sections, we will query the database again to observe the performance improvements made possible by this index.</p><h2 id="how-to-query-with-indexes" tabindex="-1"><a class="header-anchor" href="#how-to-query-with-indexes"><span>How to Query with Indexes</span></a></h2><p>In this section, we will perform the same <code>SELECT</code> query we executed earlier, but this time we will take advantage of the index we created on the <code>name</code> column of the <code>Students</code> table. We&#39;ll measure and log the execution time to observe the performance improvements provided by the index.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">query_with_index</span><span class="token punctuation">(</span>student_name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Query the Students table using an index on the name column.&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line">        cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># SQL command to select a student by name</span></span>
<span class="line">        select_query <span class="token operator">=</span> <span class="token string">&#39;SELECT * FROM Students WHERE name = ?;&#39;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Measure the execution time</span></span>
<span class="line">        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter_ns<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Start the timer</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Execute the query with the provided student name</span></span>
<span class="line">        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>select_query<span class="token punctuation">,</span> <span class="token punctuation">(</span>student_name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Fetch all results</span></span>
<span class="line"></span>
<span class="line">        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter_ns<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># End the timer</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Calculate the elapsed time in microseconds</span></span>
<span class="line">        execution_time <span class="token operator">=</span> <span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Display results and execution time</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Query result: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Execution time with index: </span><span class="token interpolation"><span class="token punctuation">{</span>execution_time<span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string"> microseconds&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Example: Searching for a student by name</span></span>
<span class="line">query_with_index<span class="token punctuation">(</span><span class="token string">&#39;Ojasvi Dhawan&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s what we get in the output:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Query result: [(104, &#39;Ojasvi Dhawan&#39;, 21, &#39;lavanya26@example.com&#39;)]</span>
<span class="line">Execution time with index: 390.70000 microseconds</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We can observe a significant reduction in execution time compared to when the query was performed without an index.</p><p>Let’s analyze the query execution plan for the query with the index on the <code>name</code> column of the <code>Students</code> table. If you execute the same script again to explain the query, you’ll get the below output:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Query Plan:</span>
<span class="line">(3, 0, 0, &#39;SEARCH Students USING INDEX idx_name (name=?)&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The plan now shows that the query uses the index <code>idx_name</code>, significantly reducing the number of rows that need to be scanned, which leads to faster query execution.</p><hr><h2 id="comparing-performance-results" tabindex="-1"><a class="header-anchor" href="#comparing-performance-results"><span>Comparing Performance Results</span></a></h2><p>Now, let&#39;s summarize the performance results we obtained when querying with and without indexes.</p><h3 id="execution-time-comparison" tabindex="-1"><a class="header-anchor" href="#execution-time-comparison"><span>Execution Time Comparison</span></a></h3><p>| Query Type | Execution Time (microseconds) | Without Index | 1578.1 | | With Index | 390.7 |</p><h3 id="performance-improvement-summary" tabindex="-1"><a class="header-anchor" href="#performance-improvement-summary"><span>Performance Improvement Summary</span></a></h3><ul><li>The query with the index is approximately 4.04 times faster than the query without the index.</li><li>The execution time improved by about 75.24% after adding the index.</li></ul><hr><h2 id="best-practices-for-using-indexes" tabindex="-1"><a class="header-anchor" href="#best-practices-for-using-indexes"><span>Best Practices for Using Indexes</span></a></h2><p>Indexes can significantly enhance the performance of your SQLite database, but they should be used judiciously. Here are some best practices to consider when working with indexes:</p><h3 id="when-and-why-to-use-indexes" tabindex="-1"><a class="header-anchor" href="#when-and-why-to-use-indexes"><span>When and Why to Use Indexes</span></a></h3><ol><li><strong>Frequent Query Columns</strong>: Use indexes on columns that are frequently used in <code>SELECT</code> queries, especially those used in <code>WHERE</code>, <code>JOIN</code>, and <code>ORDER BY</code> clauses. This is because indexing these columns can drastically reduce query execution time.</li><li><strong>Uniqueness Constraints</strong>: When you have columns that must hold unique values (like usernames or email addresses), creating an index can enforce this constraint efficiently.</li><li><strong>Large Datasets</strong>: For tables with a large number of records, indexes become increasingly beneficial. They enable quick lookups, which is essential for maintaining performance as your data grows.</li><li><strong>Composite Indexes</strong>: Consider creating composite indexes for queries that filter or sort by multiple columns. For example, if you often search for students by both <code>name</code> and <code>age</code>, an index on both columns can optimize such queries.</li></ol><h3 id="potential-downsides-of-indexes" tabindex="-1"><a class="header-anchor" href="#potential-downsides-of-indexes"><span>Potential Downsides of Indexes</span></a></h3><p>While indexes provide significant advantages, there are some potential downsides:</p><ol><li><strong>Slower Insert/Update Operations</strong>: When you insert or update records in a table with indexes, SQLite must also update the index, which can slow down these operations. This is because each insert or update requires additional overhead to maintain the index structure.</li><li><strong>Increased Storage Requirements</strong>: Indexes consume additional disk space. For large tables, the storage cost can be substantial. Consider this when designing your database schema, especially for systems with limited storage resources.</li><li><strong>Complex Index Management</strong>: Having too many indexes can complicate database management. It may lead to situations where you have redundant indexes, which can degrade performance rather than enhance it. Regularly reviewing and optimizing your indexes is a good practice.</li></ol><p>Indexes are powerful tools for optimizing database queries, but they require careful consideration. Striking a balance between improved read performance and the potential overhead on write operations is key. Here are some strategies for achieving this balance:</p><ul><li><strong>Monitor Query Performance</strong>: Use SQLite’s <code>EXPLAIN QUERY PLAN</code> to analyze how your queries perform with and without indexes. This can help identify which indexes are beneficial and which may be unnecessary.</li><li><strong>Regular Maintenance</strong>: Periodically review your indexes and assess whether they are still needed. Remove redundant or rarely used indexes to streamline your database operations.</li><li><strong>Test and Evaluate</strong>: Before implementing indexes in a production environment, conduct thorough testing to understand their impact on both read and write operations.</li></ul><p>By following these best practices, you can leverage the benefits of indexing while minimizing potential drawbacks, ultimately enhancing the performance and efficiency of your SQLite database.</p>`,63);function x(o,q){const l=i("VPCard"),e=i("router-link"),p=i("SiteInfo");return k(),r("div",null,[n("h1",b,[n("a",y,[n("span",null,u(o.$frontmatter.title)+" 관련",1)])]),s(l,d(m({title:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",link:"/freecodecamp.org/work-with-sqlite-in-python-handbook/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),n("nav",g,[n("ul",null,[n("li",null,[s(e,{to:"#how-to-populate-the-database-with-fake-data"},{default:a(()=>[t("How to Populate the Database with Fake Data")]),_:1})]),n("li",null,[s(e,{to:"#how-to-query-without-indexes"},{default:a(()=>[t("How to Query Without Indexes")]),_:1})]),n("li",null,[s(e,{to:"#introducing-the-query-plan"},{default:a(()=>[t("Introducing the Query Plan")]),_:1})]),n("li",null,[s(e,{to:"#how-to-create-an-index"},{default:a(()=>[t("How to Create an Index")]),_:1})]),n("li",null,[s(e,{to:"#how-to-query-with-indexes"},{default:a(()=>[t("How to Query with Indexes")]),_:1})]),n("li",null,[s(e,{to:"#comparing-performance-results"},{default:a(()=>[t("Comparing Performance Results")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#execution-time-comparison"},{default:a(()=>[t("Execution Time Comparison")]),_:1})]),n("li",null,[s(e,{to:"#performance-improvement-summary"},{default:a(()=>[t("Performance Improvement Summary")]),_:1})])])]),n("li",null,[s(e,{to:"#best-practices-for-using-indexes"},{default:a(()=>[t("Best Practices for Using Indexes")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#when-and-why-to-use-indexes"},{default:a(()=>[t("When and Why to Use Indexes")]),_:1})]),n("li",null,[s(e,{to:"#potential-downsides-of-indexes"},{default:a(()=>[t("Potential Downsides of Indexes")]),_:1})])])])])]),w,s(p,{name:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",url:"https://freecodecamp.org/news/work-with-sqlite-in-python-handbook/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}),f])}const I=c(v,[["render",x],["__file","how-to-optimize-sqlite-query-performance-with-indexing.html.vue"]]),Q=JSON.parse('{"path":"/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-optimize-sqlite-query-performance-with-indexing.html","title":"How to Optimize SQLite Query Performance with Indexing","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to Optimize SQLite Query Performance with Indexing","description":"Article(s) > (8/11) How to Work with SQLite in Python – A Handbook for Beginners","category":["Python","SQLite","Article(s)"],"tag":["blog","freecodecamp.org","py","python","sqlite"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > (8/11) How to Work with SQLite in Python – A Handbook for Beginners"},{"property":"og:description","content":"How to Optimize SQLite Query Performance with Indexing"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-optimize-sqlite-query-performance-with-indexing.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-optimize-sqlite-query-performance-with-indexing.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Optimize SQLite Query Performance with Indexing"}],["meta",{"property":"og:description","content":"Article(s) > (8/11) How to Work with SQLite in Python – A Handbook for Beginners"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"name":"twitter:image:alt","content":"How to Optimize SQLite Query Performance with Indexing"}],["meta",{"property":"article:author","content":"Ashutosh Krishna"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"sqlite"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Optimize SQLite Query Performance with Indexing\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Krishna\\"}]}"]],"date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Ashutosh Krishna","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"},"headers":[{"level":2,"title":"How to Populate the Database with Fake Data","slug":"how-to-populate-the-database-with-fake-data","link":"#how-to-populate-the-database-with-fake-data","children":[]},{"level":2,"title":"How to Query Without Indexes","slug":"how-to-query-without-indexes","link":"#how-to-query-without-indexes","children":[]},{"level":2,"title":"Introducing the Query Plan","slug":"introducing-the-query-plan","link":"#introducing-the-query-plan","children":[]},{"level":2,"title":"How to Create an Index","slug":"how-to-create-an-index","link":"#how-to-create-an-index","children":[]},{"level":2,"title":"How to Query with Indexes","slug":"how-to-query-with-indexes","link":"#how-to-query-with-indexes","children":[]},{"level":2,"title":"Comparing Performance Results","slug":"comparing-performance-results","link":"#comparing-performance-results","children":[{"level":3,"title":"Execution Time Comparison","slug":"execution-time-comparison","link":"#execution-time-comparison","children":[]},{"level":3,"title":"Performance Improvement Summary","slug":"performance-improvement-summary","link":"#performance-improvement-summary","children":[]}]},{"level":2,"title":"Best Practices for Using Indexes","slug":"best-practices-for-using-indexes","link":"#best-practices-for-using-indexes","children":[{"level":3,"title":"When and Why to Use Indexes","slug":"when-and-why-to-use-indexes","link":"#when-and-why-to-use-indexes","children":[]},{"level":3,"title":"Potential Downsides of Indexes","slug":"potential-downsides-of-indexes","link":"#potential-downsides-of-indexes","children":[]}]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":7.57,"words":2270},"filePathRelative":"freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-optimize-sqlite-query-performance-with-indexing.md","localizedDate":"2024년 10월 2일","excerpt":"\\n","copyright":{"author":"Ashutosh Krishna"}}');export{I as comp,Q as data};
