import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as e,t as l,e as t,n as s,g as n,f as d,r as a,o as h}from"./app-BgNevrm5.js";const u={},m={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},w=e("nav",{class:"table-of-contents"},[e("ul")],-1),y=e("hr",null,null,-1),b=d(`<p>There&#39;s one last thing to cover before this project is done, and it&#39;s both small and easy: property observers. You learned about these when we looked at the fundamentals of Swift, but now itâ€™s time to put them into action.</p><p>Right now we have a property called <code>score</code> that is set to 0 when the game is created and increments by one whenever an answer is found. But we don&#39;t do anything with that score, so our score label is never updated.</p><p>One solution to this problem is to use something like <code>scoreLabel.text = &quot;Score: \\(score)&quot;</code> whenever the score value is changed, and that&#39;s perfectly fine to begin with. But what happens if you&#39;re changing the score from several places? You need to keep all the code synchronized, which is unpleasant.</p><p>Swiftâ€™s solution is property observers, which let you execute code whenever a property has changed. To make them work, we use either <code>didSet</code> to execute code when a property has just been set, or <code>willSet</code> to execute code before a property has been set.</p><p>In our case, we want to add a property observer to our <code>score</code> property so that we update the score label whenever the score value was changed. So, change your <code>score</code> property to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        scoreLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using this method, any time <code>score</code> is changed by anyone, our score label will be updated. That&#39;s it, the project is done!</p>`,7);function f(r,v){const o=a("VPCard"),i=a("VidStack");return h(),p("div",null,[e("h1",m,[e("a",g,[e("span",null,l(r.$frontmatter.title)+" ê´€ë ¨",1)])]),t(o,s(n({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,y,t(o,s(n({title:"Property observers: didSet | Hacking with iOS",desc:"Property observers: didSet",link:"https://hackingwithswift.com/read/8/5/property-observers-didset",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(i,{src:"youtube/_0nER-JW9tU"}),b])}const _=c(u,[["render",f],["__file","05-property-observers-didset.html.vue"]]),P=JSON.parse('{"path":"/hackingwithswift.com/read/08/05-property-observers-didset.html","title":"Property observers: didSet","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Property observers: didSet","description":"Article(s) > Property observers: didSet","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Property observers: didSet"},{"property":"og:description","content":"Property observers: didSet"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/08/05-property-observers-didset.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/08/05-property-observers-didset.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Property observers: didSet"}],["meta",{"property":"og:description","content":"Article(s) > Property observers: didSet"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Property observers: didSet\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"hackingwithswift.com/read/08/05-property-observers-didset.md","excerpt":"\\n"}');export{_ as comp,P as data};
