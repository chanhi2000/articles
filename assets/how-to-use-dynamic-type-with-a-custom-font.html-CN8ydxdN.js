import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as s,t as r,e as n,n as t,g as e,f as o,r as i,o as d}from"./app-BgNevrm5.js";const k={},m={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},h=s("nav",{class:"table-of-contents"},[s("ul")],-1),f=s("hr",null,null,-1),v=o(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>If you’re using iOS 14 or later you’ll find your custom fonts scale automatically with no further work from you. However, if you want your fonts to scale relative to a specific Dynamic Type font, you should use the <code>relativeTo</code> parameter like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Scaling&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Georgia&quot;</span></span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> relativeTo<span class="token punctuation">:</span> <span class="token punctuation">.</span>headline<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y=o(`<p>That will start the font at 24pt, but it will scale up and down relative to the Headline Dynamic Type font.</p><p>If you want to disable Dynamic Type for your font – if you want to fix the font size so it never changes regardless of the Dynamic Type setting – then you should replace <code>size</code> with <code>fixedSize</code> when creating your custom font, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This Scales&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Georgia&quot;</span></span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is Fixed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Georgia&quot;</span></span><span class="token punctuation">,</span> fixedSize<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need to target iOS 13 then continue reading below…</p><p>SwiftUI comes with support for all of Dynamic Type’s font sizes, all set using the <code>.font()</code> modifier. However, if you ask for a specific font and size, you’ll find your text no longer scales up or down automatically according to the user’s Dynamic Type settings – it remains fixed.</p><p>To work around this we need to create a custom <code>ViewModifier</code> that can scale up our font size based on the current accessibility setting, and also detect when that setting changes.</p><p>I’m going to give you the code first, then walk through how it works and why:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@available</span><span class="token punctuation">(</span>iOS <span class="token number">13</span><span class="token punctuation">,</span> macCatalyst <span class="token number">13</span><span class="token punctuation">,</span> tvOS <span class="token number">13</span><span class="token punctuation">,</span> watchOS <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ScaledFont</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>sizeCategory<span class="token punctuation">)</span> <span class="token keyword">var</span> sizeCategory</span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">let</span> scaledSize <span class="token operator">=</span> <span class="token class-name">UIFontMetrics</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">scaledValue</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> size<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">:</span> scaledSize<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@available</span><span class="token punctuation">(</span>iOS <span class="token number">13</span><span class="token punctuation">,</span> macCatalyst <span class="token number">13</span><span class="token punctuation">,</span> tvOS <span class="token number">13</span><span class="token punctuation">,</span> watchOS <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">scaledFont</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">ScaledFont</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s all the code required to get custom fonts working with Dynamic Type. As an example of using it, here’s a list with two text views, one using the built-in font and one with a scalable Georgia font:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">scaledFont</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Georgia&quot;</span></span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),g=o(`<p>Now you’ve seen <em>how</em> it works, let’s look at <em>why</em> it works.</p><p>First, we have this custom view modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ScaledFont</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>sizeCategory<span class="token punctuation">)</span> <span class="token keyword">var</span> sizeCategory</span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">let</span> scaledSize <span class="token operator">=</span> <span class="token class-name">UIFontMetrics</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">scaledValue</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> size<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">:</span> scaledSize<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That accepts a name and size for our font, then uses <code>UIFontMetrics</code> to scale up the requested font to whatever matches the user’s current device setting, and send it back.</p><p>We then wrap that inside an extension on <code>View</code> to make it easier to use:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@available</span><span class="token punctuation">(</span>iOS <span class="token number">13</span><span class="token punctuation">,</span> macCatalyst <span class="token number">13</span><span class="token punctuation">,</span> tvOS <span class="token number">13</span><span class="token punctuation">,</span> watchOS <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">scaledFont</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">ScaledFont</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All that does is wrap up the call to our custom font modifier so that it looks nicer in our views – it means we write <code>.scaledFont(name: &quot;Georgia&quot;, size: 12)</code> to use it, rather than <code>.modifier(ScaledFont(name: &quot;Georgia&quot;, size: 12))</code>.</p><p>Now, you might wonder why we need the custom view modifier if all we do is pass on the data. Well, the clue lies in this line in our view modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>sizeCategory<span class="token punctuation">)</span> <span class="token keyword">var</span> sizeCategory</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That asks the system to provide the current size category from the environment, which determines what level Dynamic Type is set to. The trick is that we <em>don’t actually use it</em> – we don’t care what the Dynamic Type setting is, but by asking the system to update us when it changes our <code>UIFontMetrics</code> code will be run at the same time, causing our font to scale correctly.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The <code>UIFontMetrics</code> class is not available on macOS, which is why I’ve added the <code>@available</code> markers.</p></div>`,11),b={class:"hint-container details"},x=s("summary",null,"Similar solutions…",-1);function S(c,T){const a=i("VPCard"),p=i("VidStack");return d(),u("div",null,[s("h1",m,[s("a",w,[s("span",null,r(c.$frontmatter.title)+" 관련",1)])]),n(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,f,n(a,t(e({title:"How to use Dynamic Type with a custom font | SwiftUI by Example",desc:"How to use Dynamic Type with a custom font",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-use-dynamic-type-with-a-custom-font",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n(p,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-dynamic-type-with-a-custom-font-1~dark.mp4"}),y,n(p,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-use-dynamic-type-with-a-custom-font-2~dark.mp4"}),g,s("details",b,[x,n(a,t(e({title:"How to specify the Dynamic Type sizes a view supports | SwiftUI by Example",desc:"How to specify the Dynamic Type sizes a view supports",link:"/hackingwithswift.com/swiftui/how-to-specify-the-dynamic-type-sizes-a-view-supports.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to preview your layout at different Dynamic Type sizes | SwiftUI by Example",desc:"How to preview your layout at different Dynamic Type sizes",link:"/hackingwithswift.com/swiftui/how-to-preview-your-layout-at-different-dynamic-type-sizes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to create a list of dynamic items | SwiftUI by Example",desc:"How to create a list of dynamic items",link:"/hackingwithswift.com/swiftui/how-to-create-a-list-of-dynamic-items.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to fix “Cannot convert value of type 'String' to expected argument type 'Text'” | SwiftUI by Example",desc:"How to fix “Cannot convert value of type 'String' to expected argument type 'Text'”",link:"/hackingwithswift.com/swiftui/how-to-fix-cannot-convert-value-of-type-string-to-expected-argument-type-text.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to fix “Cannot convert value of type '() -> ()' to expected argument type '() -> _'” | SwiftUI by Example",desc:"How to fix “Cannot convert value of type '() -> ()' to expected argument type '() -> _'”",link:"/hackingwithswift.com/swiftui/how-to-fix-cannot-convert-value-of-type-to-expected-argument-type.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const D=l(k,[["render",S],["__file","how-to-use-dynamic-type-with-a-custom-font.html.vue"]]),q=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-use-dynamic-type-with-a-custom-font.html","title":"How to use Dynamic Type with a custom font","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use Dynamic Type with a custom font","description":"Article(s) > How to use Dynamic Type with a custom font","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use Dynamic Type with a custom font"},{"property":"og:description","content":"How to use Dynamic Type with a custom font"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-dynamic-type-with-a-custom-font.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-use-dynamic-type-with-a-custom-font.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use Dynamic Type with a custom font"}],["meta",{"property":"og:description","content":"Article(s) > How to use Dynamic Type with a custom font"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use Dynamic Type with a custom font\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.68,"words":1103},"filePathRelative":"hackingwithswift.com/swiftui/how-to-use-dynamic-type-with-a-custom-font.md","excerpt":"\\n"}');export{D as comp,q as data};
