import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as n,t as r,e as s,n as t,g as e,d as u,f as d,r as o,o as k}from"./app-BgNevrm5.js";const m={},w={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),b=d(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Once you understand SwiftUI’s basic path drawing system, you can add all sorts of shapes easily. For example, we could create a <code>Star</code> shape that is capable of representing a variety of star shapes, or even other polygons, with just a little mathematics.</p><p>Here’s that in code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Star</span><span class="token punctuation">:</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// store how many corners the star has, and how smooth/pointed it is</span></span>
<span class="line">    <span class="token keyword">let</span> corners<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> smoothness<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span> rect<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Path</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ensure we have at least two corners, otherwise send back an empty path</span></span>
<span class="line">        <span class="token keyword">guard</span> corners <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// draw from the center of our rectangle</span></span>
<span class="line">        <span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// start from directly upwards (as opposed to down or to the right)</span></span>
<span class="line">        <span class="token keyword">var</span> currentAngle <span class="token operator">=</span> <span class="token operator">-</span><span class="token class-name">CGFloat</span><span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// calculate how much we need to move with each star corner</span></span>
<span class="line">        <span class="token keyword">let</span> angleAdjustment <span class="token operator">=</span> <span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>corners <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// figure out how much we need to move X/Y for the inner points of the star</span></span>
<span class="line">        <span class="token keyword">let</span> innerX <span class="token operator">=</span> center<span class="token punctuation">.</span>x <span class="token operator">*</span> smoothness</span>
<span class="line">        <span class="token keyword">let</span> innerY <span class="token operator">=</span> center<span class="token punctuation">.</span>y <span class="token operator">*</span> smoothness</span>
<span class="line"></span>
<span class="line">        <span class="token comment">// we&#39;re ready to start with our path now</span></span>
<span class="line">        <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// move to our initial position</span></span>
<span class="line">        path<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> center<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>currentAngle<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> center<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>currentAngle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// track the lowest point we draw to, so we can center later</span></span>
<span class="line">        <span class="token keyword">var</span> bottomEdge<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// loop over all our points/inner points</span></span>
<span class="line">        <span class="token keyword">for</span> corner <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>corners <span class="token operator">*</span> <span class="token number">2</span>  <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// figure out the location of this point</span></span>
<span class="line">            <span class="token keyword">let</span> sinAngle <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>currentAngle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> cosAngle <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>currentAngle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> bottom<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// if we&#39;re a multiple of 2 we are drawing the outer edge of the star</span></span>
<span class="line">            <span class="token keyword">if</span> corner<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// store this Y position</span></span>
<span class="line">                bottom <span class="token operator">=</span> center<span class="token punctuation">.</span>y <span class="token operator">*</span> sinAngle</span>
<span class="line"></span>
<span class="line">                <span class="token comment">// …and add a line to there</span></span>
<span class="line">                path<span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> center<span class="token punctuation">.</span>x <span class="token operator">*</span> cosAngle<span class="token punctuation">,</span> y<span class="token punctuation">:</span> bottom<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// we&#39;re not a multiple of 2, which means we&#39;re drawing an inner point</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// store this Y position</span></span>
<span class="line">                bottom <span class="token operator">=</span> innerY <span class="token operator">*</span> sinAngle</span>
<span class="line"></span>
<span class="line">                <span class="token comment">// …and add a line to there</span></span>
<span class="line">                path<span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> innerX <span class="token operator">*</span> cosAngle<span class="token punctuation">,</span> y<span class="token punctuation">:</span> bottom<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// if this new bottom point is our lowest, stash it away for later</span></span>
<span class="line">            <span class="token keyword">if</span> bottom <span class="token operator">&gt;</span> bottomEdge <span class="token punctuation">{</span></span>
<span class="line">                bottomEdge <span class="token operator">=</span> bottom</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// move on to the next corner</span></span>
<span class="line">            currentAngle <span class="token operator">+=</span> angleAdjustment</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// figure out how much unused space we have at the bottom of our drawing rectangle</span></span>
<span class="line">        <span class="token keyword">let</span> unusedSpace <span class="token operator">=</span> <span class="token punctuation">(</span>rect<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> bottomEdge<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// create and apply a transform that moves our path down by that amount, centering the shape vertically</span></span>
<span class="line">        <span class="token keyword">let</span> transform <span class="token operator">=</span> <span class="token class-name">CGAffineTransform</span><span class="token punctuation">(</span>translationX<span class="token punctuation">:</span> center<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> center<span class="token punctuation">.</span>y <span class="token operator">+</span> unusedSpace<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">applying</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Draw our star shape in a view</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Star</span><span class="token punctuation">(</span>corners<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> smoothness<span class="token punctuation">:</span> <span class="token number">0.45</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),f={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-draw-polygons-and-stars-1.zip",target:"_blank",rel:"noopener noreferrer"},y=n("figure",null,[n("img",{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-draw-polygons-and-stars-1~dark@2x.png",alt:"A red five pointed star on a green square.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"A red five pointed star on a green square.")],-1),x=n("p",null,"As stars are just polygons, if you increase smoothness to 1 you’ll find you can draw shapes like hexagons and octagons without having to change the code.",-1),_=n("figure",null,[n("img",{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-draw-polygons-and-stars-2~dark@2x.png",alt:"A regular red hexagon on a green square.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"A regular red hexagon on a green square.")],-1),A={class:"hint-container details"},S=n("summary",null,"Similar solutions…",-1);function I(p,U){const a=o("VPCard"),i=o("FontIcon");return k(),c("div",null,[n("h1",w,[n("a",h,[n("span",null,r(p.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,g,s(a,t(e({title:"How to draw polygons and stars | SwiftUI by Example",desc:"How to draw polygons and stars",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-draw-polygons-and-stars",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",f,[s(i,{icon:"fas fa-file-zipper"}),u("Download this as an Xcode project")])])]),y,x,_,n("details",A,[S,s(a,t(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to use Instruments to profile your SwiftUI code and identify slow layouts | SwiftUI by Example",desc:"How to use Instruments to profile your SwiftUI code and identify slow layouts",link:"/hackingwithswift.com/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Building a menu using List | SwiftUI by Example",desc:"Building a menu using List",link:"/hackingwithswift.com/swiftui/building-a-menu-using-list.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Answering the big question: should you learn SwiftUI, UIKit, or both? | SwiftUI by Example",desc:"Answering the big question: should you learn SwiftUI, UIKit, or both?",link:"/hackingwithswift.com/swiftui/answering-the-big-question-should-you-learn-swiftui-uikit-or-both.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const H=l(m,[["render",I],["__file","how-to-draw-polygons-and-stars.html.vue"]]),P=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-draw-polygons-and-stars.html","title":"How to draw polygons and stars","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to draw polygons and stars","description":"Article(s) > How to draw polygons and stars","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to draw polygons and stars"},{"property":"og:description","content":"How to draw polygons and stars"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-draw-polygons-and-stars.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-draw-polygons-and-stars.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to draw polygons and stars"}],["meta",{"property":"og:description","content":"Article(s) > How to draw polygons and stars"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-draw-polygons-and-stars-1~dark@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to draw polygons and stars\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-draw-polygons-and-stars-1~dark@2x.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-draw-polygons-and-stars-2~dark@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.93,"words":878},"filePathRelative":"hackingwithswift.com/swiftui/how-to-draw-polygons-and-stars.md","excerpt":"\\n"}');export{H as comp,P as data};
