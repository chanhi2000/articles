import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as a,t as d,e as n,n as t,g as e,d as i,f as o,r as l,o as k}from"./app-BgNevrm5.js";const m={},h={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y=a("nav",{class:"table-of-contents"},[a("ul")],-1),g=a("hr",null,null,-1),f=o(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 16</strong></p><p>SwiftUI&#39;s <code>AnyLayout</code> struct allows us to switch between <code>HStack</code> and <code>VStack</code> freely, based on whatever environment context we want to take into account – just remember to use the <code>Layout</code>-conforming variants of each.</p><p>For example, we might want to show a group of images horizontally when we&#39;re in a regular horizontal size class, or vertically otherwise, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>horizontalSizeClass<span class="token punctuation">)</span> <span class="token keyword">var</span> horizontalSizeClass</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> layout <span class="token operator">=</span> horizontalSizeClass <span class="token operator">==</span> <span class="token punctuation">.</span>regular <span class="token operator">?</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">HStackLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">VStackLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        layout <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;1.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;2.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;3.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-dynamically-change-between-vstack-and-hstack-1.zip",target:"_blank",rel:"noopener noreferrer"},b=o(`<p>Tip: Unlike using <code>AnyView</code>, <code>AnyLayout</code> doesn&#39;t incur any performance impact, and won&#39;t discard any of the state of its child views.</p><p>Alternatively, we could flip the axis when the user&#39;s Dynamic Type size goes beyond a certain size:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>dynamicTypeSize<span class="token punctuation">)</span> <span class="token keyword">var</span> dynamicTypeSize</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> layout <span class="token operator">=</span> dynamicTypeSize <span class="token operator">&lt;=</span> <span class="token punctuation">.</span>xxxLarge <span class="token operator">?</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">HStackLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">VStackLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        layout <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;1.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;2.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;3.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),S={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-dynamically-change-between-vstack-and-hstack-2.zip",target:"_blank",rel:"noopener noreferrer"},_=o('<p>As well as <code>VStackLayout</code> and <code>HStackLayout</code>, you can also use <code>ZStackLayout</code> and <code>GridLayout</code>.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Any grid rows that are used in non-grid layouts don&#39;t do anything – they become the same as using <code>Group</code>.</p></div>',2),H={class:"hint-container details"},V=a("summary",null,"Similar solutions…",-1);function z(p,x){const s=l("VPCard"),c=l("FontIcon");return k(),r("div",null,[a("h1",h,[a("a",w,[a("span",null,d(p.$frontmatter.title)+" 관련",1)])]),n(s,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),y,g,n(s,t(e({title:"How to dynamically change between VStack and HStack | SwiftUI by Example",desc:"How to dynamically change between VStack and HStack",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-dynamically-change-between-vstack-and-hstack",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,a("blockquote",null,[a("p",null,[a("a",v,[n(c,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),b,a("blockquote",null,[a("p",null,[a("a",S,[n(c,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),_,a("details",H,[V,n(s,t(e({title:"How to automatically switch between HStack and VStack based on size class | SwiftUI by Example",desc:"How to automatically switch between HStack and VStack based on size class",link:"/hackingwithswift.com/swiftui/how-to-automatically-switch-between-hstack-and-vstack-based-on-size-class.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"How to create stacks using VStack and HStack | SwiftUI by Example",desc:"How to create stacks using VStack and HStack",link:"/hackingwithswift.com/swiftui/how-to-create-stacks-using-vstack-and-hstack.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"How to dynamically adjust the appearance of a view based on its size and location | SwiftUI by Example",desc:"How to dynamically adjust the appearance of a view based on its size and location",link:"/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"How to dynamically adjust the color of an SF Symbol | SwiftUI by Example",desc:"How to dynamically adjust the color of an SF Symbol",link:"/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-color-of-an-sf-symbol.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const A=u(m,[["render",z],["__file","how-to-dynamically-change-between-vstack-and-hstack.html.vue"]]),L=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-dynamically-change-between-vstack-and-hstack.html","title":"How to dynamically change between VStack and HStack","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to dynamically change between VStack and HStack","description":"Article(s) > How to dynamically change between VStack and HStack","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to dynamically change between VStack and HStack"},{"property":"og:description","content":"How to dynamically change between VStack and HStack"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-dynamically-change-between-vstack-and-hstack.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-dynamically-change-between-vstack-and-hstack.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to dynamically change between VStack and HStack"}],["meta",{"property":"og:description","content":"Article(s) > How to dynamically change between VStack and HStack"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to dynamically change between VStack and HStack\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"hackingwithswift.com/swiftui/how-to-dynamically-change-between-vstack-and-hstack.md","excerpt":"\\n"}');export{A as comp,L as data};
