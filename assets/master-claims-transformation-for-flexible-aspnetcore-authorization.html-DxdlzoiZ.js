import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as m,e as a,n as k,g as h,w as i,d as s,f as p,r as o,o as v}from"./app-BgNevrm5.js";const f={},b={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},w=n("hr",null,null,-1),C={href:"https://learn.microsoft.com/en-us/aspnet/core/security/authorization/claims",target:"_blank",rel:"noopener noreferrer"},T={href:"https://microsoft.com/en-us/security/business/identity-access/microsoft-entra-id",target:"_blank",rel:"noopener noreferrer"},_={href:"https://auth0.com",target:"_blank",rel:"noopener noreferrer"},A=p('<p>The solution? Claims transformation.</p><p>Claims transformation allows you to modify the claims before the application uses them for authorization.</p><p>In today&#39;s issue, we will:</p><ul><li>Explore the concept of claims transformation in ASP.NET Core</li><li>Explore the <code>IClaimsTransformation</code> interface with practical examples</li><li>Address considerations for security and RBAC (Role-Based Access Control)</li></ul><hr><h2 id="how-does-claims-transformation-work" tabindex="-1"><a class="header-anchor" href="#how-does-claims-transformation-work"><span>How Does Claims Transformation Work?</span></a></h2>',6),P={href:"https://en.wikipedia.org/wiki/Unified_Modeling_Language",target:"_blank",rel:"noopener noreferrer"},x={href:"https://en.wikipedia.org/wiki/Sequence_diagram",target:"_blank",rel:"noopener noreferrer"},I=p('<ol><li>The user authenticates with the Identity Provider</li><li>The user calls the backend API and provides an access token</li><li>The backend API performs claims transformation and authorization</li><li>If the user is correctly authorized, the backend API returns a response</li></ol><figure><img src="https://milanjovanovic.tech/blogs/mnw_084/claims_transformation_sequence_diagram.png?imwidth=3840" alt="Claims transformation sequence diagram." tabindex="0" loading="lazy"><figcaption>Claims transformation sequence diagram.</figcaption></figure><p>Let&#39;s see how to implement this in ASP.NET Core.</p><hr><h2 id="simple-claims-transformation" tabindex="-1"><a class="header-anchor" href="#simple-claims-transformation"><span>Simple Claims Transformation</span></a></h2><p>Claims can be created from any user or identity data issued by a trusted identity provider. A claim is a name-value pair that represents the subject&#39;s identity, not what the subject can do.</p>',6),S={href:"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/claims#extend-or-add-custom-claims-using-iclaimstransformation",target:"_blank",rel:"noopener noreferrer"},z={href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.iclaimstransformation",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"IClaimsTransformation",-1),R=p(`<p>It exposes a single method to transform claims:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IClaimsTransformation</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ClaimsPrincipal<span class="token punctuation">&gt;</span></span> <span class="token function">TransformAsync</span><span class="token punctuation">(</span><span class="token class-name">ClaimsPrincipal</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s a simple example of using <code>IClaimsTransformation</code> to add a custom claim:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomClaims</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">internal</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> CardType <span class="token operator">=</span> <span class="token string">&quot;card_type&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">CustomClaimsTransformation</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IClaimsTransformation</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ClaimsPrincipal<span class="token punctuation">&gt;</span></span> <span class="token function">TransformAsync</span><span class="token punctuation">(</span><span class="token class-name">ClaimsPrincipal</span> principal<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>claim <span class="token operator">=&gt;</span> claim<span class="token punctuation">.</span>Type <span class="token operator">==</span> CustomClaims<span class="token punctuation">.</span>CardType<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ClaimsIdentity</span> claimsIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        claimsIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>CustomClaims<span class="token punctuation">.</span>CardType<span class="token punctuation">,</span> <span class="token string">&quot;platinum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        principal<span class="token punctuation">.</span><span class="token function">AddIdentity</span><span class="token punctuation">(</span>claimsIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>CustomClaimsTransformation</code> class should be registered as a service:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services</span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IClaimsTransformation<span class="token punctuation">,</span> CustomClaimsTransformation<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, you can define a custom authorization policy that uses this claim:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;HasPlatinumCard&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        builder <span class="token operator">=&gt;</span> builder</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">RequireAuthenticatedUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span>CustomClaims<span class="token punctuation">.</span>CardType<span class="token punctuation">,</span> <span class="token string">&quot;platinum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are a few caveats with using <code>IClaimsTransformation</code> you should be aware of:</p><ul><li><strong>Might execute multiple times</strong>: The <code>TransformAsync</code> method might get called multiple times. Claims transformation should be idempotent to avoid adding the same claim multiple times to the <code>ClaimsPrincipal</code>.</li><li><strong>Potential performance impact</strong>: Since it&#39;s executed on authentication requests, be mindful of your transformation logic&#39;s performance, especially if it involves external calls (database, APIs). Consider caching where appropriate.</li></ul><hr><h2 id="implementing-rbac-with-claims-transformation" tabindex="-1"><a class="header-anchor" href="#implementing-rbac-with-claims-transformation"><span>Implementing RBAC With Claims Transformation</span></a></h2>`,12),E={href:"https://auth0.com/docs/manage-users/access-control/rbac",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>Let&#39;s consider a scenario where your application manages resources at a granular level, but your identity provider only provides coarse-grained roles like <code>Registered</code> or <code>Member</code>. You could use claims transformation to map the <code>Member</code> role to specific fine-grained permissions like <code>SubmitOrder</code> and <code>PurchaseTicket</code>.</p><p>Here&#39;s a more complex <code>CustomClaimsTransformation</code> implementation. We send a database query using <code>GetUserPermissionsQuery</code> and get the <code>PermissionsResponse</code> back. The <code>PermissionsResponse</code> contains the user&#39;s permissions, which are added as custom claims.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">CustomClaimsTransformation</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> IClaimsTransformation</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ClaimsPrincipal<span class="token punctuation">&gt;</span></span> <span class="token function">TransformAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ClaimsPrincipal</span> principal<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Type <span class="token operator">==</span> CustomClaims<span class="token punctuation">.</span>Sub <span class="token operator">||</span></span>
<span class="line">                                    c<span class="token punctuation">.</span>Type <span class="token operator">==</span> CustomClaims<span class="token punctuation">.</span>Permission<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> principal<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name">IServiceScope</span> scope <span class="token operator">=</span> serviceProvider<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ISender</span> sender <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ISender<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> identityId <span class="token operator">=</span> principal<span class="token punctuation">.</span><span class="token function">GetIdentityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Result<span class="token punctuation">&lt;</span>PermissionsResponse<span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetUserPermissionsQuery</span><span class="token punctuation">(</span>identityId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsFailure<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsAuthorizationException</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">nameof</span><span class="token punctuation">(</span>GetUserPermissionsQuery<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> claimsIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        claimsIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>CustomClaims<span class="token punctuation">.</span>Sub<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>UserId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> permission <span class="token keyword">in</span> result<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Permissions<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            claimsIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>CustomClaims<span class="token punctuation">.</span>Permission<span class="token punctuation">,</span> permission<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        principal<span class="token punctuation">.</span><span class="token function">AddIdentity</span><span class="token punctuation">(</span>claimsIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> principal<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that the <code>ClaimsPrincipal</code> contains the permissions as custom claims, you can do some interesting things. For example, you can implement a permission-based <code>AuthorizationHandler</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">PermissionAuthorizationHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthorizationHandler<span class="token punctuation">&lt;</span>PermissionRequirement<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">AuthorizationHandlerContext</span> context<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">PermissionRequirement</span> requirement<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line"><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;code-line highlight-line&quot;</span><span class="token operator">&gt;</span>        <span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> permissions <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>requirement<span class="token punctuation">.</span>Permission<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Claims transformation is an elegant way to bridge the gap between claims provided by identity providers and the needs of your ASP.NET Core application. The <code>IClaimsTransformation</code> interface enables you to customize the claims of the current <code>ClaimsPrincipal</code>. Whether you need to add roles, map external groups to internal permissions, or extract additional information from a user profile, claims transformation offers the flexibility to do so.</p><p>However, it&#39;s important to use claims transformation with a few key considerations in mind:</p><ul><li>Claims transformations are executed on each request.</li><li>The <code>IClaimsTransformation</code> should be idempotent. It should not add existing claims to the <code>ClaimsPrincipal</code> if executed multiple times.</li><li>Design your transformations efficiently, and consider caching the results if you&#39;re fetching external data to enrich your claims.</li></ul>`,10),N={href:"https://youtube.com/playlist?list=PLYpjLpq5ZDGtJOHUbv7KHuxtYLk1nJPw5",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,"Hope this was helpful.",-1),H=n("p",null,"See you next week.",-1);function F(l,D){const c=o("VPCard"),t=o("router-link"),r=o("SiteInfo"),e=o("FontIcon");return v(),d("div",null,[n("h1",b,[n("a",g,[n("span",null,m(l.$frontmatter.title)+" 관련",1)])]),a(c,k(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[a(t,{to:"#how-does-claims-transformation-work"},{default:i(()=>[s("How Does Claims Transformation Work?")]),_:1})]),n("li",null,[a(t,{to:"#simple-claims-transformation"},{default:i(()=>[s("Simple Claims Transformation")]),_:1})]),n("li",null,[a(t,{to:"#implementing-rbac-with-claims-transformation"},{default:i(()=>[s("Implementing RBAC With Claims Transformation")]),_:1})]),n("li",null,[a(t,{to:"#takeaway"},{default:i(()=>[s("Takeaway")]),_:1})])])]),w,a(r,{name:"Master Claims Transformation for Flexible ASP.NET Core Authorization",desc:"Claims-based authorization mechanisms are central to modern authorization in ASP.NET Core. However, the access tokens issued by your Identity Provider (IDP) might not always perfectly align with your application's internal authorization needs. The solution? Claims transformation.",url:"https://milanjovanovic.tech/blog/master-claims-transformation-for-flexible-aspnetcore-authorization/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_084.png"}),n("p",null,[n("a",C,[a(e,{icon:"fa-brands fa-microsoft"}),s("Claims-based authorization")]),s(" mechanisms are central to modern authorization in ASP.NET Core. However, the access tokens issued by your Identity Provider (IDP) might not always perfectly align with your application's internal authorization needs.")]),n("p",null,[s("External IDPs like "),n("a",T,[a(e,{icon:"fa-brands fa-microsoft"}),s("Microsoft Entra ID")]),s(" (previously Azure AD) or "),n("a",_,[a(e,{icon:"fas fa-globe"}),s("Auth0")]),s(" might have their own schema for claims or might not directly issue all the claims your application needs for its authorization logic.")]),A,n("p",null,[s("They say a picture is worth a thousand words. In software engineering, we have something called "),n("a",P,[a(e,{icon:"fa-brands fa-wikipedia-w"}),s("UML")]),s(" diagrams that we can use to paint a picture.")]),n("p",null,[s("Here's a "),n("a",x,[a(e,{icon:"fa-brands fa-wikipedia-w"}),s("sequence diagram")]),s(" showing the claims transformation flow:")]),I,n("p",null,[s("The core of "),n("a",S,[a(e,{icon:"fa-brands fa-microsoft"}),s("claims transformation")]),s(" in ASP.NET Core is the "),n("a",z,[a(e,{icon:"fa-brands fa-microsoft"}),q]),s(" interface.")]),R,n("p",null,[n("a",E,[a(e,{icon:"fas fa-globe"}),s("Role-Based Access Control (RBAC)")]),s(" is an authorization model where permissions are assigned to roles, and users are granted roles. Claims transformation helps implement RBAC smoothly. By adding role claims and potentially permission claims, authorization logic throughout your application can be implified. Another benefit is that you can keep the access token smaller and free of any role or permission claims.")]),j,n("p",null,[s("If you want to see a complete implementation of RBAC in ASP.NET Core, check out this "),n("a",N,[a(e,{icon:"fa-brands fa-youtube"}),s("Authentication & Authorization playlist")]),s(".")]),M,H])}const V=u(f,[["render",F],["__file","master-claims-transformation-for-flexible-aspnetcore-authorization.html.vue"]]),W=JSON.parse('{"path":"/milanjovanovic.tech/master-claims-transformation-for-flexible-aspnetcore-authorization.html","title":"Master Claims Transformation for Flexible ASP.NET Core Authorization","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Master Claims Transformation for Flexible ASP.NET Core Authorization","description":"Article(s) > Master Claims Transformation for Flexible ASP.NET Core Authorization","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Master Claims Transformation for Flexible ASP.NET Core Authorization"},{"property":"og:description","content":"Master Claims Transformation for Flexible ASP.NET Core Authorization"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/master-claims-transformation-for-flexible-aspnetcore-authorization.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/master-claims-transformation-for-flexible-aspnetcore-authorization.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Master Claims Transformation for Flexible ASP.NET Core Authorization"}],["meta",{"property":"og:description","content":"Article(s) > Master Claims Transformation for Flexible ASP.NET Core Authorization"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_084.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_084.png"}],["meta",{"name":"twitter:image:alt","content":"Master Claims Transformation for Flexible ASP.NET Core Authorization"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2024-04-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Master Claims Transformation for Flexible ASP.NET Core Authorization\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_084/claims_transformation_sequence_diagram.png?imwidth=3840\\"],\\"datePublished\\":\\"2024-04-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2024-04-06T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_084.png"},"headers":[{"level":2,"title":"How Does Claims Transformation Work?","slug":"how-does-claims-transformation-work","link":"#how-does-claims-transformation-work","children":[]},{"level":2,"title":"Simple Claims Transformation","slug":"simple-claims-transformation","link":"#simple-claims-transformation","children":[]},{"level":2,"title":"Implementing RBAC With Claims Transformation","slug":"implementing-rbac-with-claims-transformation","link":"#implementing-rbac-with-claims-transformation","children":[]},{"level":2,"title":"Takeaway","slug":"takeaway","link":"#takeaway","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.88,"words":1164},"filePathRelative":"milanjovanovic.tech/master-claims-transformation-for-flexible-aspnetcore-authorization.md","localizedDate":"2024년 4월 6일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{V as comp,W as data};
