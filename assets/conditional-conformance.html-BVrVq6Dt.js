import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as u,e as s,n as e,g as t,d as o,w as m,a as h,f as k,r as i,o as f}from"./app-BgNevrm5.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),_=n("blockquote",null,[n("p",null,"Available from Swift 4.2")],-1),S=k(`<p>For example, if we had a <code>Purchaseable</code> protocol:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">protocol</span> <span class="token class-name">Purchaseable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And a simple type that conforms to that protocol:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">:</span> <span class="token class-name">Purchaseable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You bought a book&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we could make <code>Array</code> conform to <code>Purchaseable</code> if all the elements inside the array were also <code>Purchasable</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Array</span><span class="token punctuation">:</span> <span class="token class-name">Purchaseable</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Purchaseable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token keyword">self</span> <span class="token punctuation">{</span></span>
<span class="line">            item<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This worked great at compile time, but there was a problem: if you needed to query a conditional conformance at runtime, your code would crash because it wasn’t supported in Swift 4.1</p><p>In Swift 4.2 that’s now fixed, so if you receive data of one type and want to check if it can be converted to a conditionally conformed protocol, it works great.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> items<span class="token punctuation">:</span> <span class="token keyword">Any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> books <span class="token operator">=</span> items <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">Purchaseable</span> <span class="token punctuation">{</span></span>
<span class="line">    books<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, support for automatic synthesis of <code>Hashable</code> conformance has improved greatly in Swift 4.2. Several built-in types from the Swift standard library – including optionals, arrays, dictionaries, and ranges – now automatically conform to the <code>Hashable</code> protocol when their elements conform to <code>Hashable</code>.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> pets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift 4.2 can automatically synthesize <code>Hashable</code> conformance for that struct, but Swift 4.1 could not.</p>`,14),C={class:"hint-container details"},x=n("summary",null,"Other Changes in Swift 4.2",-1),D={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-1-to-4-2.playground.zip",target:"_blank",rel:"noopener noreferrer"};function P(c,A){const a=i("VPCard"),l=i("RouteLink"),p=i("FontIcon");return f(),d("div",null,[n("h1",w,[n("a",b,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,y,s(a,e(t({title:"Dynamic member look up | Changes in Swift 4.2",desc:"Dynamic member look up",link:"https://hackingwithswift.com/swift/4.2/dynamic-member-lookup",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,n("p",null,[o("Conditional conformances "),s(l,{to:"/hackingwithswift.com/whats-new-in-swift-4-1.html"},{default:m(()=>[o("were introduced in Swift 4.1")]),_:1}),o(", allowing types to conform to a protocol only when certain conditions are met.")]),S,n("details",C,[x,s(a,e(t({title:"Derived collections of enum cases | Changes in Swift 4.2",desc:"Derived collections of enum cases",link:"/hackingwithswift.com/swift/4.2/caseiterable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Warning and error diagnostic directives | Changes in Swift 4.2",desc:"Warning and error diagnostic directives",link:"/hackingwithswift.com/swift/4.2/warning-error.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Dynamic member look up | Changes in Swift 4.2",desc:"Dynamic member look up",link:"/hackingwithswift.com/swift/4.2/dynamic-member-lookup.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),h(` 
\`\`\`component VPCard
{
  "title": "Enhanced conditional conformances | Changes in Swift 4.2",
  "desc": "Enhanced conditional conformances",
  "link": "/hackingwithswift.com/swift/4.2/conditional-conformance.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,e(t({title:"Random number generation and shuffling | Changes in Swift 4.2",desc:"Random number generation and shuffling",link:"/hackingwithswift.com/swift/4.2/random.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Simpler, more secure hashing | Changes in Swift 4.2",desc:"Simpler, more secure hashing",link:"/hackingwithswift.com/swift/4.2/hashable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Checking sequence elements match a condition | Changes in Swift 4.2",desc:"Checking sequence elements match a condition",link:"/hackingwithswift.com/swift/4.2/allsatisfy.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"In-place collection element removal | Changes in Swift 4.2",desc:"In-place collection element removal",link:"/hackingwithswift.com/swift/4.2/remove-where.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Boolean toggling | Changes in Swift 4.2",desc:"Boolean toggling",link:"/hackingwithswift.com/swift/4.2/toggle.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",D,[s(p,{icon:"fas fa-file-zipper"}),o("Download Swift 4.2 playground")])])])])}const I=r(g,[["render",P],["__file","conditional-conformance.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/swift/4.2/conditional-conformance.html","title":"Dynamic member look up","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Dynamic member look up","description":"Article(s) > Dynamic member look up","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.2"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Dynamic member look up"},{"property":"og:description","content":"Dynamic member look up"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/dynamic-member-lookup.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/conditional-conformance.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Dynamic member look up"}],["meta",{"property":"og:description","content":"Article(s) > Dynamic member look up"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.2"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dynamic member look up\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.12,"words":635},"filePathRelative":"hackingwithswift.com/swift/4.2/conditional-conformance.md","excerpt":"\\n"}');export{I as comp,V as data};
