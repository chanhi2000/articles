import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as a,n as t,g as e,d,f as i,r as o,o as m}from"./app-BgNevrm5.js";const h={},k={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),y=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Any properties and methods that belong to an actor are isolated to that actor, but you can make <em>external</em> functions isolated to an actor if you want. This allows the function to access actor-isolated state as if it were inside that actor, without needing to use <code>await</code>.</p><p>Here’s a simple example so you can see what I mean:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">actor</span> <span class="token class-name">DataStore</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line">    <span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> highScores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> favorites <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// load data here</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// save data here</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">debugLog</span><span class="token punctuation">(</span>dataStore<span class="token punctuation">:</span> <span class="token keyword">isolated</span> <span class="token class-name">DataStore</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Username: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">dataStore<span class="token punctuation">.</span>username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Friends: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">dataStore<span class="token punctuation">.</span>friends</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;High scores: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">dataStore<span class="token punctuation">.</span>highScores</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Favorites: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">dataStore<span class="token punctuation">.</span>favorites</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">DataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">debugLog</span><span class="token punctuation">(</span>dataStore<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-make-function-parameters-isolated-1.zip",target:"_blank",rel:"noopener noreferrer"},b=i("<p>That creates a <code>DataStore</code> actor with various properties plus a couple of placeholder methods, then creates a <code>debugLog()</code> method that prints those <em>without</em> using <code>await</code> – they can be accessed directly. Notice the addition of the <code>isolated</code> keyword in the function signature; that’s what allows this direct access, and it even allows the function to <em>write</em> to those properties too.</p><p>Using <code>isolated</code> like this does <em>not</em> bypass any of the underlying safety or implementation of actors – there can still only be one thread accessing the actor at any one time. What we’ve done just pushes that access out by a level, because now the whole function must be run on that actor rather than just individual lines inside it. In practice, this means <code>debugLog(dataStore:)</code> needs to be called using <code>await</code>.</p><p>This approach has an important side effect: because the whole function is now isolated to the actor, it must be called using <code>await</code> even though it isn’t marked as async. This makes the function itself a single potential suspension point rather than individual accesses to the actor being suspension points.</p><p>In case you were wondering, you can’t have two isolation parameters, because it wouldn’t really make sense – which one is executing the function?</p>",4),_={class:"hint-container details"},S=n("summary",null,"Similar solutions…",-1);function x(c,H){const s=o("VPCard"),p=o("FontIcon");return m(),r("div",null,[n("h1",k,[n("a",f,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,w,a(s,t(e({title:"How to make function parameters isolated | Swift Concurrency by Example",desc:"How to make function parameters isolated",link:"https://hackingwithswift.com/quick-start/how-to-make-function-parameters-isolated",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("blockquote",null,[n("p",null,[n("a",v,[a(p,{icon:"fas fa-file-zipper"}),d("Download this as an Xcode project")])])]),b,n("details",_,[S,a(s,t(e({title:"How to make parts of an actor nonisolated | Swift Concurrency by Example",desc:"How to make parts of an actor nonisolated",link:"/hackingwithswift.com/concurrency/how-to-make-parts-of-an-actor-nonisolated.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"What is an asynchronous function? | Swift Concurrency by Example",desc:"What is an asynchronous function?",link:"/hackingwithswift.com/concurrency/what-is-an-asynchronous-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to call an async function using async let | Swift Concurrency by Example",desc:"How to call an async function using async let",link:"/hackingwithswift.com/concurrency/how-to-call-an-async-function-using-async-let.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"What is a synchronous function? | Swift Concurrency by Example",desc:"What is a synchronous function?",link:"/hackingwithswift.com/concurrency/what-is-a-synchronous-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to create and call an async function | Swift Concurrency by Example",desc:"How to create and call an async function",link:"/hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const E=l(h,[["render",x],["__file","how-to-make-function-parameters-isolated.html.vue"]]),T=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-make-function-parameters-isolated.html","title":"How to make function parameters isolated","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to make function parameters isolated","description":"Article(s) > How to make function parameters isolated","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to make function parameters isolated"},{"property":"og:description","content":"How to make function parameters isolated"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/how-to-make-function-parameters-isolated.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-make-function-parameters-isolated.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to make function parameters isolated"}],["meta",{"property":"og:description","content":"Article(s) > How to make function parameters isolated"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to make function parameters isolated\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.26,"words":678},"filePathRelative":"hackingwithswift.com/concurrency/how-to-make-function-parameters-isolated.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{E as comp,T as data};
