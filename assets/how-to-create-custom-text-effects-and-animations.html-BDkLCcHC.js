import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as s,n as t,g as e,w as m,d as p,f as i,r as c,o as v}from"./app-BgNevrm5.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},g=n("hr",null,null,-1),y=i(`<blockquote><p>Updated for Xcode 16</p></blockquote><p><strong>New in iOS 18</strong></p><p>SwiftUI&#39;s <code>TextRenderer</code> protocol combines with the <code>textRenderer()</code> modifier to give us complete control over how text is rendered, including the ability to smooth animate rendering based on our custom logic.</p><p>To explain how this all works, I&#39;ll start by giving you a simple example, then explain how the various components fit together, and finish up with more examples so you can see what&#39;s possible.</p><p>First, let&#39;s look at a simple example that adjusts every other line in rendered text, so that even-numbered lines are opaque and odd-numbered lines are slightly translucent:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ZebraStripeRenderer</span><span class="token punctuation">:</span> <span class="token class-name">TextRenderer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span>layout<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token class-name">Layout</span><span class="token punctuation">,</span> <span class="token keyword">in</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token keyword">in</span> layout<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> index<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;He thrusts his fists against the posts and still insists he sees the ghosts.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">textRenderer</span><span class="token punctuation">(</span><span class="token class-name">ZebraStripeRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),x={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-create-custom-text-effects-and-animations-1.zip",target:"_blank",rel:"noopener noreferrer"},_=i(`<p>Almost all the work there is in the <code>ZebraStripeRenderer</code> struct. That conforms to the <code>TextRenderer</code> protocol, which has only one requirement: a <code>draw(layout:in:)</code> method that handles text rendering into a graphics context.</p><p>SwiftUI&#39;s <code>Text.Layout</code> type can be used as a sequence, so in the code above we loop over all the lines, adjusting opacity as we go, then rendering each line one at a time.</p><p>Each line is itself a sequence containing zero or more <em>runs</em>, which are groups of letters with the same styling, and inside <em>runs</em> are individual glyphs, which are the actual letters being rendered.</p><p>To help you visualize how this all fits together, we could create a simple text renderer that draws boxes around lines, runs, and glyphs, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">BoxedRenderer</span><span class="token punctuation">:</span> <span class="token class-name">TextRenderer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span>layout<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token class-name">Layout</span><span class="token punctuation">,</span> <span class="token keyword">in</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> line <span class="token keyword">in</span> layout <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> run <span class="token keyword">in</span> line <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">for</span> glyph <span class="token keyword">in</span> run <span class="token punctuation">{</span></span>
<span class="line">                    context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> glyph<span class="token punctuation">.</span>typographicBounds<span class="token punctuation">.</span>rect<span class="token punctuation">)</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> run<span class="token punctuation">.</span>typographicBounds<span class="token punctuation">.</span>rect<span class="token punctuation">)</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> line<span class="token punctuation">.</span>typographicBounds<span class="token punctuation">.</span>rect<span class="token punctuation">)</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">(</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is a **very** important string&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot; with lots of text inside.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">textRenderer</span><span class="token punctuation">(</span><span class="token class-name">BoxedRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),T={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-create-custom-text-effects-and-animations-2.zip",target:"_blank",rel:"noopener noreferrer"},S=i(`<p>The text we&#39;re rendering this time has Markdown styling inside and a SwiftUI modifier, which splits the lines up into several runs. When that code runs, you&#39;ll see red, green, and blue lines drawn around the various components, so you can see exactly what they mean.</p><hr><h2 id="animating-textrenderer" tabindex="-1"><a class="header-anchor" href="#animating-textrenderer"><span>Animating TextRenderer</span></a></h2><p>When you conform to <code>TextRenderer</code>, you can add an <code>animatableData</code> property to control how values change over time. This can then be animated using regular SwiftUI animations.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>When rendering text that moves, it&#39;s a good idea to use the <code>.disablesSubpixelQuantization</code> option, which allows letter shapes to be rendered at floating-point positions rather than being snapped to the nearest integer, making for smoother movement.</p></div><p>As an example, we could make a simple <code>WaveRenderer</code> struct that bends letters up and down based on <code>strength</code> and <code>frequency</code> values:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">WaveRenderer</span><span class="token punctuation">:</span> <span class="token class-name">TextRenderer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> strength<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line">    <span class="token keyword">var</span> frequency<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> animatableData<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">get</span> <span class="token punctuation">{</span> strength <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">set</span> <span class="token punctuation">{</span> strength <span class="token operator">=</span> newValue <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span>layout<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token class-name">Layout</span><span class="token punctuation">,</span> <span class="token keyword">in</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> line <span class="token keyword">in</span> layout <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> run <span class="token keyword">in</span> line <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> glyph<span class="token punctuation">)</span> <span class="token keyword">in</span> run<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">let</span> yOffset <span class="token operator">=</span> strength <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">*</span> frequency<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">var</span> copy <span class="token operator">=</span> context</span>
<span class="line"></span>
<span class="line">                    copy<span class="token punctuation">.</span><span class="token function">translateBy</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> yOffset<span class="token punctuation">)</span></span>
<span class="line">                    copy<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>glyph<span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span>disablesSubpixelQuantization<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Because <code>GraphicsContext</code> uses value semantics, taking a copy of your context allows you to make changes such as translating and scaling without affecting other drawing.</p></div><p>Using that in a SwiftUI view means passing in some properties that change over time, for example using an animation that moves from strength -10 to +10:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> amount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is a very important string with lots of text inside. This is a very important string with lots of text inside.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">textRenderer</span><span class="token punctuation">(</span><span class="token class-name">WaveRenderer</span><span class="token punctuation">(</span>strength<span class="token punctuation">:</span> amount<span class="token punctuation">,</span> frequency<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>onAppear <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    amount <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or we could create an earthquake-style effect by using random Y offsets for each letter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">QuakeRenderer</span><span class="token punctuation">:</span> <span class="token class-name">TextRenderer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> moveAmount<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> animatableData<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">get</span> <span class="token punctuation">{</span> moveAmount <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">set</span> <span class="token punctuation">{</span> moveAmount <span class="token operator">=</span> newValue <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span>layout<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token class-name">Layout</span><span class="token punctuation">,</span> <span class="token keyword">in</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> line <span class="token keyword">in</span> layout <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> run <span class="token keyword">in</span> line <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">for</span> glyph <span class="token keyword">in</span> run <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">var</span> copy <span class="token operator">=</span> context</span>
<span class="line">                    <span class="token keyword">let</span> yOffset <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span>moveAmount<span class="token operator">...</span>moveAmount<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    copy<span class="token punctuation">.</span><span class="token function">translateBy</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> yOffset<span class="token punctuation">)</span></span>
<span class="line">                    copy<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>glyph<span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span>disablesSubpixelQuantization<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> strength <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;SHOCKWAVE&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">.</span>compressed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">textRenderer</span><span class="token punctuation">(</span><span class="token class-name">QuakeRenderer</span><span class="token punctuation">(</span>moveAmount<span class="token punctuation">:</span> strength<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>onAppear <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    strength <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),R={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-create-custom-text-effects-and-animations-4.zip",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,"There's really no limit to the kinds of animation you can perform!",-1),q={class:"hint-container details"},I=n("summary",null,"Similar solutions…",-1);function V(l,U){const a=c("VPCard"),u=c("router-link"),o=c("FontIcon");return v(),d("div",null,[n("h1",f,[n("a",w,[n("span",null,k(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n("nav",b,[n("ul",null,[n("li",null,[s(u,{to:"#animating-textrenderer"},{default:m(()=>[p("Animating TextRenderer")]),_:1})])])]),g,s(a,t(e({title:"How to create custom text effects and animations | SwiftUI by Example",desc:"How to create custom text effects and animations",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-custom-text-effects-and-animations",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("blockquote",null,[n("p",null,[n("a",x,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),_,n("blockquote",null,[n("p",null,[n("a",T,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),S,n("blockquote",null,[n("p",null,[n("a",R,[s(o,{icon:"fas fa-file-zipper"}),p("Download this as an Xcode project")])])]),A,n("details",q,[I,s(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to add Metal shaders to SwiftUI views using layer effects | SwiftUI by Example",desc:"How to add Metal shaders to SwiftUI views using layer effects",link:"/hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create multi-step animations using phase animators | SwiftUI by Example",desc:"How to create multi-step animations using phase animators",link:"/hackingwithswift.com/swiftui/how-to-create-multi-step-animations-using-phase-animators.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Building a menu using List | SwiftUI by Example",desc:"Building a menu using List",link:"/hackingwithswift.com/swiftui/building-a-menu-using-list.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const D=r(h,[["render",V],["__file","how-to-create-custom-text-effects-and-animations.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-create-custom-text-effects-and-animations.html","title":"How to create custom text effects and animations","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create custom text effects and animations","description":"Article(s) > How to create custom text effects and animations","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create custom text effects and animations"},{"property":"og:description","content":"How to create custom text effects and animations"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-custom-text-effects-and-animations.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-custom-text-effects-and-animations.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create custom text effects and animations"}],["meta",{"property":"og:description","content":"Article(s) > How to create custom text effects and animations"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create custom text effects and animations\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftui/how-to-create-basic-animations.md","date":"2024-06-21T00:00:00.000Z","isOriginal":false},"headers":[{"level":2,"title":"Animating TextRenderer","slug":"animating-textrenderer","link":"#animating-textrenderer","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.02,"words":1206},"filePathRelative":"hackingwithswift.com/swiftui/how-to-create-custom-text-effects-and-animations.md","localizedDate":"2024년 6월 21일","excerpt":"\\n"}');export{D as comp,B as data};
