import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as a,t as l,e as s,n as e,g as t,f as c,r,o as d}from"./app-BgNevrm5.js";const u={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},k=a("nav",{class:"table-of-contents"},[a("ul")],-1),v=a("hr",null,null,-1),w=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>One-to-many relationships are the most common relationship type in SwiftData, and are created automatically when one side of your relationship has an array of data, and the other side is optional.</p><p>For example, we might say that every movie has a director, and each director can have directed many movies:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">var</span> director<span class="token punctuation">:</span> <span class="token class-name">Director</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> releaseYear<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> director<span class="token punctuation">:</span> <span class="token class-name">Director</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>releaseYear <span class="token operator">=</span> releaseYear</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>director <span class="token operator">=</span> director</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>movies <span class="token operator">=</span> movies</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you prefer to make the relationship explicit – and I usually recommend doing so, not least because it helps clarify your intent – you’re specify exactly what the inverse should be, and also what happens when a deletion takes place.</p><p>So, we might adjust the <code>Director</code> definition to this, to say that when we delete a director we replace them with nil in any movie they directed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>deleteRule<span class="token punctuation">:</span> <span class="token punctuation">.</span>nullify<span class="token punctuation">,</span> inverse<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Movie</span><span class="token punctuation">.</span>director<span class="token punctuation">)</span> <span class="token keyword">var</span> movies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Movie</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>There are a handful of rules you need to follow with these relationships:</p><ol><li>If you intend to use inferred relationships, one side of your data must be optional.</li><li>If you use an explicit relationship where one side of your data is non-optional, be careful how you delete objects – SwiftData uses the <code>.nullify</code> delete rule by default, which can put your data into in an invalid state. To avoid this problem, either use an option value, or use a <code>.cascade</code> delete rule.</li><li>Do not attempt to use collection types other than <code>Array</code>, because your code will simply not compile.</li></ol></div>`,8);function y(o,f){const n=r("VPCard");return d(),p("div",null,[a("h1",m,[a("a",h,[a("span",null,l(o.$frontmatter.title)+" 관련",1)])]),s(n,e(t({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,v,s(n,e(t({title:"How to create one-to-many relationships | SwiftData by Example",desc:"How to create one-to-many relationships",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-create-one-to-many-relationships",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const _=i(u,[["render",y],["__file","how-to-create-one-to-many-relationships.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-create-one-to-many-relationships.html","title":"How to create one-to-many relationships","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create one-to-many relationships","description":"Article(s) > How to create one-to-many relationships","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create one-to-many relationships"},{"property":"og:description","content":"How to create one-to-many relationships"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-one-to-many-relationships.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-one-to-many-relationships.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create one-to-many relationships"}],["meta",{"property":"og:description","content":"Article(s) > How to create one-to-many relationships"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create one-to-many relationships\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-create-one-to-many-relationships.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{_ as comp,x as data};
