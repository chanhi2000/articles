import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as e,g as t,d as c,f as o,r as l,o as h}from"./app-BgNevrm5.js";const m={},k={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},b=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),v=o(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><code>@MainActor</code> is a global actor that uses the main queue for executing its work. In practice, this means methods or types marked with <code>@MainActor</code> can (for the most part) safely modify the UI because it will always be running on the main queue, and calling <code>MainActor.run()</code> will push some custom work of your choosing to the main actor, and thus to the main queue. At the simplest level both of these features are straightforward to use, but as you’ll see there’s a lot of complexity behind them.</p><p>First, let’s look at using <code>@MainActor</code>, which automatically makes a single method or all methods on a type run on the main actor. This is particularly useful for any types that exist to update your user interface, such as <code>ObservableObject</code> classes.</p><p>For example, we could create a observable object with two <code>@Published</code> properties, and because they will both update the UI we would mark the whole class with <code>@MainActor</code> to ensure these UI updates always happen on the main actor:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AccountViewModel</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> isAuthenticated <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In fact, this set up is so central to the way <code>ObservableObject</code> works that SwiftUI bakes it right in: whenever you use <code>@StateObject</code> or <code>@ObservedObject</code> inside a view, Swift will ensure that the whole view runs on the main actor so that you can’t accidentally try to publish UI updates in a dangerous way. Even better, no matter what property wrappers you use, the <code>body</code> property of your SwiftUI views is always run on the main actor.</p><p>Does that mean you don’t need to explicitly add <code>@MainActor</code> to observable objects? Well, no – there are still benefits to using <code>@MainActor</code> with these classes, not least if they are using <code>async</code>/<code>await</code> to do their own asynchronous work such as downloading data from a server.</p><p>So, my recommendation is simple: even though SwiftUI ensures main-actor-ness when using <code>@ObservableObject</code>, <code>@StateObject</code>, and SwiftUI view <code>body</code> properties, it’s a good idea to add the <code>@MainActor</code> attribute to all your observable object classes to be absolutely sure all UI updates happen on the main actor. If you need certain methods or computed properties to opt out of running on the main actor, use <code>nonisolated</code> as you would do with a regular actor.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>I’ve said it previously, but it’s worth repeating: you should <em>not</em> attempt to use actors for your observable objects, because they must do their UI updates on the main actor rather than a custom actor.</p></div><p>More broadly, <em>any</em> type that has <code>@MainActor</code> objects as properties will also implicitly be <code>@MainActor</code> using <em>global actor inference</em> – a set of rules that Swift applies to make sure global-actor-ness works without getting in the way too much. I’ll cover these rules in the next chapter, because they are quite precise.</p><p>The magic of <code>@MainActor</code> is that it automatically forces methods or whole types to run on the main actor, a lot of the time without any further work from us. Previously we needed to do it by hand, remembering to use code like <code>DispatchQueue.main.async()</code> or similar every place it was needed, but now the compiler does it for us automatically.</p><p>Be careful: <code>@MainActor</code> is really helpful to make code run on the main actor, but it’s not <em>foolproof</em>. For example, if you have a <code>@MainActor</code> class then in theory all its methods will run on the main actor, but one of those methods could trigger code to run on a background task. For example, if you’re using Face ID and call <code>evaluatePolicy()</code> to authenticate the user, the completion handler will be called on a background thread even though that code is still within the <code>@MainActor</code> class.</p><p>If you <em>do</em> need to spontaneously run some code on the main actor, you can do that by calling <code>MainActor.run()</code> and providing your work. This allows you to safely push work onto the main actor no matter where your code is currently running, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is on the main actor.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),g={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-use-atmainactor-to-run-code-on-the-main-queue-1.zip",target:"_blank",rel:"noopener noreferrer"},y=o(`<p>You can send back nothing from <code>run()</code> if you want, or send back a value like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is on the main actor.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">42</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-use-atmainactor-to-run-code-on-the-main-queue-2.zip",target:"_blank",rel:"noopener noreferrer"},q=o(`<p>Even better, if that code was already running on the main actor then the code is executed immediately – it won’t wait until the next run loop in the same way that <code>DispatchQueue.main.async()</code> would have done.</p><p>If you wanted the work to be sent off to the main actor <em>without</em> waiting for its result to come back, you can place it in a new task like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is on the main actor.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// more work you want to do</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-use-atmainactor-to-run-code-on-the-main-queue-3.zip",target:"_blank",rel:"noopener noreferrer"},M=o(`<p>Or you can also mark your task’s closure as being <code>@MainActor</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token attribute atrule">@MainActor</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is on the main actor.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// more work you want to do</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">couldBeAnywhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x={href:"https://hackingwithswift.com/files/projects/concurrency/how-to-use-atmainactor-to-run-code-on-the-main-queue-4.zip",target:"_blank",rel:"noopener noreferrer"},j=o(`<p>This is particularly helpful when you’re inside a synchronous context, so you need to push work to the main actor without using the <code>await</code> keyword.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>If your function is already running on the main actor, using <code>await MainActor.run()</code> will run your code immediately without waiting for the next run loop, but using <code>Task</code> as shown above <em>will</em> wait for the next run loop.</p></div><p>You can see this in action in the following snippet:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span> <span class="token keyword">class</span> <span class="token class-name">ViewModel</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token attribute atrule">@MainActor</span> <span class="token keyword">in</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;4&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That marks the whole type as using the main actor, so the call to code&gt;MainActor.run()<code>will run immediately when</code>runTest()<code>is called. However, the inner</code>Task\` will <em>not</em> run immediately, so the code will print 1, 2, 4, 5, 3.</p><p>Although it’s possible to create your own global actors, I think we should probably avoid doing so until we’ve had sufficient chance to build apps using what we already have.</p>`,6),I={class:"hint-container details"},T=n("summary",null,"Similar solutions…",-1);function S(p,O){const a=l("VPCard"),i=l("FontIcon");return h(),u("div",null,[n("h1",k,[n("a",w,[n("span",null,d(p.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,f,s(a,e(t({title:"How to use @MainActor to run code on the main queue | Swift Concurrency by Example",desc:"How to use @MainActor to run code on the main queue",link:"https://hackingwithswift.com/quick-start/how-to-use-mainactor-to-run-code-on-the-main-queue",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("blockquote",null,[n("p",null,[n("a",g,[s(i,{icon:"fas fa-file-zipper"}),c("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",A,[s(i,{icon:"fas fa-file-zipper"}),c("Download this as an Xcode project")])])]),q,n("blockquote",null,[n("p",null,[n("a",_,[s(i,{icon:"fas fa-file-zipper"}),c("Download this as an Xcode project")])])]),M,n("blockquote",null,[n("p",null,[n("a",x,[s(i,{icon:"fas fa-file-zipper"}),c("Download this as an Xcode project")])])]),j,n("details",I,[T,s(a,e(t({title:"Main thread and main queue: what’s the difference? | Swift Concurrency by Example",desc:"Main thread and main queue: what’s the difference?",link:"/hackingwithswift.com/concurrency/main-thread-and-main-queue-whats-the-difference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Understanding how global actor inference works | Swift Concurrency by Example",desc:"Understanding how global actor inference works",link:"/hackingwithswift.com/concurrency/understanding-how-global-actor-inference-works.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to create and run a task | Swift Concurrency by Example",desc:"How to create and run a task",link:"/hackingwithswift.com/concurrency/how-to-create-and-run-a-task.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to run tasks using SwiftUI’s task() modifier | Swift Concurrency by Example",desc:"How to run tasks using SwiftUI’s task() modifier",link:"/hackingwithswift.com/concurrency/how-to-run-tasks-using-swiftuis-task-modifier.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"What is actor hopping and how can it cause problems? | Swift Concurrency by Example",desc:"What is actor hopping and how can it cause problems?",link:"/hackingwithswift.com/concurrency/what-is-actor-hopping-and-how-can-it-cause-problems.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const B=r(m,[["render",S],["__file","how-to-use-mainactor-to-run-code-on-the-main-queue.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/concurrency/how-to-use-mainactor-to-run-code-on-the-main-queue.html","title":"How to use @MainActor to run code on the main queue","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to use @MainActor to run code on the main queue","description":"Article(s) > How to use @MainActor to run code on the main queue","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to use @MainActor to run code on the main queue"},{"property":"og:description","content":"How to use @MainActor to run code on the main queue"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/how-to-use-mainactor-to-run-code-on-the-main-queue.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/how-to-use-mainactor-to-run-code-on-the-main-queue.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use @MainActor to run code on the main queue"}],["meta",{"property":"og:description","content":"Article(s) > How to use @MainActor to run code on the main queue"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-12-13T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use @MainActor to run code on the main queue\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-12-13T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.05,"words":1515},"filePathRelative":"hackingwithswift.com/concurrency/how-to-use-mainactor-to-run-code-on-the-main-queue.md","localizedDate":"2021년 12월 13일","excerpt":"\\n"}');export{B as comp,E as data};
