import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,t as r,e as a,n as t,g as e,f as d,r as o,o as u}from"./app-BgNevrm5.js";const k={},h={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),w=d(`<p>Check your clock, because remarkably weâ€™re just two methods away from finishing this game! Predictably, the two methods are critically important: one to move the player around the screen, and one to handle collisions between the player and the space debris.</p><p>Handling player movement is as simple as implementing the <code>touchesMoved()</code> method. We will, like always, need to use the <code>location(in:)</code> method to figure out where on the screen the user touched. But this time we&#39;re going to clamp the player&#39;s Y position, which in plain English means that we&#39;re going to stop them going above or below a certain point, keeping them firmly in the game area.</p><p>I&#39;ll be clamping the player&#39;s position so they can&#39;t overlap the score label, and I&#39;ll apply the same restriction on top so that the player has a symmetrical channel to fly through. This is a cinch to do, so here&#39;s the <code>touchesMoved()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesMoved</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> location<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">{</span></span>
<span class="line">        location<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> location<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> <span class="token number">668</span> <span class="token punctuation">{</span></span>
<span class="line">        location<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">668</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    player<span class="token punctuation">.</span>position <span class="token operator">=</span> location</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our last task is to end the game when the player hits any piece of space debris. This is all code you know already: we&#39;re going to create a particle emitter, position it where the player is (or was!), and add the explosion to the scene while removing the player. In this game we&#39;re also going to set <code>isGameOver</code> to be true so that the <code>update()</code> method stops adding to their score. Here&#39;s all the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">didBegin</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> contact<span class="token punctuation">:</span> <span class="token class-name">SKPhysicsContact</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> explosion <span class="token operator">=</span> <span class="token class-name">SKEmitterNode</span><span class="token punctuation">(</span>fileNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;explosion&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    explosion<span class="token punctuation">.</span>position <span class="token operator">=</span> player<span class="token punctuation">.</span>position</span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>explosion<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    player<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    isGameOver <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function y(i,f){const s=o("VPCard"),c=o("VidStack");return u(),l("div",null,[n("h1",h,[n("a",m,[n("span",null,r(i.$frontmatter.title)+" ê´€ë ¨",1)])]),a(s,t(e({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,v,a(s,t(e({title:"Making contact: didBegin() | Hacking with iOS",desc:"Making contact: didBegin()",link:"https://hackingwithswift.com/read/17/4/making-contact-didbegin",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),a(c,{src:"youtube/KNEHC4bN2x4"}),w])}const S=p(k,[["render",y],["__file","04-making-contact-didbegin.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/read/17/04-making-contact-didbegin.html","title":"Making contact: didBegin()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Making contact: didBegin()","description":"Article(s) > Making contact: didBegin()","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Making contact: didBegin()"},{"property":"og:description","content":"Making contact: didBegin()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/17/04-making-contact-didbegin.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/17/04-making-contact-didbegin.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Making contact: didBegin()"}],["meta",{"property":"og:description","content":"Article(s) > Making contact: didBegin()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Making contact: didBegin()\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.41,"words":424},"filePathRelative":"hackingwithswift.com/read/17/04-making-contact-didbegin.md","excerpt":"\\n"}');export{S as comp,B as data};
