import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as a,t as u,e as n,n as s,g as e,d as i,a as d,f as h,r as c,o as f}from"./app-BgNevrm5.js";const k={},g={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},w=a("nav",{class:"table-of-contents"},[a("ul")],-1),b=a("hr",null,null,-1),v=a("blockquote",null,[a("p",null,"Available from Swift 5.7")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0329-clock-instant-duration.md",target:"_blank",rel:"noopener noreferrer"},C=a("code",null,"apple/swift-evolution",-1),_=h(`<ul><li>Clocks represent a way of measuring time passing. There are two built in: the continuous clock keeps incrementing time even when the system is asleep, and the suspending clock does not.</li><li>Instants represent an exact moment in time.</li><li>Durations represent how much time elapsed between two instants.</li></ul><p>The most immediate application of this for many people will be the newly upgraded <code>Task</code> API, which can now specify sleep amounts in much more sensible terms than nanoseconds:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>until<span class="token punctuation">:</span> <span class="token punctuation">.</span>now <span class="token operator">+</span>  <span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clock<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This newer API also comes with the benefit of being able to specify tolerance, which allows the system to wait a little beyond the sleep deadline in order to maximize power efficiency. So, if we wanted to sleep for at least 1 seconds but would be happy for it to last up to 1.5 seconds in total, we would write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>until<span class="token punctuation">:</span> <span class="token punctuation">.</span>now <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tolerance<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clock<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This tolerance is only in <em>addition</em> to the default sleep amount – the system won’t end the sleep before at least 1 second has passed.</p></div><p>Although it hasn’t happened yet, it looks like the older nanoseconds-based API will be deprecated in the near future.</p><p>Clocks are also useful for measuring some specific work, which is helpful if you want to show your users something like how long a file export took:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> clock <span class="token operator">=</span> <span class="token class-name">ContinuousClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> time <span class="token operator">=</span> clock<span class="token punctuation">.</span>measure <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// complex work here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Took </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">time<span class="token punctuation">.</span>components<span class="token punctuation">.</span>seconds</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> seconds&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),S={class:"hint-container details"},x=a("summary",null,"Other Changes in Swift 5.7",-1),A={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-6-to-5-7.playground.zip",target:"_blank",rel:"noopener noreferrer"};function T(l,I){const t=c("VPCard"),o=c("FontIcon");return f(),r("div",null,[a("h1",g,[a("a",m,[a("span",null,u(l.$frontmatter.title)+" 관련",1)])]),n(t,s(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,n(t,s(e({title:"Add sleep(for:) to Clock | Changes in Swift 5.7",desc:"Add sleep(for:) to Clock",link:"https://hackingwithswift.com/swift/5.7/clock",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,a("p",null,[a("a",y,[i("SE-0329 ("),n(o,{icon:"iconfont icon-github"}),C,i(")")]),i(" introduces a new, standardized way of referring to times and durations in Swift. As the name suggests, it’s broken down into three main components:")]),_,a("details",S,[x,n(t,s(e({title:"if let shorthand for unwrapping optionals | Changes in Swift 5.7",desc:"if let shorthand for unwrapping optionals",link:"/hackingwithswift.com/swift/5.7/if-let-shorthand.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Multi-statement closure type inference | Changes in Swift 5.7",desc:"Multi-statement closure type inference",link:"/hackingwithswift.com/swift/5.7/multi-statement-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Clock, Instant, and Duration | Changes in Swift 5.7",
  "desc": "Clock, Instant, and Duration",
  "link": "/hackingwithswift.com/swift/5.7/clock.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(t,s(e({title:"Regular expressions | Changes in Swift 5.7",desc:"Regular expressions",link:"/hackingwithswift.com/swift/5.7/regexes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Type inference from default expressions | Changes in Swift 5.7",desc:"Type inference from default expressions",link:"/hackingwithswift.com/swift/5.7/default-type-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Concurrency in top-level code | Changes in Swift 5.7",desc:"Concurrency in top-level code",link:"/hackingwithswift.com/swift/5.7/top-level-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Opaque parameter declarations | Changes in Swift 5.7",desc:"Opaque parameter declarations",link:"/hackingwithswift.com/swift/5.7/opaque-parameter-declarations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Structural opaque result types | Changes in Swift 5.7",desc:"Structural opaque result types",link:"/hackingwithswift.com/swift/5.7/structural-opaque-result-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Unlock existentials for all protocols | Changes in Swift 5.7",desc:"Unlock existentials for all protocols",link:"/hackingwithswift.com/swift/5.7/unlock-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Lightweight same-type requirements for primary associated types | Changes in Swift 5.7",desc:"Lightweight same-type requirements for primary associated types",link:"/hackingwithswift.com/swift/5.7/primary-associated-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Constrained existential types | Changes in Swift 5.7",desc:"Constrained existential types",link:"/hackingwithswift.com/swift/5.7/constrained-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Distributed actor isolation | Changes in Swift 5.7",desc:"Distributed actor isolation",link:"/hackingwithswift.com/swift/5.7/distributed-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"buildPartialBlock for result builders | Changes in Swift 5.7",desc:"buildPartialBlock for result builders",link:"/hackingwithswift.com/swift/5.7/buildpartialblock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Implicitly opened existentials | Changes in Swift 5.7",desc:"Implicitly opened existentials",link:"/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(e({title:"Unavailable from async attribute | Changes in Swift 5.7",desc:"Unavailable from async attribute",link:"/hackingwithswift.com/swift/5.7/noasync.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a("p",null,[a("a",A,[n(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.7 playground")])])])])}const D=p(k,[["render",T],["__file","clock.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/swift/5.7/clock.html","title":"Add sleep(for:) to Clock","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Add sleep(for:) to Clock","description":"Article(s) > Add sleep(for:) to Clock","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.7"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Add sleep(for:) to Clock"},{"property":"og:description","content":"Add sleep(for:) to Clock"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/clock.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/clock.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Add sleep(for:) to Clock"}],["meta",{"property":"og:description","content":"Article(s) > Add sleep(for:) to Clock"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.7"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Add sleep(for:) to Clock\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.88,"words":863},"filePathRelative":"hackingwithswift.com/swift/5.7/clock.md","excerpt":"\\n"}');export{D as comp,R as data};
