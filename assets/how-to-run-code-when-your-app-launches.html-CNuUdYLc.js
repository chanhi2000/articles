import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as e,g as t,d as o,f as h,r as i,o as d}from"./app-BgNevrm5.js";const w={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),y=h(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>When you&#39;re using the SwiftUI App life cycle, your app launches through one struct that conforms to the <code>App</code> protocol. Its job is to create your initial view using either <code>WindowGroup</code>, <code>DocumentGroup</code>, or similar, but because its created before any of your actual views this is the perfect place for running code when your app launches.</p><p>For example, if you wanted to set up some initial <code>UserDefaults</code> values, your app&#39;s initializer is a great place to call <code>register(defaults:)</code>. This method sets up <em>default defaults</em>, by which I mean initial values for <code>UserDefaults</code> values that exist only until you set them – as soon as you provide a value of your own, these aren&#39;t used any more, and these initial values also disappear when your app is terminated so you should call it every launch just to make sure.</p><p>So, we might write something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@main</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ExampleApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// register initial UserDefaults values every launch</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>defaults<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;highScore&quot;</span></span><span class="token punctuation">:</span> <span class="token number">10</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>initializer()</code> is run <em>before</em> the <code>body</code> property is called, so it&#39;s also before <code>ContentView</code> is called. As a result, any places where you read <code>UserDefaults</code> in <code>ContentView</code> will already have your defaults in place.</p><p>To demonstrate this, here&#39;s an example <code>ContentView</code> struct that uses <code>@AppStorage</code> to read the “name” key:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@AppStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),v={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-run-code-when-your-app-launches-1.zip",target:"_blank",rel:"noopener noreferrer"},b=n("figure",null,[n("img",{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-run-code-when-your-app-launches-1~dark.png",alt:"The text “Your name is Taylor Swift.”.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"The text “Your name is Taylor Swift.”.")],-1),_=n("p",null,[o("Using "),n("code",null,"@AppStorage"),o(" requires that we give our property an initial value, which is cumbersome because we need to ensure we have the same initial value everywhere the property is used.")],-1),x=n("p",null,[o("However, here it doesn't matter: “Anonymous” will only be used for times when no value exists, and no initial defaults have been registered. We already called "),n("code",null,"register(defaults:)"),o(" in our app's initializer, so this view will show “Your name is Taylor Swift.”")],-1),S={class:"hint-container details"},H=n("summary",null,"Similar solutions…",-1);function q(c,U){const a=i("VPCard"),l=i("FontIcon");return d(),r("div",null,[n("h1",m,[n("a",k,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,f,s(a,e(t({title:"How to run code when your app launches | SwiftUI by Example",desc:"How to run code when your app launches",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-run-code-when-your-app-launches",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("blockquote",null,[n("p",null,[n("a",v,[s(l,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),b,_,x,n("details",S,[H,s(a,e(t({title:"How to control which view is shown when your app launches | SwiftUI by Example",desc:"How to control which view is shown when your app launches",link:"/hackingwithswift.com/swiftui/how-to-control-which-view-is-shown-when-your-app-launches.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to run some code when state changes using onChange() | SwiftUI by Example",desc:"How to run some code when state changes using onChange()",link:"/hackingwithswift.com/swiftui/how-to-run-some-code-when-state-changes-using-onchange.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to use Instruments to profile your SwiftUI code and identify slow layouts | SwiftUI by Example",desc:"How to use Instruments to profile your SwiftUI code and identify slow layouts",link:"/hackingwithswift.com/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to run an asynchronous task when a view is shown | SwiftUI by Example",desc:"How to run an asynchronous task when a view is shown",link:"/hackingwithswift.com/swiftui/how-to-run-an-asynchronous-task-when-a-view-is-shown.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"How to run a completion callback when an animation finishes | SwiftUI by Example",desc:"How to run a completion callback when an animation finishes",link:"/hackingwithswift.com/swiftui/how-to-run-a-completion-callback-when-an-animation-finishes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const T=p(w,[["render",q],["__file","how-to-run-code-when-your-app-launches.html.vue"]]),V=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-run-code-when-your-app-launches.html","title":"How to run code when your app launches","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to run code when your app launches","description":"Article(s) > How to run code when your app launches","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to run code when your app launches"},{"property":"og:description","content":"How to run code when your app launches"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-run-code-when-your-app-launches.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-run-code-when-your-app-launches.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to run code when your app launches"}],["meta",{"property":"og:description","content":"Article(s) > How to run code when your app launches"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-run-code-when-your-app-launches-1~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to run code when your app launches\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-run-code-when-your-app-launches-1~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.55,"words":764},"filePathRelative":"hackingwithswift.com/swiftui/how-to-run-code-when-your-app-launches.md","excerpt":"\\n"}');export{T as comp,V as data};
