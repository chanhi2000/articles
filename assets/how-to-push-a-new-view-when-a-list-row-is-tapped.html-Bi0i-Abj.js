import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as k,e as s,n as t,g as e,d,f as p,r as i,o as w}from"./app-BgNevrm5.js";const v={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),f=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>Updated in iOS 16</strong></p><p>SwiftUI&#39;s <code>NavigationLink</code> can be used inside list rows to present new views when a row is tapped. If the <code>NavigationLink</code> wraps around your entire row, the system automatically understands to make the entire row tappable in order to present the new view.</p><p>There are two ways of specifying a navigation destination: by providing one explicitly for your link, or if you&#39;re targeting iOS 16 and later we can use <code>navigationDestination()</code>.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>If you can – if you don&#39;t need highly custom navigation and you&#39;re able to target iOS 16 or later – using <code>navigationDestination()</code> is strongly preferred, because it allows SwiftUI to instantiate your destination views lazily.</p></div><p>To demonstrate navigation, here&#39;s a simple detail view that expects to be handled the name of a football player:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">PlayerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Selected player: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now create a <code>NavigationStack</code> with a <code>List</code> inside, allowing the user to select any player:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> players <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Roy Kent&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Richard Montlaur&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Dani Rojas&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Jamie Tartt&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> player <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>player<span class="token punctuation">,</span> value<span class="token punctuation">:</span> player<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token class-name">PlayerView</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a player&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),y=p(`<p>Using this modern value/destination approach to navigation breaks the work down into two steps:</p><ol><li>The <code>NavigationLink</code> view stores a player as its value. This is a string in the code above, but it can be anything that conforms to <code>Hashable</code>.</li><li>That value gets sent to <code>navigationDestination()</code> when the link is tapped. We told it to watch for strings, so it will receive the player string that was tapped. We&#39;re passing that directly to <code>PlayerView</code>, which expects a player name to work with.</li></ol><p>To get that same result using the older API, we need to pass in a <code>PlayerView</code> for every navigation link, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> players <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Roy Kent&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Richard Montlaur&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Dani Rojas&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Jamie Tartt&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> player <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">PlayerView</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> player<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a player&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can attach <code>navigationDestination()</code> to watch multiple different types of data, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show an integer&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show a string&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show a Double&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>pi<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Received Int: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Received String: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Received Double: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a value&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),q={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped-3.zip",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container details"},_=n("summary",null,"Similar solutions…",-1);function x(o,V){const a=i("VPCard"),l=i("VidStack"),c=i("FontIcon");return w(),r("div",null,[n("h1",m,[n("a",h,[n("span",null,k(o.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,b,s(a,t(e({title:"How to push a new view when a list row is tapped | SwiftUI by Example",desc:"How to push a new view when a list row is tapped",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,s(l,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped-1~dark.mp4"}),y,n("blockquote",null,[n("p",null,[n("a",q,[s(c,{icon:"fas fa-file-zipper"}),d("Download this as an Xcode project")])])]),n("details",S,[_,s(a,t(e({title:"How to push a new view onto a NavigationStack | SwiftUI by Example",desc:"How to push a new view onto a NavigationStack",link:"/hackingwithswift.com/swiftui/how-to-push-a-new-view-onto-a-navigationstack.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Composing views to create a list row | SwiftUI by Example",desc:"Composing views to create a list row",link:"/hackingwithswift.com/swiftui/composing-views-to-create-a-list-row.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to add custom swipe action buttons to a List row | SwiftUI by Example",desc:"How to add custom swipe action buttons to a List row",link:"/hackingwithswift.com/swiftui/how-to-add-custom-swipe-action-buttons-to-a-list-row.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const N=u(v,[["render",x],["__file","how-to-push-a-new-view-when-a-list-row-is-tapped.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped.html","title":"How to push a new view when a list row is tapped","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to push a new view when a list row is tapped","description":"Article(s) > How to push a new view when a list row is tapped","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to push a new view when a list row is tapped"},{"property":"og:description","content":"How to push a new view when a list row is tapped"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to push a new view when a list row is tapped"}],["meta",{"property":"og:description","content":"Article(s) > How to push a new view when a list row is tapped"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to push a new view when a list row is tapped\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.69,"words":806},"filePathRelative":"hackingwithswift.com/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped.md","excerpt":"\\n"}');export{N as comp,D as data};
