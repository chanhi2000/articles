import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as e,t as h,e as t,n as m,g as u,w as g,d as n,f as s,r as a,o as b}from"./app-BgNevrm5.js";const y={},v={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},k={class:"table-of-contents"},w=e("hr",null,null,-1),T=s(`<p>Now that we’ve created an SQLite database and connected to it, the next step is to create tables inside the database. A table is where we’ll store our data, organized in rows (records) and columns (attributes). For this example, we’ll create a table called <code>Students</code> to store information about students, which we’ll reuse in upcoming sections.</p><p>To create a table, we use SQL&#39;s <code>CREATE TABLE</code> statement. This command defines the table structure, including the column names and the data types for each column.</p><p>Here’s a simple SQL command to create a <code>Students</code> table with the following fields:</p><ul><li><code>id</code>: A unique identifier for each student (an integer).</li><li><code>name</code>: The student&#39;s name (text).</li><li><code>age</code>: The student&#39;s age (an integer).</li><li><code>email</code>: The student&#39;s email address (text).</li></ul><p>The SQL command to create this table would look like this:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Students <span class="token punctuation">(</span></span>
<span class="line">    id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> AUTOINCREMENT<span class="token punctuation">,</span></span>
<span class="line">    name <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    age <span class="token keyword">INTEGER</span><span class="token punctuation">,</span></span>
<span class="line">    email <span class="token keyword">TEXT</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can execute this <code>CREATE TABLE</code> SQL command in Python using the <code>sqlite3</code> library. Let’s see how to do that.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Use &#39;with&#39; to connect to the SQLite database and automatically close the connection when done</span></span>
<span class="line"><span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;my_database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Create a cursor object</span></span>
<span class="line">    cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Write the SQL command to create the Students table</span></span>
<span class="line">    create_table_query <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">    CREATE TABLE IF NOT EXISTS Students (</span>
<span class="line">        id INTEGER PRIMARY KEY AUTOINCREMENT,</span>
<span class="line">        name TEXT NOT NULL,</span>
<span class="line">        age INTEGER,</span>
<span class="line">        email TEXT</span>
<span class="line">    );</span>
<span class="line">    &#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Execute the SQL command</span></span>
<span class="line">    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>create_table_query<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Commit the changes</span></span>
<span class="line">    connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Print a confirmation message</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Table &#39;Students&#39; created successfully!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>IF NOT EXISTS</code>: This ensures that the table is only created if it doesn’t already exist, preventing errors if the table has been created before.</li><li><code>connection.commit()</code>: This saves (commits) the changes to the database.</li></ul><p>When you run the Python code above, it will create the <code>Students</code> table in the <code>my_database.db</code> database file. You’ll also see a message in the terminal confirming that the table has been created successfully.</p>`,10),E={href:"https://marketplace.visualstudio.com/items?itemName=qwtel.sqlite-viewer",target:"_blank",rel:"noopener noreferrer"},S=s('<figure><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1727514353100/522fc6f1-0363-41ca-a76a-b730470cb64a.png" alt="SQLite Viewer - VS Code Extension" tabindex="0" loading="lazy"><figcaption>SQLite Viewer - VS Code Extension</figcaption></figure><hr><h2 id="data-types-in-sqlite-and-their-mapping-to-python" tabindex="-1"><a class="header-anchor" href="#data-types-in-sqlite-and-their-mapping-to-python"><span>Data Types in SQLite and Their Mapping to Python</span></a></h2><p>SQLite supports several data types, which we need to understand when defining our tables. Here’s a quick overview of common SQLite data types and how they map to Python types:</p><table><thead><tr><th style="text-align:left;">SQLite Data Type</th><th style="text-align:left;">Description</th><th style="text-align:left;">Python Equivalent</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>INTEGER</strong></td><td style="text-align:left;">Whole numbers</td><td style="text-align:left;"><code>int</code></td></tr><tr><td style="text-align:left;"><strong>TEXT</strong></td><td style="text-align:left;">Text strings</td><td style="text-align:left;"><code>str</code></td></tr><tr><td style="text-align:left;"><strong>REAL</strong></td><td style="text-align:left;">Floating-point numbers</td><td style="text-align:left;"><code>float</code></td></tr><tr><td style="text-align:left;"><strong>BLOB</strong></td><td style="text-align:left;">Binary data (e.g., images, files)</td><td style="text-align:left;"><code>bytes</code></td></tr><tr><td style="text-align:left;"><strong>NULL</strong></td><td style="text-align:left;">Represents no value or missing data</td><td style="text-align:left;"><code>None</code></td></tr></tbody></table><p>In our <code>Students</code> table:</p><ul><li><code>id</code> is of type <code>INTEGER</code>, which maps to Python’s <code>int</code>.</li><li><code>name</code> and <code>email</code> are of type <code>TEXT</code>, which map to Python’s <code>str</code>.</li><li><code>age</code> is also of type <code>INTEGER</code>, mapping to Python’s <code>int</code>.</li></ul>',7);function _(o,x){const i=a("VPCard"),l=a("router-link"),c=a("SiteInfo"),r=a("FontIcon");return b(),p("div",null,[e("h1",v,[e("a",f,[e("span",null,h(o.$frontmatter.title)+" 관련",1)])]),t(i,m(u({title:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",link:"/freecodecamp.org/work-with-sqlite-in-python-handbook/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),e("nav",k,[e("ul",null,[e("li",null,[t(l,{to:"#data-types-in-sqlite-and-their-mapping-to-python"},{default:g(()=>[n("Data Types in SQLite and Their Mapping to Python")]),_:1})])])]),w,t(c,{name:"How to Work with SQLite in Python – A Handbook for Beginners",desc:"SQLite is one of the most popular relational database management systems (RDBMS). It’s lightweight, meaning that it doesn’t take up much space on your system. One of its best features is that it’s serverless, so you don’t need to install or manage a ...",url:"https://freecodecamp.org/news/work-with-sqlite-in-python-handbook/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}),T,e("p",null,[n("If you’re using Visual Studio Code, you can install the "),e("a",E,[t(r,{icon:"iconfont icon-vscode"}),n("SQLite Viewer")]),n(" extension to view SQLite databases.")]),S])}const q=d(y,[["render",_],["__file","how-to-create-database-tables.html.vue"]]),R=JSON.parse('{"path":"/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-create-database-tables.html","title":"How to Create Database Tables","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to Create Database Tables","description":"Article(s) > (3/11) How to Work with SQLite in Python – A Handbook for Beginners","category":["Python","SQLite","Article(s)"],"tag":["blog","freecodecamp.org","py","python","sqlite"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > (3/11) How to Work with SQLite in Python – A Handbook for Beginners"},{"property":"og:description","content":"How to Create Database Tables"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-create-database-tables.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-create-database-tables.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Create Database Tables"}],["meta",{"property":"og:description","content":"Article(s) > (3/11) How to Work with SQLite in Python – A Handbook for Beginners"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"name":"twitter:image:alt","content":"How to Create Database Tables"}],["meta",{"property":"article:author","content":"Ashutosh Krishna"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"sqlite"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Create Database Tables\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727514353100/522fc6f1-0363-41ca-a76a-b730470cb64a.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Krishna\\"}]}"]],"date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Ashutosh Krishna","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"},"headers":[{"level":2,"title":"Data Types in SQLite and Their Mapping to Python","slug":"data-types-in-sqlite-and-their-mapping-to-python","link":"#data-types-in-sqlite-and-their-mapping-to-python","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":2.49,"words":748},"filePathRelative":"freecodecamp.org/work-with-sqlite-in-python-handbook/how-to-create-database-tables.md","localizedDate":"2024년 10월 2일","excerpt":"\\n","copyright":{"author":"Ashutosh Krishna"}}');export{q as comp,R as data};
