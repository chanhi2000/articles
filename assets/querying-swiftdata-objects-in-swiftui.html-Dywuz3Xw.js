import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as u,e as t,n as i,g as o,d as a,f as m,r as s,o as h}from"./app-BgNevrm5.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),b=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Updated for Xcode 15")],-1),y=n("p",null,[a("Once you've designed your SwiftData models and injected them into your SwiftUI app using the "),n("code",null,"modelContainer()"),a(" modifier, the next step is to create some SwiftUI code to read out objects of your model and display them somehow.")],-1),S=n("code",null,"ContentView.swift",-1),_=n("code",null,"import SwiftData",-1),j=m(`<p>Now add this new property to the <code>ContentView</code> struct:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span> <span class="token keyword">var</span> destinations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Destination</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That uses the <code>@Query</code> macro to read all <code>Destination</code> objects being managed by SwiftData. We don&#39;t have any destinations yet so that array will be empty, but we&#39;ll fix that later.</p><p><code>@Query</code> is really smart: it will load all the destinations immediately when the view appears, but it will also watch the database for changes so that whenever any <code>Destination</code> object gets added, deleted, or changed, the <code>destinations</code> property will also be updated.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you&#39;ve used Core Data previously, this is equivalent to the <code>@FetchRequest</code> property wrapper.</p></div><p>Because all SwiftData model objects automatically conform to the <code>Identifiable</code> protocol, we can immediately write some SwiftUI code to show all our destinations in a list:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>destinations<span class="token punctuation">)</span> <span class="token punctuation">{</span> destination <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> <span class="token punctuation">.</span>long<span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token punctuation">.</span>shortened<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;iTour&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>We could have used <code>List(destinations)</code> rather than a <code>List</code> plus a <code>ForEach</code>, but we need the <code>ForEach</code> so we can add swipe to delete later.</p></div><p>Like I said earlier, that list will be empty because we haven&#39;t created any destinations yet. Obviously we want the user to be able to add their own destinations once the app is finished, but for now we can take a little shortcut and add some sample data.</p><p>Put this below the <code>navigationTitle()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add Samples&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> addSamples<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now add this method for it to run:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">addSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> rome <span class="token operator">=</span> <span class="token class-name">Destination</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Rome&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> florence <span class="token operator">=</span> <span class="token class-name">Destination</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Florence&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> naples <span class="token operator">=</span> <span class="token class-name">Destination</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Naples&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates some instances of our <code>Destination</code> model, but Swift will warn us that they aren’t used – we are creating them, but we aren&#39;t actually telling SwiftData to store them.</p><p>To do that we need to learn an important SwiftData concept called the <em>model context</em>, which has the job of tracking all objects that are currently being used by our app. That&#39;s not <em>every</em> object, because it would be terrifically inefficient to load everything all at once. Instead, it&#39;s just objects that we&#39;re actively using right now.</p><p>When we used the <code>modelContainer()</code> modifier earlier that <em>also</em> created a model context for us, and placed that context into SwiftUI’s environment for us to use. This automatic model context always runs on Swift’s main actor, so it’s safe to use from our user interface.</p><p>We need to access that model context to add our objects to SwiftData&#39;s storage, and we can use SwiftUI’s <code>@Environment</code> property wrapper to get it. Add this property to <code>ContentView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And now we can insert our new <code>Destination</code> objects into the model context by adding these three lines at the end of <code>addSamples()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>rome<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>florence<span class="token punctuation">)</span></span>
<span class="line">modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>naples<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run the app again then press Add Samples, and you should see the new destinations appear in our list – it works! Even better, if you go back to Xcode and press <kbd>Cmd</kbd>+<kbd>R</kbd> again to relaunch the app, you’ll see they are still there, because SwiftData automatically saved them for us.</p><p>This autosave behavior is enabled by default: as soon as our button code finishes executing SwiftData will save all our changes to its permanent storage, so our data is always safe.</p>`,22);function D(c,x){const e=s("VPCard"),p=s("VidStack"),l=s("FontIcon");return h(),d("div",null,[n("h1",f,[n("a",k,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),t(e,i(o({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,b,t(e,i(o({title:"Querying SwiftData objects in SwiftUI | SwiftData by Example",desc:"Querying SwiftData objects in SwiftUI",link:"https://hackingwithswift.com/quick-start/swiftdata/querying-swiftdata-objects-in-swiftui",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,t(p,{src:"youtube/Saw_sZWa4aQ"}),y,n("p",null,[a("Start by opening your "),t(l,{icon:"fa-brands fa-swift"}),S,a(" file and adding an "),_,a(" line at the top to bring in all the SwiftData code we need.")]),j])}const T=r(w,[["render",D],["__file","querying-swiftdata-objects-in-swiftui.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/querying-swiftdata-objects-in-swiftui.html","title":"Querying SwiftData objects in SwiftUI","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Querying SwiftData objects in SwiftUI","description":"Article(s) > Querying SwiftData objects in SwiftUI","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Querying SwiftData objects in SwiftUI"},{"property":"og:description","content":"Querying SwiftData objects in SwiftUI"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/querying-swiftdata-objects-in-swiftui.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/querying-swiftdata-objects-in-swiftui.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Querying SwiftData objects in SwiftUI"}],["meta",{"property":"og:description","content":"Article(s) > Querying SwiftData objects in SwiftUI"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Querying SwiftData objects in SwiftUI\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.55,"words":765},"filePathRelative":"hackingwithswift.com/swiftdata/querying-swiftdata-objects-in-swiftui.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{T as comp,U as data};
