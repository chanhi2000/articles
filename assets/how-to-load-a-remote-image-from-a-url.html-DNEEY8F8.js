import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as a,t as d,e as n,n as t,g as e,d as i,f as c,r as l,o as m}from"./app-BgNevrm5.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},f=a("nav",{class:"table-of-contents"},[a("ul")],-1),w=a("hr",null,null,-1),b=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 15</strong></p><p>SwiftUI has a dedicated <code>AsyncImage</code> for downloading and displaying remote images from the internet. In its simplest form you can just pass a URL, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">AsyncImage</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/paul.jpg&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4),v={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-load-a-remote-image-from-a-url-1.zip",target:"_blank",rel:"noopener noreferrer"},y=c(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-1~dark.png" alt="A phone showing an image of Paul Hudson." tabindex="0" loading="lazy"><figcaption>A phone showing an image of Paul Hudson.</figcaption></figure><p>Note how the URL is optional – the <code>AsyncImage</code> will simply show a default gray placeholder if the URL string is invalid. And if the image can&#39;t be loaded for some reason – if the user is offline, or if the image doesn&#39;t exist – then the system will continue showing the same placeholder image.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-2~dark.png" alt="A phone showing a large gray placeholder rectangle." tabindex="0" loading="lazy"><figcaption>A phone showing a large gray placeholder rectangle.</figcaption></figure><p>Because SwiftUI has no idea how big the downloaded image is going to be, by default <code>AsyncImage</code> has a flexible width and height while it&#39;s loading. As a result, unless you specify otherwise it will take up a lot of space in your UI while the image loads, then jump to the correct size as soon as the image is loaded.</p><p>Although you <em>can</em> attach a frame to your image, it will only affect the placeholder by default – if your finished image arrives at a different size, your UI will have to adapt to fit it.</p><p>A better solution is to add functions to control how the resulting image is shown and what kind of placeholder you want. For example, this fetches our image and makes it resizable, but while it&#39;s loading uses a red placeholder color:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">AsyncImage</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/paul.jpg&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> image <span class="token keyword">in</span> </span>
<span class="line">  image<span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">}</span> placeholder<span class="token punctuation">:</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token class-name">Color</span><span class="token punctuation">.</span>red </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),_={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-load-a-remote-image-from-a-url-2.zip",target:"_blank",rel:"noopener noreferrer"},A=c(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-3~dark.png" alt="A rounded red rectangle as a placeholder." tabindex="0" loading="lazy"><figcaption>A rounded red rectangle as a placeholder.</figcaption></figure><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-4~dark.png" alt="An image with rounded corners of Paul Hudson smiling." tabindex="0" loading="lazy"><figcaption>An image with rounded corners of Paul Hudson smiling.</figcaption></figure><p>Because both the resulting image and the placeholder color are now resizable, the <code>frame()</code> modifier is able to make sure our <code>AsyncImage</code> stays at the correct size the entire time. Before you ask: no, there is no <code>resizable()</code> modifier available directly on <code>AsyncImage</code>.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>By default the image is assumed to have a scale of 1, meaning designed for non-retina screens. However, you can also control the scale with a second parameter if you already know the correct scale:</p></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">AsyncImage</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/paul.jpg&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,5),U={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-load-a-remote-image-from-a-url-3.zip",target:"_blank",rel:"noopener noreferrer"},I=c(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-5~dark.png" alt="An image of Paul Hudson." tabindex="0" loading="lazy"><figcaption>An image of Paul Hudson.</figcaption></figure><p>For full control over your <code>AsyncImage</code>, you should use a single-closure variant of <code>AsyncImage</code> that handles the loading phase. This approach gives you complete control over the image loading process, allowing you to show one thing when the image is loaded, another thing if the load failed, and of course the image itself when it succeeded.</p><p>This can be <code>.empty</code> because loading hasn&#39;t completed yet, <code>.failure</code> if the image load failed, <code>success</code> with the image ready if it worked, and an unknown default case in case Apple add more options in the future.</p><p>For example, this shows a spinner, a placeholder error picture, or the actually loaded picture depending on how things went:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">AsyncImage</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/paul.jpg&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> phase <span class="token keyword">in</span> </span>
<span class="line">      <span class="token keyword">switch</span> phase <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token keyword">case</span> <span class="token punctuation">.</span>failure<span class="token punctuation">:</span> </span>
<span class="line">          <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;photo&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span> </span>
<span class="line">        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">let</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span> </span>
<span class="line">          image<span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">256</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),z={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-load-a-remote-image-from-a-url-4.zip",target:"_blank",rel:"noopener noreferrer"},H={class:"hint-container details"},R=a("summary",null,"Similar solutions…",-1);function q(p,x){const s=l("VPCard"),o=l("FontIcon");return m(),u("div",null,[a("h1",h,[a("a",k,[a("span",null,d(p.$frontmatter.title)+" 관련",1)])]),n(s,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,w,n(s,t(e({title:"How to load a remote image from a URL | SwiftUI by Example",desc:"How to load a remote image from a URL",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-load-a-remote-image-from-a-url",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,a("blockquote",null,[a("p",null,[a("a",v,[n(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),y,a("blockquote",null,[a("p",null,[a("a",_,[n(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),A,a("blockquote",null,[a("p",null,[a("a",U,[n(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),I,a("blockquote",null,[a("p",null,[a("a",z,[n(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),a("details",H,[R,n(s,t(e({title:"How to save and load NavigationStack paths using Codable | SwiftUI by Example",desc:"How to save and load NavigationStack paths using Codable",link:"/hackingwithswift.com/swiftui/how-to-save-and-load-navigationstack-paths-using-codable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"How to lazy load views using LazyVStack and LazyHStack | SwiftUI by Example",desc:"How to lazy load views using LazyVStack and LazyHStack",link:"/hackingwithswift.com/swiftui/how-to-lazy-load-views-using-lazyvstack-and-lazyhstack.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"How to load custom colors from an asset catalog | SwiftUI by Example",desc:"How to load custom colors from an asset catalog",link:"/hackingwithswift.com/swiftui/how-to-load-custom-colors-from-an-asset-catalog.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"How to draw images using Image views | SwiftUI by Example",desc:"How to draw images using Image views",link:"/hackingwithswift.com/swiftui/how-to-draw-images-using-image-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"How to convert a SwiftUI view to an image | SwiftUI by Example",desc:"How to convert a SwiftUI view to an image",link:"/hackingwithswift.com/swiftui/how-to-convert-a-swiftui-view-to-an-image.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const j=r(g,[["render",q],["__file","how-to-load-a-remote-image-from-a-url.html.vue"]]),P=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-load-a-remote-image-from-a-url.html","title":"How to load a remote image from a URL","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to load a remote image from a URL","description":"Article(s) > How to load a remote image from a URL","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to load a remote image from a URL"},{"property":"og:description","content":"How to load a remote image from a URL"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-load-a-remote-image-from-a-url.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-load-a-remote-image-from-a-url.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to load a remote image from a URL"}],["meta",{"property":"og:description","content":"Article(s) > How to load a remote image from a URL"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-1~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to load a remote image from a URL\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-1~dark.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-2~dark.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-3~dark.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-4~dark.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-load-a-remote-image-from-a-url-5~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.56,"words":1067},"filePathRelative":"hackingwithswift.com/swiftui/how-to-load-a-remote-image-from-a-url.md","excerpt":"\\n"}');export{j as comp,P as data};
