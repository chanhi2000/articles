import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,b as e,t as v,e as a,n as k,g as f,w as n,d as t,f as c,r as l,o as b}from"./app-BgNevrm5.js";const w={},y={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},x=e("hr",null,null,-1),A=e("p",null,"Performance optimization is my favorite thing about software engineering. Over the last 5 years, I've encountered various performance problems that taught me different ways to overcome them.",-1),z=e("p",null,"About a month ago, I ran into an issue with an API endpoint that wasn't scaling well.",-1),T=e("p",null,"This endpoint is used to calculate a report for an e-commerce web application. It needed to talk to multiple modules (services) to gather all the necessary data, combine it and perform the calculations.",-1),E={href:"https://linkedin.com/feed/update/urn:li:activity:6966700329111310336/",target:"_blank",rel:"noopener noreferrer"},C=c('<figure><img src="https://milanjovanovic.tech/blogs/mnw_007/linkedin_post.png?imwidth=1920" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>In this newsletter, I want to break down what I did to achieve a <strong>15x performance improvement</strong>.</p><hr><h2 id="focus-on-bottlenecks-first" tabindex="-1"><a class="header-anchor" href="#focus-on-bottlenecks-first"><span>Focus On Bottlenecks First</span></a></h2><p>The first thing I do when I&#39;m solving a performance problem is determine where the slowest piece of the code is. Fixing this part of the code will usually give the most significant improvement.</p><p>Solving one bottleneck can also reveal where the next bottleneck is.<br>This is a continual process.</p><p>In my situation, there were a few bottlenecks:</p><ul><li>Calling the database from a loop</li><li>Calling an external service multiple times</li><li>Executing a complex calculation multiple times with identical parameters</li></ul><p>How can you measure performance?</p><p>A simple approach can be using <code>System.Timers.Timer</code> where you manually log execution times between method calls. Or you can use a performance profiler.</p><hr><h2 id="reduce-the-number-of-round-trips" tabindex="-1"><a class="header-anchor" href="#reduce-the-number-of-round-trips"><span>Reduce The Number of Round Trips</span></a></h2><p>A round trip between your application and a database (or some other service) can last 5-10ms, or more. If you have many round trips in your flow, it&#39;s going to add up quickly.</p><p>Here are a few things you can do reduce the number of round trips:</p>',14),P=e("p",null,"Don't call the database from a loop. This can usually be solved with a simple query like this:",-1),R=e("div",{class:"language-sql line-numbers-mode","data-highlighter":"prismjs","data-ext":"sql","data-title":"sql"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[t("   "),e("span",{class:"token keyword"},"SELECT"),t(),e("span",{class:"token operator"},"*"),t(),e("span",{class:"token keyword"},"FROM"),t(),e("span",{class:"token punctuation"},"["),t("TableName"),e("span",{class:"token punctuation"},"]"),t(),e("span",{class:"token keyword"},"WHERE"),t(" Id "),e("span",{class:"token operator"},"IN"),t(),e("span",{class:"token punctuation"},"("),t("list_of_ids"),e("span",{class:"token punctuation"},")")]),t(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),O={href:"https://github.com/DapperLib/Dapper",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"DapperLib/Dapper",-1),M=e("code",null,"QueryMultiple",-1),j=e("p",null,null,-1),H=e("p",null,"If you need to make multiple calls to another service, try to convert that into one call. And in the service, aggregate the required data and return everything at once.",-1),N=c(`<hr><h2 id="parallelize-external-calls" tabindex="-1"><a class="header-anchor" href="#parallelize-external-calls"><span>Parallelize External Calls</span></a></h2><p>I had a situation where I was awaiting multiple asynchronous calls from a few services. These calls had no dependencies on each other, so I used a simple technique to gain a significant performance improvement.</p><p>Let&#39;s say you&#39;re awaiting two tasks:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> task1Result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">CallService1Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> task2Result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">CallService2Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use the results.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A simple way to parallelize these calls is using the <code>Task.WhenAll</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> task1 <span class="token operator">=</span> <span class="token function">CallService1Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> task2 <span class="token operator">=</span> <span class="token function">CallService2Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use the results.</span></span>
<span class="line">task1<span class="token punctuation">.</span>Result<span class="token punctuation">;</span></span>
<span class="line">task2<span class="token punctuation">.</span>Result<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that I&#39;m directly accessing the <code>Result</code> property on the tasks. This can be <strong>detrimental</strong> if you&#39;re using it to block on an asynchronous call, and can even lead to deadlocks.</p><p>However, in this situation it is perfectly safe to do, because the two tasks will have completed after the call to <code>Task.WhenAll</code> completes.</p><p>Of course, whether or not these tasks will be executed in parallel when calling <code>Task.WhenAll</code> depends on a few factors, which I won&#39;t cover here.</p><hr><h2 id="caching-as-a-last-resort" tabindex="-1"><a class="header-anchor" href="#caching-as-a-last-resort"><span>Caching As a Last Resort</span></a></h2><p>I try to leave caching for the end, after I have exhausted all other possibilities to improve performance. While I love to use caching in general, I&#39;m aware it can introduce some unwanted behavior when data is stale.</p><p>You have to consider how long you can safely cache the data, and how you are going to clear the cache if the underlying data changes.</p>`,14),S=e("code",null,"IMemoryCache",-1),D=e("strong",null,"ASP.NET Core",-1),q={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},B=e("p",null,"A good candidate for caching is data that is frequently accessed, but rarely modified.",-1),L=e("hr",null,null,-1),V=e("h2",{id:"closing-thoughts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#closing-thoughts"},[e("span",null,"Closing Thoughts")])],-1),W=e("p",null,"I didn't talk about database optimization and indexes here, but this should also be on your mind if the database is your bottleneck.",-1);function J(p,K){const d=l("VPCard"),s=l("router-link"),h=l("SiteInfo"),r=l("FontIcon"),u=l("Tabs");return b(),g("div",null,[e("h1",y,[e("a",_,[e("span",null,v(p.$frontmatter.title)+" 관련",1)])]),a(d,k(f({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",I,[e("ul",null,[e("li",null,[a(s,{to:"#focus-on-bottlenecks-first"},{default:n(()=>[t("Focus On Bottlenecks First")]),_:1})]),e("li",null,[a(s,{to:"#reduce-the-number-of-round-trips"},{default:n(()=>[t("Reduce The Number of Round Trips")]),_:1})]),e("li",null,[a(s,{to:"#parallelize-external-calls"},{default:n(()=>[t("Parallelize External Calls")]),_:1})]),e("li",null,[a(s,{to:"#caching-as-a-last-resort"},{default:n(()=>[t("Caching As a Last Resort")]),_:1})]),e("li",null,[a(s,{to:"#closing-thoughts"},{default:n(()=>[t("Closing Thoughts")]),_:1})])])]),x,a(h,{name:"How I Optimized an API Endpoint to Make It 15x Faster",desc:"Performance optimizations are my favorite thing about software engineering. Over the last 5 years, I've encountered various performance problems that taught me different ways to overcome them.",url:"https://milanjovanovic.tech/blog/how-i-optimized-an-api-endpoint-to-make-it-15x-faster/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_007.png"}),A,z,T,e("p",null,[t("I made a "),e("a",E,[a(r,{icon:"fa-brands fa-linkedin"}),t("post about it on LinkedIn")]),t(" that resonated with many people.")]),C,a(u,{id:"73",data:[{id:"1."},{id:"2."},{id:"3."}],active:0},{title0:n(({value:o,isActive:i})=>[t("1.")]),title1:n(({value:o,isActive:i})=>[t("2.")]),title2:n(({value:o,isActive:i})=>[t("3.")]),tab0:n(({value:o,isActive:i})=>[P,R]),tab1:n(({value:o,isActive:i})=>[e("p",null,[t("Use a query that returns multiple result sets from the database. One library that supports this is "),e("a",O,[a(r,{icon:"iconfont icon-github"}),F]),t(", with the "),M,t(" method.")]),j]),tab2:n(({value:o,isActive:i})=>[H]),_:1}),N,e("p",null,[t("In simple applications, I use "),S,t(" that is available in "),D,t(" out of the box. But you can also use an external cache like "),e("a",q,[a(r,{icon:"iconfont icon-redis"}),t("Redis")]),t(".")]),B,L,V,W])}const Q=m(w,[["render",J],["__file","how-i-optimized-an-api-endpoint-to-make-it-15x-faster.html.vue"]]),Y=JSON.parse('{"path":"/milanjovanovic.tech/how-i-optimized-an-api-endpoint-to-make-it-15x-faster.html","title":"How I Optimized an API Endpoint to Make It 15x Faster","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How I Optimized an API Endpoint to Make It 15x Faster","description":"Article(s) > How I Optimized an API Endpoint to Make It 15x Faster","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How I Optimized an API Endpoint to Make It 15x Faster"},{"property":"og:description","content":"How I Optimized an API Endpoint to Make It 15x Faster"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-i-optimized-an-api-endpoint-to-make-it-15x-faster.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-i-optimized-an-api-endpoint-to-make-it-15x-faster.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How I Optimized an API Endpoint to Make It 15x Faster"}],["meta",{"property":"og:description","content":"Article(s) > How I Optimized an API Endpoint to Make It 15x Faster"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_007.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_007.png"}],["meta",{"name":"twitter:image:alt","content":"How I Optimized an API Endpoint to Make It 15x Faster"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2022-10-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How I Optimized an API Endpoint to Make It 15x Faster\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_007/linkedin_post.png?imwidth=1920\\"],\\"datePublished\\":\\"2022-10-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2022-10-15T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_007.png"},"headers":[{"level":2,"title":"Focus On Bottlenecks First","slug":"focus-on-bottlenecks-first","link":"#focus-on-bottlenecks-first","children":[]},{"level":2,"title":"Reduce The Number of Round Trips","slug":"reduce-the-number-of-round-trips","link":"#reduce-the-number-of-round-trips","children":[]},{"level":2,"title":"Parallelize External Calls","slug":"parallelize-external-calls","link":"#parallelize-external-calls","children":[]},{"level":2,"title":"Caching As a Last Resort","slug":"caching-as-a-last-resort","link":"#caching-as-a-last-resort","children":[]},{"level":2,"title":"Closing Thoughts","slug":"closing-thoughts","link":"#closing-thoughts","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3,"words":900},"filePathRelative":"milanjovanovic.tech/how-i-optimized-an-api-endpoint-to-make-it-15x-faster.md","localizedDate":"2022년 10월 15일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{Q as comp,Y as data};
