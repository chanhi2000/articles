import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,t as l,e as a,n,g as i,a as e,r as p,o as d}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},u={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),y=t("hr",null,null,-1),f=t("blockquote",null,[t("p",null,"Available from iOS 8.0")],-1),w=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),e(`
/example-code/language/how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements">How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù 
/example-code/language/what-is-a-protocol-associated-type">What is a protocol associated type? 
/quick-start/swiftui/how-to-fix-protocol-view-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements">How to fix ‚ÄúProtocol 'View' can only be used as a generic constraint because it has Self or associated type requirements‚Äù 
/example-code/language/how-to-add-associated-values-to-enums">How to add associated values to enums 
/quick-start/swiftui/how-to-fix-function-declares-an-opaque-return-type-but-has-no-return-statements-in-its-body-from-which-to-infer-an-underlying-ty">How to fix ‚ÄúFunction declares an opaque return type, but has no return statements in its body from which to infer an underlying type‚Äù</a>
`)],-1);function b(s,k){const o=p("VPCard");return d(),c("div",null,[t("h1",m,[t("a",u,[t("span",null,l(s.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(o,n(i({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,y,a(o,n(i({title:"How to constrain a protocol associated type | Language - free Swift example code",desc:"How to constrain a protocol associated type",link:"https://hackingwithswift.com/example-code/language/how-to-constrain-a-protocol-associated-type",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,e(" TODO: ÏûëÏÑ± "),e(' \n<p style="margin: 0; margin-bottom: 20px;"><a href="/about">Paul Hudson</a>    <i class="fab fa-twitter" aria-hidden="true" style="color: #4099ff"></i> <a href="https://twitter.com/twostraws" target="_blank">@twostraws</a>    <time itemprop="dateModified" datetime="2019-05-28T20:41:20+00:00">May 28th 2019</time><meta itemprop="datePublished" content="2019-05-28T20:41:20+00:00">\n\nProtocol associated types let you add a huge amount of flexibility to your protocols, but sometimes you want a little *less* flexibility. For example, you might say that all types conforming to a protocol must specify the `id` of their object and also what type that ID must be:\n\n```swift\nprotocol Identifiable1 {\n    associatedtype ID\n    var id: ID { get set }\n}\n```\n\nWith that code, `ID` could be anything ‚Äì a `String`, an `Int`, a `UILabel`, and so on. However, you might find you need to apply some constraints to that type: perhaps you need to use it as a dictionary key (`Hashable`), or sort it in an array (`Comparable`).\n\nTo make this work, Swift lets us apply constraints to associated types: ‚Äúit can be any type, as long as that type conforms to‚Ä¶‚Äù. For example, this forces `ID` to conform to `Hashable`:\n\n```swift\nprotocol Identifiable2 {\n    associatedtype ID: Hashable\n    var id: ID { get set }\n}\n```\n\nBecause `Hashable` inherits from `Equatable` we can now be sure that any types used for `ID` can be compared using `==` and also used as keys in dictionaries.\n\n'),w])}const H=r(h,[["render",b],["__file","how-to-constrain-a-protocol-associated-type.html.vue"]]),v=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/how-to-constrain-a-protocol-associated-type.html","title":"How to constrain a protocol associated type","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to constrain a protocol associated type","description":"Article(s) > How to constrain a protocol associated type","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-8.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to constrain a protocol associated type"},{"property":"og:description","content":"How to constrain a protocol associated type"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-constrain-a-protocol-associated-type.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-constrain-a-protocol-associated-type.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to constrain a protocol associated type"}],["meta",{"property":"og:description","content":"Article(s) > How to constrain a protocol associated type"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-8.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to constrain a protocol associated type\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"hackingwithswift.com/example-code/language/how-to-constrain-a-protocol-associated-type.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{H as comp,v as data};
