import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as s,t as d,e as n,n as e,g as t,d as i,f as c,r as p,o as k}from"./app-BgNevrm5.js";const f={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w=s("nav",{class:"table-of-contents"},[s("ul")],-1),g=s("hr",null,null,-1),b=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 17</strong></p><p>SwiftUI&#39;s <code>sensoryFeedback()</code> modifier provides built-in support for a range of simple haptics, which means we can create vibration effects for success, failure, selection, impacts, and more.</p><p>To trigger feedback, attach the <code>sensoryFeedback()</code> to any view, telling it what kind of effect to make and what the trigger should be – when the effect should be played. SwiftUI will monitor the trigger value, and run your haptic effect whenever it changes.</p><p>For example, if you had a button that marks a task as being complete, you could play a haptic when completion happens:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> taskIsComplete <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Mark Complete&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            taskIsComplete <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">sensoryFeedback</span><span class="token punctuation">(</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> taskIsComplete<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),v={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-haptic-effects-using-sensory-feedback-1.zip",target:"_blank",rel:"noopener noreferrer"},y=c(`<p>For more fine-grained control, you can decide exactly which type of haptic effect to trigger based on comparing the old and new value of your trigger. For example, this uses the <code>.impact</code> haptic effect with varying intensities based on the difference between two random numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> randomNumber <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Mark Complete&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            randomNumber <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">sensoryFeedback</span><span class="token punctuation">(</span>trigger<span class="token punctuation">:</span> randomNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>oldValue <span class="token operator">-</span> newValue<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">impact</span><span class="token punctuation">(</span>flexibility<span class="token punctuation">:</span> <span class="token punctuation">.</span>solid<span class="token punctuation">,</span> intensity<span class="token punctuation">:</span> amount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-haptic-effects-using-sensory-feedback-2.zip",target:"_blank",rel:"noopener noreferrer"},x=c(`<p>And finally, you can provide a fixed haptic effect and customize when it&#39;s triggered by providing your own comparison function. As an example, this will trigger the <code>.success</code> haptic when the difference between two random numbers is more than 0.5:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> randomNumber <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Mark Complete&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            randomNumber <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">sensoryFeedback</span><span class="token punctuation">(</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> randomNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span></span>
<span class="line">            <span class="token function">abs</span><span class="token punctuation">(</span>oldValue <span class="token operator">-</span> newValue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-haptic-effects-using-sensory-feedback-3.zip",target:"_blank",rel:"noopener noreferrer"},V={class:"hint-container details"},H=s("summary",null,"Similar solutions…",-1);function I(l,U){const a=p("VPCard"),o=p("FontIcon");return k(),u("div",null,[s("h1",m,[s("a",h,[s("span",null,d(l.$frontmatter.title)+" 관련",1)])]),n(a,e(t({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,g,n(a,e(t({title:"How to add haptic effects using sensory feedback | SwiftUI by Example",desc:"How to add haptic effects using sensory feedback",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-add-haptic-effects-using-sensory-feedback",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,s("blockquote",null,[s("p",null,[s("a",v,[n(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),y,s("blockquote",null,[s("p",null,[s("a",_,[n(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),x,s("blockquote",null,[s("p",null,[s("a",S,[n(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),s("details",V,[H,n(a,e(t({title:"How to add Metal shaders to SwiftUI views using layer effects | SwiftUI by Example",desc:"How to add Metal shaders to SwiftUI views using layer effects",link:"/hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"How to stack modifiers to create more advanced effects | SwiftUI by Example",desc:"How to stack modifiers to create more advanced effects",link:"/hackingwithswift.com/swiftui/how-to-stack-modifiers-to-create-more-advanced-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"How to create 3D effects like Cover Flow using ScrollView and GeometryReader | SwiftUI by Example",desc:"How to create 3D effects like Cover Flow using ScrollView and GeometryReader",link:"/hackingwithswift.com/swiftui/how-to-create-3d-effects-like-cover-flow-using-scrollview-and-geometryreader.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"How to add advanced text styling using AttributedString | SwiftUI by Example",desc:"How to add advanced text styling using AttributedString",link:"/hackingwithswift.com/swiftui/how-to-add-advanced-text-styling-using-attributedstring.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"How to add in-app purchases in SwiftUI | SwiftUI by Example",desc:"How to add in-app purchases in SwiftUI",link:"/hackingwithswift.com/swiftui/how-to-add-in-app-purchases-in-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const q=r(f,[["render",I],["__file","how-to-add-haptic-effects-using-sensory-feedback.html.vue"]]),N=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-add-haptic-effects-using-sensory-feedback.html","title":"How to add haptic effects using sensory feedback","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to add haptic effects using sensory feedback","description":"Article(s) > How to add haptic effects using sensory feedback","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to add haptic effects using sensory feedback"},{"property":"og:description","content":"How to add haptic effects using sensory feedback"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-add-haptic-effects-using-sensory-feedback.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-add-haptic-effects-using-sensory-feedback.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to add haptic effects using sensory feedback"}],["meta",{"property":"og:description","content":"Article(s) > How to add haptic effects using sensory feedback"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to add haptic effects using sensory feedback\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftui/how-to-add-a-gesture-recognizer-to-a-view.md"},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.44,"words":732},"filePathRelative":"hackingwithswift.com/swiftui/how-to-add-haptic-effects-using-sensory-feedback.md","excerpt":"\\n"}');export{q as comp,N as data};
