import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as t,t as c,e as n,n as s,g as o,a as e,r as p,o as h}from"./app-BgNevrm5.js";const d={},m={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},u={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),f=t("hr",null,null,-1),w=t("blockquote",null,[t("p",null,"Available from iOS 8.0")],-1),y=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),e(`
/quick-start/swiftui/all-swiftui-property-wrappers-explained-and-compared">All SwiftUI property wrappers explained and compared 
/quick-start/swiftui/swiftui-tips-and-tricks">SwiftUI tips and tricks 
/example-code/uikit/how-to-create-live-playgrounds-in-xcode">How to create live playgrounds in Xcode 
/example-code/games/how-to-create-a-random-terrain-tile-map-using-sktilemapnode-and-gkperlinnoisesource">How to create a random terrain tile map using SKTileMapNode and GKPerlinNoiseSource 
/quick-start/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts">How to use Instruments to profile your SwiftUI code and identify slow layouts</a>
`)],-1);function b(i,x){const a=p("VPCard");return h(),r("div",null,[t("h1",m,[t("a",u,[t("span",null,c(i.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(a,s(o({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,f,n(a,s(o({title:"What are class and subtype existentials? | Language - free Swift example code",desc:"What are class and subtype existentials?",link:"https://hackingwithswift.com/example-code/language/what-are-class-and-subtype-existentials",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,e(" TODO: ÏûëÏÑ± "),e(" \nYou should already know that Swift lets you specify a concrete type as a function parameter, meaning that you can say ‚Äúthis parameter must be a string.‚Äù Swift also lets you specify protocols types for function parameters, meaning that you can say ‚Äúthis parameter must conform to `Codable`.‚Äù \n\nThose two are straightforward, but sometimes you need more power. Fortunately, Swift lets us represent existentials of classes and subtypes that conform to protocols, which is dramatic way of saying that you can now refer to types in a more complex way.\n\nAs an example, consider this class hierarchy:\n\n```swift\nclass Animal { }\n\nclass Dog: Animal, Codable { }\nclass Cat: Animal, Codable { }\n```\n\nThere‚Äôs a main `Animal` class, and two subclasses called `Dog` and `Cat`. Both of the subclasses also conform to `Codable`. Swift lets us combine both `Animal` (the class) and `Codable` (the protocol) to write functions that require a parameter to be both at the same time:\n\n```swift\nfunc encodeAnimal(with animal: Animal & Codable) {\n\n}\n\nlet animal = Dog()\nencodeAnimal(with: animal)\n```\n\nWithout the `Codable` part that function would accept instances of the main `Animal` class even though it wouldn‚Äôt work inside, and without the `Animal` part that function would accept anything that‚Äôs `Codable` ‚Äì only the combination of the two makes sense.\n\n"),y])}const S=l(d,[["render",b],["__file","what-are-class-and-subtype-existentials.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/what-are-class-and-subtype-existentials.html","title":"What are class and subtype existentials?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What are class and subtype existentials?","description":"Article(s) > What are class and subtype existentials?","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-8.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What are class and subtype existentials?"},{"property":"og:description","content":"What are class and subtype existentials?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/what-are-class-and-subtype-existentials.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/what-are-class-and-subtype-existentials.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"What are class and subtype existentials?"}],["meta",{"property":"og:description","content":"Article(s) > What are class and subtype existentials?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-8.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What are class and subtype existentials?\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.56,"words":467},"filePathRelative":"hackingwithswift.com/example-code/language/what-are-class-and-subtype-existentials.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{S as comp,A as data};
