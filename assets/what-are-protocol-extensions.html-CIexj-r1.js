import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as e,t as l,e as a,n,g as r,a as t,r as p,o as h}from"./app-BgNevrm5.js";const g={},d={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},f=e("nav",{class:"table-of-contents"},[e("ul")],-1),u=e("hr",null,null,-1),w=e("blockquote",null,[e("p",null,"Available from iOS 8.0")],-1),x=e("details",{class:"hint-container details"},[e("summary",null,"Similar solutions‚Ä¶"),t(`
/example-code/language/what-is-protocol-oriented-programming">What is protocol-oriented programming? 
/example-code/language/what-is-a-protocol-associated-type">What is a protocol associated type? 
/example-code/language/whats-the-difference-between-a-protocol-and-a-class">What‚Äôs the difference between a protocol and a class? 
/example-code/language/how-to-fix-the-error-protocol-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements">How to fix the error ‚Äúprotocol can only be used as a generic constraint because it has Self or associated type requirements‚Äù 
/example-code/language/what-is-a-protocol">What is a protocol?</a>
`)],-1);function y(i,b){const o=p("VPCard");return h(),c("div",null,[e("h1",d,[e("a",m,[e("span",null,l(i.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(o,n(r({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,u,a(o,n(r({title:"What are protocol extensions? | Language - free Swift example code",desc:"What are protocol extensions?",link:"https://hackingwithswift.com/example-code/language/what-are-protocol-extensions",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,t(" TODO: ÏûëÏÑ± "),t(" \nThis might sound obvious, but protocol extensions are extensions to protocols as opposed to concrete types. For example, the `BinaryInteger` protocol is adopted by all integer types: `Int`, `Int64`, `UInt8`, and so on. If you wanted to add a method to all of those at once, you‚Äôd use a protocol extension to modify `BinaryInteger`, like this:\n\n```swift\nextension BinaryInteger {\n    func cubed() -> Self {\n        return self * self * self\n    }\n}\n```\n\nThat `cubed()` method will now existing on all integer types, so you can write code like this:\n\n```swift\nlet i: Int = 5\nlet j: UInt8 = 7\nprint(i.cubed())\nprint(j.cubed())\n```\n\nNote: `Self` with a capital S refers to whatever type conforms to the protocol, e.g. `Int` or `UInt32`, whereas `self` with a lowercase S refers to whatever the current value of the type is, e.g. 5 or 99.\n\n"),x])}const S=s(g,[["render",y],["__file","what-are-protocol-extensions.html.vue"]]),v=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/what-are-protocol-extensions.html","title":"What are protocol extensions?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What are protocol extensions?","description":"Article(s) > What are protocol extensions?","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-8.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What are protocol extensions?"},{"property":"og:description","content":"What are protocol extensions?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/what-are-protocol-extensions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/what-are-protocol-extensions.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"What are protocol extensions?"}],["meta",{"property":"og:description","content":"Article(s) > What are protocol extensions?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-8.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What are protocol extensions?\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"hackingwithswift.com/example-code/language/what-are-protocol-extensions.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{S as comp,v as data};
