import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as h,e as a,n as l,g as c,d as s,f as e,r as o,o as m}from"./app-BgNevrm5.js";const k={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),w=e(`<p>JSON – short for JavaScript Object Notation – is a way of describing data. It&#39;s not the easiest to read yourself, but it&#39;s compact and easy to parse for computers, which makes it popular online where bandwidth is at a premium.</p><p>Before we do the parsing, here is a tiny slice of the actual JSON you&#39;ll be receiving:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;metadata&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;responseInfo&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;status&quot;</span></span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;developerMessage&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;results&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;title&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;Legal immigrants should get freedom before undocumented immigrants – moral, just and fair&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;body&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;I am petitioning President Trump&#39;s Administration to take a humane view of the plight of legal immigrants. Specifically, legal immigrants in Employment Based (EB) category. I believe, such immigrants were short changed in the recently announced reforms via Executive Action (EA), which was otherwise long due and a welcome announcement.&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;issues&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;28&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;Human Rights&quot;</span></span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;29&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;Immigration&quot;</span></span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;signatureThreshold&quot;</span></span><span class="token punctuation">:</span><span class="token number">100000</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;signatureCount&quot;</span></span><span class="token punctuation">:</span><span class="token number">267</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;signaturesNeeded&quot;</span></span><span class="token punctuation">:</span><span class="token number">99733</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;title&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;National database for police shootings.&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;body&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;There is no reliable national data on how many people are shot by police officers each year. In signing this petition, I am urging the President to bring an end to this absence of visibility by creating a federally controlled, publicly accessible database of officer-involved shootings.&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;issues&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;28&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;Human Rights&quot;</span></span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;signatureThreshold&quot;</span></span><span class="token punctuation">:</span><span class="token number">100000</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;signatureCount&quot;</span></span><span class="token punctuation">:</span><span class="token number">17453</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-literal"><span class="token string">&quot;signaturesNeeded&quot;</span></span><span class="token punctuation">:</span><span class="token number">82547</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll actually be getting between 2000-3000 lines of that stuff, all containing petitions from US citizens about all sorts of political things. It doesn&#39;t really matter (to us) what the petitions are, we just care about the data structure. In particular:</p><ol><li>There&#39;s a metadata value, which contains a <code>responseInfo</code> value, which in turn contains a status value. Status 200 is what internet developers use for &quot;everything is OK.&quot;</li><li>There&#39;s a results value, which contains a series of petitions.</li><li>Each petition contains a title, a body, some issues it relates to, plus some signature information.</li><li>JSON has strings and integers too. Notice how the strings are all wrapped in quotes, whereas the integers aren&#39;t.</li></ol><p>Swift has built-in support for working with JSON using a protocol called <code>Codable</code>. When you say “my data conforms to <code>Codable</code>”, Swift will allow you to convert freely between that data and JSON using only a little code.</p><p>Swift’s simple types like <code>String</code> and <code>Int</code> automatically conform to <code>Codable</code>, and arrays and dictionaries also conform to <code>Codable</code> if they contain <code>Codable</code> objects. That is, <code>[String]</code> conforms to <code>Codable</code> just fine, because <code>String</code> itself conforms to <code>Codable</code>.</p><p>Here, though, we need something more complex: each petition contains a title, some body text, a signature count, and more. That means we need to define a custom struct called <code>Petition</code> that stores one petition from our JSON, which means it will track the title string, body string, and signature count integer.</p>`,8),y=n("kbd",null,"Cmd",-1),q=n("kbd",null,"N",-1),S=n("code",null,"Petition.swift",-1),I=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Petition</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> signatureCount<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That defines a custom struct with three properties. You might remember that one of the advantages of structs in Swift is that it gives us a <em>memberwise initializer</em> – a special function that can create new <code>Petition</code> instances by passing in values for <code>title</code>, <code>body</code>, and <code>signatureCount</code>.</p><p>We’ll come onto that in a moment, but first I mentioned the <code>Codable</code> protocol. Our <code>Petition</code> struct contains two strings and an integer, all of which conforms to <code>Codable</code> already, so we can ask Swift to make the whole <code>Petition</code> type conform to <code>Codable</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Petition</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> signatureCount<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that simple change we’re almost ready to load instances of <code>Petition</code> from JSON.</p><p>I say <em>almost</em> ready because there’s a slight wrinkle in our plan: if you looked at the JSON example I gave above, you’ll have noticed that our array of petitions actually comes inside a dictionary called “results”. This means when we try to have Swift parse the JSON we need to load that key first, then <em>inside</em> that load the array of petition results.</p><p>Swift’s <code>Codable</code> protocol needs to know exactly where to find its data, which in this case means making a <em>second</em> struct. This one will have a single property called <code>results</code> that will be an array of our <code>Petition</code> struct. This matches exactly how the JSON looks: the main JSON contains the <code>results</code> array, and each item in that array is a <code>Petition</code>.</p>`,7),C=n("kbd",null,"Cmd",-1),_=n("kbd",null,"N",-1),j=n("code",null,"Petitions.swift",-1),P=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Petitions</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> results<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Petition</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I realize this seems like a lot of work, but trust me: it gets much easier!</p><p>All we’ve done is define the kinds of data structures we want to load the JSON into. The next step is to create a property in <code>ViewController</code> that will store our petitions array.</p><p>As you&#39;ll recall, you declare arrays just by putting the data type in brackets, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> petitions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We want to make an array of our <code>Petition</code> object. So, it looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> petitions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Petition</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,7),O=n("code",null,"petitions",-1),T=n("code",null,"ViewController.swift",-1),x=e(`<p>It&#39;s now time to parse some JSON, which means to process it and examine its contents. We&#39;re going to start by updating the <code>viewDidLoad()</code> method for <code>ViewController</code> so that it downloads the data from the Whitehouse petitions server, converts it to a Swift <code>Data</code> object, then tries to convert it to an array of <code>Petition</code> instances.</p><p>We haven’t used <code>Data</code> before. Like <code>String</code> and <code>Int</code> it’s one of Swift’s fundamental data types, although it’s even more low level – it holds literally any binary data. It might be a string, it might be the contents of a zip file, or literally anything else.</p><p><code>Data</code> and <code>String</code> have quite a few things in common. You already saw that <code>String</code> can be created using <code>contentsOf</code> to load data from disk, and <code>Data</code> has exactly the same initializer.</p><p>This is perfect for our needs – here&#39;s the new <code>viewDidLoad</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// let urlString = &quot;https://api.whitehouse.gov/v1/petitions.json?limit=100&quot;</span></span>
<span class="line">    <span class="token keyword">let</span> urlString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;https://hackingwithswift.com/samples/petitions-1.json&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlString<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// we&#39;re OK to parse!</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Above I’ve included a URL for the official Whitehouse API feed, but that might go away or change at any point in the future. So, to avoid problems I’ve taken a copy of that feed and put it on my own site – you can use either the official API or my own copy.</p></div><p>Let&#39;s focus on the new stuff:</p><ul><li><code>urlString</code> points either to the Whitehouse.gov server or to my cached copy of the same data, accessing the available petitions.</li><li>We use <code>if let</code> to make sure the <code>URL</code> is valid, rather than force unwrapping it. Later on you can return to this to add more URLs, so it&#39;s good play it safe.</li><li>We create a new <code>Data</code> object using its <code>contentsOf</code> method. This returns the content from a <code>URL</code>, but it might throw an error (i.e., if the internet connection was down) so we need to use <code>try?</code>.</li><li>If the <code>Data</code> object was created successfully, we reach the “we&#39;re OK to parse!” line. This starts with <code>//</code>, which begins a comment line in Swift. Comment lines are ignored by the compiler; we write them as notes to ourselves.</li></ul><p>This code isn&#39;t perfect, in fact far from it. In fact, by downloading data from the internet in <code>viewDidLoad()</code> our app will lock up until all the data has been transferred. There are solutions to this, but to avoid complexity they won&#39;t be covered until project 9.</p><p>For now, we want to focus on our JSON parsing. We already have a <code>petitions</code> array that is ready to accept an array of petitions. We want to use Swift’s <code>Codable</code> system to parse our JSON into that array, and once that&#39;s done tell our table view to reload itself.</p><p>Are you ready? Because this code is remarkably simple given how much work it&#39;s doing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> jsonPetitions <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Petitions</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        petitions <span class="token operator">=</span> jsonPetitions<span class="token punctuation">.</span>results</span>
<span class="line">        tableView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Place that method just underneath <code>viewDidLoad()</code> method, then replace the existing <code>// we&#39;re OK to parse!</code> line in <code>viewDidLoad()</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This new <code>parse()</code> method does a few new and interesting things:</p><ol><li>It creates an instance of <code>JSONDecoder</code>, which is dedicated to converting between JSON and <code>Codable</code> objects.</li><li>It then calls the <code>decode()</code> method on that decoder, asking it to convert our <code>json</code> data into a <code>Petitions</code> object. This is a throwing call, so we use <code>try?</code> to check whether it worked.</li><li>If the JSON was converted successfully, assign the <code>results</code> array to our <code>petitions</code> property then reload the table view.</li></ol><p>The one part you haven’t seen before is <code>Petitions.self</code>, which is Swift’s way of referring to the <code>Petitions</code> type itself rather than an instance of it. That is, we’re not saying “create a new one”, but instead specifying it as a parameter to the decoding so <code>JSONDecoder</code> knows what to convert the JSON too.</p><p>You can run the program now, although it just shows “Title goes here” and “Subtitle goes here” again and again, because our <code>cellForRowAt</code> method just inserts dummy data.</p><p>We want to modify this so that the cells print out the <code>title</code> value of our <code>Petition</code> object, but we also want to use the subtitle text label that got added when we changed the cell type from &quot;Basic&quot; to &quot;Subtitle&quot; in the storyboard. To do that, change the <code>cellForRowAt</code> method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> petition <span class="token operator">=</span> petitions<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span></span>
<span class="line">cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> petition<span class="token punctuation">.</span>title</span>
<span class="line">cell<span class="token punctuation">.</span>detailTextLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> petition<span class="token punctuation">.</span>body</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our custom <code>Petition</code> type has properties for <code>title</code>, <code>body</code> and <code>signatureCount</code>, so now we can read them out to configure our cell correctly.</p><p>If you run the app now, you&#39;ll see things are starting to come together quite nicely – every table row now shows the petition title, and beneath it shows the first few words of the petition&#39;s body. The subtitle automatically shows &quot;…&quot; at the end when there isn&#39;t enough room for all the text, but it&#39;s enough to give the user a flavor of what&#39;s going on.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you don’t see any data, make sure you named all the properties in the <code>Petition</code> struct correctly – the <code>Codable</code> protocol matches those names against the JSON directly, so if you have a typo in “signatureCount” then it will fail.</p></div>`,23);function N(p,U){const i=o("VPCard"),r=o("VidStack"),t=o("FontIcon");return m(),u("div",null,[n("h1",g,[n("a",v,[n("span",null,h(p.$frontmatter.title)+" 관련",1)])]),a(i,l(c({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,f,a(i,l(c({title:"Creating the basic UI: UITabBarController | Hacking with iOS",desc:"Creating the basic UI: UITabBarController",link:"https://hackingwithswift.com/read/7/3/parsing-json-using-the-codable-protocol",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),a(r,{src:"youtube/9FriGMWIbdc"}),w,n("p",null,[s("So, start by pressing "),y,s("+"),q,s(" and choosing to create a new Swift file called "),a(t,{icon:"fa-brands fa-swift"}),S,s(".")]),I,n("p",null,[s("So, press "),C,s("+"),_,s(" again to make a new file, choosing Swift file and naming it "),a(t,{icon:"fa-brands fa-swift"}),j,s(". Give it this content:")]),P,n("p",null,[s("Put that in place of the current "),O,s(" definition at the top of "),a(t,{icon:"fa-brands fa-swift"}),T,s(".")]),x])}const B=d(k,[["render",N],["__file","03-parsing-json-using-the-codable-protocol.html.vue"]]),L=JSON.parse('{"path":"/hackingwithswift.com/read/07/03-parsing-json-using-the-codable-protocol.html","title":"Creating the basic UI: UITabBarController","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Creating the basic UI: UITabBarController","description":"Article(s) > Creating the basic UI: UITabBarController","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Creating the basic UI: UITabBarController"},{"property":"og:description","content":"Creating the basic UI: UITabBarController"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/07/03-parsing-json-using-the-codable-protocol.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/07/03-parsing-json-using-the-codable-protocol.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Creating the basic UI: UITabBarController"}],["meta",{"property":"og:description","content":"Article(s) > Creating the basic UI: UITabBarController"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating the basic UI: UITabBarController\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.58,"words":1975},"filePathRelative":"hackingwithswift.com/read/07/03-parsing-json-using-the-codable-protocol.md","excerpt":"\\n"}');export{B as comp,L as data};
