import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as t,g as e,d as o,a as u,f as g,r as c,o as k}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=g(`<blockquote><p>Available from Swift 4.0</p></blockquote><p>We know value types are great, but we also know they interact terribly with Objective-C APIs such as <code>NSCoding</code> – you either need to write a shim layer or give in and use classes, both of which are unpleasant. Worse, even if you give in and switch to classes, you still need to write your encoding and decoding methods by hand, which is painful and error-prone.</p><p>Swift 4 introduced a new <code>Codable</code> protocol that lets you serialize and deserialize custom data types without writing any special code – and without having to worry about losing your value types. Even better, you can choose how you want the data to be serialized: you can use classic property list format or even JSON.</p><p>Let&#39;s take a look at how beautiful this is. First, here&#39;s a custom data type and some instances of it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Language</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> version<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> swift <span class="token operator">=</span> <span class="token class-name">Language</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Swift&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> php <span class="token operator">=</span> <span class="token class-name">Language</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;PHP&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> perl <span class="token operator">=</span> <span class="token class-name">Language</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Perl&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see I&#39;ve marked the <code>Language</code> struct as conforming to the <code>Codable</code> protocol. With that one tiny addition, we can convert it to a <code>Data</code> representation of JSON like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> encoder <span class="token operator">=</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> encoded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>swift<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// save \`encoded\` somewhere</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift will automatically encode all properties inside your data type – you don&#39;t need to do anything.</p><p>Now, if you&#39;re like me and have a long history of using <code>NSCoding</code>, you&#39;re probably somewhat doubtful: is that really all it takes, and how can we be sure it&#39;s working? Well, let&#39;s add some more code to try converting the <code>Data</code> object into a string so we can print it out, then decode it back into a new <code>Language</code> instance that we can read from:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> encoded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>swift<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> encoded<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> decoded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Language</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> encoded<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>decoded<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how decoding doesn&#39;t require a typecast – you provide the data type name as its first parameter, so Swift infers the return type from there.</p>`,11),y=n("code",null,"JSONEncoder",-1),_=n("code",null,"PropertyListEncoder",-1),S={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0167-swift-encoders.md",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"apple/swift-evolution",-1),E={class:"hint-container details"},N=n("summary",null,"Other Changes in Swift 4.0",-1),O={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-3-1-to-4-0.playground.zip",target:"_blank",rel:"noopener noreferrer"};function I(p,P){const a=c("VPCard"),i=c("FontIcon");return k(),r("div",null,[n("h1",m,[n("a",w,[n("span",null,d(p.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,v,s(a,t(e({title:"Encoding and decoding data using Codable | Changes in Swift 4.0",desc:"Encoding and decoding data using Codable",link:"https://hackingwithswift.com/swift/4.0/codable",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[o("Both "),y,o(" and its property list counterpart "),_,o(" have lots of options for customizing how they work: do you want compact JSON or pretty-printed JSON? Do you want to use ISO8601 dates or Unix epoch dates? Do you want to use binary property lists or XML? For more information on these and other options, see "),n("a",S,[o("the Swift Evolution proposal for this new feature ("),s(i,{icon:"iconfont icon-github"}),C,o(")")]),o(".")]),n("details",E,[N,u(` 
\`\`\`component VPCard
{
  "title": "Encoding and decoding data using Codable | Changes in Swift 4.0",
  "desc": "Encoding and decoding data using Codable",
  "link": "/hackingwithswift.com/swift/4.0/codable.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,t(e({title:"Multi-line string literals | Changes in Swift 4.0",desc:"Multi-line string literals",link:"/hackingwithswift.com/swift/4.0/multiline-strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Improved keypaths for key-value coding | Changes in Swift 4.0",desc:"Improved keypaths for key-value coding",link:"/hackingwithswift.com/swift/4.0/keypaths.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Improved dictionary functionality | Changes in Swift 4.0",desc:"Improved dictionary functionality",link:"/hackingwithswift.com/swift/4.0/dictionaries.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Strings are collections again | Changes in Swift 4.0",desc:"Strings are collections again",link:"/hackingwithswift.com/swift/4.0/strings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"One-sided ranges | Changes in Swift 4.0",desc:"One-sided ranges",link:"/hackingwithswift.com/swift/4.0/one-sided-ranges.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",O,[s(i,{icon:"fas fa-file-zipper"}),o("Download Swift 4.0 playground")])])])])}const q=l(h,[["render",I],["__file","codable.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/swift/4.0/codable.html","title":"Encoding and decoding data using Codable","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Encoding and decoding data using Codable","description":"Article(s) > Encoding and decoding data using Codable","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.0"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Encoding and decoding data using Codable"},{"property":"og:description","content":"Encoding and decoding data using Codable"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.0/codable.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.0/codable.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Encoding and decoding data using Codable"}],["meta",{"property":"og:description","content":"Article(s) > Encoding and decoding data using Codable"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.0"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Encoding and decoding data using Codable\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swift/4.1/compactmap.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"hackingwithswift.com/swift/4.0/codable.md","excerpt":"\\n"}');export{q as comp,A as data};
