import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as s,t as c,e as a,n as t,g as e,f as l,r as u,o as r}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},h=s("nav",{class:"table-of-contents"},[s("ul")],-1),v=s("hr",null,null,-1),w=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData makes it easy to pass an object between various parts of your app, and have changes made in one place automatically be reflected elsewhere: just create an editing view with your model object as <code>@Bindable</code>, and SwiftData takes care of the rest.</p><p>However, it&#39;s a little trickier when you want the user to be able to save or discard their changes in an editing view, because SwiftData will automatically synchronize changes as soon as they happen.</p><p>The problem happens because SwiftData doesn&#39;t have the concept of a child context, so we can&#39;t make some isolated changes then merge them upwards only when needed. Instead, the best solution I&#39;ve found is to create a peer context from the same container, pass in your model object&#39;s ID to your detail view, then load it there using the new context with autosave disabled.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This solution works, but I&#39;ve found it causes SwiftUI to screw up its list deselection animation when returning to the parent view – the row you were editing stays highlighted. I have yet to find a workaround for this, so if you have a better idea please let me know!</p></div><p>Let me walk you the solution I use. First, here&#39;s an example data model</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Issue</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, we need a <code>ContentView</code> that can show issue data and navigate to edit a single <code>Issue</code> when it’s selected.</p><p>Remember, we don&#39;t pass the actual issue into the editing view, because it will exist on our default model context with autosave enabled. Instead, we pass in our existing container along with the <code>Issue</code> identifier, so we can create a fresh context in the editing view and load the <code>Issue</code> object there.</p><p>This is a process sometimes called <em>rehydrating</em> the object: we can’t share a single model object across two model contexts, so instead we pass the identifier and load it separately in our new context.</p><p>Here’s an example <code>ContentView</code> doing that:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext</span>
<span class="line">    <span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Issue</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> issues<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Issue</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>issues<span class="token punctuation">)</span> <span class="token punctuation">{</span> issue <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> issue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>issue<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Issue</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> issue <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">EditingView</span><span class="token punctuation">(</span>issueID<span class="token punctuation">:</span> issue<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> modelContext<span class="token punctuation">.</span>container<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Discardable Editing&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now for the important part: an <code>EditingView</code> that accepts an object ID along with our shared model container. It will then create its own local model context that disables autosave, loading the editing object using that context.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">EditingView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>dismiss<span class="token punctuation">)</span> <span class="token keyword">var</span> dismiss</span>
<span class="line">    <span class="token attribute atrule">@Bindable</span> <span class="token keyword">var</span> issue<span class="token punctuation">:</span> <span class="token class-name">Issue</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> modelContext<span class="token punctuation">:</span> <span class="token class-name">ModelContext</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>issueID<span class="token punctuation">:</span> <span class="token class-name">PersistentIdentifier</span><span class="token punctuation">,</span> <span class="token keyword">in</span> container<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        modelContext <span class="token operator">=</span> <span class="token class-name">ModelContext</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span></span>
<span class="line">        modelContext<span class="token punctuation">.</span>autosaveEnabled <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        issue <span class="token operator">=</span> modelContext<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> issueID<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">Issue</span> <span class="token operator">??</span> <span class="token class-name">Issue</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;New Issue&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Edit the name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $issue<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Discard&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Save&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span><span class="token operator">?</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, that exits the view without saving when &quot;Discard&quot; is pressed, which means all the local edits to the object aren&#39;t synchronized with the original context – they just get tossed away, because the local context is discarded without saving.</p><p>In my various projects I&#39;ve found this to be the simplest way of handling discardable editing of SwiftData objects, but if you have a better solution I&#39;d love to hear it!</p>`,16);function b(o,g){const n=u("VPCard");return r(),p("div",null,[s("h1",k,[s("a",m,[s("span",null,c(o.$frontmatter.title)+" 관련",1)])]),a(n,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,v,a(n,t(e({title:"How to discard changes to a SwiftData object | SwiftData by Example",desc:"How to discard changes to a SwiftData object",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-discard-changes-to-a-swiftdata-object",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const x=i(d,[["render",b],["__file","how-to-discard-changes-to-a-swiftdata-object.html.vue"]]),j=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-discard-changes-to-a-swiftdata-object.html","title":"How to discard changes to a SwiftData object","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to discard changes to a SwiftData object","description":"Article(s) > How to discard changes to a SwiftData object","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to discard changes to a SwiftData object"},{"property":"og:description","content":"How to discard changes to a SwiftData object"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-discard-changes-to-a-swiftdata-object.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-discard-changes-to-a-swiftdata-object.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to discard changes to a SwiftData object"}],["meta",{"property":"og:description","content":"Article(s) > How to discard changes to a SwiftData object"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to discard changes to a SwiftData object\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.34,"words":702},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-discard-changes-to-a-swiftdata-object.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{x as comp,j as data};
