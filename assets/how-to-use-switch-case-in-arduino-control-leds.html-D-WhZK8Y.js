import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as m,e as s,n as i,g as l,w as p,d as a,f as v,r as e,o as b}from"./app-BgNevrm5.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},L=n("hr",null,null,-1),E=v(`<p>You can use a <code>switch case</code> statement to execute different blocks of code based on the value of a variable. It offers a more direct and cleaner approach to handling multiple conditions.</p><p>In this article, you&#39;ll learn how to control LEDs using a <code>switch case</code> statement in Arduino. You can also find the <code>switch case</code> statement in other programming languages, so this can serve as a practical example of how they work.</p><p>Here’s a demo of what you’ll be building:</p><figure><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1728301474557/f67ddfe7-0cf1-47ee-9732-90f3a4b1649c.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>You can watch the video version of this article here:</p><hr><h2 id="hardware-components" tabindex="-1"><a class="header-anchor" href="#hardware-components"><span>Hardware Components</span></a></h2><p>Here are the components you&#39;ll need to follow along:</p><ul><li>Arduino board (Uno).</li><li>Potentiometer.</li><li>Breadboard.</li><li>Three LEDs.</li><li>Resistors for the LEDs.</li><li>Jumper wires.</li></ul><hr><h2 id="how-to-use-a-switch-case-statement-in-arduino" tabindex="-1"><a class="header-anchor" href="#how-to-use-a-switch-case-statement-in-arduino"><span>How to Use a <code>Switch Case</code> Statement in Arduino</span></a></h2><p>Here&#39;s the syntax/structure of a <code>switch</code> statement:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> value1<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// code to be executed if variable == value1</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> value2<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// code to be executed if variable == value2</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// code to be executed if variable doesn&#39;t match any case</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s break it down:</p><ul><li><code>variable</code>: This denotes the variable being evaluated. The value of the variable determines how the code blocks will be executed.</li><li><code>case</code>: Each <code>case</code> represents a value that may match the variable being evaluated. If the <code>variable</code> and a <code>case</code> have the same value, the code for that case will be executed. You can have as many cases as you want.</li><li><code>break</code>: After a code block in a <code>case</code> has been executed, the <code>break</code> keyword terminates the code. That is, it stops the code from moving on to other cases because a match has already been found.</li><li><code>default</code>: In a situation where none of the cases match the <code>variable</code>, the code in the <code>default</code> block will be executed.</li></ul><p>Next, let&#39;s use a <code>switch</code> statement to control LEDs.</p><h3 id="switch-case-in-arduino-example" tabindex="-1"><a class="header-anchor" href="#switch-case-in-arduino-example"><span><code>Switch Case</code> in Arduino Example</span></a></h3><h4 id="circuit-diagram" tabindex="-1"><a class="header-anchor" href="#circuit-diagram"><span>Circuit Diagram</span></a></h4><p>Here’s how to connect your components:</p><figure><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1728177876221/e58910e9-f8be-430b-a220-cda2cc9b956a.png" alt="Circuit diagram showing potentiometer and LEDs connected to an Arduino Uno R3 board" tabindex="0" loading="lazy"><figcaption>Circuit diagram showing potentiometer and LEDs connected to an Arduino Uno R3 board</figcaption></figure><p>The goal here is to decide which LED (or a combination of LEDs) comes on based on the value of a variable.</p><h4 id="potentiometer-connection" tabindex="-1"><a class="header-anchor" href="#potentiometer-connection"><span>Potentiometer Connection</span></a></h4><ul><li>Connect the left terminal of the potentiometer to 5V.</li><li>Connect the right terminal to GND.</li><li>Connect the middle terminal to A0.</li></ul><h4 id="led-connection" tabindex="-1"><a class="header-anchor" href="#led-connection"><span>LED Connection</span></a></h4><ul><li>For each LED, connect the shorter leg to GND.</li><li>Connect each longer leg to a digital pin. I recommend using pin 8 (for the green LED), 9 (for the yellow LED), and 10 (for the red LED) to match what we have in the circuit diagram. We&#39;ll also use these values in the code.</li></ul><p>Here&#39;s the full project code:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> greenLED <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> yellowLED <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> redLED <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> potPin <span class="token operator">=</span> A0<span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">int</span> potValue<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> mappedPotValue<span class="token punctuation">;</span></span>
<span class="line">​</span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">pinMode</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">pinMode</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">pinMode</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">​</span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  potValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>potPin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  mappedPotValue <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>potValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1023</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">​</span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s break down the code.</p><h4 id="variable-initialization" tabindex="-1"><a class="header-anchor" href="#variable-initialization"><span><strong>Variable Initialization</strong></span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> greenLED <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> yellowLED <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> redLED <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> potPin <span class="token operator">=</span> A0<span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">int</span> potValue<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> mappedPotValue<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We started by initializing variables to correspond with the hardware connections.</p><p><code>greenLED</code>, <code>yellowLED</code>, and <code>redLED</code> have values of 8, 9, and 10, respectively. This matches the pins they were connected to on the Arduino board. Similarly, <code>potPin</code>, which is the variable for the potentiometer, has a value of A0. You&#39;ll use the <code>potValue</code> variable to store the current value of the potentiometer. We also created a <code>mappedPotValue</code> variable to store the range of values needed for the LEDs in a minute.</p><h4 id="pinmode-and-serial-monitor" tabindex="-1"><a class="header-anchor" href="#pinmode-and-serial-monitor"><span><code>pinMode</code> and Serial Monitor</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">pinMode</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">pinMode</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">pinMode</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the <code>setup()</code> function, we set the LEDs as output pins and initialized the serial monitor.</p><h4 id="logic-for-switch-case-statement" tabindex="-1"><a class="header-anchor" href="#logic-for-switch-case-statement"><span>Logic for <code>switch case</code> Statement</span></a></h4><p>First, we read the value of the potentiometer using the <code>analogRead()</code> function and stored it in the <code>potValue</code> variable:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">potValue <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>potPin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We then converted the values from the potentiometer to a range of 0 to 4 using the <code>map</code> function and stored them in the <code>mappedPotValue</code> variable:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">mappedPotValue <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>potValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1023</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Next, we created a <code>switch</code> statement—the value being evaluated is <code>mappedPotValue</code>. Recall that this is the variable where we stored the potentiometer values. So whenever you turn the potentiometer, the value changes and potentially matches a <code>case</code>:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>greenLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>yellowLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>redLED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mappedPotValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We passed <code>mappedPotValue</code> as a parameter to <code>switch</code> since it&#39;s the variable being compared to different cases: <code>switch (mappedPotValue)</code>.</p><ul><li>For <code>case 0</code>, all the LEDs will be off.</li><li>For <code>case 1</code>, only the green LED comes on.</li><li>For <code>case 2</code>, only the yellow LED comes on.</li><li>For <code>case 3</code>, only the red LED comes on.</li><li>For <code>case 4</code>, all three LEDs will blink continuously.</li></ul><p>Using a <code>switch</code> statement, you&#39;ve successfully controlled the behavior of LEDs based on the value of a potentiometer!</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, you learned how to use a <code>switch case</code> statement in Arduino using a practical example.</p><p>You learned how to control different LEDs based on the value of a potentiometer. You achieved this by using different cases in a <code>switch</code> statement to match the potentiometer&#39;s current value and execute the corresponding code.</p><p><code>switch</code> statements can be used in different ways to make a project more dynamic. Some use cases in Arduino include:</p><ul><li>Managing and interpreting the different values, modes, and states of a component or sensor.</li><li>Performing actions based on specific commands. For example, rotating a robotic arm to a specific angle/direction.</li><li>Mapping button presses to user input, and so on.</li></ul>`,51),D={href:"https://youtu.be/TAU_osZ6aGQ",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/ihechikara/switch-case-arduino",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"ihechikara/switch-case-arduino",-1),_={href:"https://ihechikara.com/",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"Happy coding!",-1);function C(u,H){const c=e("VPCard"),t=e("router-link"),r=e("SiteInfo"),o=e("FontIcon"),d=e("VidStack");return b(),h("div",null,[n("h1",f,[n("a",w,[n("span",null,m(u.$frontmatter.title)+" 관련",1)])]),s(c,i(l({title:"Hardware > Article(s)",desc:"Article(s)",link:"/hw/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s(c,i(l({title:"C++ > Article(s)",desc:"Article(s)",link:"/programming/cpp/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[s(t,{to:"#hardware-components"},{default:p(()=>[a("Hardware Components")]),_:1})]),n("li",null,[s(t,{to:"#how-to-use-a-switch-case-statement-in-arduino"},{default:p(()=>[a("How to Use a Switch Case Statement in Arduino")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#switch-case-in-arduino-example"},{default:p(()=>[a("Switch Case in Arduino Example")]),_:1})])])]),n("li",null,[s(t,{to:"#conclusion"},{default:p(()=>[a("Conclusion")]),_:1})])])]),L,s(r,{name:"How to Use Switch Case in Arduino – Control LEDs With the Switch Statement",desc:"You can use a switch case statement to execute different blocks of code based on the value of a variable. It offers a more direct and cleaner approach to handling multiple conditions. In this article, you'll learn how to control LEDs using a switch c...",url:"https://freecodecamp.org/how-to-use-switch-case-in-arduino-control-leds",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1728178146204/a1c1a6af-b4ce-4fe4-a73d-8861d63cc01e.png"}),E,n("p",null,[a("You can watch the video version of this project "),n("a",D,[s(o,{icon:"fa-brands fa-youtube"}),a("here")]),a(". The full project code is available on "),n("a",W,[a("GitHub ("),s(o,{icon:"iconfont icon-github"}),S,a(")")]),a(".")]),s(d,{src:"youtube/TAU_osZ6aGQ"}),n("p",null,[a("Check out "),n("a",_,[s(o,{icon:"fas fa-globe"}),a("my blog")]),a(" for articles about embedded systems, IoT, and web development.")]),x])}const V=k(g,[["render",C],["__file","how-to-use-switch-case-in-arduino-control-leds.html.vue"]]),U=JSON.parse('{"path":"/freecodecamp.org/how-to-use-switch-case-in-arduino-control-leds.html","title":"How to Use Switch Case in Arduino – Control LEDs With the Switch Statement","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to Use Switch Case in Arduino – Control LEDs With the Switch Statement","description":"Article(s) > How to Use Switch Case in Arduino – Control LEDs With the Switch Statement","icon":"iconfont icon-cpp","category":["Hardware","Arduino","C++","Article(s)"],"tag":["blog","freecodecamp.org","hardware","arduino","c++","cpp"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to Use Switch Case in Arduino – Control LEDs With the Switch Statement"},{"property":"og:description","content":"How to Use Switch Case in Arduino – Control LEDs With the Switch Statement"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/how-to-use-switch-case-in-arduino-control-leds.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/how-to-use-switch-case-in-arduino-control-leds.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Use Switch Case in Arduino – Control LEDs With the Switch Statement"}],["meta",{"property":"og:description","content":"Article(s) > How to Use Switch Case in Arduino – Control LEDs With the Switch Statement"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1728178146204/a1c1a6af-b4ce-4fe4-a73d-8861d63cc01e.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1728178146204/a1c1a6af-b4ce-4fe4-a73d-8861d63cc01e.png"}],["meta",{"name":"twitter:image:alt","content":"How to Use Switch Case in Arduino – Control LEDs With the Switch Statement"}],["meta",{"property":"article:author","content":"Ihechikara Abba"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"hardware"}],["meta",{"property":"article:tag","content":"arduino"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:published_time","content":"2024-10-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Use Switch Case in Arduino – Control LEDs With the Switch Statement\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728301474557/f67ddfe7-0cf1-47ee-9732-90f3a4b1649c.gif\\",\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728177876221/e58910e9-f8be-430b-a220-cda2cc9b956a.png\\"],\\"datePublished\\":\\"2024-10-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ihechikara Abba\\"}]}"]],"prev":"/hw/articles/README.md","date":"2024-10-08T00:00:00.000Z","isOriginal":false,"author":"Ihechikara Abba","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1728178146204/a1c1a6af-b4ce-4fe4-a73d-8861d63cc01e.png"},"headers":[{"level":2,"title":"Hardware Components","slug":"hardware-components","link":"#hardware-components","children":[]},{"level":2,"title":"How to Use a Switch Case Statement in Arduino","slug":"how-to-use-a-switch-case-statement-in-arduino","link":"#how-to-use-a-switch-case-statement-in-arduino","children":[{"level":3,"title":"Switch Case in Arduino Example","slug":"switch-case-in-arduino-example","link":"#switch-case-in-arduino-example","children":[]}]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":4.76,"words":1428},"filePathRelative":"freecodecamp.org/how-to-use-switch-case-in-arduino-control-leds.md","localizedDate":"October 8, 2024","excerpt":"\\n","copyright":{"author":"Ihechikara Abba"}}');export{V as comp,U as data};
