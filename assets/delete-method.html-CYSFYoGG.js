import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as e,t as d,e as t,n as u,g as h,w as a,f as m,r as o,o as f,d as s}from"./app-BgNevrm5.js";const g={},k={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},v=e("hr",null,null,-1),y=m(`<p>The DELETE method is used to remove a resource from the server. When a DELETE request is made, the server deletes the specified resource, meaning it’s no longer accessible or available. This method is used for tasks like deleting a user account, removing a product from an online store, or clearing old data from a database.</p><p>Unlike GET or POST, DELETE doesn’t require sending a body in the request—just the URL of the resource you want to remove is enough. For example, to delete a specific blog post, a DELETE request is sent to the URL of that post, and the server takes care of removing it.</p><hr><h2 id="how-delete-works" tabindex="-1"><a class="header-anchor" href="#how-delete-works"><span>How DELETE Works</span></a></h2><p>To delete a resource, you typically only need to provide the URL of the resource you want to remove. Unlike POST or PUT requests, DELETE requests generally don’t require a body.</p><div class="hint-container note"><p class="hint-container-title">Example</p><p>If you want to delete a specific blog post, you can send a DELETE request to its URL:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/posts/123&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;DELETE&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Resource deleted:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This tells the server to remove the blog post with ID <code>123</code>.</p><hr><h2 id="safely-using-delete" tabindex="-1"><a class="header-anchor" href="#safely-using-delete"><span>Safely Using DELETE</span></a></h2><p>DELETE requests can have a significant impact, so it’s important to use them carefully to avoid accidentally removing valuable data. Below are some key considerations for safely handling DELETE requests:</p><h3 id="permanent-action" tabindex="-1"><a class="header-anchor" href="#permanent-action"><span>Permanent Action</span></a></h3><p>Once a DELETE request is processed, the resource is typically gone. In some cases, systems might implement &quot;soft delete&quot; functionality, where the resource is hidden but not completely removed. However, most use a &quot;hard delete,&quot; where the resource is fully erased. Soft deletes can be useful for recovery purposes, allowing data to be restored if needed.</p><h3 id="authentication" tabindex="-1"><a class="header-anchor" href="#authentication"><span>Authentication</span></a></h3><p>DELETE requests should be restricted to authorized users. Before performing a DELETE action, the server should validate that the user has permission to delete the resource. For example, only the owner of a user account should be able to delete it, not another user.</p><h3 id="confirmation" tabindex="-1"><a class="header-anchor" href="#confirmation"><span>Confirmation</span></a></h3><p>Many applications prompt users to confirm their intention before processing a DELETE action. This extra step ensures users don&#39;t accidentally delete important data, especially for irreversible actions like account deletion.</p><div class="hint-container info"><p class="hint-container-title">Example of a Confirmation Step:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;Are you sure you want to delete this post?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/posts/123&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;DELETE&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Post deleted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="reversibility-soft-delete" tabindex="-1"><a class="header-anchor" href="#reversibility-soft-delete"><span>Reversibility (Soft Delete)</span></a></h3><p>For important data, it’s often useful to implement a <strong>soft delete</strong>, which doesn’t completely remove the data but marks it as deleted in the database. This allows the data to be restored later if needed. For example, many email systems keep deleted messages in a &quot;Trash&quot; folder until they are permanently removed.</p><hr><h2 id="best-practices-for-handling-delete-requests" tabindex="-1"><a class="header-anchor" href="#best-practices-for-handling-delete-requests"><span>Best Practices for Handling DELETE Requests</span></a></h2><h3 id="_1-require-authentication" tabindex="-1"><a class="header-anchor" href="#_1-require-authentication"><span>1. Require Authentication</span></a></h3><p>Only authenticated users should be able to perform DELETE actions. This prevents unauthorized users from deleting resources they don&#39;t own. For example, users should only be allowed to delete their own data, not that of others.</p><div class="hint-container info"><p class="hint-container-title">Example</p><p>In a content management system (CMS), ensure that only the author of a post or an admin can delete it.</p></div><h3 id="_2-use-confirmation-steps" tabindex="-1"><a class="header-anchor" href="#_2-use-confirmation-steps"><span>2. Use Confirmation Steps</span></a></h3><p>For critical actions, confirm the user’s intent before proceeding. This is especially important for actions that cannot be undone, such as deleting an account or permanently removing a file.</p><div class="hint-container info"><p class="hint-container-title">Example</p><p>Show a prompt that says, &quot;Are you sure you want to delete your account? This action cannot be undone.&quot;</p></div><h3 id="_3-log-deletions" tabindex="-1"><a class="header-anchor" href="#_3-log-deletions"><span>3. Log Deletions</span></a></h3><p>Keep a record of DELETE requests, including who initiated the request and when it occurred. Logging is important for accountability, troubleshooting, and data recovery in case of accidental deletions.</p><div class="hint-container info"><p class="hint-container-title">Example</p><p>In an e-commerce system, log details when a product is removed from the catalog, such as the user who initiated the request and the time of deletion.</p></div><h3 id="_4-soft-delete-for-critical-data" tabindex="-1"><a class="header-anchor" href="#_4-soft-delete-for-critical-data"><span>4. Soft Delete for Critical Data</span></a></h3><p>Implement a soft delete mechanism for data that may need to be restored later. This is particularly useful in scenarios like user accounts, where a user might want to recover their data after deletion.</p><div class="hint-container info"><p class="hint-container-title">Example</p><p>When a user &quot;deletes&quot; their account, it’s marked as inactive or hidden, rather than fully erased, allowing the user to recover it later.</p></div><h3 id="_5-handle-errors-gracefully" tabindex="-1"><a class="header-anchor" href="#_5-handle-errors-gracefully"><span>5. Handle Errors Gracefully</span></a></h3><p>If a DELETE request fails, the server should return an appropriate error message. For example, if the resource doesn’t exist or the user isn’t authorized to delete it, the server should respond with a message like &quot;Resource not found&quot; or &quot;Unauthorized action.&quot;</p><div class="hint-container info"><p class="hint-container-title">Example</p><p>A DELETE request for a non-existent user could return a <code>404 Not Found</code> response.</p></div><h3 id="_6-double-check-url-targeting" tabindex="-1"><a class="header-anchor" href="#_6-double-check-url-targeting"><span>6. Double-Check URL Targeting</span></a></h3><p>Before sending a DELETE request, ensure the URL points to the correct resource. Accidentally targeting the wrong resource could result in unintended data loss.</p><div class="hint-container info"><p class="hint-container-title">Example</p><p>If you are managing a to-do list and want to delete a single task, ensure the URL points specifically to that task and not to the entire list.</p></div><h3 id="_7-communicate-results-to-the-user" tabindex="-1"><a class="header-anchor" href="#_7-communicate-results-to-the-user"><span>7. Communicate Results to the User</span></a></h3><p>After a successful DELETE request, inform the user that the resource has been deleted. This can be done through a message or notification confirming the action.</p><div class="hint-container info"><p class="hint-container-title">Example</p><p>Show a message like &quot;Item successfully deleted&quot; after a product or post has been removed from the system.</p></div><hr><h2 id="delete-response" tabindex="-1"><a class="header-anchor" href="#delete-response"><span>DELETE Response</span></a></h2><p>Typically, a successful DELETE request returns one of the following status codes:</p><ul><li><strong>200 OK</strong>: Indicates that the deletion was successful and includes a response body (for example, a message confirming the deletion).</li><li><strong>204 No Content</strong>: The request was successful, but no content is returned in the response body. This is common when the resource is deleted, and there’s nothing to send back.</li><li><strong>404 Not Found</strong>: Indicates that the resource to be deleted does not exist.</li></ul><hr><h2 id="example-of-a-delete-request-response" tabindex="-1"><a class="header-anchor" href="#example-of-a-delete-request-response"><span>Example of a DELETE Request Response</span></a></h2><p>If the DELETE request is successful and the resource is removed, a server might respond with a <code>204 No Content</code> status:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">HTTP/1.1 204 No Content</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This response tells the client that the resource was successfully deleted but doesn’t return any additional data.</p>`,51);function T(i,_){const l=o("VPCard"),n=o("router-link"),r=o("SiteInfo");return f(),p("div",null,[e("h1",k,[e("a",E,[e("span",null,d(i.$frontmatter.title)+" 관련",1)])]),t(l,u(h({title:"Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples",desc:"When you interact with websites or apps, a lot happens behind the scenes. A key part of this process is how your browser or app talks to a server. HTTPS methods define what action needs to happen – it could be fetching data, sending information, or m...",link:"/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/README.md",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",background:"rgba(10,10,35,0.2)"})),null,16),e("nav",b,[e("ul",null,[e("li",null,[t(n,{to:"#how-delete-works"},{default:a(()=>[s("How DELETE Works")]),_:1})]),e("li",null,[t(n,{to:"#safely-using-delete"},{default:a(()=>[s("Safely Using DELETE")]),_:1}),e("ul",null,[e("li",null,[t(n,{to:"#permanent-action"},{default:a(()=>[s("Permanent Action")]),_:1})]),e("li",null,[t(n,{to:"#authentication"},{default:a(()=>[s("Authentication")]),_:1})]),e("li",null,[t(n,{to:"#confirmation"},{default:a(()=>[s("Confirmation")]),_:1})]),e("li",null,[t(n,{to:"#reversibility-soft-delete"},{default:a(()=>[s("Reversibility (Soft Delete)")]),_:1})])])]),e("li",null,[t(n,{to:"#best-practices-for-handling-delete-requests"},{default:a(()=>[s("Best Practices for Handling DELETE Requests")]),_:1}),e("ul",null,[e("li",null,[t(n,{to:"#_1-require-authentication"},{default:a(()=>[s("1. Require Authentication")]),_:1})]),e("li",null,[t(n,{to:"#_2-use-confirmation-steps"},{default:a(()=>[s("2. Use Confirmation Steps")]),_:1})]),e("li",null,[t(n,{to:"#_3-log-deletions"},{default:a(()=>[s("3. Log Deletions")]),_:1})]),e("li",null,[t(n,{to:"#_4-soft-delete-for-critical-data"},{default:a(()=>[s("4. Soft Delete for Critical Data")]),_:1})]),e("li",null,[t(n,{to:"#_5-handle-errors-gracefully"},{default:a(()=>[s("5. Handle Errors Gracefully")]),_:1})]),e("li",null,[t(n,{to:"#_6-double-check-url-targeting"},{default:a(()=>[s("6. Double-Check URL Targeting")]),_:1})]),e("li",null,[t(n,{to:"#_7-communicate-results-to-the-user"},{default:a(()=>[s("7. Communicate Results to the User")]),_:1})])])]),e("li",null,[t(n,{to:"#delete-response"},{default:a(()=>[s("DELETE Response")]),_:1})]),e("li",null,[t(n,{to:"#example-of-a-delete-request-response"},{default:a(()=>[s("Example of a DELETE Request Response")]),_:1})])])]),v,t(r,{name:"Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples",desc:"When you interact with websites or apps, a lot happens behind the scenes. A key part of this process is how your browser or app talks to a server. HTTPS methods define what action needs to happen – it could be fetching data, sending information, or m...",url:"https://freecodecamp.org/news/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}),y])}const D=c(g,[["render",T],["__file","delete-method.html.vue"]]),L=JSON.parse('{"path":"/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/delete-method.html","title":"DELETE Method","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"DELETE Method","description":"Article(s) > (5/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples","category":["JavaScript","Article(s)"],"tag":["blog","freecodecamp.org","js","javascript"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > (5/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples"},{"property":"og:description","content":"DELETE Method"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/delete-method.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/delete-method.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"DELETE Method"}],["meta",{"property":"og:description","content":"Article(s) > (5/10) Learn HTTP Methods like GET, POST, and DELETE – a Handbook with Code Examples"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"}],["meta",{"name":"twitter:image:alt","content":"DELETE Method"}],["meta",{"property":"article:author","content":"Ashutosh Krishna"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DELETE Method\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Krishna\\"}]}"]],"date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Ashutosh Krishna","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727862097228/24433377-ebb8-49b5-b0ee-5736f629399d.png"},"headers":[{"level":2,"title":"How DELETE Works","slug":"how-delete-works","link":"#how-delete-works","children":[]},{"level":2,"title":"Safely Using DELETE","slug":"safely-using-delete","link":"#safely-using-delete","children":[{"level":3,"title":"Permanent Action","slug":"permanent-action","link":"#permanent-action","children":[]},{"level":3,"title":"Authentication","slug":"authentication","link":"#authentication","children":[]},{"level":3,"title":"Confirmation","slug":"confirmation","link":"#confirmation","children":[]},{"level":3,"title":"Reversibility (Soft Delete)","slug":"reversibility-soft-delete","link":"#reversibility-soft-delete","children":[]}]},{"level":2,"title":"Best Practices for Handling DELETE Requests","slug":"best-practices-for-handling-delete-requests","link":"#best-practices-for-handling-delete-requests","children":[{"level":3,"title":"1. Require Authentication","slug":"_1-require-authentication","link":"#_1-require-authentication","children":[]},{"level":3,"title":"2. Use Confirmation Steps","slug":"_2-use-confirmation-steps","link":"#_2-use-confirmation-steps","children":[]},{"level":3,"title":"3. Log Deletions","slug":"_3-log-deletions","link":"#_3-log-deletions","children":[]},{"level":3,"title":"4. Soft Delete for Critical Data","slug":"_4-soft-delete-for-critical-data","link":"#_4-soft-delete-for-critical-data","children":[]},{"level":3,"title":"5. Handle Errors Gracefully","slug":"_5-handle-errors-gracefully","link":"#_5-handle-errors-gracefully","children":[]},{"level":3,"title":"6. Double-Check URL Targeting","slug":"_6-double-check-url-targeting","link":"#_6-double-check-url-targeting","children":[]},{"level":3,"title":"7. Communicate Results to the User","slug":"_7-communicate-results-to-the-user","link":"#_7-communicate-results-to-the-user","children":[]}]},{"level":2,"title":"DELETE Response","slug":"delete-response","link":"#delete-response","children":[]},{"level":2,"title":"Example of a DELETE Request Response","slug":"example-of-a-delete-request-response","link":"#example-of-a-delete-request-response","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":4.28,"words":1284},"filePathRelative":"freecodecamp.org/learn-http-methods-like-get-post-and-delete-a-handbook-with-code-examples/delete-method.md","localizedDate":"2024년 10월 2일","excerpt":"\\n","copyright":{"author":"Ashutosh Krishna"}}');export{D as comp,L as data};
