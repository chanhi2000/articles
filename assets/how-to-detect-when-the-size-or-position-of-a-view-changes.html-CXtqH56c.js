import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as s,n as t,g as e,d as i,f as c,r as p,o as h}from"./app-BgNevrm5.js";const k={},w={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 16</p></blockquote><p><strong>New in iOS 18</strong></p><p>SwiftUI’s <code>onGeometryChange()</code> modifier lets us track when a view&#39;s frame, size, or safe area insets change, then take any action as a result. Additionally, this modifier will also report the <em>initial</em> value of whatever you&#39;re watching, so it&#39;s helpful for both one-off and continuous monitoring.</p><p>For example, we could print the frame of a view when it&#39;s first created and whenever it changes, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onGeometryChange</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">        proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> action<span class="token punctuation">:</span> <span class="token punctuation">{</span> newValue <span class="token keyword">in</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Frame is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">newValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes-1.zip",target:"_blank",rel:"noopener noreferrer"},y=c(`<p><em>Frame</em> refers to the view&#39;s size and position, which means that rotating your device or changing window size is likely to trigger the action closure.</p><p>Breaking this modifier down, you&#39;ll see it accepts three values:</p><ol><li>The type of value you&#39;re interested in. We&#39;re watching a <code>CGRect</code> in the code above, but you might also use <code>Double</code> if you only wanted one value, or perhaps use <code>Bool</code> if the thing you&#39;re watching can be boiled down to a simple true or false.</li><li>A transformation closure, which is given a <code>GeometryProxy</code> and should return a value of whatever you specified, e.g. a <code>CGRect</code>. This is the value SwiftUI will watch for changes going forward.</li><li>An action closure, which will be triggered whenever the watched value changes.</li></ol><div class="hint-container important"><p class="hint-container-title">Important</p><p>Although you can use the action closure to set view state, make sure you don&#39;t accidentally get stuck in a layout loop. For example, the code below gets into a loop because it tries to display the view&#39;s size in the view itself:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> textFrame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">.</span>zero</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Size is: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">textFrame</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onGeometryChange</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> action<span class="token punctuation">:</span> <span class="token punctuation">{</span> newValue <span class="token keyword">in</span></span>
<span class="line">                textFrame <span class="token operator">=</span> newValue</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Being able to track a view&#39;s size and position unlocks a variety of abilities, such as being able to create views elsewhere with a matched size. For example, in the code below the rectangle always has the same frame as the text view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> textFrame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">.</span>zero</span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> textSize <span class="token operator">=</span> <span class="token number">17.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> textSize<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onGeometryChange</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                    proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> action<span class="token punctuation">:</span> <span class="token punctuation">{</span> newValue <span class="token keyword">in</span></span>
<span class="line">                    textFrame <span class="token operator">=</span> newValue</span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> textFrame<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> textFrame<span class="token punctuation">.</span>height<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $textSize<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),z={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes-2.zip",target:"_blank",rel:"noopener noreferrer"},x={class:"hint-container details"},_=n("summary",null,"Similar solutions…",-1);function S(l,H){const a=p("VPCard"),o=p("FontIcon");return h(),u("div",null,[n("h1",w,[n("a",m,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,v,s(a,t(e({title:"How to detect when the size or position of a view changes | SwiftUI by Example",desc:"How to detect when the size or position of a view changes",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("blockquote",null,[n("p",null,[n("a",b,[s(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",z,[s(o,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),n("details",x,[_,s(a,t(e({title:"How to read the size and position of a scrollview | SwiftUI by Example",desc:"How to read the size and position of a scrollview",link:"/hackingwithswift.com/swiftui/how-to-read-the-size-and-position-of-a-scrollview.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to position and style subviews that come from a different view | SwiftUI by Example",desc:"How to position and style subviews that come from a different view",link:"/hackingwithswift.com/swiftui/how-to-position-and-style-subviews-that-come-from-a-different-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to position views in a grid using LazyVGrid and LazyHGrid | SwiftUI by Example",desc:"How to position views in a grid using LazyVGrid and LazyHGrid",link:"/hackingwithswift.com/swiftui/how-to-position-views-in-a-grid-using-lazyvgrid-and-lazyhgrid.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to adjust the position of a view using its offset | SwiftUI by Example",desc:"How to adjust the position of a view using its offset",link:"/hackingwithswift.com/swiftui/how-to-adjust-the-position-of-a-view-using-its-offset.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to position views in a fixed grid | SwiftUI by Example",desc:"How to position views in a fixed grid",link:"/hackingwithswift.com/swiftui/how-to-position-views-in-a-fixed-grid.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const G=r(k,[["render",S],["__file","how-to-detect-when-the-size-or-position-of-a-view-changes.html.vue"]]),F=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes.html","title":"How to detect when the size or position of a view changes","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to detect when the size or position of a view changes","description":"Article(s) > How to detect when the size or position of a view changes","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to detect when the size or position of a view changes"},{"property":"og:description","content":"How to detect when the size or position of a view changes"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to detect when the size or position of a view changes"}],["meta",{"property":"og:description","content":"Article(s) > How to detect when the size or position of a view changes"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to detect when the size or position of a view changes\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftui/how-to-create-stacks-using-vstack-and-hstack.md","date":"2024-06-21T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.97,"words":891},"filePathRelative":"hackingwithswift.com/swiftui/how-to-detect-when-the-size-or-position-of-a-view-changes.md","localizedDate":"2024년 6월 21일","excerpt":"\\n"}');export{G as comp,F as data};
