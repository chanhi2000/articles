import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as s,t as k,e as n,n as o,g as p,w as i,f as h,r as a,o as m,d as c}from"./app-BgNevrm5.js";const g={},v={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},w=s("hr",null,null,-1),y=h(`<p>Structs and classes (collectively: &quot;types&quot;) can have their own variables and constants, and these are called properties. These let you attach values to your types to represent them uniquely, but because types can also have methods you can have them behave according to their own data.</p><p>Let&#39;s take a look at an example now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> clothes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> shoes<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I like wearing </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">clothes</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> with </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">shoes</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> taylor <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>clothes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;T-shirts&quot;</span></span><span class="token punctuation">,</span> shoes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sneakers&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> other <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>clothes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;short skirts&quot;</span></span><span class="token punctuation">,</span> shoes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;high heels&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">taylor<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">other<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/properties-1@2x.png" alt=" automatically uses object&#39;s property values." tabindex="0" loading="lazy"><figcaption><code>describe</code> automatically uses object&#39;s property values.</figcaption></figure><p>As you can see, when you use a property inside a method it will automatically use the value that belongs to the same object.</p><hr><h2 id="property-observers" tabindex="-1"><a class="header-anchor" href="#property-observers"><span>Property observers</span></a></h2><p>Swift lets you add code to be run when a property is about to be changed or has been changed. This is frequently a good way to have a user interface update when a value changes, for example.</p><p>There are two kinds of property observer: <code>willSet</code> and <code>didSet</code>, and they are called before or after a property is changed. In <code>willSet</code> Swift provides your code with a special value called <code>newValue</code> that contains what the new property value is going to be, and in <code>didSet</code> you are given <code>oldValue</code> to represent the previous value.</p><p>Let&#39;s attach two property observers to the <code>clothes</code> property of a <code>Person</code> struct:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> clothes<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">willSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">updateUI</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;I&#39;m changing from </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">clothes</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">newValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">updateUI</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;I just changed from </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">oldValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">clothes</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">updateUI</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> taylor <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>clothes<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;T-shirts&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">taylor<span class="token punctuation">.</span>clothes <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;short skirts&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print out the messages &quot;I&#39;m changing from T-shirts to short skirts&quot; and &quot;I just changed from T-shirts to short skirts.&quot;</p><hr><h2 id="computed-properties" tabindex="-1"><a class="header-anchor" href="#computed-properties"><span>Computed properties</span></a></h2><p>It&#39;s possible to make properties that are actually code behind the scenes. We already used the <code>uppercased()</code> method of strings, for example, but there’s also a property called <code>capitalized</code> that gets calculated as needed, rather than every string always storing a capitalized version of itself.</p><p>To make a computed property, place an open brace after your property then use either <code>get</code> or <code>set</code> to make an action happen at the appropriate time. For example, if we wanted to add a <code>ageInDogYears</code> property that automatically returned a person&#39;s age multiplied by seven, we&#39;d do this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> ageInDogYears<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">get</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> age <span class="token operator">*</span> <span class="token number">7</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> fan <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>fan<span class="token punctuation">.</span>ageInDogYears<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/properties-2@2x.png" alt=" is computed using the  code, printing 175." tabindex="0" loading="lazy"><figcaption><code>ageInDogYears</code> is computed using the <code>get</code> code, printing 175.</figcaption></figure><div class="hint-container note"><p class="hint-container-title">Note</p><p>If you intend to use them only for <em>reading</em> data you can just remove the <code>get</code> part entirely, like this:</p></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> ageInDogYears<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> age <span class="token operator">*</span> <span class="token number">7</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function _(l,P){const e=a("VPCard"),t=a("router-link"),r=a("VidStack");return m(),d("div",null,[s("h1",v,[s("a",b,[s("span",null,k(l.$frontmatter.title)+" 관련",1)])]),n(e,o(p({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s("nav",f,[s("ul",null,[s("li",null,[n(t,{to:"#property-observers"},{default:i(()=>[c("Property observers")]),_:1})]),s("li",null,[n(t,{to:"#computed-properties"},{default:i(()=>[c("Computed properties")]),_:1})])])]),w,n(e,o(p({title:"Properties | Hacking with iOS",desc:"Properties",link:"https://hackingwithswift.com/read/0/17/properties",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n(r,{src:"youtube/AabqZodJ2xM"}),y])}const S=u(g,[["render",_],["__file","17-properties.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/read/00/17-properties.html","title":"Properties","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Properties","description":"Article(s) > Properties","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Properties"},{"property":"og:description","content":"Properties"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/17-properties.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/17-properties.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Properties"}],["meta",{"property":"og:description","content":"Article(s) > Properties"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/properties-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Properties\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/properties-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/properties-2@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[{"level":2,"title":"Property observers","slug":"property-observers","link":"#property-observers","children":[]},{"level":2,"title":"Computed properties","slug":"computed-properties","link":"#computed-properties","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.92,"words":577},"filePathRelative":"hackingwithswift.com/read/00/17-properties.md","excerpt":"\\n"}');export{S as comp,I as data};
