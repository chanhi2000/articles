import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,t as p,e as n,n as t,g as e,a as d,d as u,f as g,r as i,o as m}from"./app-BgNevrm5.js";const h={},f={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},k=a("nav",{class:"table-of-contents"},[a("ul")],-1),b=a("hr",null,null,-1),v=g(`<blockquote><p>Available from Swift 5.1</p></blockquote><p>Swift‚Äôs optionals are implemented as an enum of two cases: <code>some</code> and <code>none</code>. This gave rise to the possibility of confusion if we created our own enums that had a <code>none</code> case, then wrapped that inside an optional.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">BorderStyle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">none</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">solid</span><span class="token punctuation">(</span>thickness<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Used as a non-optional this was always clear:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> border1<span class="token punctuation">:</span> <span class="token class-name">BorderStyle</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>border1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print ‚Äúnone‚Äù. But if we used an optional for that enum ‚Äì if we didn‚Äôt know what border style to use ‚Äì then we‚Äôd hit problems:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> border2<span class="token punctuation">:</span> <span class="token class-name">BorderStyle</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>border2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That prints ‚Äúnil‚Äù, because Swift assumes <code>.none</code> means the optional is empty, rather than an optional with the value <code>BorderStyle.none</code>.</p><p>In Swift 5.1 this confusion now prints a warning: ‚ÄúAssuming you mean &#39;Optional.none&#39;; did you mean &#39;BorderStyle.none&#39; instead?‚Äù This avoids the source compatibility breakage of an error, but at least informs developers that their code might not quite mean what they thought.</p>`,10),y={class:"hint-container details"},_=a("summary",null,"Other Changes in Swift 5.1",-1),S={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-0-to-5-1.playground.zip",target:"_blank",rel:"noopener noreferrer"};function C(o,W){const s=i("VPCard"),c=i("FontIcon");return m(),l("div",null,[a("h1",f,[a("a",w,[a("span",null,p(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(s,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,b,n(s,t(e({title:"Warnings for ambiguous none cases | Changes in Swift 5.1",desc:"Warnings for ambiguous none cases",link:"https://hackingwithswift.com/swift/5.1/ambiguous-none-enum",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,a("details",y,[_,n(s,t(e({title:"Improvements to synthesized memberwise initializers | Changes in Swift 5.1",desc:"Improvements to synthesized memberwise initializers",link:"/hackingwithswift.com/swift/5.1/improved-memberwise-initializers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"Implicit returns from single-expression functions | Changes in Swift 5.1",desc:"Implicit returns from single-expression functions",link:"/hackingwithswift.com/swift/5.1/implicit-returns.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"Universal Self | Changes in Swift 5.1",desc:"Universal Self",link:"/hackingwithswift.com/swift/5.1/universal-self.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"Opaque return types | Changes in Swift 5.1",desc:"Opaque return types",link:"/hackingwithswift.com/swift/5.1/opaque-return-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"Static and class subscripts | Changes in Swift 5.1",desc:"Static and class subscripts",link:"/hackingwithswift.com/swift/5.1/static-subscripts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Warnings for ambiguous none cases | Changes in Swift 5.1",
  "desc": "Warnings for ambiguous none cases",
  "link": "/hackingwithswift.com/swift/5.1/ambiguous-none-enum.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(s,t(e({title:"Matching optional enums against non-optionals | Changes in Swift 5.1",desc:"Matching optional enums against non-optionals",link:"/hackingwithswift.com/swift/5.1/matching-optional-enums.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"Ordered collection diffing | Changes in Swift 5.1",desc:"Ordered collection diffing",link:"/hackingwithswift.com/swift/5.1/ordered-collection-diffing.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(e({title:"Creating uninitialized arrays | Changes in Swift 5.1",desc:"Creating uninitialized arrays",link:"/hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a("p",null,[a("a",S,[n(c,{icon:"fas fa-file-zipper"}),u("Download Swift 5.1 playground")])])])])}const I=r(h,[["render",C],["__file","ambiguous-none-enum.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/swift/5.1/ambiguous-none-enum.html","title":"Warnings for ambiguous none cases","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Warnings for ambiguous none cases","description":"Article(s) > Warnings for ambiguous none cases","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.1"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Warnings for ambiguous none cases"},{"property":"og:description","content":"Warnings for ambiguous none cases"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.1/ambiguous-none-enum.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.1/ambiguous-none-enum.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Warnings for ambiguous none cases"}],["meta",{"property":"og:description","content":"Article(s) > Warnings for ambiguous none cases"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.1"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Warnings for ambiguous none cases\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.9,"words":570},"filePathRelative":"hackingwithswift.com/swift/5.1/ambiguous-none-enum.md","excerpt":"\\n"}');export{I as comp,B as data};
