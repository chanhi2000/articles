import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as s,t as d,e as n,n as t,g as i,d as a,a as h,f as c,r as l,o as k}from"./app-BgNevrm5.js";const m={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w=s("nav",{class:"table-of-contents"},[s("ul")],-1),b=s("hr",null,null,-1),v=s("blockquote",null,[s("p",null,"Available from Swift 5.9")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0380-if-switch-expressions.md",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"apple/swift-evolution",-1),x=s("code",null,"if",-1),S=s("code",null,"switch",-1),q=c(`<p>As a simple example, we could set a variable to either “Pass” or “Fail” depending on a condition like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">800</span></span>
<span class="line"><span class="token keyword">let</span> simpleResult <span class="token operator">=</span> <span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">500</span> <span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;Pass&quot;</span></span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;Fail&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>simpleResult<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or we could use a <code>switch</code> expression to get a wider range of values like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> complexResult <span class="token operator">=</span> <span class="token keyword">switch</span> score <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token operator">...</span><span class="token number">300</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Fail&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">301</span><span class="token operator">...</span><span class="token number">500</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Pass&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">501</span><span class="token operator">...</span><span class="token number">800</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Merit&quot;</span></span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Distinction&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>complexResult<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),C={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"apple/swift-evolution",-1),R=s("code",null,"return",-1),A=c(`<p>So, because both <code>if</code> and <code>switch</code> can now both be used as expressions, we can write a function like this one without using <code>return</code> in all four possible cases:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">rating</span><span class="token punctuation">(</span><span class="token keyword">for</span> score<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> score <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token operator">...</span><span class="token number">300</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Fail&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">301</span><span class="token operator">...</span><span class="token number">500</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Pass&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">501</span><span class="token operator">...</span><span class="token number">800</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Merit&quot;</span></span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Distinction&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">rating</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> score<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You might be thinking this feature makes <code>if</code> work more like the ternary conditional operator, and you’d be at least partly right. For example, we could have written our simple <code>if</code> condition from earlier like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> ternaryResult <span class="token operator">=</span> score <span class="token operator">&gt;</span> <span class="token number">500</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;Pass&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Fail&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>ternaryResult<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>However, the two are not identical, and there is one place in particular that might catch you out – you can see it in this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> customerRating <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line"><span class="token keyword">let</span> bonusMultiplier1 <span class="token operator">=</span> customerRating <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1.5</span> <span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">let</span> bonusMultiplier2 <span class="token operator">=</span> <span class="token keyword">if</span> customerRating <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token punctuation">{</span> <span class="token number">1.5</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">1.0</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both those calculations produce a <code>Double</code> with the value of 1.5, but pay attention to the alternative value for each of them: for the ternary option I’ve written 1, and for the <code>if</code> expression I’ve written 1.0.</p><p>This is intentional: when using the ternary Swift checks the types of both values at the same time and so automatically considers 1 to be 1.0, whereas with the <code>if</code> expression the two options are type checked independently: if we use 1.5 for one case and 1 for the other then we’ll be sending back a <code>Double</code> and an <code>Int</code>, which isn’t allowed.</p>`,8),T={class:"hint-container details"},V=s("summary",null,"Other Changes in Swift 5.9",-1),D={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-8-to-5-9.playground.zip",target:"_blank",rel:"noopener noreferrer"};function F(p,I){const e=l("VPCard"),o=l("FontIcon");return k(),u("div",null,[s("h1",g,[s("a",f,[s("span",null,d(p.$frontmatter.title)+" 관련",1)])]),n(e,t(i({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,n(e,t(i({title:"if and switch expressions | Changes in Swift 5.9",desc:"if and switch expressions",link:"https://hackingwithswift.com/swift/5.9/if-switch-expressions",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,s("p",null,[s("a",y,[a("SE-0380 ("),n(o,{icon:"iconfont icon-github"}),_,a(")")]),a(" adds the ability for us to use "),x,a(" and "),S,a(" as expressions in several situations. This produces syntax that will be a little surprising at first, but overall it does help reduce a little extra syntax in the language.")]),q,s("p",null,[a("You don’t need to assign the result somewhere in order to use this new expression syntax, and in fact it combines beautifully with "),s("a",C,[a("SE-0255 ("),n(o,{icon:"iconfont icon-github"}),P,a(")")]),a(" from Swift 5.1 that allows us to omit the "),R,a(" keyword in single expression functions that return a value.")]),A,s("details",T,[V,h(` 
\`\`\`component VPCard
{
  "title": "if and switch expressions | Changes in Swift 5.9",
  "desc": "if and switch expressions",
  "link": "/hackingwithswift.com/swift/5.9/if-switch-expressions.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(e,t(i({title:"Value and Type Parameter Packs | Changes in Swift 5.9",desc:"Value and Type Parameter Packs",link:"/hackingwithswift.com/swift/5.9/variadic-generics.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(e,t(i({title:"Macros | Changes in Swift 5.9",desc:"Macros",link:"/hackingwithswift.com/swift/5.9/macros.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(e,t(i({title:"Noncopyable structs and enums | Changes in Swift 5.9",desc:"Noncopyable structs and enums",link:"/hackingwithswift.com/swift/5.9/noncopyable-structs-and-enums.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(e,t(i({title:"consume operator to end the lifetime of a variable binding | Changes in Swift 5.9",desc:"consume operator to end the lifetime of a variable binding",link:"/hackingwithswift.com/swift/5.9/consume-operator.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(e,t(i({title:"Convenience Async[Throwing]Stream.makeStream methods | Changes in Swift 5.9",desc:"Convenience Async[Throwing]Stream.makeStream methods",link:"/hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(e,t(i({title:"Add sleep(for:) to Clock | Changes in Swift 5.9",desc:"Add sleep(for:) to Clock",link:"/hackingwithswift.com/swift/5.9/sleep-for-clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(e,t(i({title:"Discarding task groups | Changes in Swift 5.9",desc:"Discarding task groups",link:"/hackingwithswift.com/swift/5.9/discarding-task-groups.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s("p",null,[s("a",D,[n(o,{icon:"fas fa-file-zipper"}),a("Download Swift 5.9 playground")])])])])}const j=r(m,[["render",F],["__file","if-switch-expressions.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swift/5.9/if-switch-expressions.html","title":"if and switch expressions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"if and switch expressions","description":"Article(s) > if and switch expressions","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.9"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > if and switch expressions"},{"property":"og:description","content":"if and switch expressions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.9/if-switch-expressions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.9/if-switch-expressions.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"if and switch expressions"}],["meta",{"property":"og:description","content":"Article(s) > if and switch expressions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.9"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"if and switch expressions\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"hackingwithswift.com/swift/5.9/if-switch-expressions.md","excerpt":"\\n"}');export{j as comp,E as data};
