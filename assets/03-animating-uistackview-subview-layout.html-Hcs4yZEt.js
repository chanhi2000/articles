import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as a,n as p,g as i,d as s,w as h,f as t,r as e,o as m}from"./app-BgNevrm5.js";const v={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),y=t(`<p>Before we get onto the CloudKit part of this tutorial, we&#39;re going to add a bit more to our user interface. Specifically, we&#39;re going to add a &quot;Tap to Play&quot; button into the stack view, and have it animate so that it slides out when recording has finished. This is the work of only a few minutes thanks to <code>UIStackView</code>, and I&#39;m sure you&#39;ll agree the results look marvelous.</p><p>While we&#39;re finishing up the user interface, we&#39;re going to quickly add a couple more simple view controllers to let the user attach some metadata to their whistle: they&#39;ll be able to select what genre it is, then enter some free text with any comments – something like &quot;I definitely remember hearing it in the early 90s&quot; to help listeners narrow the scope a little.</p><p>First, the play button. Add this new property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> playButton<span class="token punctuation">:</span> <span class="token class-name">UIButton</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now create it by placing this just before the end of <code>loadRecordingUI()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">playButton <span class="token operator">=</span> <span class="token class-name">UIButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">playButton<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">playButton<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap to Play&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>normal<span class="token punctuation">)</span></span>
<span class="line">playButton<span class="token punctuation">.</span>isHidden <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">playButton<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">playButton<span class="token punctuation">.</span>titleLabel<span class="token operator">?</span><span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token class-name">UIFont</span><span class="token punctuation">.</span><span class="token function">preferredFont</span><span class="token punctuation">(</span>forTextStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>title1<span class="token punctuation">)</span></span>
<span class="line">playButton<span class="token punctuation">.</span><span class="token function">addTarget</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>playTapped<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>touchUpInside<span class="token punctuation">)</span></span>
<span class="line">stackView<span class="token punctuation">.</span><span class="token function">addArrangedSubview</span><span class="token punctuation">(</span>playButton<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s almost identical to the code for creating the record button, except the play button is set to hidden and alpha 0. Normally you need only one of these, but with stack views it&#39;s a little different: a view that is not hidden but has an alpha of 0 appears hidden (i.e., the user can&#39;t see it) but still occupies space in the stack view. By setting the button to be hidden and have alpha 0, we&#39;re saying &quot;don&#39;t show it to the user, and don&#39;t let it take up any space in the stack view.&quot;</p><p>We want to show and hide that play button when needed, meaning that we show it when recording finished successfully and hide it if the user taps to re-record. To solve the first of those, put this code into the <code>finishRecording()</code> method, just before setting the right bar button item:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> playButton<span class="token punctuation">.</span>isHidden <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">0.35</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>playButton<span class="token punctuation">.</span>isHidden <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>playButton<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To solve the second, put this into <code>recordTapped()</code>, just after the call to <code>startRecording()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token operator">!</span>playButton<span class="token punctuation">.</span>isHidden <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">0.35</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>playButton<span class="token punctuation">.</span>isHidden <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>playButton<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>isHidden</code> property of any <code>UIView</code> subclass is a simple boolean, meaning that it&#39;s either true or false: a view is either hidden or it&#39;s not. As a result, if we had put this code anywhere else it would be meaningless to try to animate it, because there are no intermediate steps between &quot;visible&quot; and &quot;invisible&quot; to animate. But with <code>UIStackView</code> it has a meaning, and that meaning is brilliant: the stack view will animate the play button being shown, making it slide out neatly. Changing the alpha at the same time is the perfect finishing touch.</p><p>When we created the play button we attached a method called <code>playTapped()</code> to it, which isn&#39;t written yet. But now that you&#39;ve seen how to use <code>AVAudioRecorder</code>, the code to play using <code>AVAudioPlayer</code> should be second nature. Just in case you don&#39;t fancy writing the code for yourself, I&#39;ll walk you through the steps.</p><p>First, create a new property to hold the audio player:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> whistlePlayer<span class="token punctuation">:</span> <span class="token class-name">AVAudioPlayer</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, add a <code>playTapped()</code> method using the code below. This grabs the shared whistle URL, creates an <code>AVAudioPlayer</code> inside a <code>do/try/catch</code> block, and makes it play. If there&#39;s an error loading the sound it shows an alert message to the user. Easy, right?</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">playTapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> audioURL <span class="token operator">=</span> <span class="token class-name">RecordWhistleViewController</span><span class="token punctuation">.</span><span class="token function">getWhistleURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        whistlePlayer <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">AVAudioPlayer</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> audioURL<span class="token punctuation">)</span></span>
<span class="line">        whistlePlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Playback failed&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;There was a problem playing your whistle; please try re-recording.&quot;</span></span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">        ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the app now I think you&#39;ll agree it looks good, particularly as the play button slides out in the stack view. Being able to hear what you recorded is of course a nice touch!</p><p>Once the user has a recording they are happy with, we&#39;re going to ask them to choose which genre they think it belongs to, and add any comments. At this stage in your Swift coding career, both of these should be very simple view controllers that you can make in just a few minutes.</p><p>Add a new file to your project, choosing Cocoa Touch Class. Make it a subclass of <code>UITableViewController</code> and name it <code>SelectGenreViewController</code>. Open the file for editing, and give it this property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">var</span> genres <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Blues&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Classical&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Electronic&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Jazz&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Metal&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Pop&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Reggae&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;RnB&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Rock&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Soul&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is marked as static so that we can use it in lots of other places – it&#39;s a shared list of all the music categories we want to work with. I added &quot;Unknown&quot; in there for people like me who struggle to tell the difference between some music types!</p><p>In this class&#39;s <code>viewDidLoad()</code> method we&#39;re going to give it a title, configure the back button to take up less space, then register a cell for re-use. All old stuff:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Select genre&quot;</span></span></span>
<span class="line">    navigationItem<span class="token punctuation">.</span>backBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Genre&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line">    tableView<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">UITableViewCell</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forCellReuseIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cell&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For handling the content of the table view, it&#39;s all code you&#39;ve seen in previous projects, but I want to point out three things:</p>`,25),V=n("li",null,[s("When referencing the "),n("code",null,"genres"),s(" array we need to use "),n("code",null,"SelectGenreViewController.genres"),s(" because the array belongs to the class, not to our instance of the class.")],-1),I=n("li",null,[s("When the user has selected a genre, we're going to create an instance of the class "),n("code",null,"AddCommentsViewController"),s(", store that genre there, then push it onto our navigation stack.")],-1),x=t(`<p>That&#39;s it – here are the methods for handling the table view data source and delegate:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">numberOfSections</span><span class="token punctuation">(</span><span class="token keyword">in</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> numberOfRowsInSection section<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">SelectGenreViewController</span><span class="token punctuation">.</span>genres<span class="token punctuation">.</span>count</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> cellForRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cell&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span></span>
<span class="line">    cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token class-name">SelectGenreViewController</span><span class="token punctuation">.</span>genres<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span></span>
<span class="line">    cell<span class="token punctuation">.</span>accessoryType <span class="token operator">=</span> <span class="token punctuation">.</span>disclosureIndicator</span>
<span class="line">    <span class="token keyword">return</span> cell</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> didSelectRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">cellForRow</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> genre <span class="token operator">=</span> cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">??</span> <span class="token class-name">SelectGenreViewController</span><span class="token punctuation">.</span>genres<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">let</span> vc <span class="token operator">=</span> <span class="token class-name">AddCommentsViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        vc<span class="token punctuation">.</span>genre <span class="token operator">=</span> genre</span>
<span class="line">        navigationController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">pushViewController</span><span class="token punctuation">(</span>vc<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q=n("code",null,"RecordWhistleViewController.swift",-1),A=n("code",null,"nextTapped()",-1),T=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">nextTapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> vc <span class="token operator">=</span> <span class="token class-name">SelectGenreViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    navigationController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">pushViewController</span><span class="token punctuation">(</span>vc<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There&#39;s one more easy class to add before we get onto CloudKit, and that&#39;s <code>AddCommentsViewController</code>. This will show a full-screen <code>UITextView</code> for the user to type any extra comments into.</p><p>We&#39;re going to give this new class three properties: one to hold the genre that gets passed in from <code>SelectGenreViewController</code>, one to hold a reference to the <code>UITextView</code>, and one to hold a placeholder string. That last property will be used to solve a long-standing <code>UITextView</code> annoyance: unlike <code>UITextField</code>, you can’t give a <code>UITextView</code> a placeholder string, which is a piece of text telling users what to type in there. We&#39;ll replicate this behavior by putting a default string into the text view and removing it when the user taps it.</p><p>So, create a new Cocoa Touch class. Name it “AddCommentsViewController”, make it inherit from “UIViewController”, then give it these three properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> genre<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> comments<span class="token punctuation">:</span> <span class="token class-name">UITextView</span><span class="token operator">!</span></span>
<span class="line"><span class="token keyword">let</span> placeholder <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;If you have any additional comments that might help identify your tune, enter them here.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to override the <code>loadView()</code> method of this class, using it to create a new <code>UITextView</code> that is pinned to all edges using Auto Layout. The only vaguely interesting thing here is that we&#39;ll use Dynamic Type to make the font size adjustable for the user. Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">loadView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    view <span class="token operator">=</span> <span class="token class-name">UIView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    view<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>white</span>
<span class="line"></span>
<span class="line">    comments <span class="token operator">=</span> <span class="token class-name">UITextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    comments<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    comments<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">    comments<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token class-name">UIFont</span><span class="token punctuation">.</span><span class="token function">preferredFont</span><span class="token punctuation">(</span>forTextStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>body<span class="token punctuation">)</span></span>
<span class="line">    view<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>comments<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    comments<span class="token punctuation">.</span>leadingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> view<span class="token punctuation">.</span>leadingAnchor<span class="token punctuation">)</span><span class="token punctuation">.</span>isActive <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    comments<span class="token punctuation">.</span>trailingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> view<span class="token punctuation">.</span>trailingAnchor<span class="token punctuation">)</span><span class="token punctuation">.</span>isActive <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    comments<span class="token punctuation">.</span>topAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> view<span class="token punctuation">.</span>safeAreaLayoutGuide<span class="token punctuation">.</span>topAnchor<span class="token punctuation">)</span><span class="token punctuation">.</span>isActive <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    comments<span class="token punctuation">.</span>bottomAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> view<span class="token punctuation">.</span>safeAreaLayoutGuide<span class="token punctuation">.</span>bottomAnchor<span class="token punctuation">)</span><span class="token punctuation">.</span>isActive <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As per usual, assigning the view controller to be a delegate of something requires conforming to a protocol. In this case, it means conforming to <code>UITextViewDelegate</code>, so please add that now.</p><p>The absolute least we need to do to make this class work is to fill in the <code>viewDidLoad()</code> method with a title for the view controller and a right bar button item to let the user proceed with their submission, then to write a <code>submitTapped()</code> method that gets triggered when the button is tapped.</p><p>Submitting will use another new class that we&#39;ll define shortly, called <code>SubmitViewController</code>, and will pass in the genre we got from <code>SelectGenreViewController</code> and the user&#39;s comments if there are any. If they kept the placeholder intact, we&#39;ll send an empty string on. Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Comments&quot;</span></span></span>
<span class="line">    navigationItem<span class="token punctuation">.</span>rightBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Submit&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>submitTapped<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    comments<span class="token punctuation">.</span>text <span class="token operator">=</span> placeholder</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">submitTapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> vc <span class="token operator">=</span> <span class="token class-name">SubmitViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    vc<span class="token punctuation">.</span>genre <span class="token operator">=</span> genre</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> comments<span class="token punctuation">.</span>text <span class="token operator">==</span> placeholder <span class="token punctuation">{</span></span>
<span class="line">        vc<span class="token punctuation">.</span>comments <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        vc<span class="token punctuation">.</span>comments <span class="token operator">=</span> comments<span class="token punctuation">.</span>text</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    navigationController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">pushViewController</span><span class="token punctuation">(</span>vc<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could easily leave it there and get onto to the CloudKit work, but there&#39;s one small tweak we can make to improve the whole experience. As this view controller is the delegate for the <code>comments</code> text view, iOS will send us the <code>textViewDidBeginEditing()</code> message when the user starts editing it. We can then compare the text view&#39;s current text against the placeholder, and clear it if they match. Here&#39;s that code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">textViewDidBeginEditing</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> textView<span class="token punctuation">:</span> <span class="token class-name">UITextView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> textView<span class="token punctuation">.</span>text <span class="token operator">==</span> placeholder <span class="token punctuation">{</span></span>
<span class="line">        textView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it: in order to build the <code>SubmitViewController</code> class, it&#39;s time to introduce CloudKit.</p>`,14);function C(l,S){const o=e("VPCard"),c=e("RouteLink"),u=e("FontIcon");return m(),d("div",null,[n("h1",w,[n("a",g,[n("span",null,k(l.$frontmatter.title)+" 관련",1)])]),a(o,p(i({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,f,a(o,p(i({title:"Animating UIStackView subview layout | Hacking with iOS",desc:"Animating UIStackView subview layout",link:"https://hackingwithswift.com/read/33/3/animating-uistackview-subview-layout",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),y,n("ol",null,[V,n("li",null,[s("When reading the text of the cell that was tapped, we're going to use the nil coalescing operator. "),a(c,{to:"/hackingwithswift.com/read/12/02-reading-and-writing-basics-userdefaults.html"},{default:h(()=>[s("The nil coalescing operator was covered in project 12")]),_:1}),s(", and in this situation it guarantees we have a genre.")]),I]),x,n("p",null,[s("That completes the class – I've deliberately kept it simple because this tutorial is about CloudKit rather than tables! You can now return to "),a(u,{icon:"fa-brands fa-swift"}),q,s(" and fill in the "),A,s(" method like this:")]),T])}const B=r(v,[["render",C],["__file","03-animating-uistackview-subview-layout.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/read/33/03-animating-uistackview-subview-layout.html","title":"Animating UIStackView subview layout","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Animating UIStackView subview layout","description":"Article(s) > Animating UIStackView subview layout","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Animating UIStackView subview layout"},{"property":"og:description","content":"Animating UIStackView subview layout"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/33/03-animating-uistackview-subview-layout.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/33/03-animating-uistackview-subview-layout.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Animating UIStackView subview layout"}],["meta",{"property":"og:description","content":"Article(s) > Animating UIStackView subview layout"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Animating UIStackView subview layout\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.13,"words":1840},"filePathRelative":"hackingwithswift.com/read/33/03-animating-uistackview-subview-layout.md","excerpt":"\\n"}');export{B as comp,R as data};
