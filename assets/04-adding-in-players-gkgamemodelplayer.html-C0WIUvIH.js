import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as a,n as p,g as i,d as s,f as e,r as l,o as k}from"./app-BgNevrm5.js";const m={},h={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),w=e(`<p>It&#39;s time to take our first step into GameplayKit, although at first this step will be small. Right now our game is single-player, and all chips that get dropped are red chips. We&#39;re going to upgrade this so that there are two players by creating a new <code>Player</code> class that stores a player&#39;s chip type, their name, their color, and a special GameplayKit value called <code>playerId</code> – this is just a number that identifies every player uniquely.</p><p>On top of that, we&#39;re also going to create a static property for players, which means it&#39;s a property that belongs to the class and thus can be called from anywhere. This will be an <code>allPlayers</code> array holding both <code>Player</code> objects for easy reference</p><p>So, please create a new Cocoa Touch Class in your project. Name it “Player”, then make it inherit from <code>NSObject</code>. Let&#39;s go ahead and create the properties up front. As a reminder, we need:</p><ul><li>The chip color of the player, either <code>.red</code>, <code>.black</code>, or <code>.none</code>.</li><li>The drawing color the player, set to a <code>UIColor</code>.</li><li>The name of the player, which will be either &quot;Red&quot; or &quot;Black&quot;.</li><li>A GameplayKit <code>playerId</code> property, which we&#39;ll just set to the raw value of their chip type. (We set this enum up as an integer, remember?)</li><li>A static array of two players, red and black.</li></ul><p>Add these properties now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> chip<span class="token punctuation">:</span> <span class="token class-name">ChipColor</span></span>
<span class="line"><span class="token keyword">var</span> color<span class="token punctuation">:</span> <span class="token class-name">UIColor</span></span>
<span class="line"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token keyword">var</span> playerId<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">var</span> allPlayers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Player</span><span class="token punctuation">(</span>chip<span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>chip<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now for what is going to be a huge anti-climax: let&#39;s bring in GameplayKit by adding this import:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">GameplayKit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now make your <code>Player</code> class conform to the <code>GKGameModelPlayer</code> protocol, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">GKGameModelPlayer</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Xcode will be flagging up errors all over your code, but none of them are a result of GameplayKit – in fact, those two changes are all it takes to make GameplayKit work with our player data. Instead, the errors are because we&#39;ve declared four properties non-optional and haven&#39;t given them any values, so we need to create a custom initializer.</p><p>This initializer will accept one parameter, which is the chip color to use for each player. From that we can set the player ID (as the raw value of the chip type enum), the color (either red or black <code>UIColor</code>), and the player name (either &quot;Red&quot; or &quot;Black&quot;). It&#39;s pretty straightforward really – here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">init</span><span class="token punctuation">(</span>chip<span class="token punctuation">:</span> <span class="token class-name">ChipColor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>chip <span class="token operator">=</span> chip</span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>playerId <span class="token operator">=</span> chip<span class="token punctuation">.</span>rawValue</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> chip <span class="token operator">==</span> <span class="token punctuation">.</span>red <span class="token punctuation">{</span></span>
<span class="line">        color <span class="token operator">=</span> <span class="token punctuation">.</span>red</span>
<span class="line">        name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        color <span class="token operator">=</span> <span class="token punctuation">.</span>black</span>
<span class="line">        name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Black&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to add one more thing to this class before we&#39;re done, which is a small computed property that returns the opponent for a specific player. If the player is red, it returns the black player from the <code>allPlayers</code> array, and if the player is black, it returns the red player. Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> opponent<span class="token punctuation">:</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> chip <span class="token operator">==</span> <span class="token punctuation">.</span>red <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Player</span><span class="token punctuation">.</span>allPlayers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Player</span><span class="token punctuation">.</span>allPlayers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s the <code>Player</code> class finished: we won&#39;t be adding any more to it in this project. But after that code, nothing has really changed because we&#39;re not actually using those players.</p><p>To take the next step in our game, we&#39;re going to start using the new <code>Player</code> class so that we have two players in the game, and we&#39;re also going to update the user interface to mark whose turn it is.</p><p>Updating the user interface requires two methods in the <code>Board</code> class: one to determine if the board is full of pieces, and one to determine if a particular player has won. With these two we can show either &quot;Red/Black Wins!&quot; or &quot;Draw!&quot; in the user interface, but for now we&#39;re just going to return false from these methods – we&#39;ll put the real code in later.</p><p>Put these two into your <code>Board</code> class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">isWin</span><span class="token punctuation">(</span><span class="token keyword">for</span> player<span class="token punctuation">:</span> <span class="token class-name">Player</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now onto the real work: we&#39;re going to create two new methods called <code>continueGame()</code> and <code>updateUI()</code>, both in the <code>ViewController</code> class. The first will get called after every move, and will end the game with an alert if needed, otherwise it will switch players. The second is responsible for updating the title of the view controller to show whose turn it is, although later on we&#39;ll also be making it kick off AI work.</p>`,21),f=n("code",null,"updateUI()",-1),b=n("code",null,"ViewController.swift",-1),P=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">board<span class="token punctuation">.</span>currentPlayer<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&#39;s Turn&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We aren&#39;t tracking the current player just yet so you&#39;ll get an error at first, but we&#39;ll fix it in a moment.</p><p>The <code>continueGame()</code> method is longer, but isn&#39;t really very complicated. To help you along I&#39;ll break it down into numbered steps in the code:</p><ol><li>We create a <code>gameOverTitle</code> optional string set to nil.</li><li>If the game is over or the board is full, <code>gameOverTitle</code> is updated to include the relevant status message.</li><li>If <code>gameOverTitle</code> is not nil (i.e., the game is won or drawn), show an alert controller that resets the board when dismissed. 4r. Otherwise, change the current player of the game, then call <code>updateUI()</code> to set the navigation bar title.</li></ol><p>Here&#39;s the code, with the number comments matching the list above:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">continueGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1</span></span>
<span class="line">    <span class="token keyword">var</span> gameOverTitle<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2</span></span>
<span class="line">    <span class="token keyword">if</span> board<span class="token punctuation">.</span><span class="token function">isWin</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> board<span class="token punctuation">.</span>currentPlayer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        gameOverTitle <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">board<span class="token punctuation">.</span>currentPlayer<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> Wins!&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        gameOverTitle <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Draw!&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3</span></span>
<span class="line">    <span class="token keyword">if</span> gameOverTitle <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> alert <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> gameOverTitle<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> alertAction <span class="token operator">=</span> <span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Play Again&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">resetBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        alert<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>alertAction<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">present</span><span class="token punctuation">(</span>alert<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 4</span></span>
<span class="line">    board<span class="token punctuation">.</span>currentPlayer <span class="token operator">=</span> board<span class="token punctuation">.</span>currentPlayer<span class="token punctuation">.</span>opponent</span>
<span class="line">    <span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The final steps are actually pretty straightforward. First we need to create the <code>currentPlayer</code> property in the <code>Board</code> class so that it silences the Xcode errors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> currentPlayer<span class="token punctuation">:</span> <span class="token class-name">Player</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8),_=n("code",null,"currentPlayer",-1),G=n("code",null,"init()",-1),I=n("code",null,"Board.swift",-1),A=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">currentPlayer <span class="token operator">=</span> <span class="token class-name">Player</span><span class="token punctuation">.</span>allPlayers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We&#39;re almost done with this chapter, and in fact we need only make a couple more changes for our game to work with two players. First, we need to update the <code>makeMove()</code> method so that it drops in chips of the correct color rather than always using red. This is easy now that we have the <code>board.currentPlayer</code> property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function-definition function">makeMove</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> sender<span class="token punctuation">:</span> <span class="token class-name">UIButton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> column <span class="token operator">=</span> sender<span class="token punctuation">.</span>tag</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> row <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">nextEmptySlot</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        board<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>chip<span class="token punctuation">:</span> board<span class="token punctuation">.</span>currentPlayer<span class="token punctuation">.</span>chip<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> column<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">addChip</span><span class="token punctuation">(</span>inColumn<span class="token punctuation">:</span> column<span class="token punctuation">,</span> row<span class="token punctuation">:</span> row<span class="token punctuation">,</span> color<span class="token punctuation">:</span> board<span class="token punctuation">.</span>currentPlayer<span class="token punctuation">.</span>color<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">continueGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that I snuck in a call to <code>continueGame()</code> so that control automatically flips between players after each move.</p><p>Finally, we need to set the initial view controller title when the game is started or reset, which means modifying the <code>resetBoard()</code> method so that it calls <code>updateUI()</code>. Modify the start of the method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">resetBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    board <span class="token operator">=</span> <span class="token class-name">Board</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run your app now, you&#39;ll see things are starting to come together: you can tap on a column to play a chip, then control hands over to the other player and the user interface updates. The game doesn&#39;t end, though, because it has no idea whether one player has made four in a row, or whether it&#39;s a draw. Let&#39;s tackle that now…</p><figure><img src="https://hackingwithswift.com/img/books/hws/34-4@2x.png" alt="Our four in a row game has two players now, taking alternating turns" tabindex="0" loading="lazy"><figcaption>Our four in a row game has two players now, taking alternating turns</figcaption></figure>`,8);function x(c,T){const t=l("VPCard"),o=l("FontIcon");return k(),u("div",null,[n("h1",h,[n("a",v,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),a(t,p(i({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,y,a(t,p(i({title:"Adding in players: GKGameModelPlayer | Hacking with iOS",desc:"Adding in players: GKGameModelPlayer",link:"https://hackingwithswift.com/read/34/4/adding-in-players-gkgamemodelplayer",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,n("p",null,[s("The code in "),f,s(" is trivial, so let's get it out of the way. Open "),a(o,{icon:"fa-brands fa-swift"}),b,s(" and add this method:")]),P,n("p",null,[s("That's a non-optional value, so by fixing the previous errors we introduce a new one: "),_,s(" must be given a value inside the board's initializer. Add this at the start of the "),G,s(" method in "),a(o,{icon:"fa-brands fa-swift"}),I,s(":")]),A])}const K=r(m,[["render",x],["__file","04-adding-in-players-gkgamemodelplayer.html.vue"]]),O=JSON.parse('{"path":"/hackingwithswift.com/read/34/04-adding-in-players-gkgamemodelplayer.html","title":"Adding in players: GKGameModelPlayer","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Adding in players: GKGameModelPlayer","description":"Article(s) > Adding in players: GKGameModelPlayer","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Adding in players: GKGameModelPlayer"},{"property":"og:description","content":"Adding in players: GKGameModelPlayer"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/34/04-adding-in-players-gkgamemodelplayer.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/34/04-adding-in-players-gkgamemodelplayer.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Adding in players: GKGameModelPlayer"}],["meta",{"property":"og:description","content":"Article(s) > Adding in players: GKGameModelPlayer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/34-4@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Adding in players: GKGameModelPlayer\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/34-4@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.78,"words":1434},"filePathRelative":"hackingwithswift.com/read/34/04-adding-in-players-gkgamemodelplayer.md","excerpt":"\\n"}');export{K as comp,O as data};
