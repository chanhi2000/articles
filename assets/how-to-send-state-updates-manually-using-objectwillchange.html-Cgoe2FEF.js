import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e as t,n as e,g as a,d as h,f as i,r as o,o as m}from"./app-BgNevrm5.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},b=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),v=i(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Although using <code>@Published</code> is the easiest way to control state updates, you can also do it by hand if you need something specific. For example, you might want the view to refresh only if you&#39;re happy with the values you&#39;ve been given.</p><p>All observable objects automatically get access to an <code>objectWillChange</code> property, which itself has a <code>send()</code> method we can call whenever we want observing views to refresh.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Create an observable object class that announces </span></span>
<span class="line"><span class="token comment">// changes to its only property</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UserAuthentication</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">willSet</span> <span class="token punctuation">{</span></span>
<span class="line">            objectWillChange<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Create an instance of our object</span></span>
<span class="line">    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">UserAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enter your name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $user<span class="token punctuation">.</span>username<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your username is: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),y={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-send-state-updates-manually-using-objectwillchange-1.zip",target:"_blank",rel:"noopener noreferrer"},j=i('<p>Notice how we have a <code>willSet</code> property observer attached to the <code>username</code> property of <code>UserAuthentication</code>, allowing us to run code whenever that value changes. In our example code, we call <code>objectWillChange.send()</code> whenever <code>username</code> changes, which is what tells the <code>objectWillChange</code> publisher to put out the news that our data has changed so that any subscribed views can refresh.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This example is no different from using <code>@Published</code> on the property, but now that we have a custom call to <code>objectWillChange.send()</code> we can add extra functionality – we could save the value to disk, for example.</p></div>',2),_={class:"hint-container details"},x=n("summary",null,"Similar solutions…",-1);function C(c,S){const s=o("VPCard"),l=o("FontIcon"),p=o("VidStack");return m(),u("div",null,[n("h1",w,[n("a",k,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),t(s,e(a({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,f,t(s,e(a({title:"How to send state updates manually using objectWillChange | SwiftUI by Example",desc:"How to send state updates manually using objectWillChange",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-send-state-updates-manually-using-objectwillchange",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("blockquote",null,[n("p",null,[n("a",y,[t(l,{icon:"fas fa-file-zipper"}),h("Download this as an Xcode project")])])]),t(p,{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-send-state-updates-manually-using-objectwillchange-1~dark.mp4"}),j,n("details",_,[x,t(s,e(a({title:"What's the difference between @ObservedObject, @State, and @EnvironmentObject? | SwiftUI by Example",desc:"What's the difference between @ObservedObject, @State, and @EnvironmentObject?",link:"/hackingwithswift.com/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,e(a({title:"How to run some code when state changes using onChange() | SwiftUI by Example",desc:"How to run some code when state changes using onChange()",link:"/hackingwithswift.com/swiftui/how-to-run-some-code-when-state-changes-using-onchange.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,e(a({title:"How to use @ObservedObject to manage state from external objects | SwiftUI by Example",desc:"How to use @ObservedObject to manage state from external objects",link:"/hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,e(a({title:"How to fix “Modifying state during view update, this will cause undefined behavior” | SwiftUI by Example",desc:"How to fix “Modifying state during view update, this will cause undefined behavior”",link:"/hackingwithswift.com/swiftui/how-to-fix-modifying-state-during-view-update-this-will-cause-undefined-behavior.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(s,e(a({title:"Working with state | SwiftUI by Example",desc:"Working with state",link:"/hackingwithswift.com/swiftui/working-with-state.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const O=r(g,[["render",C],["__file","how-to-send-state-updates-manually-using-objectwillchange.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-send-state-updates-manually-using-objectwillchange.html","title":"How to send state updates manually using objectWillChange","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to send state updates manually using objectWillChange","description":"Article(s) > How to send state updates manually using objectWillChange","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to send state updates manually using objectWillChange"},{"property":"og:description","content":"How to send state updates manually using objectWillChange"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-send-state-updates-manually-using-objectwillchange.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-send-state-updates-manually-using-objectwillchange.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to send state updates manually using objectWillChange"}],["meta",{"property":"og:description","content":"Article(s) > How to send state updates manually using objectWillChange"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to send state updates manually using objectWillChange\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.09,"words":628},"filePathRelative":"hackingwithswift.com/swiftui/how-to-send-state-updates-manually-using-objectwillchange.md","excerpt":"\\n"}');export{O as comp,U as data};
