import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as d,e as n,n as e,g as a,d as o,w as u,f as m,r as i,o as w}from"./app-BgNevrm5.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},k=s("nav",{class:"table-of-contents"},[s("ul")],-1),v=s("hr",null,null,-1),b=s("blockquote",null,[s("p",null,"Updated for Xcode 15")],-1),y=s("p",null,"Deleting Core Data objects in SwiftUI is mostly the same as deleting them in UIKit, although there are a couple of special hoops to jump through to integrate with SwiftUI’s views.",-1),j=m(`<p>Once you have your managed object context, make it available to your SwiftUI view as a property like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>managedObjectContext<span class="token punctuation">)</span> <span class="token keyword">var</span> managedObjectContext</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Next, create a fetch request that reads some data from your managed object context. In my example setup there’s a <code>ProgrammingLanguage</code> entity, so we can read out all items like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FetchRequest</span><span class="token punctuation">(</span></span>
<span class="line">    sortDescriptors<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">var</span> languages<span class="token punctuation">:</span> <span class="token class-name">FetchedResults</span><span class="token operator">&lt;</span><span class="token class-name">ProgrammingLanguage</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Third, add an <code>onDelete</code> modifier to your SwiftUI view, wherever you’re showing your data. For example, using the above fetch request you might create a list using <code>ForEach</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span> <span class="token punctuation">{</span> language <span class="token keyword">in</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Creator: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">language<span class="token punctuation">.</span>creator <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onDelete</span><span class="token punctuation">(</span>perform<span class="token punctuation">:</span> removeLanguages<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, add the <code>removeLanguages()</code> method to your SwiftUI view. This should accept an <code>IndexSet</code>, which is a collection of unique integer indexes that should be deleted:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">removeLanguages</span><span class="token punctuation">(</span>at offsets<span class="token punctuation">:</span> <span class="token class-name">IndexSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> index <span class="token keyword">in</span> offsets <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> language <span class="token operator">=</span> languages<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="line">        managedObjectContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You might want to save your Core Data context at this point, in which case after the <code>for</code> loop finishes add something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> managedObjectContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// handle the Core Data error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or if you’re using my <code>PersistenceController</code> setup code, use this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">PersistenceController</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Just adding an <code>onDelete()</code> modifier is enough to get swipe to delete on your table rows, but if you also want an Edit/Done button to toggle editing mode you should add this modifier to whatever is directly inside your <code>NavigationStack</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">EditButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),x={class:"hint-container details"},S=s("summary",null,"Similar solutions…",-1);function _(c,I){const t=i("VPCard"),l=i("RouteLink");return w(),r("div",null,[s("h1",f,[s("a",g,[s("span",null,d(c.$frontmatter.title)+" 관련",1)])]),n(t,e(a({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,v,n(t,e(a({title:"How to delete Core Data objects from SwiftUI views | SwiftUI by Example",desc:"How to delete Core Data objects from SwiftUI views",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-delete-core-data-objects-from-swiftui-views",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,y,s("p",null,[o("If you followed my "),n(l,{to:"/hackingwithswift.com/swiftui/how-to-configure-core-data-to-work-with-swiftui.html"},{default:u(()=>[o("Core Data and SwiftUI set up instructions")]),_:1}),o(", you’ve already injected your managed object context into the SwiftUI environment.")]),j,s("details",x,[S,n(t,e(a({title:"Observable objects, environment objects, and @Published | SwiftUI by Example",desc:"Observable objects, environment objects, and @Published",link:"/hackingwithswift.com/swiftui/observable-objects-environment-objects-and-published.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(a({title:"How to add Core Data objects from SwiftUI views | SwiftUI by Example",desc:"How to add Core Data objects from SwiftUI views",link:"/hackingwithswift.com/swiftui/how-to-add-core-data-objects-from-swiftui-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(a({title:"How to let users delete rows from a list | SwiftUI by Example",desc:"How to let users delete rows from a list",link:"/hackingwithswift.com/swiftui/how-to-let-users-delete-rows-from-a-list.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(a({title:"Adding swipe to delete and EditButton | SwiftUI by Example",desc:"Adding swipe to delete and EditButton",link:"/hackingwithswift.com/swiftui/adding-swipe-to-delete-and-editbutton.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,e(a({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const D=p(h,[["render",_],["__file","how-to-delete-core-data-objects-from-swiftui-views.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-delete-core-data-objects-from-swiftui-views.html","title":"How to delete Core Data objects from SwiftUI views","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to delete Core Data objects from SwiftUI views","description":"Article(s) > How to delete Core Data objects from SwiftUI views","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to delete Core Data objects from SwiftUI views"},{"property":"og:description","content":"How to delete Core Data objects from SwiftUI views"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-delete-core-data-objects-from-swiftui-views.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-delete-core-data-objects-from-swiftui-views.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to delete Core Data objects from SwiftUI views"}],["meta",{"property":"og:description","content":"Article(s) > How to delete Core Data objects from SwiftUI views"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to delete Core Data objects from SwiftUI views\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.2,"words":661},"filePathRelative":"hackingwithswift.com/swiftui/how-to-delete-core-data-objects-from-swiftui-views.md","excerpt":"\\n"}');export{D as comp,E as data};
