import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as p,e as n,n as i,g as a,f as u,r as e,o as d}from"./app-BgNevrm5.js";const g={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},f=t("nav",{class:"table-of-contents"},[t("ul")],-1),w=t("hr",null,null,-1),k=t("blockquote",null,[t("p",null,"Updated for Xcode 15")],-1),b=u(`<p>Okay, let&#39;s fix up that order total so that it&#39;s accurate. We&#39;re going to add a <code>totalPrice</code> computed property to our type, which will calculate the value of their tip, add it to the total for their order, and return that amount.</p><p>Please add this to <code>CheckoutView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> totalPrice<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>total<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> tipValue <span class="token operator">=</span> total <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>tipAmount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>total <span class="token operator">+</span> tipValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, remember that SwiftUI will re-invoke our <code>body</code> property whenever any of our <code>@State</code> properties change. As a result, we can use that computed property right inside our layout, and it will automatically change as the segmented control changes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Total: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">totalPrice</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you try that out you should see it all works great – the total price reflects the items we&#39;re ordering, plus any tip the user selected.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/2-14~dark.png" alt="Our completed order form, showing options for payment type, loyalty card, and tip percentage, plus a button to confirm the order." tabindex="0" loading="lazy"><figcaption>Our completed order form, showing options for payment type, loyalty card, and tip percentage, plus a button to confirm the order.</figcaption></figure>`,7),y={class:"hint-container details"},v=t("summary",null,"Further reading",-1),S={class:"hint-container details"},_=t("summary",null,"Similar solutions…",-1);function I(o,U){const s=e("VPCard"),r=e("VidStack");return d(),l("div",null,[t("h1",m,[t("a",h,[t("span",null,p(o.$frontmatter.title)+" 관련",1)])]),n(s,i(a({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,w,n(s,i(a({title:"Formatting interpolated strings in SwiftUI | SwiftUI by Example",desc:"Formatting interpolated strings in SwiftUI",link:"https://hackingwithswift.com/quick-start/swiftui/formatting-interpolated-strings-in-swiftui",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,n(r,{src:"youtube/8O8HmKn2OFk"}),b,t("details",y,[v,n(s,i(a({title:"How to format text inside text views | SwiftUI by Example",desc:"How to format text inside text views",link:"/hackingwithswift.com/swiftui/how-to-format-text-inside-text-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),t("details",S,[_,n(s,i(a({title:"Answering the big question: should you learn SwiftUI, UIKit, or both? | SwiftUI by Example",desc:"Answering the big question: should you learn SwiftUI, UIKit, or both?",link:"/hackingwithswift.com/swiftui/answering-the-big-question-should-you-learn-swiftui-uikit-or-both.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,i(a({title:"Frequently asked questions about SwiftUI | SwiftUI by Example",desc:"Frequently asked questions about SwiftUI",link:"/hackingwithswift.com/swiftui/frequently-asked-questions-about-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,i(a({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,i(a({title:"How to fix “Ambiguous reference to member 'buildBlock()'” | SwiftUI by Example",desc:"How to fix “Ambiguous reference to member 'buildBlock()'”",link:"/hackingwithswift.com/swiftui/how-to-fix-ambiguous-reference-to-member-buildblock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,i(a({title:"How to add Metal shaders to SwiftUI views using layer effects | SwiftUI by Example",desc:"How to add Metal shaders to SwiftUI views using layer effects",link:"/hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const F=c(g,[["render",I],["__file","formatting-interpolated-strings-in-swiftui.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/swiftui/formatting-interpolated-strings-in-swiftui.html","title":"Formatting interpolated strings in SwiftUI","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Formatting interpolated strings in SwiftUI","description":"Article(s) > Formatting interpolated strings in SwiftUI","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Formatting interpolated strings in SwiftUI"},{"property":"og:description","content":"Formatting interpolated strings in SwiftUI"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/formatting-interpolated-strings-in-swiftui.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/formatting-interpolated-strings-in-swiftui.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Formatting interpolated strings in SwiftUI"}],["meta",{"property":"og:description","content":"Article(s) > Formatting interpolated strings in SwiftUI"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/2-14~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Formatting interpolated strings in SwiftUI\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/2-14~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.81,"words":543},"filePathRelative":"hackingwithswift.com/swiftui/formatting-interpolated-strings-in-swiftui.md","excerpt":"\\n"}');export{F as comp,A as data};
