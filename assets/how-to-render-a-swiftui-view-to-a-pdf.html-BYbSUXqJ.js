import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,t as r,e as s,n as t,g as e,d as u,f as d,r as i,o as k}from"./app-BgNevrm5.js";const w={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),v=d(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 16</strong></p><p>SwiftUI’s <code>ImageRenderer</code> class can render views any SwiftUI views to PDFs, and yes: all the text and shapes remain vectors, so they scale up beautifully.</p><p>Creating a PDF with <code>ImageRenderer</code> takes eight steps:</p><ol><li>Deciding which views you want to render.</li><li>Creating a URL where SwiftUI can write the image data.</li><li>Calling <code>render()</code> on the image renderer to start your rendering code.</li><li>Telling SwiftUI how big you want the PDF to be. This might be a fixed size like A4 or US Letter, or might be the size of the view hierarchy you’re rendering.</li><li>Create a <code>CGContext</code> object to handle the PDF pages.</li><li>Starting a new page.</li><li>Rendering the SwiftUI views onto that page.</li><li>Ending the page and closing the PDF document.</li></ol><p>Once that finishes the PDF URL is yours to do with as you please.</p><p>I know that sounds like a lot of work, but the total amount of code isn’t so bad. Here’s a complete example that renders a view to a PDF to be exported using <code>ShareLink</code>, with comments matching the explanation above:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@MainActor</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ShareLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Export PDF&quot;</span></span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">URL</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1: Render Hello World with some modifiers</span></span>
<span class="line">        <span class="token keyword">let</span> renderer <span class="token operator">=</span> <span class="token class-name">ImageRenderer</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2: Save it to our documents directory</span></span>
<span class="line">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span>documentsDirectory<span class="token punctuation">.</span><span class="token function">appending</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;output.pdf&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3: Start the rendering process</span></span>
<span class="line">        renderer<span class="token punctuation">.</span>render <span class="token punctuation">{</span> size<span class="token punctuation">,</span> context <span class="token keyword">in</span></span>
<span class="line">            <span class="token comment">// 4: Tell SwiftUI our PDF should be the same size as the views we&#39;re rendering</span></span>
<span class="line">            <span class="token keyword">var</span> box <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 5: Create the CGContext for our PDF pages</span></span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> pdf <span class="token operator">=</span> <span class="token class-name">CGContext</span><span class="token punctuation">(</span>url <span class="token keyword">as</span> <span class="token constant">CFURL</span><span class="token punctuation">,</span> mediaBox<span class="token punctuation">:</span> <span class="token operator">&amp;</span>box<span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 6: Start a new PDF page</span></span>
<span class="line">            pdf<span class="token punctuation">.</span><span class="token function">beginPDFPage</span><span class="token punctuation">(</span><span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 7: Render the SwiftUI view data onto the page</span></span>
<span class="line">            <span class="token function">context</span><span class="token punctuation">(</span>pdf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 8: End the page and close the file</span></span>
<span class="line">            pdf<span class="token punctuation">.</span><span class="token function">endPDFPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            pdf<span class="token punctuation">.</span><span class="token function">closePDF</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> url</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),b={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-render-a-swiftui-view-to-a-pdf-1.zip",target:"_blank",rel:"noopener noreferrer"},y={class:"hint-container details"},S=n("summary",null,"Similar solutions…",-1);function U(o,x){const a=i("VPCard"),p=i("FontIcon");return k(),l("div",null,[n("h1",m,[n("a",h,[n("span",null,r(o.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,g,s(a,t(e({title:"How to render a SwiftUI view to a PDF | SwiftUI by Example",desc:"How to render a SwiftUI view to a PDF",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-render-a-swiftui-view-to-a-pdf",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("blockquote",null,[n("p",null,[n("a",b,[s(p,{icon:"fas fa-file-zipper"}),u("Download this as an Xcode project")])])]),n("details",y,[S,s(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to convert a SwiftUI view to an image | SwiftUI by Example",desc:"How to convert a SwiftUI view to an image",link:"/hackingwithswift.com/swiftui/how-to-convert-a-swiftui-view-to-an-image.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to render Markdown content in text | SwiftUI by Example",desc:"How to render Markdown content in text",link:"/hackingwithswift.com/swiftui/how-to-render-markdown-content-in-text.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to render a gradient | SwiftUI by Example",desc:"How to render a gradient",link:"/hackingwithswift.com/swiftui/how-to-render-a-gradient.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to render images using SF Symbols | SwiftUI by Example",desc:"How to render images using SF Symbols",link:"/hackingwithswift.com/swiftui/how-to-render-images-using-sf-symbols.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const P=c(w,[["render",U],["__file","how-to-render-a-swiftui-view-to-a-pdf.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-render-a-swiftui-view-to-a-pdf.html","title":"How to render a SwiftUI view to a PDF","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to render a SwiftUI view to a PDF","description":"Article(s) > How to render a SwiftUI view to a PDF","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to render a SwiftUI view to a PDF"},{"property":"og:description","content":"How to render a SwiftUI view to a PDF"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-render-a-swiftui-view-to-a-pdf.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-render-a-swiftui-view-to-a-pdf.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to render a SwiftUI view to a PDF"}],["meta",{"property":"og:description","content":"Article(s) > How to render a SwiftUI view to a PDF"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to render a SwiftUI view to a PDF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.34,"words":701},"filePathRelative":"hackingwithswift.com/swiftui/how-to-render-a-swiftui-view-to-a-pdf.md","excerpt":"\\n"}');export{P as comp,D as data};
