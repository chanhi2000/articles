import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as m,e as a,n as g,g as k,w as e,d as s,f as h,r as p,o as y}from"./app-BgNevrm5.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},M=n("hr",null,null,-1),_=n("p",null,"In this article, we’ll take a look at what property mappings are and how to retrieve them from AutoMapper.",-1),A=n("p",null,"AutoMapper is a free .NET library that streamlines object mapping, reducing manual coding to boost development speed and minimize the risk of errors. Additionally, it offers versatile configuration options and supports complex needs like conditional mapping, custom transformations, and error handling.",-1),P={class:"hint-container note"},x=n("p",{class:"hint-container-title"},"Note",-1),C={href:"https://github.com/CodeMazeBlog/CodeMazeGuides/tree/main/dotnet-client-libraries/GettingPropertyMappingsWithAutomapper",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"CodeMazeBlog/CodeMazeGuides",-1),R=n("p",null,"Let’s start",-1),F=n("hr",null,null,-1),T=n("h2",{id:"using-automapper-to-map-classes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#using-automapper-to-map-classes"},[n("span",null,"Using AutoMapper to Map Classes")])],-1),S=h(`<h3 id="creating-a-basic-mapping-configuration" tabindex="-1"><a class="header-anchor" href="#creating-a-basic-mapping-configuration"><span>Creating a Basic Mapping Configuration</span></a></h3><p>First, we have two classes to be mapped, <code>Source</code> and <code>Destination</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Source</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Destination</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FullName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> YearsOld <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, there is a mapping profile:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProfile</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Profile</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">MyProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Destination<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>YearsOld<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that <strong>if we don’t explicitly call the <code>ForMember()</code> method to specify the fields to be mapped, AutoMapper will look for properties or fields with the same name</strong> in the <code>Source</code> and <code>Destination</code>classes.</p><p>Finally, we have a new <code>MapperConfiguration</code> in the <code>Program</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    cfg<span class="token punctuation">.</span><span class="token function">AddProfile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performing-mapping-operations" tabindex="-1"><a class="header-anchor" href="#performing-mapping-operations"><span>Performing Mapping Operations</span></a></h3><p>Now let’s map an instance of the <code>Source</code> class to the <code>Destination</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">CreateMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Source</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span>Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> destination <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Destination<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">destination<span class="token punctuation">.</span>FullName</span><span class="token punctuation">}</span></span><span class="token string">, Age: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">destination<span class="token punctuation">.</span>YearsOld</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, we build the <code>IMapper</code> object. Then we create an instance of <code>Source</code> as the source object and use the <code>Map()</code> method of the <code>IMapper</code> object to produce a <code>Destination</code> object. Finally, we output the properties of the mapped object to verify that the mapping operation was successful.</p><p>Let’s run the application and verify that the console displays the values of <code>FullName</code> and <code>YearsOld</code> in the mapped <code>Destination</code> object:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Name: Jack, Age: 20</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="what-are-property-mappings" tabindex="-1"><a class="header-anchor" href="#what-are-property-mappings"><span>What Are Property Mappings?</span></a></h2><p>Now let’s take a look at property mappings, which represent the relationship of properties between source and target objects.</p><p><strong>In AutoMapper, when we create a mapping configuration between two types, we define a series of mappings between source and target object properties.</strong> These property mappings define the rules for converting object properties correctly and can be as straightforward or complex as necessary.</p><hr><h2 id="getting-property-mappings" tabindex="-1"><a class="header-anchor" href="#getting-property-mappings"><span>Getting Property Mappings</span></a></h2><p><strong>The ability to retrieve property mappings helps us debug complex mapping configurations, generate test cases based on mapping relationships, and dynamically adjust mapping rules to conditions at runtime.</strong></p><p>In AutoMapper, we get the defined property mappings by calling the <code>GetAllTypeMaps()</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> typeMaps <span class="token operator">=</span> mapper<span class="token punctuation">.</span>ConfigurationProvider<span class="token punctuation">.</span><span class="token function">Internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAllTypeMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> typeMap <span class="token keyword">in</span> typeMaps<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> memberMap <span class="token keyword">in</span> typeMap<span class="token punctuation">.</span>MemberMaps<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">typeMap<span class="token punctuation">.</span>SourceType<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">memberMap<span class="token punctuation">.</span>SourceMember<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span></span>
<span class="line">            <span class="token operator">+</span> <span class="token interpolation-string"><span class="token string">$&quot;is mapped to </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">typeMap<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">memberMap</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we retrieve a <code>TypeMap</code> collection, where each <code>TypeMap</code> represents a specific mapping relationship between two classes.</p><p>The <code>typeMap.MemberMaps</code> collection represents the mapped properties. <code>typeMap.SourceType.Name</code> returns the source class name, while <code>memberMap.SourceMember.Name</code> gets the mapped source property. <code>typeMap.DestinationType.Name</code> returns the destination class name and finally, <code>memberMap</code> gets the mapped destination property.</p><p>Let’s rerun the application to see the mapped relationships:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Name: Jack, Age: 20</span>
<span class="line">Source.Name is mapped to Destination.FullName</span>
<span class="line">Source.Age is mapped to Destination.YearsOld</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we only created a single map in the <code>MyProfile</code> class between two classes. Had we created additional mappings between other classes, <code>GetAllTypeMaps()</code> would also have retrieved those relationships. Subsequently, we would have seen those additional relationships displayed in the console.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we covered the basic usage of AutoMapper, as well as property mappings and why being able to retrieve them is important. Finally, we learned how to get property mappings through a simple example.</p>`,31);function z(o,j){const i=p("VPCard"),t=p("router-link"),c=p("SiteInfo"),l=p("FontIcon"),r=p("RouteLink");return y(),d("div",null,[n("h1",b,[n("a",f,[n("span",null,m(o.$frontmatter.title)+" 관련",1)])]),a(i,g(k({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[a(t,{to:"#using-automapper-to-map-classes"},{default:e(()=>[s("Using AutoMapper to Map Classes")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#creating-a-basic-mapping-configuration"},{default:e(()=>[s("Creating a Basic Mapping Configuration")]),_:1})]),n("li",null,[a(t,{to:"#performing-mapping-operations"},{default:e(()=>[s("Performing Mapping Operations")]),_:1})])])]),n("li",null,[a(t,{to:"#what-are-property-mappings"},{default:e(()=>[s("What Are Property Mappings?")]),_:1})]),n("li",null,[a(t,{to:"#getting-property-mappings"},{default:e(()=>[s("Getting Property Mappings")]),_:1})]),n("li",null,[a(t,{to:"#conclusion"},{default:e(()=>[s("Conclusion")]),_:1})])])]),M,a(c,{name:"Using Property Mappings in AutoMapper To Define Mapping Rules",desc:"AutoMapper allows us to map two objects. Let's take a look at how to get the property mappings that have been defined using AutoMapper.",url:"https://code-maze.com/csharp-getting-property-mappings-from-automapper/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/code-maze.com/csharp-getting-property-mappings-from-automapper/banner.png"}),_,A,n("div",P,[x,n("p",null,[s("To download the source code for this article, you can visit our "),n("a",C,[s("GitHub repository ("),a(l,{icon:"iconfont icon-github"}),N,s(")")]),s(".")])]),R,F,T,n("p",null,[s("We already have prepared a basic mapping functionality, so let’s check that out. If you haven’t used AutoMapper before, check out this article first "),a(r,{to:"/code-maze.com/automapper-net-core.html"},{default:e(()=>[s("Getting Started with AutoMapper in ASP.NET Core")]),_:1}),s(".")]),S])}const G=u(v,[["render",z],["__file","csharp-getting-property-mappings-from-automapper.html.vue"]]),I=JSON.parse('{"path":"/code-maze.com/csharp-getting-property-mappings-from-automapper.html","title":"Represent the Relationship of Properties Using Property Mappings From AutoMapper","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Represent the Relationship of Properties Using Property Mappings From AutoMapper","description":"Article(s) > Represent the Relationship of Properties Using Property Mappings From AutoMapper","icon":"iconfont icon-csharp","category":["C#","Article(s)"],"tag":["blog","code-maze.com","csharp"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Represent the Relationship of Properties Using Property Mappings From AutoMapper"},{"property":"og:description","content":"Represent the Relationship of Properties Using Property Mappings From AutoMapper"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-getting-property-mappings-from-automapper.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-getting-property-mappings-from-automapper.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Represent the Relationship of Properties Using Property Mappings From AutoMapper"}],["meta",{"property":"og:description","content":"Article(s) > Represent the Relationship of Properties Using Property Mappings From AutoMapper"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-getting-property-mappings-from-automapper/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-getting-property-mappings-from-automapper/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Represent the Relationship of Properties Using Property Mappings From AutoMapper"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:published_time","content":"2024-04-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Represent the Relationship of Properties Using Property Mappings From AutoMapper\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-getting-property-mappings-from-automapper/banner.png\\"],\\"datePublished\\":\\"2024-04-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/cs/articles/README.md","date":"2024-04-21T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/code-maze.com/csharp-getting-property-mappings-from-automapper/banner.png"},"headers":[{"level":2,"title":"Using AutoMapper to Map Classes","slug":"using-automapper-to-map-classes","link":"#using-automapper-to-map-classes","children":[{"level":3,"title":"Creating a Basic Mapping Configuration","slug":"creating-a-basic-mapping-configuration","link":"#creating-a-basic-mapping-configuration","children":[]},{"level":3,"title":"Performing Mapping Operations","slug":"performing-mapping-operations","link":"#performing-mapping-operations","children":[]}]},{"level":2,"title":"What Are Property Mappings?","slug":"what-are-property-mappings","link":"#what-are-property-mappings","children":[]},{"level":2,"title":"Getting Property Mappings","slug":"getting-property-mappings","link":"#getting-property-mappings","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.81,"words":844},"filePathRelative":"code-maze.com/csharp-getting-property-mappings-from-automapper.md","localizedDate":"2024년 4월 21일","excerpt":"\\n"}');export{G as comp,I as data};
