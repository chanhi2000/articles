import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as t,g as e,d as o,a as d,f as k,r as p,o as h}from"./app-BgNevrm5.js";const m={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.9")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0381-task-group-discard-results.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),T=k(`<p>When using the original <code>withTaskGroup()</code> API, a problem can occurs because of the way Swift only discards a child task and its resulting data when we call <code>next()</code> or loop over the task group’s children. Calling <code>next()</code> will cause your code to suspend if all child tasks are currently executing, so we hit the problem: you want a server that’s always listening for connections so you can add tasks to process them, but you also need to stop every so often to clean up old tasks that have completed.</p><p>There was no clean solution to this until Swift 5.9, which adds <code>withDiscardingTaskGroup()</code> and <code>withThrowingDiscardingTaskGroup()</code> functions that create new <em>discarding</em> task groups. These are task groups that automatically discard and destroy each task as soon as it completes, without us needing to call <code>next()</code> to consume it manually.</p><p>To give you an idea of what triggers the problem, we could implement a naive directory watcher that loops forever and reports back the names of any files or directories that have been added or removed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">FileWatcher</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The URL we&#39;re watching for file changes.</span></span>
<span class="line">    <span class="token keyword">let</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// The set of URLs we&#39;ve already returned.</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> handled <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token constant">URL</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token constant">URL</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Read the latest contents of our directory, or exit if a problem occurred.</span></span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> contents <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">contentsOfDirectory</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> url<span class="token punctuation">,</span> includingPropertiesForKeys<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Figure out which URLs we haven&#39;t already handled.</span></span>
<span class="line">            <span class="token keyword">let</span> unhandled <span class="token operator">=</span> handled<span class="token punctuation">.</span><span class="token function">symmetricDifference</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">let</span> newURL <span class="token operator">=</span> unhandled<span class="token punctuation">.</span>first <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// If we already handled this URL then it must be deleted.</span></span>
<span class="line">                <span class="token keyword">if</span> handled<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>newURL<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    handled<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>newURL<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// Otherwise this URL is new, so mark it as handled.</span></span>
<span class="line">                    handled<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newURL<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span> newURL</span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// No file difference; sleep for a few seconds then try again.</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">microseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could then use that from inside a simple app, although for brevity we’ll just print the URLs rather than do any actual complicated processing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">FileProcessor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token class-name">FileWatcher</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>filePath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;/Users/twostraws&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">withThrowingTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Void</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token keyword">let</span> newURL <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> watcher<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">process</span><span class="token punctuation">(</span>newURL<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Processing </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">url<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will run forever, or at least until either the user terminates the program or the directory we’re watching stops being accessible. However, because it uses <code>withThrowingTaskGroup()</code> it has a problem: a new child task is created every time <code>addTask()</code> is called, but because it doesn’t call <code>group.next()</code> anywhere those child tasks are never destroyed. Little by little – maybe only a few hundred bytes each time – this code will eat more and more memory until eventually the operating system runs out of RAM and is forced to terminate the program.</p><p>This problem goes away entirely with discarding task groups: just replacing <code>withThrowingTaskGroup(of: Void.self)</code> with <code>withThrowingDiscardingTaskGroup</code> means each child task is automatically destroyed as soon as its work finishes.</p><p>In practice, this problem is mainly going to be faced by server code, where the server must be able to accept new connections while handling existing ones smoothly.</p>`,9),R={class:"hint-container details"},S=n("summary",null,"Other Changes in Swift 5.9",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-8-to-5-9.playground.zip",target:"_blank",rel:"noopener noreferrer"};function C(c,D){const a=p("VPCard"),i=p("FontIcon");return h(),r("div",null,[n("h1",g,[n("a",w,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,v,s(a,t(e({title:"Discarding task groups | Changes in Swift 5.9",desc:"Discarding task groups",link:"https://hackingwithswift.com/swift/5.9/discarding-task-groups",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",y,[o("SE-0381 ("),s(i,{icon:"iconfont icon-github"}),_,o(")")]),o(" adds new discardable task groups that fix an important gap in the current API: tasks that are created inside a task group are automatically discarded and destroyed as soon as they finish, which means task groups that run for extended periods of time (or perhaps forever, as in the case of a web server) won’t leak memory over time.")]),T,n("details",R,[S,s(a,t(e({title:"if and switch expressions | Changes in Swift 5.9",desc:"if and switch expressions",link:"/hackingwithswift.com/swift/5.9/if-switch-expressions.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Value and Type Parameter Packs | Changes in Swift 5.9",desc:"Value and Type Parameter Packs",link:"/hackingwithswift.com/swift/5.9/variadic-generics.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Macros | Changes in Swift 5.9",desc:"Macros",link:"/hackingwithswift.com/swift/5.9/macros.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Noncopyable structs and enums | Changes in Swift 5.9",desc:"Noncopyable structs and enums",link:"/hackingwithswift.com/swift/5.9/noncopyable-structs-and-enums.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"consume operator to end the lifetime of a variable binding | Changes in Swift 5.9",desc:"consume operator to end the lifetime of a variable binding",link:"/hackingwithswift.com/swift/5.9/consume-operator.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Convenience Async[Throwing]Stream.makeStream methods | Changes in Swift 5.9",desc:"Convenience Async[Throwing]Stream.makeStream methods",link:"/hackingwithswift.com/swift/5.9/convenience-asyncthrowingstream-makestream.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"Add sleep(for:) to Clock | Changes in Swift 5.9",desc:"Add sleep(for:) to Clock",link:"/hackingwithswift.com/swift/5.9/sleep-for-clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Discarding task groups | Changes in Swift 5.9",
  "desc": "Discarding task groups",
  "link": "/hackingwithswift.com/swift/5.9/discarding-task-groups.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n("p",null,[n("a",x,[s(i,{icon:"fas fa-file-zipper"}),o("Download Swift 5.9 playground")])])])])}const P=l(m,[["render",C],["__file","discarding-task-groups.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/swift/5.9/discarding-task-groups.html","title":"Discarding task groups","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Discarding task groups","description":"Article(s) > Discarding task groups","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.9"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Discarding task groups"},{"property":"og:description","content":"Discarding task groups"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.9/discarding-task-groups.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.9/discarding-task-groups.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Discarding task groups"}],["meta",{"property":"og:description","content":"Article(s) > Discarding task groups"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.9"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Discarding task groups\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swift/5.8/lift-result-builder-limitations.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.28,"words":983},"filePathRelative":"hackingwithswift.com/swift/5.9/discarding-task-groups.md","excerpt":"\\n"}');export{P as comp,A as data};
