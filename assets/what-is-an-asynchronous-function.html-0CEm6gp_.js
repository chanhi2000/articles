import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as h,e as s,n as t,g as e,d as i,f as o,r,o as d}from"./app-BgNevrm5.js";const f={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),g=o(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Although Swift functions are synchronous by default, we can make them <em>asynchronous</em> by adding one keyword: <code>async</code>. Inside asynchronous functions, we can call other asynchronous functions using a second keyword: <code>await</code>. As a result, you’ll often hear Swift developers talk about async/await as a way of coding.</p><p>So, this is a synchronous function that rolls a virtual dice and returns its result:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">randomD6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">randomD6</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b={href:"https://hackingwithswift.com/files/projects/concurrency/what-is-an-asynchronous-function-1.zip",target:"_blank",rel:"noopener noreferrer"},v=o(`<p>And this is an <em>asynchronous</em> or <em>async</em> function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">randomD6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">randomD6</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_={href:"https://hackingwithswift.com/files/projects/concurrency/what-is-an-asynchronous-function-2.zip",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>The only part of the code that changed is adding the <code>async</code> keyword before the return type and the <code>await</code> keyword before calling it, but those changes tell us three important things about async functions.</p><p>First, <code>async</code> is part of the function’s <em>type</em>. The original, synchronous function returns an integer, which means we can’t use it in a place that expects it to return a string. However, by marking the code <code>async</code> we’ve now made it an <em>asynchronous</em> function that returns an integer, which means we can’t use it in a place that expects a <em>synchronous</em> function that returns an integer.</p><p>This is what I mean when I say that the async nature of the function is part of its type: it affects the way we refer to the function everywhere else in our code. This is exactly how <code>throws</code> works – you can’t use a throwing function in a place that expects a non-throwing function.</p><p>Second, notice that the work inside our function hasn’t actually changed. The same work is being done as before: this function doesn’t actually use the <code>await</code> keyword at all, and that’s okay. You see, marking a function with <code>async</code> means it <em>might</em> do asynchronous work, not that it must. Again, the same is true of <code>throws</code> – some paths through a function might throw, but others might not.</p><p>A third key difference arises when we <em>call</em> <code>randomD6()</code>, because we need to do so asynchronously. Swift provides a few ways we can do this, but in our example we used <code>await</code>, which means “run this function asynchronously and wait for its result to come back before continuing.”</p><p>So, what’s the <em>actual difference</em> between synchronous and asynchronous functions? To answer that, I want to show you a real function that does some async work to fetch a file from a web server:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fetchNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Data</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/news-1.json&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> data</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to fetch data&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Downloaded </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">data<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> bytes&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Download failed.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),S={href:"https://hackingwithswift.com/files/projects/concurrency/what-is-an-asynchronous-function-3.zip",target:"_blank",rel:"noopener noreferrer"},A=o("<p>Later on we’ll be digging in more to how that actually works, but for now what matters is that the <code>URLSession.shared.data(from:)</code> method we call is asynchronous – its job is to fetch some data from a web server, without causing the whole program to freeze up.</p><p>We’ve already seen that synchronous functions cause <em>blocking</em>, which leads to performance problems. Async functions do <em>not</em> block: when we call them with <code>await</code> we are marking a suspension point, which is a place where the function can suspend itself – literally stop running – so that other work can happen. At some point in the future the function’s work completes, and Swift will wake it back up out of its “suspended animation”-like existence and it will carry on working.</p><p>This might sound simple on paper, but in practice it’s very clever.</p><p>First, when an async function is suspended, all the async functions that called it are also suspended; they all wait quietly while the async work happens, then resume later on. This is really important: async functions have this special ability to be suspended that regular synchronous functions do not. It’s for this reason that synchronous functions cannot call async functions directly – they don’t know how to suspend themselves.</p><p>Second, a function can be suspended as many times as is needed, but it won’t happen without you writing <code>await</code> there – functions won’t suspend themselves by surprise.</p><p>Third, a function that is suspended does <em>not</em> block the thread it’s running on, and instead it gives up that thread so that Swift can do other work instead. Note: Although we can tell Swift how important many tasks are, we don’t get to decide exactly how the system schedules our work – it automatically takes care of all the threads working under the hood. This means if we call async function A without waiting for its result, then a moment later call async function B, it’s entirely possible B will start running before A does.</p><p>Fourth, when the function resumes, it might be running on the same thread as before, but it might not; Swift gets to choose, and you shouldn’t make any assumptions here. This means by the time your function resumes all sorts of things might have changed in your program – a few milliseconds might have passed, or perhaps 20 seconds or more.</p><p>And finally, I know I’m repeating myself, but this matters: just because a function is async doesn’t mean it <em>will</em> suspend – the <code>await</code> keyword only marks a <em>potential suspension point</em>. Most of the time Swift knows perfectly well that the function we’re calling is async, so this <code>await</code> keyword is as much for us as it is for the compiler – it’s a way of clearly marking which parts of the function might suspend, so you can know for sure which parts of the function run as one atomic chunk. (“Atomic” is a fancy word meaning “indivisible” – a chunk of work where all lines of code will execute without being interrupted by other code running.) This requirement for <code>await</code> is identical to the requirement for <code>try</code>, where we must mark each line of code that might throw errors.</p><p>So, async functions are like regular functions, except they have a superpower: if they need to, they can suspend themselves and all their callers, freeing up their thread to do other work.</p>",9),q={class:"hint-container details"},T=n("summary",null,"Similar solutions…",-1);function W(p,D){const a=r("VPCard"),c=r("FontIcon");return d(),u("div",null,[n("h1",m,[n("a",k,[n("span",null,h(p.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"Swift Concurrency by Example",desc:"Back to Home",link:"/hackingwithswift.com/concurrency/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,y,s(a,t(e({title:"What is an asynchronous function? | Swift Concurrency by Example",desc:"What is an asynchronous function?",link:"https://hackingwithswift.com/quick-start/concurrency/what-is-an-asynchronous-function",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,n("blockquote",null,[n("p",null,[n("a",b,[s(c,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),v,n("blockquote",null,[n("p",null,[n("a",_,[s(c,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),x,n("blockquote",null,[n("p",null,[n("a",S,[s(c,{icon:"fas fa-file-zipper"}),i("Download this as an Xcode project")])])]),A,n("details",q,[T,s(a,t(e({title:"What’s the performance cost of calling an async function? | Swift Concurrency by Example",desc:"What’s the performance cost of calling an async function?",link:"/hackingwithswift.com/concurrency/whats-the-performance-cost-of-calling-an-async-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"What calls the first async function? | Swift Concurrency by Example",desc:"What calls the first async function?",link:"/hackingwithswift.com/concurrency/what-calls-the-first-async-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to fix the error “async call in a function that does not support concurrency” | Swift Concurrency by Example",desc:"How to fix the error “async call in a function that does not support concurrency”",link:"/hackingwithswift.com/concurrency/how-to-fix-the-error-async-call-in-a-function-that-does-not-support-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"What is a synchronous function? | Swift Concurrency by Example",desc:"What is a synchronous function?",link:"/hackingwithswift.com/concurrency/what-is-a-synchronous-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create and call an async function | Swift Concurrency by Example",desc:"How to create and call an async function",link:"/hackingwithswift.com/concurrency/how-to-create-and-call-an-async-function.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const C=l(f,[["render",W],["__file","what-is-an-asynchronous-function.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/concurrency/what-is-an-asynchronous-function.html","title":"What is an asynchronous function?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What is an asynchronous function?","description":"Article(s) > What is an asynchronous function?","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What is an asynchronous function?"},{"property":"og:description","content":"What is an asynchronous function?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/what-is-an-asynchronous-function.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/concurrency/what-is-an-asynchronous-function.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What is an asynchronous function?"}],["meta",{"property":"og:description","content":"Article(s) > What is an asynchronous function?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2021-11-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is an asynchronous function?\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2021-11-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.81,"words":1444},"filePathRelative":"hackingwithswift.com/concurrency/what-is-an-asynchronous-function.md","localizedDate":"2021년 11월 28일","excerpt":"\\n"}');export{C as comp,E as data};
