import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as c,e as s,n as o,g as n,a as e,r as g,o as p}from"./app-BgNevrm5.js";const m={},u={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},f=t("nav",{class:"table-of-contents"},[t("ul")],-1),y=t("hr",null,null,-1),d=t("blockquote",null,[t("p",null,"Available from iOS 8.0")],-1),w=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),e(`
/example-code/language/how-to-safely-use-reference-types-inside-value-types-with-isknownuniquelyreferenced">How to safely use reference types inside value types with isKnownUniquelyReferenced() 
/quick-start/swiftui/swiftui-tips-and-tricks">SwiftUI tips and tricks 
/example-code/strings/how-to-concatenate-strings-to-make-one-joined-string">How to concatenate strings to make one joined string 
/quick-start/concurrency/how-to-handle-different-result-types-in-a-task-group">How to handle different result types in a task group 
/quick-start/swiftui/how-to-create-multi-column-lists-using-table">How to create multi-column lists using Table</a>
`)],-1);function k(r,b){const i=g("VPCard");return p(),l("div",null,[t("h1",u,[t("a",h,[t("span",null,c(r.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),s(i,o(n({title:"Language - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/language/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,y,s(i,o(n({title:"How to make custom types from strings using ExpressibleByStringLiteral | Language - free Swift example code",desc:"How to make custom types from strings using ExpressibleByStringLiteral",link:"https://hackingwithswift.com/example-code/language/how-to-make-custom-types-from-strings-using-expressiblebystringliteral",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),d,e(" TODO: ÏûëÏÑ± "),e(' \nSwift‚Äôs `ExpressibleByStringLiteral` protocol lets us create any type directly from a string ‚Äì as long as Swift understands what type you mean, you can create whatever you want.\n\nFor example, if you regularly hard-code URLs and are tired of force unwrapping them when you know they are definitely correct, you can make `URL` conform to `ExpressibleByStringLiteral` so that URLs can be created directly from strings:\n\n```swift\nextension URL: ExpressibleByStringLiteral {\n    public init(stringLiteral value: String) {\n        self = URL(string: value)!\n    }\n}\n```\n\nWith that extension in place you can now write code like this:\n\n```swift\nlet url: URL = "https://www.hackingwithswift.com"\nprint(url.absoluteString)\n```\n\nNotice that I‚Äôve clearly marked `url` as being of type `URL` so that Swift doesn‚Äôt think it‚Äôs a regular string.\n\n'),w])}const _=a(m,[["render",k],["__file","how-to-make-custom-types-from-strings-using-expressiblebystringliteral.html.vue"]]),L=JSON.parse('{"path":"/hackingwithswift.com/example-code/language/how-to-make-custom-types-from-strings-using-expressiblebystringliteral.html","title":"How to make custom types from strings using ExpressibleByStringLiteral","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to make custom types from strings using ExpressibleByStringLiteral","description":"Article(s) > How to make custom types from strings using ExpressibleByStringLiteral","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-8.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to make custom types from strings using ExpressibleByStringLiteral"},{"property":"og:description","content":"How to make custom types from strings using ExpressibleByStringLiteral"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-make-custom-types-from-strings-using-expressiblebystringliteral.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/language/how-to-make-custom-types-from-strings-using-expressiblebystringliteral.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to make custom types from strings using ExpressibleByStringLiteral"}],["meta",{"property":"og:description","content":"Article(s) > How to make custom types from strings using ExpressibleByStringLiteral"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-8.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to make custom types from strings using ExpressibleByStringLiteral\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2019-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"hackingwithswift.com/example-code/language/how-to-make-custom-types-from-strings-using-expressiblebystringliteral.md","localizedDate":"2019ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{_ as comp,L as data};
