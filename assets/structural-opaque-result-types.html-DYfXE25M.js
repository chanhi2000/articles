import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as u,e as n,n as t,g as a,d as i,a as d,f as k,r as l,o as g}from"./app-BgNevrm5.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},w=e("nav",{class:"table-of-contents"},[e("ul")],-1),b=e("hr",null,null,-1),v=e("blockquote",null,[e("p",null,"Available from Swift 5.7")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0328-structural-opaque-result-types.md",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"apple/swift-evolution",-1),S=k(`<p>For example, we can now return more than one opaque type at a time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">showUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">some</span> <span class="token class-name">Equatable</span><span class="token punctuation">,</span> <span class="token keyword">some</span> <span class="token class-name">Equatable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Username&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can also return opaque types:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token keyword">some</span> <span class="token class-name">View</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> usernames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;@frankefoster&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;@mikaela__caron&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;@museumshuffle&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> usernames<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or even send back a function that itself returns an opaque type when called:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createDiceRoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> diceRoll <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>diceRoll<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, this is another great example of Swift harmonizing the language to make things consistently possible.</p>`,7),_={class:"hint-container details"},x=e("summary",null,"Other Changes in Swift 5.7",-1),C={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-6-to-5-7.playground.zip",target:"_blank",rel:"noopener noreferrer"};function R(c,I){const s=l("VPCard"),o=l("FontIcon");return g(),r("div",null,[e("h1",f,[e("a",m,[e("span",null,u(c.$frontmatter.title)+" 관련",1)])]),n(s,t(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,n(s,t(a({title:"Structural opaque result types | Changes in Swift 5.7",desc:"Structural opaque result types",link:"https://hackingwithswift.com/swift/5.7/structural-opaque-result-types",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,e("p",null,[e("a",y,[i("SE-0328 ("),n(o,{icon:"iconfont icon-github"}),q,i(")")]),i(" widens the range of places that opaque result types can be used.")]),S,e("details",_,[x,n(s,t(a({title:"if let shorthand for unwrapping optionals | Changes in Swift 5.7",desc:"if let shorthand for unwrapping optionals",link:"/hackingwithswift.com/swift/5.7/if-let-shorthand.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Multi-statement closure type inference | Changes in Swift 5.7",desc:"Multi-statement closure type inference",link:"/hackingwithswift.com/swift/5.7/multi-statement-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Clock, Instant, and Duration | Changes in Swift 5.7",desc:"Clock, Instant, and Duration",link:"/hackingwithswift.com/swift/5.7/clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Regular expressions | Changes in Swift 5.7",desc:"Regular expressions",link:"/hackingwithswift.com/swift/5.7/regexes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Type inference from default expressions | Changes in Swift 5.7",desc:"Type inference from default expressions",link:"/hackingwithswift.com/swift/5.7/default-type-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Concurrency in top-level code | Changes in Swift 5.7",desc:"Concurrency in top-level code",link:"/hackingwithswift.com/swift/5.7/top-level-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Opaque parameter declarations | Changes in Swift 5.7",desc:"Opaque parameter declarations",link:"/hackingwithswift.com/swift/5.7/opaque-parameter-declarations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Structural opaque result types | Changes in Swift 5.7",
  "desc": "Structural opaque result types",
  "link": "/hackingwithswift.com/swift/5.7/structural-opaque-result-types.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(s,t(a({title:"Unlock existentials for all protocols | Changes in Swift 5.7",desc:"Unlock existentials for all protocols",link:"/hackingwithswift.com/swift/5.7/unlock-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Lightweight same-type requirements for primary associated types | Changes in Swift 5.7",desc:"Lightweight same-type requirements for primary associated types",link:"/hackingwithswift.com/swift/5.7/primary-associated-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Constrained existential types | Changes in Swift 5.7",desc:"Constrained existential types",link:"/hackingwithswift.com/swift/5.7/constrained-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Distributed actor isolation | Changes in Swift 5.7",desc:"Distributed actor isolation",link:"/hackingwithswift.com/swift/5.7/distributed-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"buildPartialBlock for result builders | Changes in Swift 5.7",desc:"buildPartialBlock for result builders",link:"/hackingwithswift.com/swift/5.7/buildpartialblock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Implicitly opened existentials | Changes in Swift 5.7",desc:"Implicitly opened existentials",link:"/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,t(a({title:"Unavailable from async attribute | Changes in Swift 5.7",desc:"Unavailable from async attribute",link:"/hackingwithswift.com/swift/5.7/noasync.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e("p",null,[e("a",C,[n(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.7 playground")])])])])}const D=p(h,[["render",R],["__file","structural-opaque-result-types.html.vue"]]),A=JSON.parse('{"path":"/hackingwithswift.com/swift/5.7/structural-opaque-result-types.html","title":"Structural opaque result types","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Structural opaque result types","description":"Article(s) > Structural opaque result types","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.7"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Structural opaque result types"},{"property":"og:description","content":"Structural opaque result types"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/structural-opaque-result-types.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/structural-opaque-result-types.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Structural opaque result types"}],["meta",{"property":"og:description","content":"Article(s) > Structural opaque result types"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.7"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Structural opaque result types\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.31,"words":693},"filePathRelative":"hackingwithswift.com/swift/5.7/structural-opaque-result-types.md","excerpt":"\\n"}');export{D as comp,A as data};
