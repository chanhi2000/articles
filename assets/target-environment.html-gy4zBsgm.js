import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as e,g as t,d as i,a as u,f as m,r as c,o as k}from"./app-BgNevrm5.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 4.1")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),C=n("code",null,"targetEnvironment",-1),I=m(`<p>At this time <code>targetEnvironment</code> has only one value, <code>simulator</code>, which will be true if your build is targeting a simulated device such as the iOS Simulator. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token directive property"><span class="token directive-name">#if</span> targetEnvironment<span class="token punctuation">(</span>simulator<span class="token punctuation">)</span></span></span>
<span class="line">   <span class="token comment">// code for the simulator here</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">   <span class="token comment">// code for real devices here</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is useful when writing code to deal with functionality the simulator doesn&#39;t support, such as capturing photos from a camera or reading the accelerometer.</p><p>As an example, let&#39;s look at processing a photo from the camera. If we&#39;re running on a real device we&#39;ll create and configure a <code>UIImagePickerController()</code> to take photos using the camera, but if we&#39;re in the simulator we&#39;ll just load a sample image from our app bundle:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">UIKit</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TestViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> <span class="token class-name">UIImagePickerControllerDelegate</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// a method that does some sort of image processing</span></span>
<span class="line">   <span class="token keyword">func</span> <span class="token function-definition function">processPhoto</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> img<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">// process photo here</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">// a method that loads a photo either using the camera or using a sample</span></span>
<span class="line">   <span class="token keyword">func</span> <span class="token function-definition function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token directive property"><span class="token directive-name">#if</span> targetEnvironment<span class="token punctuation">(</span>simulator<span class="token punctuation">)</span></span></span>
<span class="line">         <span class="token comment">// we&#39;re building for the simulator; use the sample photo</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sample&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">processPhoto</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Sample image failed to load&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">      <span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">         <span class="token comment">// we&#39;re building for a real device; take an actual photo</span></span>
<span class="line">         <span class="token keyword">let</span> picker <span class="token operator">=</span> <span class="token class-name">UIImagePickerController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">         picker<span class="token punctuation">.</span>sourceType <span class="token operator">=</span> <span class="token punctuation">.</span>camera</span>
<span class="line">         vc<span class="token punctuation">.</span>allowsEditing <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">         picker<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">         <span class="token function">present</span><span class="token punctuation">(</span>picker<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">// this is called if the photo was taken successfully</span></span>
<span class="line">   <span class="token keyword">func</span> <span class="token function-definition function">imagePickerController</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> picker<span class="token punctuation">:</span> <span class="token class-name">UIImagePickerController</span><span class="token punctuation">,</span> didFinishPickingMediaWithInfo info<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span> <span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// hide the camera</span></span>
<span class="line">      picker<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// attempt to retrieve the photo they took</span></span>
<span class="line">      <span class="token keyword">guard</span> <span class="token keyword">let</span> image <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token class-name">UIImagePickerControllerEditedImage</span><span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">UIImage</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">// that failed; bail out</span></span>
<span class="line">         <span class="token keyword">return</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// we have an image, so we can process it</span></span>
<span class="line">      <span class="token function">processPhoto</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),S={class:"hint-container details"},T=n("summary",null,"Other Changes in Swift 4.1",-1),P={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-0-to-4-1.playground.zip",target:"_blank",rel:"noopener noreferrer"};function E(l,A){const a=c("VPCard"),o=c("FontIcon");return k(),r("div",null,[n("h1",h,[n("a",v,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,w,s(a,e(t({title:"Target environment testing | Changes in Swift 4.1",desc:"Target environment testing",link:"https://hackingwithswift.com/swift/4.1/target-environment",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[i("Swift 4.1 implemented "),n("a",y,[i("SE-0190 ("),s(o,{icon:"iconfont icon-github"}),_,i(")")]),i(", which introduced a new "),C,i(" condition that lets us differentiate between builds that are for physical devices and those that are for a simulated environment.")]),I,n("details",S,[T,s(a,e(t({title:"Synthesized Equatable and Hashable | Changes in Swift 4.1",desc:"Synthesized Equatable and Hashable",link:"/hackingwithswift.com/swift/4.1/synthesized-protocols.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Key decoding strategies for Codable | Changes in Swift 4.1",desc:"Key decoding strategies for Codable",link:"/hackingwithswift.com/swift/4.1/key-decoding-strategies.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Conditional conformances | Changes in Swift 4.1",desc:"Conditional conformances",link:"/hackingwithswift.com/swift/4.1/conditional-conformance.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Recursive constraints on associated types | Changes in Swift 4.1",desc:"Recursive constraints on associated types",link:"/hackingwithswift.com/swift/4.1/recursive-constraints.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Build configuration import testing | Changes in Swift 4.1",desc:"Build configuration import testing",link:"/hackingwithswift.com/swift/4.1/import-testing.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),u(` 
\`\`\`component VPCard
{
  "title": "Target environment testing | Changes in Swift 4.1",
  "desc": "Target environment testing",
  "link": "/hackingwithswift.com/swift/4.1/target-environment.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,e(t({title:"flatMap is now (partly) compactMap() | Changes in Swift 4.1",desc:"flatMap is now (partly) compactMap()",link:"/hackingwithswift.com/swift/4.1/compactmap.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",P,[s(o,{icon:"fas fa-file-zipper"}),i("Download Swift 4.1 playground")])])])])}const V=p(g,[["render",E],["__file","target-environment.html.vue"]]),R=JSON.parse('{"path":"/hackingwithswift.com/swift/4.1/target-environment.html","title":"Target environment testing","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Target environment testing","description":"Article(s) > Target environment testing","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.1"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Target environment testing"},{"property":"og:description","content":"Target environment testing"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.1/target-environment.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.1/target-environment.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Target environment testing"}],["meta",{"property":"og:description","content":"Article(s) > Target environment testing"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.1"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Target environment testing\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.18,"words":654},"filePathRelative":"hackingwithswift.com/swift/4.1/target-environment.md","excerpt":"\\n"}');export{V as comp,R as data};
