import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,t as r,e as s,n as e,g as t,f as u,r as i,o as d}from"./app-BgNevrm5.js";const m={},h={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),w=u(`<p>The point of our game is for the spaceship to survive while random &quot;space debris&quot; gets thrown at it. I&#39;ve included three items of various shapes in this example, but you can add more easily enough. As long as the player stays alive their score ticks upwards, so clearly it&#39;s going to take some quick movement to get the highest score.</p><p>To add enemies and time to the game, we need to declare three new properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> possibleEnemies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;ball&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;hammer&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;tv&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> isGameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">var</span> gameTimer<span class="token punctuation">:</span> <span class="token class-name">Timer</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>possibleEnemies</code> array contains the names of the three images that can be used as space debris in the game: a ball, a hammer and a TV. The <code>isGameOver</code> is a simple boolean that will be set to true when we should stop increasing the player&#39;s score.</p><p>The third property is a new type, called <code>Timer</code>. This is responsible for running code after a period of time has passed, either once or repeatedly.</p><p>When you create an <code>Timer</code> you specify five parameters: how many seconds you want the delay to be, what object should be told when the timer fires, what method should be called on that object when the timer fires, any context you want to provide, and whether the time should repeat.</p><p>We need to create a new enemy on a regular basis, so the first thing to do is create a scheduled timer. I&#39;m going to give it a timer interval of 0.35 seconds, so it will create about three enemies a second. Put this code into <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">gameTimer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">:</span> <span class="token number">0.35</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>createEnemy<span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The <code>scheduledTimer()</code> timer not only creates a timer, but also starts it immediately.</p></div><p>Creating an enemy needs to use techniques that you&#39;ve mostly seen already: it will shuffle the <code>possibleEnemies</code> array, create a sprite node using the first item in that array, position it off the right edge and with a random vertical position, then add it to the scene.</p><p>That part is old. The new part is the way we&#39;re going to create the physics body of the debris: we&#39;re going to use per-pixel collision again, tell it to collide with the player, make it move to the left at a fast speed, and give it some angular velocity. But we&#39;re also going to set to 0 its <code>linearDamping</code> and <code>angularDamping</code> properties, which means its movement and rotation will never slow down over time. Perfect for a frictionless space environment!</p><p>Add this <code>createEnemy()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> enemy <span class="token operator">=</span> possibleEnemies<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> sprite <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> enemy<span class="token punctuation">)</span></span>
<span class="line">    sprite<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">1200</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">...</span><span class="token number">736</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    sprite<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>texture<span class="token punctuation">:</span> sprite<span class="token punctuation">.</span>texture<span class="token operator">!</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> sprite<span class="token punctuation">.</span>size<span class="token punctuation">)</span></span>
<span class="line">    sprite<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>categoryBitMask <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    sprite<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    sprite<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>angularVelocity <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">    sprite<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>linearDamping <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    sprite<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>angularDamping <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that lots of debris will appear, we need to make sure we remove their nodes once they are invisible. In this game, that means removing nodes from the scene once they are effectively useless because they have passed the player. This will be done using a check in the <code>update()</code> method: if any node is beyond X position -300, we&#39;ll consider it dead.</p><p>The <code>update()</code> method is also a good place to make our score increment all the time. All we need to do is check whether <code>isGameOver</code> is still false, and add one to the score if so. Here&#39;s the code for the <code>update()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> currentTime<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> node <span class="token keyword">in</span> children <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">300</span> <span class="token punctuation">{</span></span>
<span class="line">            node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>isGameOver <span class="token punctuation">{</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://hackingwithswift.com17-2https://hackingwithswift.com/img/books/hws/17-2@2x.png" alt="" loading="lazy">Random deadly objects are thrown at the player, who scores points simply by staying alive.</p>`,17);function y(o,f){const a=i("VPCard"),p=i("VidStack");return d(),l("div",null,[n("h1",h,[n("a",k,[n("span",null,r(o.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,v,s(a,e(t({title:"Bring on the enemies: Timer, linearDamping, angularDamping | Hacking with iOS",desc:"Bring on the enemies: Timer, linearDamping, angularDamping",link:"https://hackingwithswift.com/read/17/3/up-and-running-with-mapkit",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(p,{src:"youtube/NIRrPs2fpPw"}),w])}const _=c(m,[["render",y],["__file","03-bring-on-the-enemies-timer-lineardamping-angulardamping.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/read/17/03-bring-on-the-enemies-timer-lineardamping-angulardamping.html","title":"Bring on the enemies: Timer, linearDamping, angularDamping","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Bring on the enemies: Timer, linearDamping, angularDamping","description":"Article(s) > Bring on the enemies: Timer, linearDamping, angularDamping","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Bring on the enemies: Timer, linearDamping, angularDamping"},{"property":"og:description","content":"Bring on the enemies: Timer, linearDamping, angularDamping"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/17/03-up-and-running-with-mapkit.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/17/03-bring-on-the-enemies-timer-lineardamping-angulardamping.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Bring on the enemies: Timer, linearDamping, angularDamping"}],["meta",{"property":"og:description","content":"Article(s) > Bring on the enemies: Timer, linearDamping, angularDamping"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com17-2https://hackingwithswift.com/img/books/hws/17-2@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bring on the enemies: Timer, linearDamping, angularDamping\\",\\"image\\":[\\"https://hackingwithswift.com17-2https://hackingwithswift.com/img/books/hws/17-2@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.62,"words":787},"filePathRelative":"hackingwithswift.com/read/17/03-bring-on-the-enemies-timer-lineardamping-angulardamping.md","excerpt":"\\n"}');export{_ as comp,D as data};
