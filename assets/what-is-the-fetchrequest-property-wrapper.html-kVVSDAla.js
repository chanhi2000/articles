import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,t as r,e as s,n as a,g as n,f as c,r as l,o as u}from"./app-BgNevrm5.js";const h={},d={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},m=t("nav",{class:"table-of-contents"},[t("ul")],-1),k=t("hr",null,null,-1),g=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI gives us a dedicated property wrapper for working with Core Data fetch requests, and it allows us to embed data directly into SwiftUI views without having to write extra logic.</p><p>You must provide <code>@FetchRequest</code> with at least one value, which is an array of sort descriptors to arrange the data. You can optionally also provide a predicate to filter the data as needed.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Before using <code>@FetchRequest</code> you must first have injected a Core Data managed object context into the environment – see <a href="/hackingwithswift.com/swiftui/how-to-access-a-core-data-managed-object-context-from-a-swiftui-view.mdd" target="_blank" rel="noopener noreferrer">how to access a Core Data managed object context from a SwiftUI view</a> for instructions on how to do that.</p></div><p>As a basic example, we could show all users from a Core Data context like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FetchRequest</span><span class="token punctuation">(</span></span>
<span class="line">    sortDescriptors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">var</span> users<span class="token punctuation">:</span> <span class="token class-name">FetchedResults</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That applies no sorting to the data, so the users will be returned in the order they were added. <code>@FetchRequest</code> automatically implies <code>@ObservedObject</code>, so if you use your data in a <code>List</code>, <code>ForEach</code>, or similar, it will automatically be refreshed when the underlying data changes.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>I’ve split the <code>@FetchRequest</code> code across several lines to make it easier to read, but it’s not required.</p></div><p>If you want to sort your data, provide your sort descriptors as an array of key paths, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FetchRequest</span><span class="token punctuation">(</span></span>
<span class="line">    sortDescriptors<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">var</span> users<span class="token punctuation">:</span> <span class="token class-name">FetchedResults</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can provide as many as you want, and they will be evaluated in order.</p><p>To add a predicate as well, create an <code>NSPredicate</code> using your format like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FetchRequest</span><span class="token punctuation">(</span></span>
<span class="line">    sortDescriptors<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    predicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;surname == %@&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Hudson&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">var</span> users<span class="token punctuation">:</span> <span class="token class-name">FetchedResults</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),f={class:"hint-container details"},v=t("summary",null,"Similar solutions…",-1);function y(i,b){const e=l("VPCard");return u(),p("div",null,[t("h1",d,[t("a",w,[t("span",null,r(i.$frontmatter.title)+" 관련",1)])]),s(e,a(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,k,s(e,a(n({title:"What is the @FetchRequest property wrapper? | SwiftUI by Example",desc:"What is the @FetchRequest property wrapper?",link:"https://hackingwithswift.com/quick-start/swiftui/what-is-the-fetchrequest-property-wrapper",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,t("details",f,[v,s(e,a(n({title:"How to create a Core Data fetch request using @FetchRequest | SwiftUI by Example",desc:"How to create a Core Data fetch request using @FetchRequest",link:"/hackingwithswift.com/swiftui/how-to-create-a-core-data-fetch-request-using-fetchrequest.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"What is the @GestureState property wrapper? | SwiftUI by Example",desc:"What is the @GestureState property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-gesturestate-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"What is the @Published property wrapper? | SwiftUI by Example",desc:"What is the @Published property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-published-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"What is the @ScaledMetric property wrapper? | SwiftUI by Example",desc:"What is the @ScaledMetric property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-scaledmetric-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,a(n({title:"What is the @ObservedObject property wrapper? | SwiftUI by Example",desc:"What is the @ObservedObject property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-observedobject-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const R=o(h,[["render",y],["__file","what-is-the-fetchrequest-property-wrapper.html.vue"]]),F=JSON.parse('{"path":"/hackingwithswift.com/swiftui/what-is-the-fetchrequest-property-wrapper.html","title":"What is the @FetchRequest property wrapper?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What is the @FetchRequest property wrapper?","description":"Article(s) > What is the @FetchRequest property wrapper?","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What is the @FetchRequest property wrapper?"},{"property":"og:description","content":"What is the @FetchRequest property wrapper?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-fetchrequest-property-wrapper.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-fetchrequest-property-wrapper.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What is the @FetchRequest property wrapper?"}],["meta",{"property":"og:description","content":"Article(s) > What is the @FetchRequest property wrapper?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is the @FetchRequest property wrapper?\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.01,"words":602},"filePathRelative":"hackingwithswift.com/swiftui/what-is-the-fetchrequest-property-wrapper.md","excerpt":"\\n"}');export{R as comp,F as data};
