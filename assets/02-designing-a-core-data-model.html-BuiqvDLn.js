import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,t as d,e,n as i,g as n,d as o,f as g,r as s,o as p}from"./app-BgNevrm5.js";const m={},u={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},w=t("nav",{class:"table-of-contents"},[t("ul")],-1),b=t("hr",null,null,-1),y=t("p",null,"A data model is a description of the data you want Core Data to store, and is a bit like creating a class in Swift: you define entities (like classes) and give them attributes (like properties). But Core Data takes it a step further by allowing you to describe how its entities relate to other entities, as well as adding rules for validation and uniqueness.",-1),k={href:"https://api.github.com/repos/apple/swift/commits?per_page=100",target:"_blank",rel:"noopener noreferrer"},D=g('<p>To create a data model, choose File &gt; New &gt; File and select iOS &gt; Core Data &gt; Data Model. Name it Project38, then make sure the &quot;Group&quot; option near the bottom of the screen has a yellow folder to it rather than a blue project icon.</p><p>This will create a new file called Project38.xcdatamodeld, and when you select that you&#39;ll see a new editing display: the Data Model Editor. At the bottom you&#39;ll see a button with the title &quot;Add Entity&quot;: please click that now.</p><figure><img src="https://hackingwithswift.com/img/books/hws/38-13@2x.png" alt="The Add Entity button should be at the bottom of the data model editor window." tabindex="0" loading="lazy"><figcaption>The Add Entity button should be at the bottom of the data model editor window.</figcaption></figure><p>A Core Data &quot;entity&quot; is like a Swift class in that it is just a description of what an object is going to look like. By default, new entities are called &quot;Entity&quot;, but you can change that in the Data Model inspector in the right-hand pane of Xcode â€“ press <kbd>Alt</kbd>+<kbd>Cmd</kbd>+<kbd>3</kbd> if it&#39;s not already visible. With your new entity selected, you should see a field named &quot;Name&quot;, so please change &quot;Entity&quot; to be &quot;Commit&quot;.</p><figure><img src="https://hackingwithswift.com/img/books/hws/38-3@2x.png" alt="New entities have the default name Entity, but obviously it&#39;s best that you change it to something more meaningful." tabindex="0" loading="lazy"><figcaption>New entities have the default name Entity, but obviously it&#39;s best that you change it to something more meaningful.</figcaption></figure><p>To the right of the Add Entity button is another button, Add Attribute. Click that four times now to add four attributes, then name them &quot;date&quot;, &quot;message&quot;, &quot;sha&quot; and &quot;url&quot;. These attributes are just like properties on a Swift class, including the need to have a data type. You&#39;ll see they each have &quot;Undefined&quot; for their type right now, but that&#39;s easily changed: set them all to have the String data type, except for &quot;date&quot;, which should be Date.</p><p>The final change we&#39;re going to make is to mark each of these four property as non-optional. Click &quot;date&quot; then hold down Shift and click &quot;url&quot; to select all four attributes, then look in the Data Model inspector for the Optional checkbox and deselect it.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>the Data Model inspector can be a bit buggy sometimes â€“ if you find it&#39;s completely blank, you might need to try selecting one of the other files in your project and/or deselecting then re-selecting your entity to make things work.</p></div><figure><img src="https://hackingwithswift.com/img/books/hws/38-4@2x.png" alt="Select all four attributes and disable the Optional checkbox in the Data Model inspector." tabindex="0" loading="lazy"><figcaption>Select all four attributes and disable the Optional checkbox in the Data Model inspector.</figcaption></figure><p>Now, you might be forgiven for thinking, &quot;at last! All that time spent mastering Swift optionals is paying off â€“ I know what this checkbox does!&quot; But I have some bad news for you. Or, more specifically, Core Data has some bad news for you: this Optional checkbox has nothing at all to do with Swift optionals, it just determines whether the objects that Core Data stores are required to have a value or not.</p><p>That&#39;s the first step of Core Data completed: the app now knows what kind of data we want to store. We&#39;ll be coming back to add to our model later, but first it&#39;s time for step two: adding the base Core Data functionality to our app so we can load the model we just defined and save any changes we make.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When you make <em>any</em> changes to the Core Data editor in Xcode, you should press <kbd>Cmd</kbd>+<kbd>S</kbd> to save your changes. At the time of writing â€“ and indeed for some time now â€“ Xcode has not saved Core Data model changes when you build your app, so if you donâ€™t save the changes yourself youâ€™ll find they havenâ€™t been applied and youâ€™ll spend hours investigating ghost bugs.</p></div>',12);function q(r,v){const a=s("VPCard"),l=s("FontIcon");return p(),c("div",null,[t("h1",u,[t("a",f,[t("span",null,d(r.$frontmatter.title)+" ê´€ë ¨",1)])]),e(a,i(n({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,b,e(a,i(n({title:"Designing a Core Data model | Hacking with iOS",desc:"Designing a Core Data model",link:"https://hackingwithswift.com/read/38/2/designing-a-core-data-model",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),y,t("p",null,[o("We're going to create a data model for our app that will store a list of all the GitHub commits for the Swift library. Take a look at the raw GitHub JSON now by loading this URL in a web browser: "),t("a",k,[e(l,{icon:"iconfont icon-github"}),o("https://api.github.com/repos/apple/swift/commits?per_page=100")]),o(`. You'll see that each commit has a "sha" identifier, committer details, a message describing what changed, and a lot more. In our initial data model, we're going to track the "date", "message", "sha", and "url" fields, but you're welcome to add more if you want to.`)]),D])}const x=h(m,[["render",q],["__file","02-designing-a-core-data-model.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/read/38/02-designing-a-core-data-model.html","title":"Designing a Core Data model","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Designing a Core Data model","description":"Article(s) > Designing a Core Data model","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Designing a Core Data model"},{"property":"og:description","content":"Designing a Core Data model"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/38/02-designing-a-core-data-model.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/38/02-designing-a-core-data-model.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Designing a Core Data model"}],["meta",{"property":"og:description","content":"Article(s) > Designing a Core Data model"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/38-13@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Designing a Core Data model\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/38-13@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/38-3@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/38-4@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.09,"words":927},"filePathRelative":"hackingwithswift.com/read/38/02-designing-a-core-data-model.md","excerpt":"\\n"}');export{x as comp,S as data};
