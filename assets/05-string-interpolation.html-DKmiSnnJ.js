import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,t as c,e as t,n as s,g as e,f as g,r as i,o as u}from"./app-BgNevrm5.js";const d={},h={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),f=g(`<p>This is a fancy name for what is actually a very simple thing: combining variables and constants inside a string.</p><p>Clear out all the code you just wrote and leave only this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we wanted to print out a message to the user that included their name, string interpolation is what makes that easy: you just write a backslash, then an open parenthesis, then your code, then a close parenthesis, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Your name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/string-interpolation-1@2x.png" alt="Adding a name to a String using interpolation." tabindex="0" loading="lazy"><figcaption>Adding a name to a String using interpolation.</figcaption></figure><p>The results pane will now show &quot;Your name is Tim McGraw&quot; all as one string, because string interpolation combined the two for us.</p><p>Now, we could have written that using the <code>+</code> operator, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Your name is &quot;</span></span> <span class="token operator">+</span> name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/string-interpolation-2@2x.png" alt="Adding a name to a String using the plus operator." tabindex="0" loading="lazy"><figcaption>Adding a name to a String using the plus operator.</figcaption></figure><p>â€¦but that&#39;s not as efficient, particularly if you&#39;re combining multiple variables together. In addition, string interpolation in Swift is smart enough to be able to handle a variety of different data types automatically. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tim McGraw&quot;</span></span></span>
<span class="line"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"><span class="token keyword">var</span> latitude <span class="token operator">=</span> <span class="token number">36.166667</span></span>
<span class="line"></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;Your name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, your age is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, and your latitude is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">latitude</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/string-interpolation-3@2x.png" alt="Interpolating a String, Int, and Double." tabindex="0" loading="lazy"><figcaption>Interpolating a String, Int, and Double.</figcaption></figure><p>Doing that using <code>+</code> is much more difficult, because Swift doesn&#39;t let you add integers and doubles to a string.</p><p>At this point your result may no longer fit in the results pane, so either resize your window or hover over the result and click the + button that appears to have it shown inline.</p><p>One of the powerful features of string interpolation is that everything between <code>\\(</code> and <code>)</code> can actually be a full Swift expression. For example, you can do mathematics in there using operators, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"><span class="token string-literal"><span class="token string">&quot;You are </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> years old. In another </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> years you will be </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age <span class="token operator">*</span> <span class="token number">2</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/hws/string-interpolation-4@2x.png" alt="Interpolating a mathematical expression." tabindex="0" loading="lazy"><figcaption>Interpolating a mathematical expression.</figcaption></figure>`,18);function b(o,v){const a=i("VPCard"),r=i("VidStack");return u(),l("div",null,[n("h1",h,[n("a",m,[n("span",null,c(o.$frontmatter.title)+" ê´€ë ¨",1)])]),t(a,s(e({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,w,t(a,s(e({title:"String Interpolation | Hacking with iOS",desc:"String Interpolation",link:"https://hackingwithswift.com/read/0/5/string-interpolation",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(r,{src:"youtube/3-I43GvrzsA"}),f])}const x=p(d,[["render",b],["__file","05-string-interpolation.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/read/00/05-string-interpolation.html","title":"String Interpolation","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"String Interpolation","description":"Article(s) > String Interpolation","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > String Interpolation"},{"property":"og:description","content":"String Interpolation"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/05-string-interpolation.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/00/05-string-interpolation.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"String Interpolation"}],["meta",{"property":"og:description","content":"Article(s) > String Interpolation"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/string-interpolation-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"String Interpolation\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/string-interpolation-1@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/string-interpolation-2@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/string-interpolation-3@2x.png\\",\\"https://hackingwithswift.com/img/books/hws/string-interpolation-4@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.54,"words":463},"filePathRelative":"hackingwithswift.com/read/00/05-string-interpolation.md","excerpt":"\\n"}');export{x as comp,_ as data};
