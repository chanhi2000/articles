import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,t as u,e as n,n as e,g as t,d as o,a as d,f as m,r as c,o as h}from"./app-BgNevrm5.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},g=s("nav",{class:"table-of-contents"},[s("ul")],-1),v=s("hr",null,null,-1),b=s("blockquote",null,[s("p",null,"Available from Swift 5.3")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0280-enum-cases-as-protocol-witnesses.md",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"apple/swift-evolution",-1),S=m(`<p>For example, you could write code to handle various types of data, but what if that data were missing? Sure, you could use something like nil coalescing to provide a default value every time, but you could also make a protocol that requires a default value, then make various types conform to it with whatever default values you wanted:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">protocol</span> <span class="token class-name">Defaultable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// make integers have a default value of 0</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">Int</span><span class="token punctuation">:</span> <span class="token class-name">Defaultable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// make arrays have a default of an empty array</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">Array</span><span class="token punctuation">:</span> <span class="token class-name">Defaultable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// make dictionaries have a default of an empty dictionary</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">Dictionary</span><span class="token punctuation">:</span> <span class="token class-name">Defaultable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">Dictionary</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What SE-0280 allows us to do is exactly the same thing just for enums. For example, you want to create a <code>padding</code> enum that can take some number of pixels, some number of centimeters, or a default value decided by the system:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Padding</span><span class="token punctuation">:</span> <span class="token class-name">Defaultable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">pixels</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">cm</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> defaultValue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That kind of code wouldn’t have been possible before SE-0280 – Swift would have said that <code>Padding</code> doesn’t satisfy the protocol. However, if you think it through the protocol really <em>is</em> satisfied: we said it needs a static <code>defaultValue</code> that returns <code>Self</code>, i.e. whatever concrete type is conforming to the protocol, and that’s exactly what <code>Padding.defaultValue</code> does.</p>`,5),C={class:"hint-container details"},x=s("summary",null,"Other Changes in Swift 5.3",-1),E={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-2-to-5-3.playground.zip",target:"_blank",rel:"noopener noreferrer"};function V(l,A){const a=c("VPCard"),i=c("FontIcon");return h(),r("div",null,[s("h1",f,[s("a",k,[s("span",null,u(l.$frontmatter.title)+" 관련",1)])]),n(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,v,n(a,e(t({title:"Enum cases as protocol witnesses | Changes in Swift 5.3",desc:"Enum cases as protocol witnesses",link:"https://hackingwithswift.com/swift/5.3/enum-protocol-witnesses",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,s("p",null,[s("a",y,[o("SE-0280 ("),n(i,{icon:"iconfont icon-github"}),_,o(")")]),o(" allows enums to participate in protocol witness matching, which is a technical way of saying they can now match requirements of protocols more easily.")]),S,s("details",C,[x,n(a,e(t({title:"Multi-pattern catch clauses | Changes in Swift 5.3",desc:"Multi-pattern catch clauses",link:"/hackingwithswift.com/swift/5.3/multipattern-catch.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"Multiple trailing closures | Changes in Swift 5.3",desc:"Multiple trailing closures",link:"/hackingwithswift.com/swift/5.3/multiple-trailing-closures.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"Synthesized Comparable conformance for enums | Changes in Swift 5.3",desc:"Synthesized Comparable conformance for enums",link:"/hackingwithswift.com/swift/5.3/synthesized-comparable-enum.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"self is no longer required in many places | Changes in Swift 5.3",desc:"self is no longer required in many places",link:"/hackingwithswift.com/swift/5.3/removing-self.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"Type-based program entry points | Changes in Swift 5.3",desc:"Type-based program entry points",link:"/hackingwithswift.com/swift/5.3/atmain.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"where clauses on contextually generic declarations | Changes in Swift 5.3",desc:"where clauses on contextually generic declarations",link:"/hackingwithswift.com/swift/5.3/where-clauses.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Enum cases as protocol witnesses | Changes in Swift 5.3",
  "desc": "Enum cases as protocol witnesses",
  "link": "/hackingwithswift.com/swift/5.3/enum-protocol-witnesses.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(a,e(t({title:"Refined didSet semantics | Changes in Swift 5.3",desc:"Refined didSet semantics",link:"/hackingwithswift.com/swift/5.3/refined-didset.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"A new Float16 type | Changes in Swift 5.3",desc:"A new Float16 type",link:"/hackingwithswift.com/swift/5.3/float16.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,e(t({title:"Swift Package Manager gains binary dependencies, resources, and more | Changes in Swift 5.3",desc:"Swift Package Manager gains binary dependencies, resources, and more",link:"/hackingwithswift.com/swift/5.3/spm-improvements.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s("p",null,[s("a",E,[n(i,{icon:"fas fa-file-zipper"}),o("Download Swift 5.3 playground")])])])])}const I=p(w,[["render",V],["__file","enum-protocol-witnesses.html.vue"]]),M=JSON.parse('{"path":"/hackingwithswift.com/swift/5.3/enum-protocol-witnesses.html","title":"Enum cases as protocol witnesses","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Enum cases as protocol witnesses","description":"Article(s) > Enum cases as protocol witnesses","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.3"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Enum cases as protocol witnesses"},{"property":"og:description","content":"Enum cases as protocol witnesses"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.3/enum-protocol-witnesses.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.3/enum-protocol-witnesses.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Enum cases as protocol witnesses"}],["meta",{"property":"og:description","content":"Article(s) > Enum cases as protocol witnesses"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.3"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Enum cases as protocol witnesses\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.41,"words":724},"filePathRelative":"hackingwithswift.com/swift/5.3/enum-protocol-witnesses.md","excerpt":"\\n"}');export{I as comp,M as data};
