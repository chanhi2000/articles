import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as k,e as a,n as m,g as h,w as t,d as s,f as o,r as p,o as y}from"./app-BgNevrm5.js";const v={},g={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},w=n("hr",null,null,-1),T=o(`<p>Type predicates are an interesting syntactical feature in TypeScript. While they appear in the same place as return type annotations, they look more like short affirmative sentences than typical annotations. This gives you greater control over type checking.</p><p>With the release of TypeScript 5.5, working with type predicates has become more intuitive now because it can infer them automatically in many cases. But if you&#39;re navigating slightly older code-bases, you&#39;re likely to encounter handwritten type predicates more often.</p><p>In this article, we will briefly explore what type predicates are and why they are useful. Let&#39;s start by looking at the problem they solve.</p><hr><h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="#the-problem"><span>The Problem</span></a></h2><p>The best way to understand the usefulness of type predicates, I believe, is by noticing the problems that arise when we don&#39;t have them:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>padding<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> padding <span class="token operator">+</span> input<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//   ^</span></span>
<span class="line">        <span class="token comment">// string | number</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span> <span class="token operator">+</span> input<span class="token punctuation">;</span> <span class="token comment">// Opps type error here</span></span>
<span class="line">                 <span class="token comment">//   ^</span></span>
<span class="line">                 <span class="token comment">// string | number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, the return type of <code>isString</code> is set to <code>boolean</code>, and we use it in a function called <code>padLeft</code> to add padding to the left of an input string. The <code>padding</code> can be either a given string or a specified number of space characters.</p><p>You might be wondering why I hard-coded the return type to <code>boolean</code>. This is to illustrate the problem. If you don&#39;t add any return type annotation and use the latest version of TypeScript, you won&#39;t notice any issue here. For now, bear with me – we&#39;ll discuss the version-related differences shortly.</p><p>The function will work smoothly at runtime, but TypeScript cannot perform any type narrowing with <code>isString</code>. As a result, the type of <code>padding</code> remains <code>string | number</code> both inside and outside the <code>if</code> statement. This leads to a conflict with <code>repeat</code>&#39;s expectation for its first argument, causing the type error.</p><hr><h2 id="the-solution-enter-type-predicates" tabindex="-1"><a class="header-anchor" href="#the-solution-enter-type-predicates"><span>The Solution: Enter Type Predicates</span></a></h2><p>Even if you are unfamiliar with the term predicate, you have likely used them before. Predicates in programming are simply functions that return a boolean to answer a yes/no question. Several JavaScript built-in array methods, such as <code>filter</code>, <code>find</code>, <code>every</code>, and <code>some</code>, use predicates to help with decision-making.</p><p>Type predicates are a way to make predicates more useful for type narrowing. We can fix the problem by using a type predicate as the return type:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here the type predicate is <code>value is string</code>. It is saying three things:</p><ul><li>The function is a predicate. So TypeScript will show an error if you try to return anything other than a Boolean value.</li><li>If it returns <code>true</code>, then <code>value</code> is of type string.</li><li>If it returns <code>false</code>, then <code>value</code> is not of type string.</li></ul><p>Type predicates let you create user-defined type guards. Type guards are logical checks that let you refine types to more specific types, aka narrow them. So, the above function is also a user-defined type guard.</p><p>Here is the full code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>padding<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> padding <span class="token operator">+</span> input<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//   ^</span></span>
<span class="line">        <span class="token comment">// string</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span> <span class="token operator">+</span> input<span class="token punctuation">;</span></span>
<span class="line">                 <span class="token comment">//   ^</span></span>
<span class="line">                 <span class="token comment">// number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, TypeScript correctly narrows the type of <code>padding</code> inside the <code>if</code> statement and outside of it.</p><p>Now let&#39;s briefly look at how type predicates worked before TypeScript 5.5 and what this version has improved.</p><hr><h2 id="type-predicates-before-typescript-5-5" tabindex="-1"><a class="header-anchor" href="#type-predicates-before-typescript-5-5"><span>Type Predicates Before TypeScript 5.5</span></a></h2><p>In our previous example, if we don&#39;t specify any return type, it will be inferred as <code>boolean</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>padding<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> padding <span class="token operator">+</span> input<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//   ^</span></span>
<span class="line">        <span class="token comment">// string | number</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span> <span class="token operator">+</span> input<span class="token punctuation">;</span> <span class="token comment">// Opps type error here</span></span>
<span class="line">                 <span class="token comment">//   ^</span></span>
<span class="line">                 <span class="token comment">// string | number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),S=n("code",null,"boolean",-1),_={href:"https://typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABDAzgZSgJxmA5gCgDcBDAGxAFMAuRcAazDgHcwBKRAbwFgAoRRTBSghMSKAE8ADhTjBEJchUQBeVYgBEKLDlzqA3LwC+vXqEiwEiScQAmAGQrAo+azZs6aYEAFsARhUxEAB9ELWw8ABpkMEkQKBownXZuPmQ5fFQMcIJXdzxWZN5+fkFhUStbPNxEAGpo2KgDVONU0pEkdQ0AOkFpYmdcpNr6uKbDIA",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>If we don&#39;t specify the type predicate, using methods like <code>filter</code> can also result in incorrect type detection:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> numsOrStrings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//      ^</span></span>
<span class="line"><span class="token comment">//    strings: (string | number)[]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> strings <span class="token operator">=</span> numsOrStrings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//      ^</span></span>
<span class="line"><span class="token comment">//    strings: (string | number)[]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s see how TypeScript 5.5 improves the situation.</p><hr><h2 id="type-predicates-after-typescript-5-5" tabindex="-1"><a class="header-anchor" href="#type-predicates-after-typescript-5-5"><span>Type Predicates After TypeScript 5.5</span></a></h2><p>One of the top features of TypeScript 5.5 is it can infer type predicates by analyzing the function body. So if you are using TypeScript 5.5 or later, you don&#39;t have to write the type predicate as the return type of <code>isString</code>. TypeScript does it for you, and code like what you see in the example below works perfectly fine:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>padding<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> padding <span class="token operator">+</span> input<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//   ^</span></span>
<span class="line">        <span class="token comment">// string</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span> <span class="token operator">+</span> input<span class="token punctuation">;</span> <span class="token comment">// Opps type error here</span></span>
<span class="line">                 <span class="token comment">//   ^</span></span>
<span class="line">                 <span class="token comment">// number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> numsOrStrings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> strings <span class="token operator">=</span> numsOrStrings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//      ^</span></span>
<span class="line"><span class="token comment">//    strings: string[]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> numsOrStrings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//      ^</span></span>
<span class="line"><span class="token comment">//    numbers: number[]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I haven&#39;t yet found a situation where I&#39;m unhappy with the automatic inference of type predicates. If you do find one, you can always write your own manually.</p><hr><h2 id="further-study" tabindex="-1"><a class="header-anchor" href="#further-study"><span>Further Study</span></a></h2><p>In this article, we briefly explored type predicates in TypeScript. If you&#39;re interested in learning more and understanding the edge cases, here are the official guides:</p><ul><li><a href="https://typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#inferred-type-predicates">What&#39;s New → TypeScript 5.5 → Inferred Type Predicates</a></li><li><a href="https://typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates">Handbook → Narrowing → Using type predicates</a></li></ul><p>Thanks for reading! See you next time!</p>`,13),A={href:"https://unsplash.com/@monaeendra",target:"_blank",rel:"noopener noreferrer"},P={href:"https://unsplash.com/photos/flowers-beside-yellow-wall-vC8wj_Kphak",target:"_blank",rel:"noopener noreferrer"};function E(c,q){const l=p("VPCard"),e=p("router-link"),r=p("SiteInfo"),i=p("FontIcon");return y(),d("div",null,[n("h1",g,[n("a",b,[n("span",null,k(c.$frontmatter.title)+" 관련",1)])]),a(l,m(h({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[a(e,{to:"#the-problem"},{default:t(()=>[s("The Problem")]),_:1})]),n("li",null,[a(e,{to:"#the-solution-enter-type-predicates"},{default:t(()=>[s("The Solution: Enter Type Predicates")]),_:1})]),n("li",null,[a(e,{to:"#type-predicates-before-typescript-5-5"},{default:t(()=>[s("Type Predicates Before TypeScript 5.5")]),_:1})]),n("li",null,[a(e,{to:"#type-predicates-after-typescript-5-5"},{default:t(()=>[s("Type Predicates After TypeScript 5.5")]),_:1})]),n("li",null,[a(e,{to:"#further-study"},{default:t(()=>[s("Further Study")]),_:1})])])]),w,a(r,{name:"What are Type Predicates in TypeScript? Explained with Code examples",desc:"Type predicates are an interesting syntactical feature in TypeScript. While they appear in the same place as return type annotations, they look more like short affirmative sentences than typical annotations. This gives you greater control over type c...",url:"https://freecodecamp.org/news/what-are-type-predicates-in-typescript//",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1725630140316/a95bd310-5465-4d0c-85fe-e42b91c2452e.jpeg"}),T,n("p",null,[s("As a result, we have the same error as when we manually wrote the return type "),S,s(". "),n("a",_,[a(i,{icon:"iconfont icon-typescript"}),s("Here is the TypeScript playground link")]),s(" for the above code fragment. Go and hover of the functions or variables for a better feeling of the types. Then see how writing the type predicate solves the problem.")]),x,n("p",null,[s("Cover photo background is from "),n("a",A,[a(i,{icon:"fas fa-globe"}),s("Mona Eendra")]),s(" on "),n("a",P,[a(i,{icon:"fas fa-globe"}),s("Unsplash")])])])}const C=u(v,[["render",E],["__file","what-are-type-predicates-in-typescript.html.vue"]]),W=JSON.parse('{"path":"/freecodecamp.org/what-are-type-predicates-in-typescript.html","title":"What are Type Predicates in TypeScript? Explained with Code examples","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What are Type Predicates in TypeScript? Explained with Code examples","description":"Article(s) > What are Type Predicates in TypeScript? Explained with Code examples","icon":"iconfont icon-typescript","category":["Node.js","TypeScript","Article(s)"],"tag":["blog","freecodecamp.org","typsecript","ts"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What are Type Predicates in TypeScript? Explained with Code examples"},{"property":"og:description","content":"What are Type Predicates in TypeScript? Explained with Code examples"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/what-are-type-predicates-in-typescript/.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/what-are-type-predicates-in-typescript.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What are Type Predicates in TypeScript? Explained with Code examples"}],["meta",{"property":"og:description","content":"Article(s) > What are Type Predicates in TypeScript? Explained with Code examples"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725630140316/a95bd310-5465-4d0c-85fe-e42b91c2452e.jpeg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725630140316/a95bd310-5465-4d0c-85fe-e42b91c2452e.jpeg"}],["meta",{"name":"twitter:image:alt","content":"What are Type Predicates in TypeScript? Explained with Code examples"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"typsecript"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:published_time","content":"2024-09-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What are Type Predicates in TypeScript? Explained with Code examples\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725630140316/a95bd310-5465-4d0c-85fe-e42b91c2452e.jpeg\\"],\\"datePublished\\":\\"2024-09-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/ts/articles/README.md","date":"2024-09-10T00:00:00.000Z","isOriginal":false,"cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725630140316/a95bd310-5465-4d0c-85fe-e42b91c2452e.jpeg"},"headers":[{"level":2,"title":"The Problem","slug":"the-problem","link":"#the-problem","children":[]},{"level":2,"title":"The Solution: Enter Type Predicates","slug":"the-solution-enter-type-predicates","link":"#the-solution-enter-type-predicates","children":[]},{"level":2,"title":"Type Predicates Before TypeScript 5.5","slug":"type-predicates-before-typescript-5-5","link":"#type-predicates-before-typescript-5-5","children":[]},{"level":2,"title":"Type Predicates After TypeScript 5.5","slug":"type-predicates-after-typescript-5-5","link":"#type-predicates-after-typescript-5-5","children":[]},{"level":2,"title":"Further Study","slug":"further-study","link":"#further-study","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":4.07,"words":1222},"filePathRelative":"freecodecamp.org/what-are-type-predicates-in-typescript.md","localizedDate":"2024년 9월 10일","excerpt":"\\n"}');export{C as comp,W as data};
