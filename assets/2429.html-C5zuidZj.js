import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as b,e,n as c,g as p,w as t,d as s,a as v,f as l,r,o as _}from"./app-BgNevrm5.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},K={class:"table-of-contents"},C=n("hr",null,null,-1),w={href:"https://youtu.be/nRd0ejHADss",target:"_blank",rel:"noopener noreferrer"},S={href:"https://keycloak.org/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://kccncna2023.sched.com/event/1R2qR",target:"_blank",rel:"noopener noreferrer"},G=l('<figure><img src="https://lh7-us.googleusercontent.com/rSZ5cZousSbPxX1VFY4LtN4vRnqOiTcpg8v9ihc5oxAk3F48oPDYNrtVb7LpdQR6k-bpetZtwiFTHPU-9KxrgJIwnBO7kKCQKCS_ypWe77e4aDtvjiM2FefhdS7o8GEYiXDvuCnasfIENVWvaQhVD6E" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이번 3부에서 살펴볼 내용은 다음과 같습니다.</p><ol><li>GKE와 EKS에 OIDC 기능 구성하기</li><li>kubelogin이 가지는 의미와 구조 설명</li><li>EKS와 GKE에 대한 인증/인가 실습</li><li>키클락을 이용한 통합 인증으로 얻을 수 있는이점들 정리</li></ol><hr><h2 id="gke와-eks에-oidc-기능-구성하기" tabindex="-1"><a class="header-anchor" href="#gke와-eks에-oidc-기능-구성하기"><span>GKE와 EKS에 OIDC 기능 구성하기</span></a></h2><p>우리는 사전 준비 작업을 통해서 GKE 클러스터를 비롯해 키클락을 배포하고 키클락에서 인증을 진행하기 위한 설정을 모두 완료하였습니다. 다음으로, GKE 클러스터에 접근 시 키클락 통합 인증을 적용해보겠습니다.</p><h3 id="_1-gke에-oidc-기능-구성하기" tabindex="-1"><a class="header-anchor" href="#_1-gke에-oidc-기능-구성하기"><span>1. GKE에 OIDC 기능 구성하기</span></a></h3>',7),I=n("code",null,"1-3.clientconfig-gke-keycloak-w-oidc.yaml",-1),x=n("code",null,"1-3.clientconfig-gke-keycloak-w-oidc.yaml",-1),D=n("code",null,"--enable-identity-service",-1),R=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">oidc</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token punctuation">...</span></span>
<span class="line">  <span class="token key atrule">clientID</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>auth</span>
<span class="line">  <span class="token key atrule">cloudConsoleRedirectURI</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//console.cloud.google.com/kubernetes/oidc</span>
<span class="line">  <span class="token key atrule">extraParams</span><span class="token punctuation">:</span> resource=token<span class="token punctuation">-</span>groups<span class="token punctuation">-</span>claim</span>
<span class="line">  <span class="token key atrule">groupPrefix</span><span class="token punctuation">:</span> <span class="token string">&#39;-&#39;</span></span>
<span class="line">  <span class="token key atrule">groupsClaim</span><span class="token punctuation">:</span> groups</span>
<span class="line">  <span class="token key atrule">issuerURI</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oncloud<span class="token punctuation">-</span>1.site/realms/kubernetes</span>
<span class="line">  <span class="token key atrule">kubectlRedirectURI</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8000</span></span>
<span class="line">  <span class="token key atrule">scopes</span><span class="token punctuation">:</span> openid</span>
<span class="line">  <span class="token key atrule">userClaim</span><span class="token punctuation">:</span> preferred_username</span>
<span class="line">  <span class="token key atrule">userPrefix</span><span class="token punctuation">:</span> <span class="token string">&#39;-&#39;</span></span>
<span class="line"><span class="token key atrule">internalServer</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span></span>
<span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> hj<span class="token punctuation">-</span>keycloak<span class="token punctuation">-</span>oncloud<span class="token punctuation">-</span>1<span class="token punctuation">-</span>gke</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이와 같은 파라미터에 대한 설명은 다음과 같이 정리할 수 있습니다.</p>`,2),z=l('<li><code>clientSecret</code>: [시크릿] <ul><li>OIDC 공급업체가 OIDC 클라이언트 애플리케이션이 공유하는 ClientSecret입니다.</li><li>Google이 &#39;k8s-auth&#39;클라이언트를 식별할 수 있도록 &#39;k8s-auth&#39;클라이언트의 Client Secret을 입력합니다.</li></ul></li><li><code>clientID</code>: k8s-auth <ul><li>OIDC 공급업체에게 인증을 요청하는 클라이언트 애플리케이션의 ID입니다.</li><li>&#39;k8s-auth&#39;클라이언트의 Client ID를 입력합니다.</li></ul></li><li><code>cloudConsoleRedirectURI</code>: <a href="https://console.cloud.google.com/kubernetes/oidc" target="_blank" rel="noopener noreferrer">https://console.cloud.google.com/kubernetes/oidc</a></li><li><code>extraParams</code>: <code>resource=token-groups-claim</code><ul><li>OIDC 공급업체에 전송할 추가적인 키-값 매개변수입니다.</li><li>Google에게 그룹 클레임을 하기 위해 <code>resource=token-groups-claim</code>를 입력합니다.</li></ul></li><li><code>groupPrefix</code>: &#39;-&#39; <ul><li>기존 이름과 충돌을 방지하기 위해 추가하는 그룹 클레임에 추가되는 프리픽스입니다.</li></ul></li><li><code>groupsClaim</code>: groups <ul><li>JWT 필드에서 사용자의 이름으로 사용할 필드를 입력합니다. 이 실습에서는 키클락에서 추가로 설정한 groups를 사용하기 위해서 groups로 설정합니다.</li><li>키클락의 Realm Roles에 해당합니다.</li></ul></li><li><code>issuerURI</code>: <a href="https://oncloud-1.site/realms/kubernetes" target="_blank" rel="noopener noreferrer">https://oncloud-1.site/realms/kubernetes</a><ul><li>OIDC 승인을 요청하는 URL입니다. URI는 HTTPS를 사용해야 하며, <code>https://example.com/adfs</code>과 같은 형식을 가졌습니다.</li><li>&#39;k8s-auth&#39;클라이언트가 속한 &#39;kubernetes&#39; Realm 주소를 입력합니다.</li></ul></li>',7),O=n("code",null,"kubectlRedirectURI",-1),B=n("a",{href:"http://localhost:8000",target:"_blank",rel:"noopener noreferrer"},"http://localhost:8000",-1),q=n("code",null,"kubectl oidc login",-1),T=n("li",null,"'k8s-auth'클라이언트의 'Valid redirect URIs'를 입력합니다.",-1),j=l("<li><code>scopes</code>: <ul><li>OIDC 제공업체에 전송할 추가적인 범위입니다</li><li>Google에게 사용자 정보를 받아오기 위해 openid를 입력합니다.</li></ul></li><li><code>userClaim</code>: <code>preferred_username</code><ul><li>JWT 필드에서 사용자의 이름으로 사용할 필드를 입력합니다. 이 실습에서는 이메일을 바로 사용자 이름으로 사용하기 위해서 <code>preferred_username</code>을 사용합니다.</li></ul></li><li><code>userPrefix</code>: &#39;-&#39; <ul><li>기존 이름과 충돌을 방지하기 위해 유저 클레임에 추가된 프리픽스입니다. 유저 클레임이 email이 아닌 경우, 기본적으로 발급자 프리픽스가 Kubernetes API server에 제공된 userID 앞에 붙습니다. 그 결과 사용자 식별자는 &#39;ISSUER_URI#USER&#39;가 됩니다.</li><li>본 실습에서는 유저 클레임을 email로 진행하므로 프리픽스를 &#39;-&#39;로 설정하여 프리픽스를 사용 중지합니다.</li></ul></li>",3),N=n("p",null,[s("위에 설정에 필요한 client secret은 "),n("code",null,"[kubernetes Realm]"),s(" - "),n("code",null,"[Client]"),s(" - "),n("code",null,"[k8s-auth]"),s(" - "),n("code",null,"[credentials]"),s(" 탭에 있는 Client secret을 복사하면 됩니다.")],-1),M=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2429/그림34.png",alt:"키클락 통합 인증에 필요한 Client secret 을 복사하는 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"키클락 통합 인증에 필요한 Client secret 을 복사하는 화면")],-1),P=n("code",null,"kubectl replace -f 1-3.clientconfig-gke-keycloak-w-oidc.yaml",-1),U=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl replace <span class="token parameter variable">-f</span> <span class="token number">1</span>-3.clientconfig-gke-keycloak-w-oidc.yaml</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># clientconfig.authentication.gke.io/default replaced</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-eks를-oidc-기능이-추가된-형태로-배포하기" tabindex="-1"><a class="header-anchor" href="#_2-eks를-oidc-기능이-추가된-형태로-배포하기"><span>2. EKS를 OIDC 기능이 추가된 형태로 배포하기</span></a></h3><p>GKE 이외의 AWS, Azure, Alibaba 등 다양한 클라우드 공급자들이 제공하는 관리형 쿠버네티스가 있지만, 국내에서 가장 많이 사용되는 AWS의 EKS 클러스터를 추가 배포하고 통합 인증을 구성하겠습니다.</p>`,3),V=n("code",null,"2-1.deploy-eks-env-only.sh",-1),L=n("code",null,"eksctl",-1),W=n("code",null,"eksctl-config",-1),F=n("code",null,"keycloak-w-oidc.yaml",-1),Z=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">identityProviders</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> keycloak</span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> oidc</span>
<span class="line">    <span class="token key atrule">issuerUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oncloud<span class="token punctuation">-</span>1.site/realms/kubernetes</span>
<span class="line">    <span class="token key atrule">clientId</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>auth</span>
<span class="line">    <span class="token key atrule">usernameClaim</span><span class="token punctuation">:</span> preferred_username</span>
<span class="line">    <span class="token key atrule">usernamePrefix</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">groupsClaim</span><span class="token punctuation">:</span> groups</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>코드를 보았을 때 <code>usernameClaim</code>으로 사용자 이름을 식별하고 <code>groupsClaim</code>을 통해서 group 정보를 식별하는 것을 확인할 수 있습니다. 또 키클락에 대한 인증 타입은 oidc이며 <code>issuerUrl</code>에는 GKE 구성과 동일하게 키클락에 접속 URL을 기입하고 있습니다.</p><p>다음으로는 OIDC 통합 인증을 수행할 때 마주할 수 있는 불편함을 해결하기 위해서 새로운 명령어인 <code>kubelogin</code>을만들게 된 이야기를 하도록 하겠습니다.</p><hr><h2 id="kubelogin이-가지는-의미와-구조-설명" tabindex="-1"><a class="header-anchor" href="#kubelogin이-가지는-의미와-구조-설명"><span>kubelogin이 가지는 의미와 구조 설명</span></a></h2><p>테스트를 위한 사전 준비 작업과 OIDC 기능을 포함하는 EKS와 GKE를 구성하였습니다. 이제 남은 것은 ‘통합 인증을 통해서 로그인을 진행하면되나?’ 라는 생각이 드실 수 있겠지만, 아직은 통합 인증을 수행할 수 없습니다.</p><p>그 이유는 EKS와 GKE의 쿠버네티스 인증 방식은 OIDC를 이용하는 것은 같지만, 이때 사용되는 명령어와 명령어 구조가 다르기 때문입니다.</p>`,7),Q=n("code",null,"kubectl oidc-login get-token",-1),H=n("code",null,"kubectl oidc login",-1),J=n("code",null,"kubectl oidc-login get-token",-1),Y=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/usr/bin/env bash</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-name function">kubelogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin class-name">local</span> <span class="token assign-left variable">vendor</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> ~/.kube/config <span class="token operator">|</span> <span class="token function">grep</span> current-context <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;:&#39;</span> <span class="token parameter variable">-f2</span> <span class="token operator">|</span> <span class="token function">grep</span> gke<span class="token variable">)</span></span>&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$vendor</span>&quot;</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    kubectl oidc login <span class="token parameter variable">--cluster</span><span class="token operator">=</span><span class="token string">&quot;hj-keycloak-oncloud-1-gke&quot;</span> --login-config<span class="token operator">=</span><span class="token string">&quot;/Users/mz01-hj/.keycloak/config&quot;</span></span>
<span class="line">  <span class="token keyword">else</span></span>
<span class="line">    kubectl oidc-login get-token <span class="token punctuation">\\</span></span>
<span class="line">      --oidc-issuer-url<span class="token operator">=</span>https://oncloud-1.site/realms/kubernetes <span class="token punctuation">\\</span></span>
<span class="line">      --oidc-client-id<span class="token operator">=</span>k8s-auth <span class="token punctuation">\\</span></span>
<span class="line">      --oidc-client-secret<span class="token operator">=</span>6qfWVLJ91PrGABqqXD613ScVk6j2Qw1d</span>
<span class="line">  <span class="token keyword">fi</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">kubelogin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>셸 스크립트를 통해서 간략하게 작성하다 보니 하드코딩되어 있는 부분이 많습니다. 따라서 구글 클라우드에서 다른 GKE 클러스터를 사용하게 되었을 때 발생하는 예외 상황에는 대응이 안 되어 있습니다. 그리고 키클락 클라이언트 시크릿이 변경될 때마다 값을 매번 업데이트 해야하는 불편함이 있습니다.</p>`,2),$=n("code",null,"kubelogin",-1),X=n("code",null,"kubelogin-installer.sh",-1),nn=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># declare variable.</span></span>
<span class="line"><span class="token assign-left variable">DOMAIN_NAME</span><span class="token operator">=</span>oncloud-1</span>
<span class="line"><span class="token assign-left variable">CLIENT_SECRET</span><span class="token operator">=</span>6qfWVLJ91PrGABqqXD613ScVk6j2Qw1d</span>
<span class="line"></span>
<span class="line"><span class="token comment">#  keycloak-login-config</span></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.keycloak <span class="token punctuation">;</span> <span class="token function">mkdir</span> ~/.keycloak</span>
<span class="line">kubectl get clientconfig <span class="token parameter variable">--context</span><span class="token operator">=</span>hj-keycloak-<span class="token variable">\${DOMAIN_NAME}</span>-gke <span class="token parameter variable">-n</span> kube-public default <span class="token parameter variable">-o</span> yaml <span class="token operator">&gt;</span> ~/.keycloak/config</span>
<span class="line"></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/bin/kubelogin</span>
<span class="line"><span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token string">&quot;/usr/local/bin/kubelogin.tmp&quot;</span> <span class="token operator">&lt;&lt;</span><span class="token string">&#39;EOF&#39;</span>
<span class="line">#!/usr/bin/env bash</span>
<span class="line"></span>
<span class="line">function kubelogin() {</span>
<span class="line">    local vendor=&quot;$(cat ~/.kube/config | grep current-context | cut -d &#39;:&#39; -f2 | grep gke)&quot;</span>
<span class="line"></span>
<span class="line">    if [ &quot;$vendor&quot; != &quot;&quot; ]; then</span>
<span class="line">        kubectl oidc login --cluster=&quot;hj-keycloak-\${DOMAIN_NAME}-gke&quot; --login-config=&quot;/Users/mz01-hj/.keycloak/config&quot;</span>
<span class="line">    else</span>
<span class="line">        kubectl oidc-login get-token \\</span>
<span class="line">          --oidc-issuer-url=https://\${DOMAIN_NAME}.site/realms/kubernetes \\</span>
<span class="line">          --oidc-client-id=k8s-auth \\</span>
<span class="line">          --oidc-client-secret=\${CLIENT_SECRET}</span>
<span class="line">    fi</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">kubelogin</span>
<span class="line">EOF</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">vendor</span><span class="token operator">=</span><span class="token string">&#39;$vendor&#39;</span> <span class="token assign-left variable">DOMAIN_NAME</span><span class="token operator">=</span><span class="token variable">$DOMAIN_NAME</span> <span class="token assign-left variable">CLIENT_SECRET</span><span class="token operator">=</span><span class="token variable">$CLIENT_SECRET</span> envsubst <span class="token operator">&lt;</span> /usr/local/bin/kubelogin.tmp <span class="token operator">&gt;&gt;</span> /usr/local/bin/kubelogin</span>
<span class="line"><span class="token function">rm</span> /usr/local/bin/kubelogin.tmp</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> <span class="token string">&quot;/usr/local/bin/kubelogin&quot;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;kubelogin installed successfully&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),sn=n("code",null,"kubelogin-installer.sh",-1),en=n("code",null,"DOMAIN_NAME",-1),an=n("code",null,"CLIENT_SECRET",-1),ln=n("code",null,"kubelogin",-1),tn=l(`<p>이제 테스트를 위한 모든 설정을 마쳤으니 EKS와 GKE에 대해서 인증/인가 실습을 진행하도록 하겠습니다.</p><hr><h2 id="eks와-gke에-대한-인증-인가-실습" tabindex="-1"><a class="header-anchor" href="#eks와-gke에-대한-인증-인가-실습"><span>EKS와 GKE에 대한 인증/인가 실습</span></a></h2><p>어느 것을 먼저 해도 상관은 없지만, GKE는 새로 컨텍스트를 만들기 때문에 EKS를 먼저 하는 것이 좀 더 무난하게 실습할 수 있습니다. 따라서 EKS에 대한 인증/인가를 우선 실습하도록 하겠습니다.</p><h3 id="_1-eks에-대한-인증-인가-실습" tabindex="-1"><a class="header-anchor" href="#_1-eks에-대한-인증-인가-실습"><span>1. EKS에 대한 인증/인가 실습</span></a></h3><p>EKS 클러스터에 인증/인가 실습을 위해서<strong>EKS 디렉터리</strong>로 이동하도록 하겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tree EKS</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># EKS</span></span>
<span class="line"><span class="token comment"># ├── 1.clusterrolebinding-4-devops-group-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># ├── 2-oncloud-1.swtich-ctx-hoon-to-soojin.sh</span></span>
<span class="line"><span class="token comment"># └── 3.set-cred-4-oidc-user.sh</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 0 directories, 3 files</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),on=n("code",null,"kubectl get pods",-1),cn=n("code",null,"eksctl",-1),pn=n("code",null,"1.clusterrolebinding-4-devops-group-as-admin.yaml",-1),rn=n("code",null,"kubectl",-1),dn=n("code",null,"1.clusterrolebinding-4-devops-group-as-admin.yaml",-1),un=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> oidc<span class="token punctuation">-</span>group<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>admin</span>
<span class="line"><span class="token key atrule">roleRef</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</span>
<span class="line">  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> cluster<span class="token punctuation">-</span>admin</span>
<span class="line"><span class="token key atrule">subjects</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</span>
<span class="line">    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Group</span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> devops</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 클러스터롤바인딩으로 인가에 대한 부분을 설정하였습니다.</p>`,2),mn=n("code",null,"kubectl",-1),kn=n("code",null,"2-oncloud-1.swtich-ctx-hoon-to-soojin.sh",-1),gn=n("code",null,"kubectl get pods",-1),hn=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get pod</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line">error: You must be logged <span class="token keyword">in</span> to the server <span class="token punctuation">(</span>Unauthorized<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),bn=n("code",null,"3.set-cred-4-oidc-user.sh",-1),vn=n("code",null,"3.set-cred-4-oidc-user.sh",-1),_n=n("code",null,"oidc-user",-1),fn=n("code",null,"kubectl",-1),yn=n("code",null,"kubelogin",-1),En=n("code",null,"kubectl",-1),Kn=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/usr/bin/env bash</span></span>
<span class="line"></span>
<span class="line">kubectl config set-credentials oidc-user <span class="token punctuation">\\</span></span>
<span class="line">  --exec-api-version<span class="token operator">=</span>client.authentication.k8s.io/v1beta1 <span class="token punctuation">\\</span></span>
<span class="line">  --exec-command<span class="token operator">=</span>kubelogin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 내용이 실제로는 아래와 같이 처리됩니다. 아래와 같은 현재 EKS를 포함한 온프레미스에 위치한 대부분의 쿠버네티스에 적용할 수 있는 통합 인증 설정입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl oidc-login get-token <span class="token punctuation">\\</span></span>
<span class="line">  --oidc-issuer-url<span class="token operator">=</span>https://oncloud-1.site/realms/kubernetes <span class="token punctuation">\\</span></span>
<span class="line">  --oidc-client-id<span class="token operator">=</span>k8s-auth <span class="token punctuation">\\</span></span>
<span class="line">  --oidc-client-secret<span class="token operator">=</span><span class="token punctuation">[</span>시크릿<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Cn=n("code",null,"oidc-user",-1),wn=n("code",null,"kubectl get pods -A --user=oidc-user",-1),Sn=n("code",null,'<FontIcon icon="iconfont icon-select"/>[Google 버튼]',-1),An=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2429/cats.jpg",alt:"키클락 통합 인증을 위해서 나타난 로그인 화면",tabindex:"0",loading:"lazy"}),n("figcaption",null,"키클락 통합 인증을 위해서 나타난 로그인 화면")],-1),Gn=n("p",null,"Google 버튼을 선택했을 때 이미 브라우저 상에 연결된 이메일 계정이 있다면, 해당 이메일로 인증 메일이 발송되었으니 이메일을 확인해달라는 안내 문구가 나타납니다. (만약 없다면 이메일을 선택하는 메시지가 나옵니다.)",-1),In=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2429/그림36.png",alt:"키클락에서 사용자 이메일로 확인을 요청하는 메시지를 보냈다는 화면 ",tabindex:"0",loading:"lazy"}),n("figcaption",null,"키클락에서 사용자 이메일로 확인을 요청하는 메시지를 보냈다는 화면 ")],-1),xn=n("code",null,"[Link to e-mail address verification]",-1),Dn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2429/그림37.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Rn=n("p",null,"위와 같은 흐름을 생동감 있게 표현하면 다음과 같이 처리가 되는 것입니다.",-1),zn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2429/영상1.gif",alt:"키클락을 통한 EKS 클러스터 통합 인증",tabindex:"0",loading:"lazy"}),n("figcaption",null,"키클락을 통한 EKS 클러스터 통합 인증")],-1),On=n("h3",{id:"_2-gke에-대한-인증-인가-실습",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-gke에-대한-인증-인가-실습"},[n("span",null,"2. GKE에 대한 인증/인가 실습")])],-1),Bn=n("code",null,"GKE",-1),qn=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tree GKE</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># GKE</span></span>
<span class="line"><span class="token comment"># ├── 1.clusterrolebinding-4-devops-group-as-admin-NOTWORK.yaml</span></span>
<span class="line"><span class="token comment"># ├── 2-hoon.clusterrolebinding-4-devops-user-as-admin.yaml</span></span>
<span class="line"><span class="token comment"># └── 2-soojin.clusterrolebinding-4-devops-user-as-admin.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Tn=n("code",null,"kubectx",-1),jn=n("code",null,"kubectl config use-context",-1),Nn=l(`<p>지금 컨텍스트가 GKE로 변경되었다면, 여기서 <code>kubelogin</code> 명령어를 입력하도록 하겠습니다. 입력하게 되면 다음 브라우저 화면이 나타나면서 인증되었다고 나타납니다.</p><figure><img src="https://yozm.wishket.com/media/news/2429/그림38.png" alt="GKE 클러스터에서 키클락 통합 인증이 완료된 화면" tabindex="0" loading="lazy"><figcaption>GKE 클러스터에서 키클락 통합 인증이 완료된 화면</figcaption></figure><p>터미널에는 다음과 같은 메시지가 출력됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 2023/10/30 19:11:46 Started webserver on localhost: 8000.</span></span>
<span class="line"><span class="token comment"># 2023/10/30 19:11:46 Attempting to open http://127.0.0.1:8000/login in default browser.</span></span>
<span class="line"><span class="token comment"># 2023/10/30 19:11:47 OIDC Authentication successful.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>인증이 완료되었다고 나타남과 동시에 새로운 컨텍스트가 생성되고, 지금 컨텍스트가 변경된 것을 확인할 수 있습니다. 위 과정을 생동감 있게 표현하면 다음과 같습니다.</p><figure><img src="https://lh7-us.googleusercontent.com/mu0iFH4l_8DgiHE7rbuhNSg4XPrOGjhZdo7kf-9HODuM1YnTUhQ-Q6tqTSmVyesaoLkLkU5ivuYZq6sO2mUBj7QjJoEZim9oyeO-WVMryAhefs-1CGvayjeMpzsCoO5yuREl0x1-wz80ntZoXTu_boU" alt="키클락을 통한 GKE 클러스터 통합 인증" tabindex="0" loading="lazy"><figcaption>키클락을 통한 GKE 클러스터 통합 인증</figcaption></figure>`,6),Mn=n("code",null,"kubectl get pods",-1),Pn=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get pods</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Error from server (Forbidden): pods is forbidden: User &quot;hj@mz.co.kr&quot; cannot list resource &quot;pods&quot; in API group in the namespace &quot;default&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Un=n("code",null,"2-hoon.clusterrolebinding-4-devops-user-as-admin.yaml",-1),Vn=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl apply <span class="token parameter variable">-f</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 2-hoon.clusterrolebinding-4-devops-user-as-admin.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>EKS와 동일하게 그룹을 사용하지 않는 이유는 이 글을 작성하는 시점에서 구글 GKE에서 JWT로부터 그룹에 대한 필드를 가져오는 기능이 정상동작하지 않고 있기 때문에 실습에서는 부득이하게 개인에 RBAC 인가 처리를 진행하고 있습니다. 따라서 이 부분은 향후 바꿀 수 있습니다.</p></div>`,2),Ln=n("code",null,"kubectx",-1),Wn=n("code",null,"<클러스터이름>-<클러스터이름-anthos-default-user>",-1),Fn=n("code",null,"kubectl get pods",-1),Zn=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get pods</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                    READY     STATUS     RESTARTS   AGE</span></span>
<span class="line"><span class="token comment"># keycloak-0              1/1       Running    0          85m</span></span>
<span class="line"><span class="token comment"># keycloak-postgresql-0   1/1       Running    0          85m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Qn=n("code",null,"kubectl get pods",-1),Hn=l('<hr><h2 id="키클락을-이용한-통합-인증으로-얻을-수-있는-이점들-정리" tabindex="-1"><a class="header-anchor" href="#키클락을-이용한-통합-인증으로-얻을-수-있는-이점들-정리"><span>키클락을 이용한 통합 인증으로 얻을 수 있는 이점들 정리</span></a></h2><p>지금까지의 실습을 통해서 키클락을 이용한 쿠버네티스 통합 인증을 구성하고 서로 다른 클라우드에 배포된 쿠버네티스 클러스터에 인증/인가를 진행 했습니다. 정리를 위해서 키클락 통합 인증으로 얻을 수 있는 이점을 요약하도록 하겠습니다.</p><p>첫 번째는 단순하게 EKS, GKE 뿐만 아니라 온프레미스 쿠버네티스 클러스터를 비롯해 SAML과 OIDC를 지원하는 다른 오픈소스 앱들에서도 통합 인증을 구성할 수 있다는 장점이 있습니다.</p><p>두 번째로는 대부분 Okta와 Onelogin과 같은 솔루션을 사용하실 수 있지만 법령 상의 규제로 SaaS를 사용할 수 없는 금융권 및 공공기관에서 오픈소스를 활용해 내부 조직에 인증 사업자(IdP)를 구성하실 수 있습니다.</p><p>세 번째로는 인증과 인가에 대한 설정을 중앙에서 관리할 수 있다는 점입니다. 조직이 커지면 커질수록 사용자를 관리하고 권한을 부여하는 일들이 굉장히 힘든 일이 될 수 있는데, 키클락을 Realm과 Role로 사용자들에 대한 관리를 효율적으로 할 수 있다는 점입니다.</p><figure><img src="https://yozm.wishket.com/media/news/2429/그림39.png" alt="키클락을 사용하면서 얻을 수 있는 이점들" tabindex="0" loading="lazy"><figcaption>키클락을 사용하면서 얻을 수 있는 이점들</figcaption></figure><p>긴 글을 읽어주셔서 감사합니다.</p><hr><h2 id="관련-레퍼런스-사이트" tabindex="-1"><a class="header-anchor" href="#관련-레퍼런스-사이트"><span>관련 레퍼런스 사이트</span></a></h2>',10),Jn=n("h3",{id:"gke-ingress-configuration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gke-ingress-configuration"},[n("span",null,"GKE Ingress Configuration")])],-1);function Yn(m,$n){const i=r("VPCard"),o=r("router-link"),u=r("SiteInfo"),k=r("VidStack"),a=r("FontIcon"),d=r("RouteLink");return _(),h("div",null,[n("h1",y,[n("a",E,[n("span",null,b(m.$frontmatter.title)+" 관련",1)])]),e(i,c(p({title:"Kubernetes > Article(s)",desc:"Article(s)",link:"/devops/k8s/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(i,c(p({title:"Google Cloud > Article(s)",desc:"Article(s)",link:"/devops/gcp/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(i,c(p({title:"AWS > Article(s)",desc:"Article(s)",link:"/devops/aws/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",K,[n("ul",null,[n("li",null,[e(o,{to:"#gke와-eks에-oidc-기능-구성하기"},{default:t(()=>[s("GKE와 EKS에 OIDC 기능 구성하기")]),_:1}),n("ul",null,[n("li",null,[e(o,{to:"#_1-gke에-oidc-기능-구성하기"},{default:t(()=>[s("1. GKE에 OIDC 기능 구성하기")]),_:1})]),n("li",null,[e(o,{to:"#_2-eks를-oidc-기능이-추가된-형태로-배포하기"},{default:t(()=>[s("2. EKS를 OIDC 기능이 추가된 형태로 배포하기")]),_:1})])])]),n("li",null,[e(o,{to:"#kubelogin이-가지는-의미와-구조-설명"},{default:t(()=>[s("kubelogin이 가지는 의미와 구조 설명")]),_:1})]),n("li",null,[e(o,{to:"#eks와-gke에-대한-인증-인가-실습"},{default:t(()=>[s("EKS와 GKE에 대한 인증/인가 실습")]),_:1}),n("ul",null,[n("li",null,[e(o,{to:"#_1-eks에-대한-인증-인가-실습"},{default:t(()=>[s("1. EKS에 대한 인증/인가 실습")]),_:1})]),n("li",null,[e(o,{to:"#_2-gke에-대한-인증-인가-실습"},{default:t(()=>[s("2. GKE에 대한 인증/인가 실습")]),_:1})])])]),n("li",null,[e(o,{to:"#키클락을-이용한-통합-인증으로-얻을-수-있는-이점들-정리"},{default:t(()=>[s("키클락을 이용한 통합 인증으로 얻을 수 있는 이점들 정리")]),_:1})]),n("li",null,[e(o,{to:"#관련-레퍼런스-사이트"},{default:t(()=>[s("관련 레퍼런스 사이트")]),_:1}),n("ul",null,[n("li",null,[e(o,{to:"#gke-ingress-configuration"},{default:t(()=>[s("GKE Ingress Configuration")]),_:1})])])])])]),C,e(u,{name:"키클락을 활용한 통합 인증 실습하기 | 요즘IT",desc:"KubeCon + Cloud Native North America 2023에서 발표한 <Beyond Passwords: Keycloak's Contributions to IAM(Identity and Access Management) + Security>를 정리한 글입니다. 발표 내용을 3회로 나누어 발행합니다. 1부에서는 키클락에 대한 기능 소개와 이점에 대해 살펴보았습니다. 2부에서는 키클락을 구성하기 위해 실행해야 할 사전 작업을 알아보고, 이번 3부에서는 키클락을 사용하여 EKS, GKE와 같은 관리형 쿠버네티스 클러스터를 통합인증 하여 관리하는 방법에 대해 살펴봅니다.",url:"https://yozm.wishket.com/magazine/detail/2429/",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",preview:"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC36.png"}),e(k,{src:"youtube/nRd0ejHADss"}),n("p",null,[s("KubeCon + Cloud Native North America 2023에서 발표한 "),n("a",w,[e(a,{icon:"fa-brands fa-youtube"}),s("<Beyond Passwords: Keycloak's Contributions to IAM(Identity and Access Management) + Security>")]),s("를 정리한 글입니다. 발표 내용을 3회로 나누어 발행합니다. "),e(d,{to:"/yozm.wishket.com/2425.html"},{default:t(()=>[s("1부")]),_:1}),s("에서는 "),n("a",S,[e(a,{icon:"fas fa-globe"}),s("키클락")]),s("에 대한 기능 소개와 이점에 대해 살펴보았습니다. "),e(d,{to:"/yozm.wishket.com/2427.html"},{default:t(()=>[s("2부")]),_:1}),s("에서는 키클락을 구성하기 위해 실행해야 할 사전 작업을 알아보고, 이번 3부에서는 키클락을 사용하여 EKS, GKE와 같은 관리형 쿠버네티스 클러스터를 통합인증 하여 관리하는 방법에 대해 살펴봅니다. 발표 자료는 "),n("a",A,[e(a,{icon:"fas fa-globe"}),s("KubeCon NA 2023 홈페이지")]),s("에서 다운받으실 수 있습니다.")]),n("ul",null,[n("li",null,[s("1부: "),e(d,{to:"/yozm.wishket.com/2425.html"},{default:t(()=>[s("신원확인, 통합인증관리 오픈소스 ‘키클락’을 알아보자")]),_:1})]),n("li",null,[s("2부: "),e(d,{to:"/yozm.wishket.com/2427.html"},{default:t(()=>[s("키클락 구성을 위한 기나긴 사전 작업 한번에 보기")]),_:1})]),n("li",null,[n("strong",null,[s("3부: "),e(d,{to:"/yozm.wishket.com/2429.html"},{default:t(()=>[s("키클락을 활용한 통합 인증 실습하기")]),_:1})])])]),v(" TODO: add VPCard "),G,n("p",null,[s("먼저 현재 디렉터리에 위치한 "),e(a,{icon:"iconfont icon-yaml"}),I,s("에 대해 알아보겠습니다.")]),n("p",null,[s("."),e(a,{icon:"iconfont icon-yaml"}),x,s("은 사전 준비 작업에서 GKE 클러스터를 생성할 때 추가로 입력한 "),D,s("으로 만들어진 구글 클라우드에 커스텀 오브젝트입니다. 이 파일 내부에는 OIDC 인증을 위한 파라미터를 설정할 수 있습니다.")]),R,n("ul",null,[z,n("li",null,[O,s(": "),B,n("ul",null,[n("li",null,[s("인가를 위해 "),e(a,{icon:"iconfont icon-shell"}),q,s("에 사용되는 리디렉션 URL입니다.")]),T])]),j]),N,M,n("p",null,[s("값을 올바르게 채워넣었다면 "),e(a,{icon:"iconfont icon-shell"}),P,s("로 변경합니다.")]),U,n("p",null,[s("OIDC 기능이 추가된 EKS를 배포하기 위해서는 "),e(a,{icon:"iconfont icon-shell"}),V,s(" 스크립트를 실행하면 됩니다. 이 스크립트는 EKS를 관리하는 "),L,s("로 EKS 클러스터를 생성합니다. 이때 필요한 EKS 클러스터의 설정은 같은 위치에 있는 "),e(a,{icon:"fas fa-folder-open"}),W,s(" 디렉터리 아래의 "),e(a,{icon:"iconfont icon-yaml"}),F,s("에 정의되어 있습니다. EKS 클러스터에 적용될 키클락 통합 인증 부분은 다음과 같습니다.")]),Z,n("p",null,[s("EKS는 kubectl과 같은 명령이 실행될 때 "),e(a,{icon:"iconfont icon-shell"}),Q,s(" 명령어로 JWT를 키클락으로부터 전달받아서 인증하는 방식이고, GKE는 "),e(a,{icon:"iconfont icon-shell"}),H,s(" 명령으로 인증이 된 별도의 컨텍스트(context)를 생성해서 쿠버네티스 통합 인증을 진행하는 방식입니다.클러스터 인증 명령어가 다르기 때문에 명령어를 두 개 써야 하는 문제가 발생하였습니다. 이를 효과적으로 해결하기 위해서 현재 설정 값에 따라 다르게 동작하는 새로운 명령어를 만들게 되었습니다. 이 명령어가 kubelogin 입니다.")]),n("p",null,[s("아이디어는 이렇습니다. 현재 컨텍스트 이름 안에 gke라는 값이 있다면 해당 클러스터를 gke로 판별하여서 컨텍스트를 생성하도록 조치하고, 그 이외에는 "),e(a,{icon:"iconfont icon-shell"}),J,s(" 명령을 통해 JWT를 발급받아서 인증을 처리하게 하는 방식입니다. 그렇게 작성된 코드는 다음과 같습니다.")]),Y,n("p",null,[s("매번 업데이트해야 하는 불편함을 해결하기 위해서 "),$,s("을 생성하는 "),e(a,{icon:"iconfont icon-shell"}),X,s("스크립트를 만들었습니다.")]),nn,n("p",null,[s("."),e(a,{icon:"iconfont icon-shell"}),sn,s("는 "),en,s(" 이나 "),an,s("과 같은 값을 환경변수로 load 시켜서 "),ln,s(" 셸 스크립트를 실행이 가능한 경로에 작성하는 방식입니다.")]),tn,n("p",null,[s("첫 번째로 먼저 "),e(a,{icon:"iconfont icon-shell"}),on,s(" 로 쿠버네티스 파드가 조회되는지 확인합니다.")]),n("p",null,[cn,s("로 EKS를 생성한 경우 최초에는 관리자 권한이 담긴 사용자이기 때문에 조회가 가능합니다. EKS 통합 인증의 경우 현재 상태에서 인가는 키클락을 통해서 진행되고 그다음 사용자로부터 쿠버네티스에 대한 인가는 RBAC을 통해서 이뤄집니다. 따라서 현재 디렉터리에 있는 "),e(a,{icon:"iconfont icon-yaml"}),pn,s("을 적용해서 키클락 통합 인증을 통해 접속한 사용자들이 "),rn,s("을 사용할 수 있도록 하겠습니다. "),e(a,{icon:"iconfont icon-yaml"}),dn,s(" 은 쿠버네티스 클러스터 관리자 권한을 group이 devops 인 사람에게 부여하겠다는 내용을 담고 있습니다.")]),un,n("p",null,[s("두 번째로 새로운 사용자로 EKS에 "),mn,s(" 사용이 가능한지 확인하기 위해서 새로운 사용자로 전환해야합니다. 현재 디렉터리에 위치한 "),e(a,{icon:"iconfont icon-shell"}),kn,s(" 으로 새로운 컨텍스트를 만들고 사용자를 변경하겠습니다.")]),n("p",null,[s("이 셸 스크립트는 aws 명령을 통해서 EKS에 새로운 사용자로 접속할 수 있는 컨텍스트를 생성하는 명령입니다. 컨텍스트가 생성되고 새로운 컨텍스트로 변경된 후에 다시 "),e(a,{icon:"iconfont icon-shell"}),gn,s(" 명령을 입력한다면, 다음과 같이 새로운 컨텍스트에 대해서 인증하지 않아 에러가 발생합니다.")]),hn,n("p",null,[s("세 번째로, 키클락을 이용한 통합인증 진행을 위해서 "),e(a,{icon:"iconfont icon-shell"}),bn,s("셸 스크립트를 실행합니다. "),e(a,{icon:"iconfont icon-shell"}),vn,s("는 "),_n,s("라는 새로운 "),fn,s("의 사용자를 만들고 "),yn,s("을 "),En,s("을 사용할 때마다 호출하도록 설정하는 내용의 스크립트입니다. 이를 통해서 키클락을 통한 JWT를 명령 실행 마다 받을 수 있고 인증이 가능하게 처리됩니다.")]),Kn,n("p",null,[s("셸 스크립트를 실행하여 "),Cn,s("라는 사용자를 만들었다면, "),e(a,{icon:"iconfont icon-shell"}),wn,s(" 명령을 통해서 다시 쿠버네티스 파드를 조회해보겠습니다. 해당 명령어를 입력하였을 때 터미널에 결과가 나타나지 않고 다음과 같은 웹 브라우저가 나타납니다. 이때 키클락에 대한 로그인 화면이 나타나는데, 여기서 우리는 "),Sn,s("을 눌러서 구글 로그인으로 인증을 진행해 보겠습니다.")]),An,Gn,In,n("p",null,[s("실제로 사용하는 메일 서비스에 메일함을 확인하였을 때 아래와 같은 인증 메일이 온 것을 확인할 수 있습니다. 여기서 "),e(a,{icon:"iconfont icon-select"}),xn,s("을 누르면 터미널에서 실행했던 명령 결과가 나타납니다. 즉 이 과정을 통해서 EKS에서의 키클락 인증이 완료되고, 인증 완료된 그룹 devops의 권한으로 파드 조회 결과를 확인할 수 있게 된 것입니다.")]),Dn,Rn,zn,On,n("p",null,[s("GKE 환경에서의 인증/인가를 테스트하기 위해서 상위 디렉터리에 위치한 "),e(a,{icon:"fas fa-folder-open"}),Bn,s(" 디렉터리로 이동합니다.")]),qn,n("p",null,[s("앞에서 말씀드린 것처럼 GKE의 경우 EKS와 다른 쿠버네티스 클러스터와 다르게통합 인증을 위한 컨텍스트를 생성해야 합니다. 그래서 컨텍스트를 생성하기 위해 먼저 지금의 EKS 컨텍스트에서 GKE 컨텍스트로 이동이 필요합니다. 이는 "),e(a,{icon:"iconfont icon-shell"}),Tn,s(" 명령 또는 "),e(a,{icon:"iconfont icon-shell"}),jn,s("를 사용하면 바로 전환이 가능합니다.")]),Nn,n("p",null,[s("현재 상태에서 GKE 클러스터에 "),e(a,{icon:"iconfont icon-shell"}),Mn,s(" 를 입력한다면, 다음과 같은 에러가 나타납니다.")]),Pn,n("p",null,[s("이는 키클락을 통해서 인증은 완료되었지만 쿠버네티스 RBAC을 통해서는 인가가 되지 않아서 발생하는 에러입니다. 이 문제는 GKE 클러스터에 어드민 컨텍스트로 다시 돌아가 클러스터롤바인딩을 적용해주면 해결 됩니다. 적용할 클러스터롤바인딩은 "),e(a,{icon:"iconfont icon-yaml"}),Un,s(" 입니다.")]),Vn,n("p",null,[s("다음으로 "),Ln,s("로 "),Wn,s("와 같은 이름 형식을 사용하는 GKE 컨텍스트로 이동합니다. 이동하였다면 다시 "),e(a,{icon:"iconfont icon-shell"}),Fn,s("를 입력해보겠습니다.")]),Zn,n("p",null,[s("키클락을 통한 인증이 완료된 사용자가 이제는 "),e(a,{icon:"iconfont icon-shell"}),Qn,s("를 통해서 파드를 확인할 수 있는 것을 알아봤습니다.")]),Hn,e(i,c(p({title:"IaC/Keycloak at main · sysnet4admin/IaC · GitHub",desc:"Infrastructure as Code",link:"https://github.com/sysnet4admin/IaC/tree/main/Keycloak",logo:"https://avatars.githubusercontent.com/u/29163931?v=4",background:"rgba(10,10,10,0.2)"})),null,16),e(u,{name:"How to Secure Your Kubernetes Cluster with OpenID Connect and RBAC | Okta Developer",desc:"Learn how to set up Okta as an OpenID Connect provider using Terraform for access to Kubernetes API server.",url:"https://developer.okta.com/blog/2021/11/08/k8s-api-server-oidc",logo:"https://developer.okta.com/assets-jekyll/favicon/apple-touch-icon.png",preview:"https://developer.okta.com/assets-jekyll/blog/k8s-api-server-oidc/kube-login-oidc-ad4caf57f124e622897e0781fe1e3d6e1ecb5c6099776e6677ca800c4458f1de.jpg"}),e(i,c(p({title:"int128/kubelogin",desc:"kubectl plugin for Kubernetes OpenID Connect authentication (kubectl oidc-login)",link:"https://github.com/int128/kubelogin",logo:"https://avatars.githubusercontent.com/u/321266?v=4",background:"rgba(10,10,10,0.2)"})),null,16),e(i,c(p({title:"Use external identity providers to authenticate to GKE  |  Google Kubernetes Engine (GKE)  |  Google Cloud",desc:"This page explains how to configure an external identity provider to authenticate into Google Kubernetes Engine (GKE) clusters.",link:"https://cloud.google.com/kubernetes-engine/docs/how-to/oidc?hl=en",logo:"https://cloud.google.com/favicon.ico",background:"rgba(23,78,166,0.2)"})),null,16),e(i,c(p({title:"Config File Schema - eksctl",desc:"The official CLI for Amazon EKS",link:"https://eksctl.io/usage/schema/",logo:"https://eksctl.io/img/favicon.png",background:"rgba(82,108,254,0.2)"})),null,16),Jn,e(i,c(p({title:"GKE Ingress for Application Load Balancers  |  Google Kubernetes Engine (GKE)  |  Google Cloud",desc:"This page explains what Ingress for Application Load Balancers is and how it works in Google Kubernetes Engine (GKE).",link:"https://cloud.google.com/kubernetes-engine/docs/concepts/ingress?hl=en",logo:"https://cloud.google.com/favicon.ico",background:"rgba(23,78,166,0.2)"})),null,16),e(i,c(p({title:"Set up an external Application Load Balancer with Ingress  |  Kubernetes Engine  |  Google Cloud",desc:"This tutorial shows how to run a web application behind an external Application Load Balancer by configuring the Ingress resource.",link:"https://cloud.google.com/kubernetes-engine/docs/tutorials/http-balancer?hl=en",logo:"https://cloud.google.com/favicon.ico",background:"rgba(23,78,166,0.2)"})),null,16),e(i,c(p({title:"Using Google-managed SSL certificates  |  Google Kubernetes Engine (GKE)  |  Google Cloud",desc:"This page shows how you can use Ingress objects to create external load balancers with Google-managed SSL certificates. These certificates are Domain Validation (DV) certificates that Google provisions, renews, and manages for your domain names. These certificates don't demonstrate your individual or organizational identity.",link:"https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs?hl=en",logo:"https://cloud.google.com/favicon.ico",background:"rgba(23,78,166,0.2)"})),null,16)])}const ss=g(f,[["render",Yn],["__file","2429.html.vue"]]),es=JSON.parse('{"path":"/yozm.wishket.com/2429.html","title":"키클락을 활용한 통합 인증 실습하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"키클락을 활용한 통합 인증 실습하기","description":"Article(s) > 키클락을 활용한 통합 인증 실습하기","icon":"iconfont icon-k8s","category":["Kubernetes","VM","CNCF","IAM","KeyCloak","Google","Google Cloud","GCP","GKE","Amazon","AWS","EKS","Article(s)"],"tag":["blog","yozm.wishket.com","kubernetes","vm","cncf","iam","keycloak","google","googlecloud","google-cloud","gcp","gcp-gke","amazon","aws","aws-eks"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 키클락을 활용한 통합 인증 실습하기"},{"property":"og:description","content":"키클락을 활용한 통합 인증 실습하기"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2429.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2429.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"키클락을 활용한 통합 인증 실습하기"}],["meta",{"property":"og:description","content":"Article(s) > 키클락을 활용한 통합 인증 실습하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC36.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC36.png"}],["meta",{"name":"twitter:image:alt","content":"키클락을 활용한 통합 인증 실습하기"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"vm"}],["meta",{"property":"article:tag","content":"cncf"}],["meta",{"property":"article:tag","content":"iam"}],["meta",{"property":"article:tag","content":"keycloak"}],["meta",{"property":"article:tag","content":"google"}],["meta",{"property":"article:tag","content":"googlecloud"}],["meta",{"property":"article:tag","content":"google-cloud"}],["meta",{"property":"article:tag","content":"gcp"}],["meta",{"property":"article:tag","content":"gcp-gke"}],["meta",{"property":"article:tag","content":"amazon"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"aws-eks"}],["meta",{"property":"article:published_time","content":"2024-01-24T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"키클락을 활용한 통합 인증 실습하기\\",\\"image\\":[\\"https://lh7-us.googleusercontent.com/rSZ5cZousSbPxX1VFY4LtN4vRnqOiTcpg8v9ihc5oxAk3F48oPDYNrtVb7LpdQR6k-bpetZtwiFTHPU-9KxrgJIwnBO7kKCQKCS_ypWe77e4aDtvjiM2FefhdS7o8GEYiXDvuCnasfIENVWvaQhVD6E\\",\\"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC34.png\\",\\"https://yozm.wishket.com/media/news/2429/cats.jpg\\",\\"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC36.png\\",\\"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC37.png\\",\\"https://yozm.wishket.com/media/news/2429/%EC%98%81%EC%83%811.gif\\",\\"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC38.png\\",\\"https://lh7-us.googleusercontent.com/mu0iFH4l_8DgiHE7rbuhNSg4XPrOGjhZdo7kf-9HODuM1YnTUhQ-Q6tqTSmVyesaoLkLkU5ivuYZq6sO2mUBj7QjJoEZim9oyeO-WVMryAhefs-1CGvayjeMpzsCoO5yuREl0x1-wz80ntZoXTu_boU\\",\\"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC39.png\\"],\\"datePublished\\":\\"2024-01-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/devops/k8s/articles/README.md","date":"2024-01-24T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2429/%EA%B7%B8%EB%A6%BC36.png"},"headers":[{"level":2,"title":"GKE와 EKS에 OIDC 기능 구성하기","slug":"gke와-eks에-oidc-기능-구성하기","link":"#gke와-eks에-oidc-기능-구성하기","children":[{"level":3,"title":"1. GKE에 OIDC 기능 구성하기","slug":"_1-gke에-oidc-기능-구성하기","link":"#_1-gke에-oidc-기능-구성하기","children":[]},{"level":3,"title":"2. EKS를 OIDC 기능이 추가된 형태로 배포하기","slug":"_2-eks를-oidc-기능이-추가된-형태로-배포하기","link":"#_2-eks를-oidc-기능이-추가된-형태로-배포하기","children":[]}]},{"level":2,"title":"kubelogin이 가지는 의미와 구조 설명","slug":"kubelogin이-가지는-의미와-구조-설명","link":"#kubelogin이-가지는-의미와-구조-설명","children":[]},{"level":2,"title":"EKS와 GKE에 대한 인증/인가 실습","slug":"eks와-gke에-대한-인증-인가-실습","link":"#eks와-gke에-대한-인증-인가-실습","children":[{"level":3,"title":"1. EKS에 대한 인증/인가 실습","slug":"_1-eks에-대한-인증-인가-실습","link":"#_1-eks에-대한-인증-인가-실습","children":[]},{"level":3,"title":"2. GKE에 대한 인증/인가 실습","slug":"_2-gke에-대한-인증-인가-실습","link":"#_2-gke에-대한-인증-인가-실습","children":[]}]},{"level":2,"title":"키클락을 이용한 통합 인증으로 얻을 수 있는 이점들 정리","slug":"키클락을-이용한-통합-인증으로-얻을-수-있는-이점들-정리","link":"#키클락을-이용한-통합-인증으로-얻을-수-있는-이점들-정리","children":[]},{"level":2,"title":"관련 레퍼런스 사이트","slug":"관련-레퍼런스-사이트","link":"#관련-레퍼런스-사이트","children":[{"level":3,"title":"GKE Ingress Configuration","slug":"gke-ingress-configuration","link":"#gke-ingress-configuration","children":[]}]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.04,"words":1812},"filePathRelative":"yozm.wishket.com/2429.md","localizedDate":"2024년 1월 24일","excerpt":"\\n"}');export{ss as comp,es as data};
