import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as e,g as t,d as o,a as d,f as m,r as c,o as h}from"./app-BgNevrm5.js";const k={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 4.2")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),C=n("code",null,"CaseIterable",-1),S=m(`<p>Prior to Swift 4.2 this either took hacks, hand-coding, or Sourcery code generation to accomplish, but now all you need to do is make your enum conform to the <code>CaseIterable</code> protocol. At compile time, Swift will automatically generate an <code>allCases</code> property that is an array of all your enum’s cases, in the order you defined them.</p><p>For example, this creates an enum of pasta shapes and asks Swift to automatically generate an <code>allCases</code> array for it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Pasta</span><span class="token punctuation">:</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> cannelloni<span class="token punctuation">,</span> fusilli<span class="token punctuation">,</span> linguine<span class="token punctuation">,</span> tagliatelle</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can then go ahead and use that property as a regular array – it will be a <code>[Pasta]</code> given the code above, so we could print it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> shape <span class="token keyword">in</span> <span class="token class-name">Pasta</span><span class="token punctuation">.</span>allCases <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I like eating </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">shape</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This automatic synthesis of <code>allCases</code> will only take place for enums that do not use associated values. Adding those automatically wouldn’t make sense, however if you want you can add it yourself:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> allCases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Car</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>ford<span class="token punctuation">,</span> <span class="token punctuation">.</span>toyota<span class="token punctuation">,</span> <span class="token punctuation">.</span>jaguar<span class="token punctuation">,</span> <span class="token punctuation">.</span>bmw<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">porsche</span><span class="token punctuation">(</span>convertible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">porsche</span><span class="token punctuation">(</span>convertible<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> ford<span class="token punctuation">,</span> toyota<span class="token punctuation">,</span> jaguar<span class="token punctuation">,</span> bmw</span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">porsche</span><span class="token punctuation">(</span>convertible<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this time, Swift is unable to synthesize the <code>allCases</code> property if any of your enum cases are marked unavailable. So, if you need <code>allCases</code> then you’ll need to add it yourself, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Direction</span><span class="token punctuation">:</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> allCases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Direction</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>north<span class="token punctuation">,</span> <span class="token punctuation">.</span>south<span class="token punctuation">,</span> <span class="token punctuation">.</span>east<span class="token punctuation">,</span> <span class="token punctuation">.</span>west<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> north<span class="token punctuation">,</span> south<span class="token punctuation">,</span> east<span class="token punctuation">,</span> west</span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@available</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> unavailable<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> all</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>You need to add <code>CaseIterable</code> to the original declaration of your enum rather than an extension in order for the <code>allCases</code> array to be synthesized. This means you can’t use extensions to retroactively make existing enums conform to the protocol.</p></div>`,10),D={class:"hint-container details"},I=n("summary",null,"Other Changes in Swift 4.2",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-1-to-4-2.playground.zip",target:"_blank",rel:"noopener noreferrer"};function A(l,P){const a=c("VPCard"),i=c("FontIcon");return h(),r("div",null,[n("h1",g,[n("a",f,[n("span",null,u(l.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,v,s(a,e(t({title:"Derived collections of enum cases | Changes in Swift 4.2",desc:"Derived collections of enum cases",link:"https://hackingwithswift.com/swift/4.2/caseiterable",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",y,[o("SE-0194 ("),s(i,{icon:"iconfont icon-github"}),_,o(")")]),o(" introduced a new "),C,o(" protocol that automatically generates an array property of all cases in an enum.")]),S,n("details",D,[I,d(` 
\`\`\`component VPCard
{
  "title": "Derived collections of enum cases | Changes in Swift 4.2",
  "desc": "Derived collections of enum cases",
  "link": "/hackingwithswift.com/swift/4.2/caseiterable.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,e(t({title:"Warning and error diagnostic directives | Changes in Swift 4.2",desc:"Warning and error diagnostic directives",link:"/hackingwithswift.com/swift/4.2/warning-error.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Dynamic member look up | Changes in Swift 4.2",desc:"Dynamic member look up",link:"/hackingwithswift.com/swift/4.2/dynamic-member-lookup.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Enhanced conditional conformances | Changes in Swift 4.2",desc:"Enhanced conditional conformances",link:"/hackingwithswift.com/swift/4.2/conditional-conformance.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Random number generation and shuffling | Changes in Swift 4.2",desc:"Random number generation and shuffling",link:"/hackingwithswift.com/swift/4.2/random.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Simpler, more secure hashing | Changes in Swift 4.2",desc:"Simpler, more secure hashing",link:"/hackingwithswift.com/swift/4.2/hashable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Checking sequence elements match a condition | Changes in Swift 4.2",desc:"Checking sequence elements match a condition",link:"/hackingwithswift.com/swift/4.2/allsatisfy.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"In-place collection element removal | Changes in Swift 4.2",desc:"In-place collection element removal",link:"/hackingwithswift.com/swift/4.2/remove-where.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Boolean toggling | Changes in Swift 4.2",desc:"Boolean toggling",link:"/hackingwithswift.com/swift/4.2/toggle.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[s(i,{icon:"fas fa-file-zipper"}),o("Download Swift 4.2 playground")])])])])}const j=p(k,[["render",A],["__file","caseiterable.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/swift/4.2/caseiterable.html","title":"Derived collections of enum cases","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Derived collections of enum cases","description":"Article(s) > Derived collections of enum cases","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.2"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Derived collections of enum cases"},{"property":"og:description","content":"Derived collections of enum cases"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/caseiterable.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/caseiterable.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Derived collections of enum cases"}],["meta",{"property":"og:description","content":"Article(s) > Derived collections of enum cases"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.2"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Derived collections of enum cases\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swift/5.0/compactmapvalues.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.39,"words":718},"filePathRelative":"hackingwithswift.com/swift/4.2/caseiterable.md","excerpt":"\\n"}');export{j as comp,B as data};
