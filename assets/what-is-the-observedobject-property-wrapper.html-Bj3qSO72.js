import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as c,e as s,n as a,g as n,f as p,r as l,o as h}from"./app-BgNevrm5.js";const d={},b={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},u=e("nav",{class:"table-of-contents"},[e("ul")],-1),w=e("hr",null,null,-1),g=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI gives us the <code>@ObservedObject</code> property wrapper so that views can watch the state of an external object, and be notified when something important has changed. It is similar in behavior to <code>@StateObject</code>, except it must <em>not</em> be used to create objects – use <code>@ObservedObject</code> only with objects that have been created elsewhere, otherwise SwiftUI might accidentally destroy the object.</p><p>For example, we might use something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> order<span class="token punctuation">:</span> <span class="token class-name">Order</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// your code here</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>Order</code> class uses <code>@Published</code> so it will automatically send change announcements when <code>items</code> changes, and <code>ContentView</code> uses <code>@ObservedObject</code> to watch for those announcements. Without <code>@ObservedObject</code> the change announcements would be sent but ignored.</p><p>Although that looks straightforward enough, it’s worth digging into a few specifics.</p><p>First, any type you mark with <code>@ObservedObject</code> must conform to the <code>ObservableObject</code> protocol, which in turn means it must be a class rather than a struct. This isn’t optional – SwiftUI requires us to use a class here.</p><p>Second, observed objects are specifically designed for data that is external to your view, which means it might be shared across more than one view. The <code>@ObservedObject</code> property wrapper will automatically make sure the property is watched closely so that important changes will reload any views using it. This also means the data must be created elsewhere, then sent in to your view.</p><p>Third, not all properties in an observed object cause views to refresh – you need to decide which properties should send change notifications, either using <code>@Published</code> or custom announcements. Types that conform to <code>ObservableObject</code> are given a default <code>objectWillChange</code> publisher to make custom announcements as needed.</p>`,9),f={class:"hint-container details"},v=e("summary",null,"Similar solutions…",-1);function k(o,y){const t=l("VPCard");return h(),r("div",null,[e("h1",b,[e("a",m,[e("span",null,c(o.$frontmatter.title)+" 관련",1)])]),s(t,a(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),u,w,s(t,a(n({title:"What is the @ObservedObject property wrapper? | SwiftUI by Example",desc:"What is the @ObservedObject property wrapper?",link:"https://hackingwithswift.com/quick-start/swiftui/what-is-the-observedobject-property-wrapper",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,e("details",f,[v,s(t,a(n({title:"What's the difference between @ObservedObject, @State, and @EnvironmentObject? | SwiftUI by Example",desc:"What's the difference between @ObservedObject, @State, and @EnvironmentObject?",link:"/hackingwithswift.com/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"How to use @ObservedObject to manage state from external objects | SwiftUI by Example",desc:"How to use @ObservedObject to manage state from external objects",link:"/hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"How to fix “Referencing initializer 'init(wrappedValue:)' on 'ObservedObject' requires that 'SomeType' conform to 'ObservableObject'” | SwiftUI by Example",desc:"How to fix “Referencing initializer 'init(wrappedValue:)' on 'ObservedObject' requires that 'SomeType' conform to 'ObservableObject'”",link:"/hackingwithswift.com/swiftui/how-to-fix-referencing-initializer-initwrappedvalue-on-observedobject-requires-that-sometype-conform-to-observableobject.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"What is the @EnvironmentObject property wrapper? | SwiftUI by Example",desc:"What is the @EnvironmentObject property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-environmentobject-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,a(n({title:"What is the @StateObject property wrapper? | SwiftUI by Example",desc:"What is the @StateObject property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-stateobject-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const _=i(d,[["render",k],["__file","what-is-the-observedobject-property-wrapper.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftui/what-is-the-observedobject-property-wrapper.html","title":"What is the @ObservedObject property wrapper?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What is the @ObservedObject property wrapper?","description":"Article(s) > What is the @ObservedObject property wrapper?","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What is the @ObservedObject property wrapper?"},{"property":"og:description","content":"What is the @ObservedObject property wrapper?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-observedobject-property-wrapper.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-observedobject-property-wrapper.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What is the @ObservedObject property wrapper?"}],["meta",{"property":"og:description","content":"Article(s) > What is the @ObservedObject property wrapper?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is the @ObservedObject property wrapper?\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.13,"words":638},"filePathRelative":"hackingwithswift.com/swiftui/what-is-the-observedobject-property-wrapper.md","excerpt":"\\n"}');export{_ as comp,x as data};
