import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as u,e as t,n as s,g as e,d as i,a as d,f as h,r as l,o as g}from"./app-BgNevrm5.js";const m={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),y=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 5.1")],-1),v={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0245-array-uninitialized-initializer.md",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"apple/swift-evolution",-1),_=h(`<p>To use the initializer, tell it the capacity you want, then provide a closure to fill in the values however you need. Your closure will be given an unsafe mutable buffer pointer where you can write your values, as well as an <code>inout</code> second parameter that lets you report back how many values you actually used.</p><p>For example, we could make an array of 10 random integers like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> randomNumbers <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>unsafeUninitializedCapacity<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> buffer<span class="token punctuation">,</span> initializedCount <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">        buffer<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    initializedCount <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are some rules here:</p><ol><li>You don’t need to use all the capacity you ask for, but you can’t go <em>over</em> capacity. So, if you ask for a capacity of 10 you can set <code>initializedCount</code> to 0 through 10, but not 11.</li><li>If you don’t initialize elements that end up being in your array – for example if you set <code>initializedCount</code> to 5 but don’t actually provide values for elements 0 through 4 – then they are likely to be filled with random data. This is A Bad Idea.</li><li>If you don’t set <code>initializedCount</code> it will be 0, so any data you assigned will be lost.</li></ol><p>Now, we <em>could</em> have rewritten the above code using <code>map()</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> randomNumbers2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">...</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s certainly easier to read, but it’s less efficient: it creates a range, creates a new empty array, sizes it up to the correct amount, loops over the range, and calls the closure once for each range item.</p>`,8),C={class:"hint-container details"},S=n("summary",null,"Other Changes in Swift 5.1",-1),I={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-0-to-5-1.playground.zip",target:"_blank",rel:"noopener noreferrer"};function x(r,A){const a=l("VPCard"),o=l("FontIcon");return g(),p("div",null,[n("h1",f,[n("a",w,[n("span",null,u(r.$frontmatter.title)+" 관련",1)])]),t(a,s(e({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,y,t(a,s(e({title:"Creating uninitialized arrays | Changes in Swift 5.1",desc:"Creating uninitialized arrays",link:"https://hackingwithswift.com/swift/5.1/creating-uninitialized-arrays",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",v,[i("SE-0245 ("),t(o,{icon:"iconfont icon-github"}),z,i(")")]),i(" introduced a new initializer for arrays that doesn’t pre-fill values with a default. This was previously available as a private API, which meant Xcode wouldn’t list it in its code completion but you could still use it if you wanted – and if you were happy to take the risk that it wouldn’t be withdrawn in the future!")]),_,n("details",C,[S,t(a,s(e({title:"Improvements to synthesized memberwise initializers | Changes in Swift 5.1",desc:"Improvements to synthesized memberwise initializers",link:"/hackingwithswift.com/swift/5.1/improved-memberwise-initializers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(e({title:"Implicit returns from single-expression functions | Changes in Swift 5.1",desc:"Implicit returns from single-expression functions",link:"/hackingwithswift.com/swift/5.1/implicit-returns.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(e({title:"Universal Self | Changes in Swift 5.1",desc:"Universal Self",link:"/hackingwithswift.com/swift/5.1/universal-self.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(e({title:"Opaque return types | Changes in Swift 5.1",desc:"Opaque return types",link:"/hackingwithswift.com/swift/5.1/opaque-return-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(e({title:"Static and class subscripts | Changes in Swift 5.1",desc:"Static and class subscripts",link:"/hackingwithswift.com/swift/5.1/static-subscripts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(e({title:"Warnings for ambiguous none cases | Changes in Swift 5.1",desc:"Warnings for ambiguous none cases",link:"/hackingwithswift.com/swift/5.1/ambiguous-none-enum.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(e({title:"Matching optional enums against non-optionals | Changes in Swift 5.1",desc:"Matching optional enums against non-optionals",link:"/hackingwithswift.com/swift/5.1/matching-optional-enums.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),t(a,s(e({title:"Ordered collection diffing | Changes in Swift 5.1",desc:"Ordered collection diffing",link:"/hackingwithswift.com/swift/5.1/ordered-collection-diffing.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Creating uninitialized arrays | Changes in Swift 5.1",
  "desc": "Creating uninitialized arrays",
  "link": "/hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n("p",null,[n("a",I,[t(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.1 playground")])])])])}const V=c(m,[["render",x],["__file","creating-uninitialized-arrays.html.vue"]]),O=JSON.parse('{"path":"/hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.html","title":"Creating uninitialized arrays","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Creating uninitialized arrays","description":"Article(s) > Creating uninitialized arrays","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.1"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Creating uninitialized arrays"},{"property":"og:description","content":"Creating uninitialized arrays"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Creating uninitialized arrays"}],["meta",{"property":"og:description","content":"Article(s) > Creating uninitialized arrays"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.1"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating uninitialized arrays\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.md","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.46,"words":738},"filePathRelative":"hackingwithswift.com/swift/5.1/creating-uninitialized-arrays.md","excerpt":"\\n"}');export{V as comp,O as data};
