import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as t,t as r,e as s,n as e,g as n,f as c,r as l,o as u}from"./app-BgNevrm5.js";const h={},d={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},g=t("nav",{class:"table-of-contents"},[t("ul")],-1),m=t("hr",null,null,-1),k=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI has a dedicated property wrapper for reading values from <code>UserDefaults</code>, which will automatically reinvoke your view’s body property when the value changes. That is, this wrapper effectively watches a key in <code>UserDefaults</code>, and will refresh your UI if that key changes.</p><p>For example, this will watch <code>UserDefaults</code> for a “username” key, which will be set when the button is pressed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@AppStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;username&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">var</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Log in&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Changing <code>username</code> above will cause the new string to be written to <code>UserDefaults</code> immediately, while also updating the view. The same would be true if we had used the older method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;username&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>@AppStorage</code> will watch <code>UserDefaults.standard</code> by default, but you can also make it watch a particular app group if you prefer, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@AppStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;username&quot;</span></span><span class="token punctuation">,</span> store<span class="token punctuation">:</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">(</span>suiteName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;group.com.hackingwithswift.unwrap&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">var</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p><code>@AppStorage</code> writes your data to <code>UserDefaults</code>, which is <em>not</em> secure storage. As a result, you should not save any personal data using <code>@AppStorage</code>, because it’s relatively easy to extract.</p></div>`,9),f={class:"hint-container details"},y=t("summary",null,"Similar solutions…",-1);function v(p,b){const a=l("VPCard");return u(),o("div",null,[t("h1",d,[t("a",w,[t("span",null,r(p.$frontmatter.title)+" 관련",1)])]),s(a,e(n({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,m,s(a,e(n({title:"What is the @AppStorage property wrapper? | SwiftUI by Example",desc:"What is the @AppStorage property wrapper?",link:"https://hackingwithswift.com/quick-start/swiftui/what-is-the-appstorage-property-wrapper",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,t("details",f,[y,s(a,e(n({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(n({title:"What is the @SceneStorage property wrapper? | SwiftUI by Example",desc:"What is the @SceneStorage property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-scenestorage-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(n({title:"What is the @GestureState property wrapper? | SwiftUI by Example",desc:"What is the @GestureState property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-gesturestate-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(n({title:"What is the @Published property wrapper? | SwiftUI by Example",desc:"What is the @Published property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-published-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(n({title:"What is the @ScaledMetric property wrapper? | SwiftUI by Example",desc:"What is the @ScaledMetric property wrapper?",link:"/hackingwithswift.com/swiftui/what-is-the-scaledmetric-property-wrapper.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const A=i(h,[["render",v],["__file","what-is-the-appstorage-property-wrapper.html.vue"]]),q=JSON.parse('{"path":"/hackingwithswift.com/swiftui/what-is-the-appstorage-property-wrapper.html","title":"What is the @AppStorage property wrapper?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What is the @AppStorage property wrapper?","description":"Article(s) > What is the @AppStorage property wrapper?","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What is the @AppStorage property wrapper?"},{"property":"og:description","content":"What is the @AppStorage property wrapper?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-appstorage-property-wrapper.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/what-is-the-appstorage-property-wrapper.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What is the @AppStorage property wrapper?"}],["meta",{"property":"og:description","content":"Article(s) > What is the @AppStorage property wrapper?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is the @AppStorage property wrapper?\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"hackingwithswift.com/swiftui/what-is-the-appstorage-property-wrapper.md","excerpt":"\\n"}');export{A as comp,q as data};
