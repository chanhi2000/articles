import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,b as e,t as h,e as s,n as m,g,w as a,d as n,f as c,r as i,o as k}from"./app-BgNevrm5.js";const S={},y={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},w=e("hr",null,null,-1),_=c(`<p>Did you ever need to inject a scoped service into a singleton service?</p><p>I often need to resolve a scoped service, like the EF Core <code>DbContext</code>, in a background service.</p><p>Another example is when you need to resolve a scoped service in ASP.NET Core middleware.</p><p>If you ever tried this, you were probably greeted with an exception similar to this one:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">System.InvalidOperationException: Cannot consume scoped service &#39;Scoped&#39; from singleton &#39;Singleton&#39;.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Today, I&#39;ll explain how you can solve this problem and safely use scoped services from within singletons in ASP.NET Core.</p><hr><h2 id="asp-net-core-service-lifetimes" tabindex="-1"><a class="header-anchor" href="#asp-net-core-service-lifetimes"><span>ASP.NET Core Service Lifetimes</span></a></h2>`,8),x={href:"https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes",target:"_blank",rel:"noopener noreferrer"},I=e("ul",null,[e("li",null,"Transient"),e("li",null,"Singleton"),e("li",null,"Scoped")],-1),T={href:"https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#transient",target:"_blank",rel:"noopener noreferrer"},C={href:"https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"IServiceProvider",-1),P={href:"https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#singleton",target:"_blank",rel:"noopener noreferrer"},j=e("p",null,"So, what can we do if resolving a scoped service from a singleton throws an exception?",-1),F=e("hr",null,null,-1),E=e("h2",{id:"the-solution-iservicescopefactory",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#the-solution-iservicescopefactory"},[e("span",null,[n("The Solution - "),e("code",null,"IServiceScopeFactory")])])],-1),N=c(`<p>You can create a new scope (<code>IServiceScope</code>) with its own <code>IServiceProvider</code> instance. The scoped <code>IServiceProvider</code> can be used to resolve scoped services. When the scope is disposed, all disposable services created within that scope are also disposed.</p><p>Here&#39;s an example of using the <code>IServiceScopeFactory</code> to create a new <code>IServiceScope</code>. We&#39;re using the scope to resolve the <code>ApplicationDbContext</code>, which is a scoped service.</p><p>The <code>BackgroundJob</code> is registered as a singleton when calling <code>AddHostedService&lt;BackgroundJob&gt;</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackgroundJob</span><span class="token punctuation">(</span><span class="token class-name">IServiceScopeFactory</span> serviceScopeFactory<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> BackgroundService</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">using</span> <span class="token class-name">IServiceScope</span> scope <span class="token operator">=</span> serviceScopeFactory<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">        <span class="token class-name"><span class="token keyword">var</span></span> dbContext <span class="token operator">=</span> scope</span>
<span class="line highlighted">            <span class="token punctuation">.</span>ServiceProvider</span>
<span class="line highlighted">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Do some background processing with the EF database context.</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">DoWorkAsync</span><span class="token punctuation">(</span>dbContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="scoped-services-in-middleware" tabindex="-1"><a class="header-anchor" href="#scoped-services-in-middleware"><span>Scoped Services in Middleware</span></a></h2>`,6),D=c(`<p>Middleware is constructed once per application lifetime.</p><p>If you try injecting a scoped service, you&#39;ll get an exception:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">System.InvalidOperationException: Cannot resolve scoped service &#39;Scoped&#39; from root provider.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are two ways to get around this.</p><p>First, you could use the previous approach with creating a new scope using <code>IServiceScopeFactory</code>. You&#39;ll be able to resolve scoped services. But, they won&#39;t share the same lifetime as the other scoped service in the same request. This could even be a problem depending on your requirements.</p><p>Is there a better way?</p><p>Middleware allows you to inject scoped services in the <code>InvokeAsync</code> method. The injected services will use the current request&#39;s scope, so they&#39;ll have the same lifetime as any other scoped service.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConventionalMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span></span>
<span class="line highlighted">        <span class="token class-name">IMyScopedService</span> scoped<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        scoped<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="iservicescopefactory-vs-iserviceprovider" tabindex="-1"><a class="header-anchor" href="#iservicescopefactory-vs-iserviceprovider"><span><code>IServiceScopeFactory</code> vs. <code>IServiceProvider</code></span></a></h2><p>You might see examples using the <code>IServiceProvider</code> to create a scope instead of the <code>IServiceScopeFactory</code>.</p><p>What&#39;s the difference between these two approaches?</p>`,12),M={href:"https://github.com/aspnet/DependencyInjection/blob/94b9cc9ace032f838e068702cc70ce57cc883bc7/src/DI.Abstractions/ServiceProviderServiceExtensions.cs#L125",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"CreateScope",-1),U=e("code",null,"IServiceProvider",-1),q=e("code",null,"aspnet/DependencyInjection",-1),B=e("code",null,"IServiceScopeFactory",-1),J=e("code",null,"CreateScope()",-1),L=c(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceScope</span> <span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IServiceProvider</span> provider<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceScopeFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, if you want to use the <code>IServiceProvider</code> directly to create a scope, that&#39;s fine.</p><p>However, the <code>IServiceScopeFactory</code> is a more direct way to achieve the desired result.</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Understanding the difference between Transient, Scoped, and Singleton lifetimes is crucial for managing dependencies in ASP.NET Core applications.</p><p>The <code>IServiceScopeFactory</code> provides a solution when you need to resolve scoped services from singletons. It allows you to create a new scope, which you can use to resolve scoped services.</p><p>In middleware, we can inject scoped services into the <code>InvokeAsync</code> method. This also ensures the services use the current request&#39;s scope and lifecycle.</p><p>Thanks for reading, and I&#39;ll see you next week!</p>`,9);function V(p,W){const l=i("VPCard"),t=i("router-link"),d=i("SiteInfo"),o=i("FontIcon"),r=i("RouteLink");return k(),v("div",null,[e("h1",y,[e("a",f,[e("span",null,h(p.$frontmatter.title)+" 관련",1)])]),s(l,m(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",b,[e("ul",null,[e("li",null,[s(t,{to:"#asp-net-core-service-lifetimes"},{default:a(()=>[n("ASP.NET Core Service Lifetimes")]),_:1})]),e("li",null,[s(t,{to:"#the-solution-iservicescopefactory"},{default:a(()=>[n("The Solution - IServiceScopeFactory")]),_:1})]),e("li",null,[s(t,{to:"#scoped-services-in-middleware"},{default:a(()=>[n("Scoped Services in Middleware")]),_:1})]),e("li",null,[s(t,{to:"#iservicescopefactory-vs-iserviceprovider"},{default:a(()=>[n("IServiceScopeFactory vs. IServiceProvider")]),_:1})]),e("li",null,[s(t,{to:"#summary"},{default:a(()=>[n("Summary")]),_:1})])])]),w,s(d,{name:"Using Scoped Services From Singletons in ASP.NET Core",desc:"Did you ever need to inject a scoped service into a singleton service? I'll explain how you can solve this problem and safely use scoped services from within singletons in ASP.NET Core.",url:"https://milanjovanovic.tech/blog/using-scoped-services-from-singletons-in-aspnetcore/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_077.png"}),_,e("p",null,[n("ASP.NET Core has three "),e("a",x,[s(o,{icon:"fa-brands fa-microsoft"}),n("service lifetimes")]),n(":")]),I,e("p",null,[e("a",T,[s(o,{icon:"fa-brands fa-microsoft"}),n("Transient services")]),n(" are created each time they're requested from the service container.")]),e("p",null,[e("a",C,[s(o,{icon:"fa-brands fa-microsoft"}),n("Scoped services")]),n(" are created once within the scope's lifetime. For ASP.NET Core applications, a new scope is created for each request. This is how you can resolve scoped services within a given request.")]),e("p",null,[n("ASP.NET Core applications also have a root "),A,n(" used to resolve "),e("a",P,[s(o,{icon:"fa-brands fa-microsoft"}),n("singleton services")]),n(".")]),j,F,E,e("p",null,[n("What if you want to resolve a scoped service inside a "),s(r,{to:"/milanjovanovic.tech/running-background-tasks-in-asp-net-core.html"},{default:a(()=>[n("background service")]),_:1}),n("?")]),N,e("p",null,[n("What if you want to use a scoped service in "),s(r,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:a(()=>[n("ASP.NET Core middleware")]),_:1}),n("?")]),D,e("p",null,[n("The "),e("a",M,[R,n(" method from "),U,n(" ("),s(o,{icon:"iconfont icon-github"}),q,n(")")]),n(" resolves an "),B,n(" instance and calls "),J,n(" on it:")]),L])}const K=u(S,[["render",V],["__file","using-scoped-services-from-singletons-in-aspnetcore.html.vue"]]),Y=JSON.parse('{"path":"/milanjovanovic.tech/using-scoped-services-from-singletons-in-aspnetcore.html","title":"Using Scoped Services From Singletons in ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Using Scoped Services From Singletons in ASP.NET Core","description":"Article(s) > Using Scoped Services From Singletons in ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Using Scoped Services From Singletons in ASP.NET Core"},{"property":"og:description","content":"Using Scoped Services From Singletons in ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/using-scoped-services-from-singletons-in-aspnetcore.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/using-scoped-services-from-singletons-in-aspnetcore.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Using Scoped Services From Singletons in ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Using Scoped Services From Singletons in ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_077.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_077.png"}],["meta",{"name":"twitter:image:alt","content":"Using Scoped Services From Singletons in ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2024-02-17T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Using Scoped Services From Singletons in ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_077.png\\"],\\"datePublished\\":\\"2024-02-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2024-02-17T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_077.png"},"headers":[{"level":2,"title":"ASP.NET Core Service Lifetimes","slug":"asp-net-core-service-lifetimes","link":"#asp-net-core-service-lifetimes","children":[]},{"level":2,"title":"The Solution - IServiceScopeFactory","slug":"the-solution-iservicescopefactory","link":"#the-solution-iservicescopefactory","children":[]},{"level":2,"title":"Scoped Services in Middleware","slug":"scoped-services-in-middleware","link":"#scoped-services-in-middleware","children":[]},{"level":2,"title":"IServiceScopeFactory vs. IServiceProvider","slug":"iservicescopefactory-vs-iserviceprovider","link":"#iservicescopefactory-vs-iserviceprovider","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.98,"words":893},"filePathRelative":"milanjovanovic.tech/using-scoped-services-from-singletons-in-aspnetcore.md","localizedDate":"2024년 2월 17일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{K as comp,Y as data};
