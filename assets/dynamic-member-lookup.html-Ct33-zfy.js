import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as u,e as s,n as e,g as t,d as i,a as d,f as m,r as p,o as k}from"./app-BgNevrm5.js";const h={},g={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),f=n("blockquote",null,[n("p",null,"Available from Swift 4.2")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"apple/swift-evolution",-1),q=m(`<p>At the core of this feature is a new attribute called <code>@dynamicMemberLookup</code>, which instructs Swift to call a subscript method when accessing properties. This subscript method, <code>subscript(dynamicMember:)</code>, is <em>required</em>: you’ll get passed the string name of the property that was requested, and can return any value you like.</p><p>Let’s look at a trivial example so you can understand the basics. We could create a <code>Person</code> struct that reads its values from a dictionary like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@dynamicMemberLookup</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember member<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> properties <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;city&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Nashville&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">return</span> properties<span class="token punctuation">[</span>member<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>@dynamicMemberLookup</code> attribute requires the type to implement a <code>subscript(dynamicMember:)</code> method to handle the actual work of dynamic member lookup. As you can see, I’ve written one that accepts the member name as string and returns a string, and internally it just looks up the member name in a dictionary and returns its value.</p><p>That struct allows us to write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>city<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>favoriteIceCream<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will compile cleanly and run, even though <code>name</code>, <code>city</code>, and <code>favoriteIceCream</code> do not exist as properties on the <code>Person</code> type. Instead, they are all looked up at runtime: that code will print “Taylor Swift” and “Nashville” for the first two calls to <code>print()</code>, then an empty string for the final one because our dictionary doesn’t store anything for <code>favoriteIceCream</code>.</p><p>My <code>subscript(dynamicMember:)</code> method <em>must</em> return a string, which is where Swift’s type safety comes in: even though you’re dealing with dynamic data, Swift will still ensure you get back what you expected. And if you want multiple different types, just implement different <code>subscript(dynamicMember:)</code> methods, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@dynamicMemberLookup</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember member<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> properties <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;city&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Nashville&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">return</span> properties<span class="token punctuation">[</span>member<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember member<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> properties <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;height&quot;</span></span><span class="token punctuation">:</span> <span class="token number">178</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">return</span> properties<span class="token punctuation">[</span>member<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that any property can be accessed in more than one way, Swift requires you to be clear which one should be run. That might be implicit, for example if you send the return value into a function that accepts only strings, or it might be explicit, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> employee<span class="token punctuation">.</span>age</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Either way, Swift must know for sure which subscript will be called.</p><p>You can even overload <code>subscript</code> to return closures:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@dynamicMemberLookup</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember member<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello! I live at the address </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span><span class="token function">printAddress</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;555 Taylor Swift Avenue&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that’s run, <code>user.printAddress</code> returns a closure that prints out a string, and the <code>(&quot;555 Taylor Swift Avenue&quot;)</code> part immediately calls it with that input.</p><p>If you use dynamic member subscripting in a type that has also some regular properties and methods, those properties and methods will always be used in place of the dynamic member. For example, we could define a <code>Singer</code> struct with a built-in <code>name</code> property alongside a dynamic member subscript:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Singer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Justin Bieber&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember member<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> singer <span class="token operator">=</span> <span class="token class-name">Singer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>singer<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code will print “Justin Bieber”, because the <code>name</code> property will be used rather than the dynamic member subscript.</p><p><code>@dynamicMemberLookup</code> plays a full part in Swift’s type system, which means you can assign them to protocols, structs, enums, and classes – even classes that are marked <code>@objc</code>.</p><p>In practice, this means two things. First, you can create a class using <code>@dynamicMemberLookup</code>, and any classes that inherit from it are also automatically <code>@dynamicMemberLookup</code>. So, this will print “I’m a sandwich” because <code>HotDog</code> inherits from <code>Sandwich</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@dynamicMemberLookup</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Sandwich</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember member<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;I&#39;m a sandwich!&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">HotDog</span><span class="token punctuation">:</span> <span class="token class-name">Sandwich</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> chiliDog <span class="token operator">=</span> <span class="token class-name">HotDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>chiliDog<span class="token punctuation">.</span>description<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, you can retroactively make other types use <code>@dynamicMemberLookup</code> by defining it on a protocol, adding a default implementation of <code>subscript(dynamicMember:)</code> using a protocol extension, then making other types conform to your protocol however you want.</p><p>For example, this creates a new <code>Subscripting</code> protocol, provides a default <code>subscript(dynamicMember:)</code> implementation that returns a message, then extends Swift’s <code>String</code> to use that protocol:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@dynamicMemberLookup</span></span>
<span class="line"><span class="token keyword">protocol</span> <span class="token class-name">Subscripting</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">Subscripting</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember member<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;This is coming from the subscript&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Subscripting</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, Swift&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>username<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),_={class:"hint-container details"},M=n("summary",null,"Other Changes in Swift 4.2",-1),x={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-1-to-4-2.playground.zip",target:"_blank",rel:"noopener noreferrer"};function C(c,D){const a=p("VPCard"),o=p("FontIcon");return k(),r("div",null,[n("h1",g,[n("a",b,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,w,s(a,e(t({title:"Dynamic member look up | Changes in Swift 4.2",desc:"Dynamic member look up",link:"https://hackingwithswift.com/swift/4.2/dynamic-member-lookup",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,n("p",null,[n("a",y,[i("SE-0195 ("),s(o,{icon:"iconfont icon-github"}),S,i(")")]),i(" introduced a way to bring Swift closer to scripting languages such as Python, but in a type-safe way – you don’t lose any of Swift’s safety, but you do gain the ability to write the kind of code you’re more likely to see in PHP and Python.")]),q,n("details",_,[M,s(a,e(t({title:"Derived collections of enum cases | Changes in Swift 4.2",desc:"Derived collections of enum cases",link:"/hackingwithswift.com/swift/4.2/caseiterable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Warning and error diagnostic directives | Changes in Swift 4.2",desc:"Warning and error diagnostic directives",link:"/hackingwithswift.com/swift/4.2/warning-error.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),d(` 
\`\`\`component VPCard
{
  "title": "Dynamic member look up | Changes in Swift 4.2",
  "desc": "Dynamic member look up",
  "link": "/hackingwithswift.com/swift/4.2/dynamic-member-lookup.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),s(a,e(t({title:"Enhanced conditional conformances | Changes in Swift 4.2",desc:"Enhanced conditional conformances",link:"/hackingwithswift.com/swift/4.2/conditional-conformance.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Random number generation and shuffling | Changes in Swift 4.2",desc:"Random number generation and shuffling",link:"/hackingwithswift.com/swift/4.2/random.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Simpler, more secure hashing | Changes in Swift 4.2",desc:"Simpler, more secure hashing",link:"/hackingwithswift.com/swift/4.2/hashable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Checking sequence elements match a condition | Changes in Swift 4.2",desc:"Checking sequence elements match a condition",link:"/hackingwithswift.com/swift/4.2/allsatisfy.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"In-place collection element removal | Changes in Swift 4.2",desc:"In-place collection element removal",link:"/hackingwithswift.com/swift/4.2/remove-where.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,e(t({title:"Boolean toggling | Changes in Swift 4.2",desc:"Boolean toggling",link:"/hackingwithswift.com/swift/4.2/toggle.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",x,[s(o,{icon:"fas fa-file-zipper"}),i("Download Swift 4.2 playground")])])])])}const A=l(h,[["render",C],["__file","dynamic-member-lookup.html.vue"]]),P=JSON.parse('{"path":"/hackingwithswift.com/swift/4.2/dynamic-member-lookup.html","title":"Dynamic member look up","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Dynamic member look up","description":"Article(s) > Dynamic member look up","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.2"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Dynamic member look up"},{"property":"og:description","content":"Dynamic member look up"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/dynamic-member-lookup.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/dynamic-member-lookup.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Dynamic member look up"}],["meta",{"property":"og:description","content":"Article(s) > Dynamic member look up"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.2"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dynamic member look up\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.94,"words":1183},"filePathRelative":"hackingwithswift.com/swift/4.2/dynamic-member-lookup.md","excerpt":"\\n"}');export{A as comp,P as data};
