import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,t as l,e as a,n,g as e,f as p,r,o as d}from"./app-BgNevrm5.js";const u={},h={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},w=t("nav",{class:"table-of-contents"},[t("ul")],-1),b=t("hr",null,null,-1),g=p(`<blockquote><p>Updated for Xcode 16</p></blockquote><p><strong>Improved in iOS 18</strong></p><p>SwiftUI does a great job of providing sensible default accessibility labels for text, images, and many other built-in views, but very often you&#39;ll want to customize this yourself using the <code>accessibilityLabel()</code> and <code>accessibilityHint()</code> modifiers.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Your accessibility labels are read immediately by VoiceOver, and so should be kept short and to the point. Accessibility <em>hints</em> are bonus text that get read after a short delay, and can provide extra information beyond the label.</p></div><p>For example, we could use <code>accessibilityLabel()</code> and <code>accessibilityHint()</code> together to provide better context on what your view means:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add&quot;</span></span><span class="token punctuation">,</span> systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;person.crop.circle&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>&quot;<span class="token class-name">Adding</span> friend…<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">accessibilityLabel</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add to group&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">accessibilityHint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add Jess to the Bridgerton Fans chat group.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you&#39;re able to target iOS 18 and later, there is an additional variant of <code>accessibilityLabel()</code> that is very helpful: we can provide it with a closure to customize whatever is SwiftUI&#39;s default label, allowing us to add to an existing description.</p><p>For example, the code below will read SwiftUI&#39;s default label for the text, but add the word &quot;Warning&quot; before it to reflect the fact that the text is bold and red:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is an important message&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bold<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span>accessibilityLabel <span class="token punctuation">{</span> label <span class="token keyword">in</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Warning:&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        label</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),f={class:"hint-container details"},k=t("summary",null,"Similar solutions…",-1);function y(i,v){const s=r("VPCard");return d(),c("div",null,[t("h1",h,[t("a",m,[t("span",null,l(i.$frontmatter.title)+" 관련",1)])]),a(s,n(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,b,a(s,n(e({title:"How to set custom accessibility labels and hints | SwiftUI by Example",desc:"How to set custom accessibility labels and hints",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-set-custom-accessibility-labels-and-hints",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,t("details",f,[k,a(s,n(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,n(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,n(e({title:"Introduction to accessibility with SwiftUI | SwiftUI by Example",desc:"Introduction to accessibility with SwiftUI",link:"/hackingwithswift.com/swiftui/introduction-to-accessibility-with-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,n(e({title:"How to create static labels with a Text view | SwiftUI by Example",desc:"How to create static labels with a Text view",link:"/hackingwithswift.com/swiftui/how-to-create-static-labels-with-a-text-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,n(e({title:"How to detect the Reduce Motion accessibility setting | SwiftUI by Example",desc:"How to detect the Reduce Motion accessibility setting",link:"/hackingwithswift.com/swiftui/how-to-detect-the-reduce-motion-accessibility-setting.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const S=o(u,[["render",y],["__file","how-to-set-custom-accessibility-labels-and-hints.html.vue"]]),I=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-set-custom-accessibility-labels-and-hints.html","title":"How to set custom accessibility labels and hints","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to set custom accessibility labels and hints","description":"Article(s) > How to set custom accessibility labels and hints","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to set custom accessibility labels and hints"},{"property":"og:description","content":"How to set custom accessibility labels and hints"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-set-custom-accessibility-labels-and-hints.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-set-custom-accessibility-labels-and-hints.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to set custom accessibility labels and hints"}],["meta",{"property":"og:description","content":"Article(s) > How to set custom accessibility labels and hints"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to set custom accessibility labels and hints\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftui/working-with-lists.md","date":"2024-06-21T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.85,"words":555},"filePathRelative":"hackingwithswift.com/swiftui/how-to-set-custom-accessibility-labels-and-hints.md","localizedDate":"2024년 6월 21일","excerpt":"\\n"}');export{S as comp,I as data};
