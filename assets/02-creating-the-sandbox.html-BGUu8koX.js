import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as e,t as u,e as t,n as o,g as c,d as n,f as h,r as a,o as g}from"./app-BgNevrm5.js";const m={},w={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},b=e("nav",{class:"table-of-contents"},[e("ul")],-1),f=e("hr",null,null,-1),v=e("code",null,"Main.storyboard",-1),y=e("p",null,"We can make Interface Builder do all the constraints for this one: select the main view in the document outline, then go to Editor > Resolve Auto Layout Issues > Reset to Suggested Constraints.",-1),_=e("p",null,[n("We're going to need to reference the image view in code, so please switch to the assistant editor and create an outlet for it called "),e("code",null,"imageView"),n(". While you're there, you should also create an action for the button being tapped, called "),e("code",null,"redrawTapped()"),n(".")],-1),x=e("code",null,"ViewController.swift",-1),S=h(`<figure><img src="https://hackingwithswift.com/img/books/hws/27-1@2x.png" alt="Here&#39;s our basic layout: a big UIImageView with a UIButton underneath." tabindex="0" loading="lazy"><figcaption>Here&#39;s our basic layout: a big UIImageView with a UIButton underneath.</figcaption></figure><p>We&#39;re going to use a similar code structure to project 15: a property that we increment through, using a switch/case to call different methods each time. In addition, we need <code>viewDidLoad()</code> to call an initial method so that we start by drawing something. Start by adding this property to your view controller:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> currentDrawType <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And now create this empty method – we&#39;ll be filling it shortly:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">drawRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As with project 15, the button we placed needs to add one to the property, wrapping it back to zero when it reaches a certain point. The property is then used to decide what method to call, although right now we&#39;re only going to have one useful case: <code>drawRectangle()</code>.</p><p>Here&#39;s the initial code for <code>redrawTapped()</code>; we&#39;ll be adding more cases over time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function-definition function">redrawTapped</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> sender<span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentDrawType <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> currentDrawType <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">        currentDrawType <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span> currentDrawType <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">drawRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The only remaining step to make our sandbox complete is to have <code>viewDidLoad()</code> call the <code>drawRectangle()</code> method so that the screen starts by showing something. Change your <code>viewDidLoad()</code> method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">drawRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Running the app at this point will do very little, because although your user interface works the code effectively does nothing. We&#39;re going to fix that by filling in the <code>drawRectangle()</code> method, then proceed to add more cases to the <code>switch/case</code> block.</p>`,11);function C(r,R){const s=a("VPCard"),l=a("VidStack"),i=a("FontIcon");return g(),d("div",null,[e("h1",w,[e("a",k,[e("span",null,u(r.$frontmatter.title)+" 관련",1)])]),t(s,o(c({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),b,f,t(s,o(c({title:"Creating the sandbox | Hacking with iOS",desc:"Creating the sandbox",link:"https://hackingwithswift.com/read/27/2/creating-the-sandbox",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(l,{src:"youtube/_Z-KrWJrv1c"}),e("p",null,[n("Open "),t(i,{icon:"iconfont icon-xcode"}),v,n(" in Interface Builder, then drag out an image view so that it fills the whole space of the view. Set its aspect mode to be Aspect Fit, so that images will be correctly resized according to the device’s aspect ratio. Now place a button near the bottom of the view controller, centered horizontally, then give it the title “Redraw”.")]),y,_,e("p",null,[n("Switch back to the standard editor, and open up "),t(i,{icon:"fa-brands fa-swift"}),x,n(" because that's our user interface done; the rest is code!")]),S])}const A=p(m,[["render",C],["__file","02-creating-the-sandbox.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/read/27/02-creating-the-sandbox.html","title":"Creating the sandbox","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Creating the sandbox","description":"Article(s) > Creating the sandbox","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Creating the sandbox"},{"property":"og:description","content":"Creating the sandbox"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/27/02-creating-the-sandbox.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/27/02-creating-the-sandbox.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Creating the sandbox"}],["meta",{"property":"og:description","content":"Article(s) > Creating the sandbox"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/27-1@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating the sandbox\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/27-1@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.87,"words":561},"filePathRelative":"hackingwithswift.com/read/27/02-creating-the-sandbox.md","excerpt":"\\n"}');export{A as comp,D as data};
