import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as d,e,n as i,g as o,d as t,f as l,r as p,o as h}from"./app-BgNevrm5.js";const f={},g={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},m=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),v=n("p",null,[t("We've written the tests to prove that filtering works, but those filters don't do anything in the user interface just yet. We're going to make a few small changes so that our view controller uses "),n("code",null,"filteredWords"),t(" rather than "),n("code",null,"allWords"),t(", then we'll add an alert controller so that users can enter a filter by hand.")],-1),b=n("code",null,"filteredWords",-1),y=n("code",null,"ViewController.swift",-1),_=n("code",null,"allWords",-1),x=n("code",null,"filteredWords",-1),q=l(`<p>By default, <code>filteredWords</code> contains nothing, which is why the table is empty. It&#39;s only when a filter is applied that words are added, so our fix is just a matter of adding one line of code immediately before the end of <code>init()</code> in <code>PlayData</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">applyUserFilter</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will run an initial filter looking for the word &quot;swift&quot;. If you want to show all words when the app first runs, use this code instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">filteredWords <span class="token operator">=</span> allWords</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For now, though, please stick with <code>applyUserFilter(&quot;swift&quot;)</code> – the reason for this will become clear soon.</p><p>Now onto the interesting stuff: letting the user enter a filter value. This needs to show a <code>UIAlertController</code> with a text field and two buttons, Filter and Cancel. When the user taps Filter, whatever they entered in the text field needs to be sent to the <code>applyUserFilter()</code> method of <code>PlayData</code>, and the table reloaded to reflect their changes.</p>`,6),U=n("code",null,"ViewController.swift",-1),I=l(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">searchTapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Filter…&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Filter&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">let</span> userInput <span class="token operator">=</span> ac<span class="token punctuation">.</span>textFields<span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;0&quot;</span></span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>playData<span class="token punctuation">.</span><span class="token function">applyUserFilter</span><span class="token punctuation">(</span>userInput<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>tableView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The one line your brain might have stalled on is this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> userInput <span class="token operator">=</span> ac<span class="token punctuation">.</span>textFields<span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;0&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That contains two optionals: the <code>textFields</code> property might be <code>nil</code> (i.e., if there aren&#39;t any text fields) and even if we pull out the first text field from the array it might not have any text. Rather than try to fight our way through the maze of optionals, this code takes an easier approach: if either of the two optionals return <code>nil</code>, the nil coalescing operator (<code>??</code>) kicks in, and ensures that &quot;0&quot; is returned instead. This means <code>userInput</code> will always be a <code>String</code> and not a <code>String?</code>: it will either be something the user entered, or &quot;0&quot;.</p><p>To finish up the user interface, we need to add a right bar button item to the navigation bar that will trigger the <code>searchTapped()</code> method – add this line to <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">navigationItem<span class="token punctuation">.</span>rightBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>barButtonSystemItem<span class="token punctuation">:</span> <span class="token punctuation">.</span>search<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>searchTapped<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With that new line of code in place, please run the app now and try using the search button in the top-right corner. Thanks to us having a clear separation of our data model and our view controller, doing all the user interface work was pretty quick!</p><figure><img src="https://hackingwithswift.com/img/books/hws/39-12@2x.png" alt="Users can filter either by substring or frequency from a single text field." tabindex="0" loading="lazy"><figcaption>Users can filter either by substring or frequency from a single text field.</figcaption></figure>`,8);function F(c,S){const s=p("VPCard"),a=p("FontIcon");return h(),u("div",null,[n("h1",g,[n("a",k,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),e(s,i(o({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,w,e(s,i(o({title:"Updating the user interface with filtering | Hacking with iOS",desc:"Updating the user interface with filtering",link:"https://hackingwithswift.com/read/39/7/updating-the-user-interface-with-filtering",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,n("p",null,[t("First: using "),b,t(". This is done in three changes, two of which are trivial: open "),e(a,{icon:"fa-brands fa-swift"}),y,t(", and replace the two instances of "),_,t(" with "),x,t(". If you run the app now you'll see no text in the table view, which is where we need to make the third change.")]),q,n("p",null,[t("We've covered how to do all this before, but I'll give you a few reminders once you've read the code. Please add this new method to "),e(a,{icon:"fa-brands fa-swift"}),U,t(":")]),I])}const W=r(f,[["render",F],["__file","07-updating-the-user-interface-with-filtering.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/read/39/07-updating-the-user-interface-with-filtering.html","title":"Updating the user interface with filtering","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Updating the user interface with filtering","description":"Article(s) > Updating the user interface with filtering","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Updating the user interface with filtering"},{"property":"og:description","content":"Updating the user interface with filtering"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/39/07-updating-the-user-interface-with-filtering.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/39/07-updating-the-user-interface-with-filtering.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Updating the user interface with filtering"}],["meta",{"property":"og:description","content":"Article(s) > Updating the user interface with filtering"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/hws/39-12@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Updating the user interface with filtering\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/hws/39-12@2x.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.41,"words":723},"filePathRelative":"hackingwithswift.com/read/39/07-updating-the-user-interface-with-filtering.md","excerpt":"\\n"}');export{W as comp,B as data};
