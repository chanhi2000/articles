import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as n,t as v,e,n as g,g as f,w as s,d as a,f as c,r as i,o as b}from"./app-BgNevrm5.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},S=n("hr",null,null,-1),A=c(`<p>JavaScript is always improving, and every year, new features are added to make coding easier and more efficient. These updates help developers write cleaner code and work faster. If you want to stay ahead as a developer, it&#39;s important to learn about the latest JavaScript features.</p><p>In this article, we’ll talk about some of the new tools and methods available in JavaScript, like <code>findLast</code>, <code>toReversed</code>, <code>toSorted</code>, and more. These features allow you to manipulate arrays and data in smarter ways without changing your original data. We’ll look at how each one works, and I’ll show you examples, explaining how they can make your code better.</p><hr><h2 id="array-methods-in-javascript" tabindex="-1"><a class="header-anchor" href="#array-methods-in-javascript"><span>Array Methods in JavaScript</span></a></h2><p>JavaScript has a variety of methods that make working with arrays easier. Arrays are lists of items, and you’ll often need to search, sort, or update these lists. Older methods like <code>push()</code>, <code>pop()</code>, <code>map()</code>, and <code>filter()</code> have been useful, but they can sometimes change the original data, which isn&#39;t always what you want.</p><p>Newer JavaScript methods offer better options to handle arrays, especially when you need to keep the original data unchanged. These new methods make coding more reliable and cleaner.</p><p>The latest JavaScript methods provide more ways to work with arrays without changing the original list. These methods, like <code>findLast</code>, <code>toSorted</code>, and <code>toReversed</code>, create a new array or give you the result directly, leaving your original array untouched.</p><hr><h2 id="findlast-locate-the-last-matching-element" tabindex="-1"><a class="header-anchor" href="#findlast-locate-the-last-matching-element"><span><code>findLast</code>: Locate the Last Matching Element</span></a></h2><p>When working with arrays, you might want to search for an item that matches certain conditions. The older <code>find()</code> method helps you get the first matching item, but what if you need the last match instead?</p><p>This is where <code>findLast()</code> comes in. It searches the array starting from the end and gives you the last item that meets your condition, without manually reversing the array.</p><h3 id="syntax-and-parameters-of-findlast" tabindex="-1"><a class="header-anchor" href="#syntax-and-parameters-of-findlast"><span>Syntax and Parameters of <code>findLast</code></span></a></h3><p>The <code>findLast()</code> method works almost like <code>find()</code>, but it looks for the last match. Here’s the basic syntax:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">array<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>callback</strong>: A function that checks each item in the array.</li><li><strong>element</strong>: The current item being checked.</li><li><strong>index</strong>: The index of the current item.</li><li><strong>array</strong>: The array being processed.</li><li><strong>thisArg</strong>: Optional. It can be used as <code>this</code> inside the callback.</li></ul><h3 id="practical-examples-of-using-findlast" tabindex="-1"><a class="header-anchor" href="#practical-examples-of-using-findlast"><span>Practical Examples of Using <code>findLast</code></span></a></h3><p>Let’s look at a simple example. Imagine you have an array of numbers, and you want to find the last number greater than 5.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find the last number greater than 5</span></span>
<span class="line"><span class="token keyword">const</span> lastNumberOver5 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastNumberOver5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, <code>findLast()</code> starts searching from the end of the array and returns the last number that is greater than 5.</p><h3 id="finding-the-last-occurrence-in-arrays" tabindex="-1"><a class="header-anchor" href="#finding-the-last-occurrence-in-arrays"><span>Finding the Last Occurrence in Arrays</span></a></h3><p>You can use <code>findLast()</code> to get the last matching item, which can be helpful when there are multiple matches in an array. Let’s say you want to find the last even number in an array:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find the last even number</span></span>
<span class="line"><span class="token keyword">const</span> lastEvenNumber <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastEvenNumber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="comparison-with-find" tabindex="-1"><a class="header-anchor" href="#comparison-with-find"><span>Comparison with <code>find()</code></span></a></h3><p>The key difference between <code>find()</code> and <code>findLast()</code> is the direction in which they search. <code>find()</code> starts from the beginning of the array and stops at the first match, while <code>findLast()</code> starts from the end and returns the last match.</p><p>Here’s a comparison:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using find()</span></span>
<span class="line"><span class="token keyword">const</span> first5 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 5 (first match)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using findLast()</span></span>
<span class="line"><span class="token keyword">const</span> last5 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>last5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 5 (last match)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>findLast()</code> method is particularly useful in scenarios where the order of items matters, such as:</p><ol><li><strong>Retrieving the last message in a chat app</strong> that meets a certain condition.</li><li><strong>Finding the last error</strong> in a list of system logs.</li><li><strong>Getting the last transaction</strong> above a certain amount in a financial app.</li></ol><hr><h2 id="findlastindex-pinpoint-the-index-of-the-last-match" tabindex="-1"><a class="header-anchor" href="#findlastindex-pinpoint-the-index-of-the-last-match"><span><code>findLastIndex</code>: Pinpoint the Index of the Last Match</span></a></h2><p>Sometimes, you don’t just need the last matching item in an array, but you also want its position. This is where <code>findLastIndex()</code> helps. It works like <code>findLast()</code>, but instead of returning the value, it returns the index of the last element that meets your condition. This makes it easier to track the location of that item in the array.</p><h3 id="syntax-and-key-parameters" tabindex="-1"><a class="header-anchor" href="#syntax-and-key-parameters"><span>Syntax and Key Parameters</span></a></h3><p>The syntax of <code>findLastIndex()</code> is simple and looks a lot like <code>findLast()</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">array<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>callback</strong>: A function that runs for each element in the array.</li><li><strong>element</strong>: The current item being checked.</li><li><strong>index</strong>: The position of the current item in the array.</li><li><strong>array</strong>: The array being processed.</li><li><strong>thisArg</strong>: Optional. Used as <code>this</code> inside the callback.</li></ul><p>If no element meets the condition, <code>findLastIndex()</code> returns <code>-1</code>.</p><h3 id="practical-examples-of-findlastindex-in-action" tabindex="-1"><a class="header-anchor" href="#practical-examples-of-findlastindex-in-action"><span>Practical Examples of <code>findLastIndex</code> in Action</span></a></h3><p>Let’s look at an example. Say you have an array of numbers and want to find the index of the last number greater than 5.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find the index of the last number greater than 5</span></span>
<span class="line"><span class="token keyword">const</span> lastIndexOver5 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastIndexOver5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 3 (index of 9)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, <code>findLastIndex()</code> returns <code>3</code>, which is the position of <code>9</code>, the last number greater than 5 in the array.</p><h3 id="retrieving-the-last-index-matching-a-condition" tabindex="-1"><a class="header-anchor" href="#retrieving-the-last-index-matching-a-condition"><span>Retrieving the Last Index Matching a Condition</span></a></h3><p>If you need to pinpoint the position of the last element that fits a specific condition, <code>findLastIndex()</code> is the right tool. Here’s another example, finding the last even number in an array:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find the index of the last even number</span></span>
<span class="line"><span class="token keyword">const</span> lastEvenIndex <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastEvenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 5 (index of the last 6)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the index of the last even number is <code>5</code>.</p><h3 id="contrast-with-findindex" tabindex="-1"><a class="header-anchor" href="#contrast-with-findindex"><span>Contrast with <code>findIndex</code></span></a></h3><p>The main difference between <code>findIndex()</code> and <code>findLastIndex()</code> is the direction they search. <code>findIndex()</code> starts from the beginning of the array and stops at the first match. <code>findLastIndex()</code> works in reverse, starting from the end and returning the last match.</p><p>Here’s a quick comparison:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using findIndex()</span></span>
<span class="line"><span class="token keyword">const</span> first5Index <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first5Index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 1 (first match)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using findLastIndex()</span></span>
<span class="line"><span class="token keyword">const</span> last5Index <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>last5Index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 4 (last match)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-considerations-for-large-data-sets" tabindex="-1"><a class="header-anchor" href="#performance-considerations-for-large-data-sets"><span>Performance Considerations for Large Data Sets</span></a></h3><p>In small arrays, the performance difference between <code>findIndex()</code> and <code>findLastIndex()</code> might not be noticeable. But with large datasets, the difference can matter. Since <code>findLastIndex()</code> starts from the end of the array, it may be more efficient if you expect the match to be near the end. This can save time compared to scanning from the start using <code>findIndex()</code>.</p><p>For example, when working with a large log of events, using <code>findLastIndex()</code> could quickly find the most recent event that meets a condition:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Find the index of the last number divisible by 5000</span></span>
<span class="line"><span class="token keyword">const</span> lastDivisibleBy5000 <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">5000</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastDivisibleBy5000<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 99999 (index of 100000)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In large datasets like this, using <code>findLastIndex()</code> helps avoid unnecessary searches when you’re only interested in the most recent or last occurrence.</p><hr><h2 id="toreversed-reverse-without-changing-original-arrays" tabindex="-1"><a class="header-anchor" href="#toreversed-reverse-without-changing-original-arrays"><span><code>toReversed</code>: Reverse Without Changing Original Arrays</span></a></h2><p>In JavaScript, the <code>reverse()</code> method is used to flip the order of elements in an array. But it changes the original array. This can cause problems if you want to keep the original data intact. The <code>toReversed()</code> method fixes this issue by allowing you to reverse an array without affecting the original.</p><h3 id="syntax-and-usage-of-toreversed" tabindex="-1"><a class="header-anchor" href="#syntax-and-usage-of-toreversed"><span>Syntax and Usage of <code>toReversed</code></span></a></h3><p>The <code>toReversed()</code> method is simple to use. It creates a reversed version of the array without modifying the original one. Here’s the basic syntax:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>array</strong>: The array you want to reverse.</li><li><strong>newArray</strong>: A new array with the reversed elements.</li></ul><h3 id="examples-of-reversing-arrays-safely" tabindex="-1"><a class="header-anchor" href="#examples-of-reversing-arrays-safely"><span>Examples of Reversing Arrays Safely</span></a></h3><p>Let’s look at an example where you want to reverse an array but still need to keep the original version:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Reverse the array without changing the original</span></span>
<span class="line"><span class="token keyword">const</span> reversedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [5, 4, 3, 2, 1]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Output: [1, 2, 3, 4, 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the original <code>numbers</code> array stays the same, and <code>toReversed()</code> returns a new array with the elements flipped.</p><h3 id="avoiding-side-effects-with-toreversed" tabindex="-1"><a class="header-anchor" href="#avoiding-side-effects-with-toreversed"><span>Avoiding Side Effects with <code>toReversed</code></span></a></h3><p>One of the biggest benefits of <code>toReversed()</code> is that it avoids side effects. The traditional <code>reverse()</code> method directly changes the original array, which can lead to bugs if the original data is needed elsewhere. With <code>toReversed()</code>, the original array remains unchanged, so you don’t have to worry about unexpected changes.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using toReversed to avoid side effects</span></span>
<span class="line"><span class="token keyword">const</span> reversedLetters <span class="token operator">=</span> letters<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedLetters<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Output: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the original <code>letters</code> array is still in its original form after calling <code>toReversed()</code>.</p><h3 id="comparison-with-reverse-method" tabindex="-1"><a class="header-anchor" href="#comparison-with-reverse-method"><span>Comparison with <code>reverse</code> Method</span></a></h3><p>The <code>reverse()</code> method directly modifies the array, while <code>toReversed()</code> leaves the original unchanged. Here’s a quick comparison:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using reverse()</span></span>
<span class="line"><span class="token keyword">const</span> reversedNums1 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedNums1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: [40, 30, 20, 10]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// Output: [40, 30, 20, 10] (Original array changed)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using toReversed()</span></span>
<span class="line"><span class="token keyword">const</span> reversedNums2 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedNums2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: [10, 20, 30, 40]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// Output: [40, 30, 20, 10] (Original stays as it was after reverse)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As shown, <code>reverse()</code> changes the array itself, but <code>toReversed()</code> doesn’t touch the original array.</p><h3 id="how-toreversed-enhances-functional-programming-practices" tabindex="-1"><a class="header-anchor" href="#how-toreversed-enhances-functional-programming-practices"><span>How <code>toReversed</code> Enhances Functional Programming Practices</span></a></h3><p>In functional programming, the idea is to avoid changing data directly. Instead, new values are returned from functions, leaving the original data untouched.</p><p><code>toReversed()</code> fits perfectly into this concept, allowing arrays to be reversed without altering the original data. This leads to cleaner and safer code because you reduce the risk of accidentally changing something.</p><p>For example, in a functional programming setup, you might want to reverse an array of scores for display purposes without changing the actual scores:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Reverse the scores for display purposes without modifying the original</span></span>
<span class="line"><span class="token keyword">const</span> displayedScores <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>displayedScores<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [60, 75, 87, 95]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Output: [95, 87, 75, 60] (Original scores intact)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="tosorted-immutable-sorting-for-cleaner-code" tabindex="-1"><a class="header-anchor" href="#tosorted-immutable-sorting-for-cleaner-code"><span><code>toSorted</code>: Immutable Sorting for Cleaner Code</span></a></h2><p>JavaScript has had the <code>sort()</code> method for a long time, which allows you to arrange elements of an array. The issue is that <code>sort()</code> changes the original array, which can lead to unintended problems when the original data is still needed elsewhere.</p><p>To fix this, JavaScript introduced <code>toSorted()</code>. This method lets you sort arrays without changing the original, making the code cleaner and more reliable.</p><h3 id="syntax-and-parameters" tabindex="-1"><a class="header-anchor" href="#syntax-and-parameters"><span>Syntax and Parameters</span></a></h3><p>The syntax for <code>toSorted()</code> is straightforward, similar to <code>sort()</code>, but it doesn&#39;t modify the original array:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span>compareFunction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>array</strong>: The array you want to sort.</li><li><strong>compareFunction</strong>: Optional. A function that defines how the elements should be sorted. If not provided, the array elements are converted to strings and sorted in ascending order.</li></ul><h3 id="use-cases-of-tosorted" tabindex="-1"><a class="header-anchor" href="#use-cases-of-tosorted"><span>Use Cases of <code>toSorted</code></span></a></h3><p>Let’s say you have a list of students and want to sort them based on their scores, but you need the original list untouched:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> students <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Dave&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">85</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alexa&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">92</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Katie&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">78</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Sort students without changing the original array</span></span>
<span class="line"><span class="token keyword">const</span> sortedStudents <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>score <span class="token operator">-</span> a<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedStudents<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Output: [{name: &#39;Katie&#39;, score: 92}, {name: &#39;Dave&#39;, score: 85}, {name: &#39;Katie&#39;, score: 78}]</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Output (unchanged): [{name: &#39;Dave&#39;, score: 85}, {name: &#39;Alexa&#39;, score: 92}, {name: &#39;Katie&#39;, score: 78}]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows you to sort the students based on their scores without affecting the original data, which might be useful elsewhere in the code.</p><h3 id="sorting-arrays-without-mutating-original-data" tabindex="-1"><a class="header-anchor" href="#sorting-arrays-without-mutating-original-data"><span>Sorting Arrays Without Mutating Original Data</span></a></h3><p><code>toSorted()</code> provides a safe way to handle sorting without the risk of accidentally changing the original array. This is especially helpful when working on large projects where data might be used in different parts of the code.</p><p>Here’s an example where you sort a simple list of numbers:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Sort the numbers without changing the original array</span></span>
<span class="line"><span class="token keyword">const</span> sortedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [1, 2, 5, 7, 9]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Output (unchanged): [5, 2, 9, 1, 7]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="comparison-with-the-traditional-sort-method" tabindex="-1"><a class="header-anchor" href="#comparison-with-the-traditional-sort-method"><span>Comparison with the Traditional <code>sort</code> Method</span></a></h3><p>The traditional <code>sort()</code> method sorts an array but changes the original, which can cause problems if the original array is needed elsewhere.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using sort()</span></span>
<span class="line"><span class="token keyword">const</span> sortedNumbers1 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedNumbers1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [1, 2, 3, 4]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Output (original array changed): [1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using toSorted()</span></span>
<span class="line"><span class="token keyword">const</span> sortedNumbers2 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedNumbers2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [1, 2, 3, 4]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Output (unchanged): [3, 1, 4, 2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, <code>sort()</code> changes the original array, but <code>toSorted()</code> keeps it untouched.</p><h3 id="performance-and-best-practices" tabindex="-1"><a class="header-anchor" href="#performance-and-best-practices"><span>Performance and Best Practices</span></a></h3><p>For smaller arrays, performance between <code>sort()</code> and <code>toSorted()</code> will be almost the same. But for larger datasets or when sorting is frequent, <code>toSorted()</code> can help avoid side effects and make the code safer.</p><p>Using <code>toSorted()</code> means you can safely pass the original array to other parts of the code without worrying about unexpected changes.</p><p>To get the best performance, make sure to always use a proper compare function, especially for complex sorting, like sorting objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Rash&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Josh&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Sammy&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Sort people by age without mutating the original array</span></span>
<span class="line"><span class="token keyword">const</span> sortedPeople <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>age <span class="token operator">-</span> b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedPeople<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Output: [{name: &#39;Josh&#39;, age: 25}, {name: &#39;Rash&#39;, age: 30}, {name: &#39;Sammy&#39;, age: 40}]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using <code>toSorted()</code> improves the readability of your code and helps avoid unintended side effects, especially when working with important data.</p><hr><h2 id="tospliced-create-new-arrays-by-splicing-without-mutation" tabindex="-1"><a class="header-anchor" href="#tospliced-create-new-arrays-by-splicing-without-mutation"><span><code>toSpliced</code>: Create New Arrays by Splicing Without Mutation</span></a></h2><p>The <code>splice()</code> method in JavaScript has been useful for adding, removing, or replacing elements within an array. But it changes the original array, which can lead to unexpected results if you want to keep the original data.</p><p>To solve this, <code>toSpliced()</code> was introduced. It works like <code>splice()</code>, but without changing the original array, allowing for a safer and cleaner approach.</p><h3 id="syntax-and-practical-usage" tabindex="-1"><a class="header-anchor" href="#syntax-and-practical-usage"><span>Syntax and Practical Usage</span></a></h3><p>Here’s how the <code>toSpliced()</code> method works. It creates a new array after splicing, leaving the original one unchanged.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>start</strong>: The index at which to start modifying the array.</li><li><strong>deleteCount</strong>: The number of items to remove from the array (optional).</li><li><strong>item1, item2, ...</strong>: The items to add at the start index (optional).</li></ul><h3 id="examples-splicing-arrays-in-an-immutable-way" tabindex="-1"><a class="header-anchor" href="#examples-splicing-arrays-in-an-immutable-way"><span>Examples: Splicing Arrays in an Immutable Way</span></a></h3><p>Let’s explore a practical example where you want to remove and replace elements from an array but keep the original intact:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cherry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a new array by removing &#39;banana&#39; and adding &#39;blueberry&#39; without changing the original</span></span>
<span class="line"><span class="token keyword">const</span> newFruits <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;blueberry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;apple&#39;, &#39;blueberry&#39;, &#39;cherry&#39;, &#39;date&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Output: [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;date&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, <code>toSpliced()</code> removes <code>&#39;banana&#39;</code> and adds <code>&#39;blueberry&#39;</code> at the same position, but the original <code>fruits</code> array stays unchanged.</p><h3 id="comparison-with-the-traditional-splice-method" tabindex="-1"><a class="header-anchor" href="#comparison-with-the-traditional-splice-method"><span>Comparison with the Traditional <code>splice</code> Method</span></a></h3><p>The key difference between <code>splice()</code> and <code>toSpliced()</code> is that <code>splice()</code> changes the original array, while <code>toSpliced()</code> leaves it untouched and returns a new array.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using splice()</span></span>
<span class="line"><span class="token keyword">const</span> splicedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>splicedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [2, 3] (Removed elements)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Output: [1, 10, 20, 4] (Original array changed)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using toSpliced()</span></span>
<span class="line"><span class="token keyword">const</span> newNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Output: [1, 5, 6, 4]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Output: [1, 10, 20, 4] (Original array unchanged)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>splice()</code> modifies the original array, but <code>toSpliced()</code> does not, giving you more control and avoiding unwanted changes to data.</p><h3 id="use-cases-for-functional-programming" tabindex="-1"><a class="header-anchor" href="#use-cases-for-functional-programming"><span>Use Cases for Functional Programming</span></a></h3><p><code>toSpliced()</code> fits well with functional programming, which favors avoiding changes to existing data. For example, in applications where you often manipulate arrays (like lists of users or products), <code>toSpliced()</code> helps keep the original data intact.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Dave&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alexa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Katie&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Remove &#39;Bob&#39; and add &#39;Dan&#39; without modifying the original array</span></span>
<span class="line"><span class="token keyword">const</span> updatedUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Dan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedUsers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;Dave&#39;, &#39;Dan&#39;, &#39;Katie&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Output: [&#39;Dave&#39;, &#39;Alexa&#39;, &#39;Katie&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method makes it easier to manage and work with arrays in situations where the original data needs to be preserved.</p><h3 id="avoiding-pitfalls-with-tospliced" tabindex="-1"><a class="header-anchor" href="#avoiding-pitfalls-with-tospliced"><span>Avoiding Pitfalls with <code>toSpliced</code></span></a></h3><p>The main advantage of <code>toSpliced()</code> is that it avoids unintended changes to the original array. It reduces the chances of bugs caused by data being accidentally modified.</p><p>But it’s important to note that creating a new array with <code>toSpliced()</code> means that the old array is not directly updated, so you’ll need to assign the result to a new variable if you want to use the modified data.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a new array that adds &#39;yellow&#39; at index 1</span></span>
<span class="line"><span class="token keyword">const</span> newColors <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newColors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;red&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Output: [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;] (Original unchanged)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="with-modify-array-elements-by-index" tabindex="-1"><a class="header-anchor" href="#with-modify-array-elements-by-index"><span><code>with</code>: Modify Array Elements by Index</span></a></h2><p>The <code>with</code> method is a new and powerful tool introduced in JavaScript to help replace elements in an array without changing the original array.</p><p>This is helpful when you need to update specific items without affecting the rest of the data, keeping your original array intact. It promotes safer and cleaner code, especially when working with large datasets or in functional programming styles.</p><h3 id="syntax-and-key-parameters-1" tabindex="-1"><a class="header-anchor" href="#syntax-and-key-parameters-1"><span>Syntax and Key Parameters</span></a></h3><p>The <code>with</code> method allows you to create a new array where one element at a specific index is replaced.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>index</strong>: The position of the element you want to replace.</li><li><strong>newValue</strong>: The value to insert at the given index.</li></ul><h3 id="examples-of-using-with-for-element-replacement" tabindex="-1"><a class="header-anchor" href="#examples-of-using-with-for-element-replacement"><span>Examples of Using <code>with</code> for Element Replacement</span></a></h3><p>Let’s explore a simple example where you want to replace an item at a specific position:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cherry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Replace &#39;banana&#39; with &#39;blueberry&#39; at index 1</span></span>
<span class="line">    <span class="token keyword">const</span> newFruits <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;blueberry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;apple&#39;, &#39;blueberry&#39;, &#39;cherry&#39;]</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Output: [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we replaced <code>&#39;banana&#39;</code> with <code>&#39;blueberry&#39;</code>, but the original <code>fruits</code> array stays the same, which is very useful to avoid side effects in your code.</p><h3 id="replacing-elements-in-arrays-while-maintaining-immutability" tabindex="-1"><a class="header-anchor" href="#replacing-elements-in-arrays-while-maintaining-immutability"><span>Replacing Elements in Arrays While Maintaining Immutability</span></a></h3><p>One of the key strengths of the <code>with</code> method is that it does not change the original array. This helps maintain immutability, which is often needed when handling data in larger applications. You can confidently replace elements without worrying about accidental changes to the original data.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Replace the number at index 2 (30) with 35</span></span>
<span class="line"><span class="token keyword">const</span> updatedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [10, 20, 35, 40]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Output: [10, 20, 30, 40] (Original unchanged)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This makes the <code>with</code> method an ideal choice when you need to update data but still want to reference the original array elsewhere in your code.</p><h3 id="applications-of-the-with-method" tabindex="-1"><a class="header-anchor" href="#applications-of-the-with-method"><span>Applications of the <code>with</code> Method</span></a></h3><p>The <code>with</code> method can be applied in many scenarios, such as updating user profiles, modifying a list of items, or working with any data that requires selective updates. For example, when dealing with a table of users, you can replace a specific user’s data without affecting the entire dataset.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Dave&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alexa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Katie&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Update Bob&#39;s name to &#39;Dan&#39;</span></span>
<span class="line"><span class="token keyword">const</span> updatedUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Dan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedUsers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;Dave&#39;, &#39;Dan&#39;, &#39;Katie&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Output: [&#39;Dave&#39;, &#39;Alexa&#39;, &#39;Katie&#39;] (Original unchanged)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method helps avoid confusion that can arise from unwanted changes to data when updating specific elements in an array.</p><h3 id="with-vs-traditional-methods-for-element-replacement" tabindex="-1"><a class="header-anchor" href="#with-vs-traditional-methods-for-element-replacement"><span><code>with</code> vs Traditional Methods for Element Replacement</span></a></h3><p>Before the introduction of <code>with</code>, replacing elements in arrays required methods like <code>splice()</code> or manual approaches, both of which would modify the original array:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Traditional method (using mutation)</span></span>
<span class="line">colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;red&#39;, &#39;yellow&#39;, &#39;blue&#39;] (Original array changed)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With the new <code>with</code> method, you can avoid this problem:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using \`with\` method</span></span>
<span class="line"><span class="token keyword">const</span> newColors <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newColors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [&#39;red&#39;, &#39;yellow&#39;, &#39;blue&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Output: [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;] (Original unchanged)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>with</code> method ensures the original data remains intact which makes it a better option for situations where immutability is important.</p><hr><h2 id="combining-new-javascript-methods-for-advanced-data-manipulation" tabindex="-1"><a class="header-anchor" href="#combining-new-javascript-methods-for-advanced-data-manipulation"><span>Combining New JavaScript Methods for Advanced Data Manipulation</span></a></h2><p>The new JavaScript methods like <code>findLast</code>, <code>toSorted</code>, and <code>with</code> provide powerful tools for managing and transforming data. When used together, they allow you to create complex data operations in a simple and readable way.</p><p>Let’s look at how you can combine these methods to handle data efficiently and write clean, effective code.</p><h3 id="how-to-chain-methods-like-findlast-tosorted-and-with" tabindex="-1"><a class="header-anchor" href="#how-to-chain-methods-like-findlast-tosorted-and-with"><span>How to Chain Methods like <code>findLast</code>, <code>toSorted</code>, and <code>with</code></span></a></h3><p>Chaining methods in JavaScript lets you apply multiple transformations to your data in a single flow.</p><p>For example, you might want to sort an array, find the last matching element, and then replace it with a new value. Here’s how you can do that using <code>toSorted</code>, <code>findLast</code>, and <code>with</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Chain methods to sort, find the last element greater than 10, and replace it</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> numbers</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>   <span class="token comment">// Sort the array in ascending order</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Find and replace the last match</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [5, 10, 15, 20, 100]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example:</p><ul><li><code>toSorted()</code> arranges the array in ascending order without changing the original array.</li><li><code>findLastIndex()</code> finds the last number greater than 10.</li><li><code>with()</code> replaces that number (which is 30) with 100, without modifying the original array.</li></ul><p>This combination is useful when working with complex data workflows and ensures that the original data remains unchanged.</p><h3 id="creating-complex-data-transformations-with-ease" tabindex="-1"><a class="header-anchor" href="#creating-complex-data-transformations-with-ease"><span>Creating Complex Data Transformations with Ease</span></a></h3><p>The real power of these methods shines when you want to perform multiple actions on arrays in a readable and organized way. Here’s another example where we combine sorting, filtering, and replacing data all in one flow:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> students <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Dave&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">85</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alexa&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">75</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Katoe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">90</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Chain methods to sort, find the last student with a score above 80, and update their score</span></span>
<span class="line"><span class="token keyword">const</span> updatedStudents <span class="token operator">=</span> students</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>score <span class="token operator">-</span> a<span class="token punctuation">.</span>score<span class="token punctuation">)</span>   <span class="token comment">// Sort students by score (descending)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span></span>
<span class="line">    students<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=&gt;</span> student<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">{</span> <span class="token operator">...</span>students<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=&gt;</span> student<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">95</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedStudents<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case:</p><ul><li><code>toSorted()</code> sorts students based on their scores from highest to lowest.</li><li><code>findLastIndex()</code> identifies the last student who scored above 80.</li><li><code>with()</code> creates a new array with that student’s score updated to 95.</li></ul><p>The flexibility of combining these methods means you can manage even complex data structures easily without compromising readability or changing the original data.</p><h3 id="best-practices-for-writing-clean-efficient-code-with-these-methods" tabindex="-1"><a class="header-anchor" href="#best-practices-for-writing-clean-efficient-code-with-these-methods"><span>Best Practices for Writing Clean, Efficient Code with These Methods</span></a></h3><p>To write clean and efficient code, consider the following tips when using these new JavaScript methods:</p>`,172),C=n("p",null,[a("Use methods like "),n("code",null,"toSorted"),a(", "),n("code",null,"toReversed"),a(", and "),n("code",null,"with"),a(" that do not change the original array. This ensures that your data remains consistent throughout your code.")],-1),_=n("p",null,"Chain methods when performing multiple transformations. This keeps your code concise and easier to follow.",-1),T=n("p",null,"Short arrow functions help reduce the complexity of your code. For instance:",-1),L=n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),a(" sortedNumbers "),n("span",{class:"token operator"},"="),a(" numbers"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toSorted"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[a("a"),n("span",{class:"token punctuation"},","),a(" b")]),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(" a "),n("span",{class:"token operator"},"-"),a(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),I=n("p",null,"Make sure the methods you chain together logically follow each other. For example, it makes sense to sort data first before finding the last element that matches a condition.",-1),O=n("p",null,[a("For very large arrays, consider performance implications. Methods like "),n("code",null,"findLast"),a(" and "),n("code",null,"toSorted"),a(" might take time on bigger datasets, so always test your code’s performance with realistic data sizes.")],-1),M=c(`<hr><h2 id="backward-compatibility-and-polyfills" tabindex="-1"><a class="header-anchor" href="#backward-compatibility-and-polyfills"><span>Backward Compatibility and Polyfills</span></a></h2><p>As new JavaScript features are added, not all browsers will support them right away. It’s important to make sure your code still works on older browsers without breaking. Let&#39;s talk about how you can handle this and introduce polyfills to fill the gap when using the latest features.</p><h3 id="how-to-ensure-backward-compatibility-with-older-browsers" tabindex="-1"><a class="header-anchor" href="#how-to-ensure-backward-compatibility-with-older-browsers"><span>How to Ensure Backward Compatibility with Older Browsers</span></a></h3><p>To make sure your code works smoothly on older browsers that don’t support new JavaScript methods like <code>findLast</code>, <code>toSorted</code>, or <code>with</code>, you can add checks to see if a feature is available before using it. This way, the code doesn’t fail on unsupported browsers.</p><p>Here’s an example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>findLast<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Use the findLast method</span></span>
<span class="line">  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> lastOdd <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastOdd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 5</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Fallback code for older browsers</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;findLast is not supported&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This example checks if <code>findLast</code> exists. If it doesn’t, you can run a fallback or show a message. This approach helps maintain backward compatibility.</p><h3 id="overview-of-polyfills-for-new-javascript-features" tabindex="-1"><a class="header-anchor" href="#overview-of-polyfills-for-new-javascript-features"><span>Overview of Polyfills for New JavaScript Features</span></a></h3><p>A <strong>polyfill</strong> is a piece of code that adds support for new JavaScript features on browsers that don’t have them yet. It basically provides an alternative implementation of the feature.</p><p>For example, let’s create a polyfill for <code>findLast</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>findLast<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">findLast</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This polyfill adds the <code>findLast</code> method to arrays that don’t support it. Now, even older browsers can run code that uses this feature.</p><p>Polyfills for common methods are available on sites like <strong>MDN</strong> or through libraries like <strong>core-js</strong> that cover many modern JavaScript features.</p><h3 id="tools-and-resources-to-test-browser-support" tabindex="-1"><a class="header-anchor" href="#tools-and-resources-to-test-browser-support"><span>Tools and Resources to Test Browser Support</span></a></h3><p>Before using new features, it’s helpful to check how widely supported they are across different browsers. Here are some tools that can assist:</p><p>:::</p><p>@tab:active Can I Use</p><p>A popular website that shows browser compatibility for new JavaScript features. You can search for methods like <code>toSorted</code> or <code>findLast</code> to see which browsers support them.</p>`,19),R={href:"https://caniuse.com/?search=findLast",target:"_blank",rel:"noopener noreferrer"},P=c(`<p>@tab Babel</p><p>A JavaScript compiler that converts new JavaScript code into older versions that work on older browsers. Babel can automatically add polyfills for unsupported features.</p><p>Example usage with Babel:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/preset-env</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then configure Babel to use the preset:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab Polyfill.io</p><p><a href="http://polyfill.io" target="_blank" rel="noopener noreferrer">A service that automatically serves the necessary polyfills based on the user&#39;s browser.</a></p><p>To use it, simply add this script to your HTML:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://polyfill.io/v3/polyfill.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>:::</p><p>This script automatically adds only the polyfills needed for the browser loading the page, making it an easy way to handle backward compatibility.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>We’ve explored some of the latest JavaScript features, including methods like <code>findLast</code>, <code>findLastIndex</code>, <code>toReversed</code>, <code>toSorted</code>, <code>toSpliced</code>, and <code>with</code>.</p><p>These new additions bring more flexibility and efficiency to working with arrays. They help avoid unwanted changes to the original data and make code cleaner and easier to follow. For example, <code>toSorted</code> allows sorting without altering the original array, and <code>findLast</code> makes it simpler to locate the last matching element in a list.</p><p>Each of these methods saves time and reduces complexity when managing and transforming data.</p><p>As JavaScript continues to evolve, it’s important to start using these methods in future projects. They can simplify complex data manipulation tasks and make your code easier to maintain. Try adding these methods to your current codebase and explore how they can improve the way you write and manage JavaScript.</p><p>The next time you work with arrays, consider using <code>toSorted</code> for sorting, <code>findLast</code> for searching, or <code>with</code> for replacing elements without changing the original data. These small adjustments can have a big impact on the quality of your code.</p>`,19),E={href:"https://ng.linkedin.com/in/joan-ayebola",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"joan-ayebola",-1),N={href:"https://buymeacoffee.com/joanayebola",target:"_blank",rel:"noopener noreferrer"};function U(r,B){const u=i("VPCard"),t=i("router-link"),d=i("SiteInfo"),m=i("Tabs"),l=i("FontIcon");return b(),k("div",null,[n("h1",w,[n("a",x,[n("span",null,v(r.$frontmatter.title)+" 관련",1)])]),e(u,g(f({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",j,[n("ul",null,[n("li",null,[e(t,{to:"#array-methods-in-javascript"},{default:s(()=>[a("Array Methods in JavaScript")]),_:1})]),n("li",null,[e(t,{to:"#findlast-locate-the-last-matching-element"},{default:s(()=>[a("findLast: Locate the Last Matching Element")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#syntax-and-parameters-of-findlast"},{default:s(()=>[a("Syntax and Parameters of findLast")]),_:1})]),n("li",null,[e(t,{to:"#practical-examples-of-using-findlast"},{default:s(()=>[a("Practical Examples of Using findLast")]),_:1})]),n("li",null,[e(t,{to:"#finding-the-last-occurrence-in-arrays"},{default:s(()=>[a("Finding the Last Occurrence in Arrays")]),_:1})]),n("li",null,[e(t,{to:"#comparison-with-find"},{default:s(()=>[a("Comparison with find()")]),_:1})])])]),n("li",null,[e(t,{to:"#findlastindex-pinpoint-the-index-of-the-last-match"},{default:s(()=>[a("findLastIndex: Pinpoint the Index of the Last Match")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#syntax-and-key-parameters"},{default:s(()=>[a("Syntax and Key Parameters")]),_:1})]),n("li",null,[e(t,{to:"#practical-examples-of-findlastindex-in-action"},{default:s(()=>[a("Practical Examples of findLastIndex in Action")]),_:1})]),n("li",null,[e(t,{to:"#retrieving-the-last-index-matching-a-condition"},{default:s(()=>[a("Retrieving the Last Index Matching a Condition")]),_:1})]),n("li",null,[e(t,{to:"#contrast-with-findindex"},{default:s(()=>[a("Contrast with findIndex")]),_:1})]),n("li",null,[e(t,{to:"#performance-considerations-for-large-data-sets"},{default:s(()=>[a("Performance Considerations for Large Data Sets")]),_:1})])])]),n("li",null,[e(t,{to:"#toreversed-reverse-without-changing-original-arrays"},{default:s(()=>[a("toReversed: Reverse Without Changing Original Arrays")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#syntax-and-usage-of-toreversed"},{default:s(()=>[a("Syntax and Usage of toReversed")]),_:1})]),n("li",null,[e(t,{to:"#examples-of-reversing-arrays-safely"},{default:s(()=>[a("Examples of Reversing Arrays Safely")]),_:1})]),n("li",null,[e(t,{to:"#avoiding-side-effects-with-toreversed"},{default:s(()=>[a("Avoiding Side Effects with toReversed")]),_:1})]),n("li",null,[e(t,{to:"#comparison-with-reverse-method"},{default:s(()=>[a("Comparison with reverse Method")]),_:1})]),n("li",null,[e(t,{to:"#how-toreversed-enhances-functional-programming-practices"},{default:s(()=>[a("How toReversed Enhances Functional Programming Practices")]),_:1})])])]),n("li",null,[e(t,{to:"#tosorted-immutable-sorting-for-cleaner-code"},{default:s(()=>[a("toSorted: Immutable Sorting for Cleaner Code")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#syntax-and-parameters"},{default:s(()=>[a("Syntax and Parameters")]),_:1})]),n("li",null,[e(t,{to:"#use-cases-of-tosorted"},{default:s(()=>[a("Use Cases of toSorted")]),_:1})]),n("li",null,[e(t,{to:"#sorting-arrays-without-mutating-original-data"},{default:s(()=>[a("Sorting Arrays Without Mutating Original Data")]),_:1})]),n("li",null,[e(t,{to:"#comparison-with-the-traditional-sort-method"},{default:s(()=>[a("Comparison with the Traditional sort Method")]),_:1})]),n("li",null,[e(t,{to:"#performance-and-best-practices"},{default:s(()=>[a("Performance and Best Practices")]),_:1})])])]),n("li",null,[e(t,{to:"#tospliced-create-new-arrays-by-splicing-without-mutation"},{default:s(()=>[a("toSpliced: Create New Arrays by Splicing Without Mutation")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#syntax-and-practical-usage"},{default:s(()=>[a("Syntax and Practical Usage")]),_:1})]),n("li",null,[e(t,{to:"#examples-splicing-arrays-in-an-immutable-way"},{default:s(()=>[a("Examples: Splicing Arrays in an Immutable Way")]),_:1})]),n("li",null,[e(t,{to:"#comparison-with-the-traditional-splice-method"},{default:s(()=>[a("Comparison with the Traditional splice Method")]),_:1})]),n("li",null,[e(t,{to:"#use-cases-for-functional-programming"},{default:s(()=>[a("Use Cases for Functional Programming")]),_:1})]),n("li",null,[e(t,{to:"#avoiding-pitfalls-with-tospliced"},{default:s(()=>[a("Avoiding Pitfalls with toSpliced")]),_:1})])])]),n("li",null,[e(t,{to:"#with-modify-array-elements-by-index"},{default:s(()=>[a("with: Modify Array Elements by Index")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#syntax-and-key-parameters-1"},{default:s(()=>[a("Syntax and Key Parameters")]),_:1})]),n("li",null,[e(t,{to:"#examples-of-using-with-for-element-replacement"},{default:s(()=>[a("Examples of Using with for Element Replacement")]),_:1})]),n("li",null,[e(t,{to:"#replacing-elements-in-arrays-while-maintaining-immutability"},{default:s(()=>[a("Replacing Elements in Arrays While Maintaining Immutability")]),_:1})]),n("li",null,[e(t,{to:"#applications-of-the-with-method"},{default:s(()=>[a("Applications of the with Method")]),_:1})]),n("li",null,[e(t,{to:"#with-vs-traditional-methods-for-element-replacement"},{default:s(()=>[a("with vs Traditional Methods for Element Replacement")]),_:1})])])]),n("li",null,[e(t,{to:"#combining-new-javascript-methods-for-advanced-data-manipulation"},{default:s(()=>[a("Combining New JavaScript Methods for Advanced Data Manipulation")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#how-to-chain-methods-like-findlast-tosorted-and-with"},{default:s(()=>[a("How to Chain Methods like findLast, toSorted, and with")]),_:1})]),n("li",null,[e(t,{to:"#creating-complex-data-transformations-with-ease"},{default:s(()=>[a("Creating Complex Data Transformations with Ease")]),_:1})]),n("li",null,[e(t,{to:"#best-practices-for-writing-clean-efficient-code-with-these-methods"},{default:s(()=>[a("Best Practices for Writing Clean, Efficient Code with These Methods")]),_:1})])])]),n("li",null,[e(t,{to:"#backward-compatibility-and-polyfills"},{default:s(()=>[a("Backward Compatibility and Polyfills")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#how-to-ensure-backward-compatibility-with-older-browsers"},{default:s(()=>[a("How to Ensure Backward Compatibility with Older Browsers")]),_:1})]),n("li",null,[e(t,{to:"#overview-of-polyfills-for-new-javascript-features"},{default:s(()=>[a("Overview of Polyfills for New JavaScript Features")]),_:1})]),n("li",null,[e(t,{to:"#tools-and-resources-to-test-browser-support"},{default:s(()=>[a("Tools and Resources to Test Browser Support")]),_:1})])])]),n("li",null,[e(t,{to:"#conclusion"},{default:s(()=>[a("Conclusion")]),_:1})])])]),S,e(d,{name:"New JavaScript Array Methods to Help You Write Better, Cleaner Code",desc:"JavaScript is always improving, and every year, new features are added to make coding easier and more efficient. These updates help developers write cleaner code and work faster. If you want to stay ahead as a developer, it's important to learn about...",url:"https://freecodecamp.org/news/new-javascript-array-methods-to-help-you-write-better-cleaner-code",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1727789649013/c0c332b4-fc35-4b75-bea9-240dcd85ec88.png"}),A,e(m,{id:"576",data:[{id:"1. Avoid Mutating the Original Data"},{id:"2. Use Chaining for Readability"},{id:"3. Use Arrow Functions"},{id:"4. Combine Methods Thoughtfully"},{id:"5. Handle Large Datasets Carefully"}],active:0},{title0:s(({value:o,isActive:p})=>[a("1. Avoid Mutating the Original Data")]),title1:s(({value:o,isActive:p})=>[a("2. Use Chaining for Readability")]),title2:s(({value:o,isActive:p})=>[a("3. Use Arrow Functions")]),title3:s(({value:o,isActive:p})=>[a("4. Combine Methods Thoughtfully")]),title4:s(({value:o,isActive:p})=>[a("5. Handle Large Datasets Carefully")]),tab0:s(({value:o,isActive:p})=>[C]),tab1:s(({value:o,isActive:p})=>[_]),tab2:s(({value:o,isActive:p})=>[T,L]),tab3:s(({value:o,isActive:p})=>[I]),tab4:s(({value:o,isActive:p})=>[O]),_:1}),M,n("p",null,[a("Example: "),n("a",R,[e(l,{icon:"fas fa-globe"}),a("Can I Use: findLast")])]),P,n("p",null,[a("If you have any questions or suggestions, feel free to reach out on "),n("a",E,[a("LinkedIn ("),e(l,{icon:"fa-brands fa-linkedin"}),J,a(")")]),a(". If you enjoyed this content, consider "),n("a",N,[e(l,{icon:"fas fa-globe"}),a("buying me a coffee")]),a(" to support the creation of more developer-friendly contents.")])])}const H=h(y,[["render",U],["__file","new-javascript-array-methods-to-help-you-write-better-cleaner-code.html.vue"]]),W=JSON.parse('{"path":"/freecodecamp.org/new-javascript-array-methods-to-help-you-write-better-cleaner-code.html","title":"New JavaScript Array Methods to Help You Write Better, Cleaner Code","lang":"en-US","frontmatter":{"lang":"en-US","title":"New JavaScript Array Methods to Help You Write Better, Cleaner Code","description":"Article(s) > New JavaScript Array Methods to Help You Write Better, Cleaner Code","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","freecodecamp.org","js","javascript"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > New JavaScript Array Methods to Help You Write Better, Cleaner Code"},{"property":"og:description","content":"New JavaScript Array Methods to Help You Write Better, Cleaner Code"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/new-javascript-array-methods-to-help-you-write-better-cleaner-code.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/new-javascript-array-methods-to-help-you-write-better-cleaner-code.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"New JavaScript Array Methods to Help You Write Better, Cleaner Code"}],["meta",{"property":"og:description","content":"Article(s) > New JavaScript Array Methods to Help You Write Better, Cleaner Code"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727789649013/c0c332b4-fc35-4b75-bea9-240dcd85ec88.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727789649013/c0c332b4-fc35-4b75-bea9-240dcd85ec88.png"}],["meta",{"name":"twitter:image:alt","content":"New JavaScript Array Methods to Help You Write Better, Cleaner Code"}],["meta",{"property":"article:author","content":"Joan Ayebola"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2024-10-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"New JavaScript Array Methods to Help You Write Better, Cleaner Code\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727789649013/c0c332b4-fc35-4b75-bea9-240dcd85ec88.png\\"],\\"datePublished\\":\\"2024-10-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Joan Ayebola\\"}]}"]],"prev":"/programming/js/articles/README.md","date":"2024-10-02T00:00:00.000Z","isOriginal":false,"author":"Joan Ayebola","cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727789649013/c0c332b4-fc35-4b75-bea9-240dcd85ec88.png"},"headers":[{"level":2,"title":"Array Methods in JavaScript","slug":"array-methods-in-javascript","link":"#array-methods-in-javascript","children":[]},{"level":2,"title":"findLast: Locate the Last Matching Element","slug":"findlast-locate-the-last-matching-element","link":"#findlast-locate-the-last-matching-element","children":[{"level":3,"title":"Syntax and Parameters of findLast","slug":"syntax-and-parameters-of-findlast","link":"#syntax-and-parameters-of-findlast","children":[]},{"level":3,"title":"Practical Examples of Using findLast","slug":"practical-examples-of-using-findlast","link":"#practical-examples-of-using-findlast","children":[]},{"level":3,"title":"Finding the Last Occurrence in Arrays","slug":"finding-the-last-occurrence-in-arrays","link":"#finding-the-last-occurrence-in-arrays","children":[]},{"level":3,"title":"Comparison with find()","slug":"comparison-with-find","link":"#comparison-with-find","children":[]}]},{"level":2,"title":"findLastIndex: Pinpoint the Index of the Last Match","slug":"findlastindex-pinpoint-the-index-of-the-last-match","link":"#findlastindex-pinpoint-the-index-of-the-last-match","children":[{"level":3,"title":"Syntax and Key Parameters","slug":"syntax-and-key-parameters","link":"#syntax-and-key-parameters","children":[]},{"level":3,"title":"Practical Examples of findLastIndex in Action","slug":"practical-examples-of-findlastindex-in-action","link":"#practical-examples-of-findlastindex-in-action","children":[]},{"level":3,"title":"Retrieving the Last Index Matching a Condition","slug":"retrieving-the-last-index-matching-a-condition","link":"#retrieving-the-last-index-matching-a-condition","children":[]},{"level":3,"title":"Contrast with findIndex","slug":"contrast-with-findindex","link":"#contrast-with-findindex","children":[]},{"level":3,"title":"Performance Considerations for Large Data Sets","slug":"performance-considerations-for-large-data-sets","link":"#performance-considerations-for-large-data-sets","children":[]}]},{"level":2,"title":"toReversed: Reverse Without Changing Original Arrays","slug":"toreversed-reverse-without-changing-original-arrays","link":"#toreversed-reverse-without-changing-original-arrays","children":[{"level":3,"title":"Syntax and Usage of toReversed","slug":"syntax-and-usage-of-toreversed","link":"#syntax-and-usage-of-toreversed","children":[]},{"level":3,"title":"Examples of Reversing Arrays Safely","slug":"examples-of-reversing-arrays-safely","link":"#examples-of-reversing-arrays-safely","children":[]},{"level":3,"title":"Avoiding Side Effects with toReversed","slug":"avoiding-side-effects-with-toreversed","link":"#avoiding-side-effects-with-toreversed","children":[]},{"level":3,"title":"Comparison with reverse Method","slug":"comparison-with-reverse-method","link":"#comparison-with-reverse-method","children":[]},{"level":3,"title":"How toReversed Enhances Functional Programming Practices","slug":"how-toreversed-enhances-functional-programming-practices","link":"#how-toreversed-enhances-functional-programming-practices","children":[]}]},{"level":2,"title":"toSorted: Immutable Sorting for Cleaner Code","slug":"tosorted-immutable-sorting-for-cleaner-code","link":"#tosorted-immutable-sorting-for-cleaner-code","children":[{"level":3,"title":"Syntax and Parameters","slug":"syntax-and-parameters","link":"#syntax-and-parameters","children":[]},{"level":3,"title":"Use Cases of toSorted","slug":"use-cases-of-tosorted","link":"#use-cases-of-tosorted","children":[]},{"level":3,"title":"Sorting Arrays Without Mutating Original Data","slug":"sorting-arrays-without-mutating-original-data","link":"#sorting-arrays-without-mutating-original-data","children":[]},{"level":3,"title":"Comparison with the Traditional sort Method","slug":"comparison-with-the-traditional-sort-method","link":"#comparison-with-the-traditional-sort-method","children":[]},{"level":3,"title":"Performance and Best Practices","slug":"performance-and-best-practices","link":"#performance-and-best-practices","children":[]}]},{"level":2,"title":"toSpliced: Create New Arrays by Splicing Without Mutation","slug":"tospliced-create-new-arrays-by-splicing-without-mutation","link":"#tospliced-create-new-arrays-by-splicing-without-mutation","children":[{"level":3,"title":"Syntax and Practical Usage","slug":"syntax-and-practical-usage","link":"#syntax-and-practical-usage","children":[]},{"level":3,"title":"Examples: Splicing Arrays in an Immutable Way","slug":"examples-splicing-arrays-in-an-immutable-way","link":"#examples-splicing-arrays-in-an-immutable-way","children":[]},{"level":3,"title":"Comparison with the Traditional splice Method","slug":"comparison-with-the-traditional-splice-method","link":"#comparison-with-the-traditional-splice-method","children":[]},{"level":3,"title":"Use Cases for Functional Programming","slug":"use-cases-for-functional-programming","link":"#use-cases-for-functional-programming","children":[]},{"level":3,"title":"Avoiding Pitfalls with toSpliced","slug":"avoiding-pitfalls-with-tospliced","link":"#avoiding-pitfalls-with-tospliced","children":[]}]},{"level":2,"title":"with: Modify Array Elements by Index","slug":"with-modify-array-elements-by-index","link":"#with-modify-array-elements-by-index","children":[{"level":3,"title":"Syntax and Key Parameters","slug":"syntax-and-key-parameters-1","link":"#syntax-and-key-parameters-1","children":[]},{"level":3,"title":"Examples of Using with for Element Replacement","slug":"examples-of-using-with-for-element-replacement","link":"#examples-of-using-with-for-element-replacement","children":[]},{"level":3,"title":"Replacing Elements in Arrays While Maintaining Immutability","slug":"replacing-elements-in-arrays-while-maintaining-immutability","link":"#replacing-elements-in-arrays-while-maintaining-immutability","children":[]},{"level":3,"title":"Applications of the with Method","slug":"applications-of-the-with-method","link":"#applications-of-the-with-method","children":[]},{"level":3,"title":"with vs Traditional Methods for Element Replacement","slug":"with-vs-traditional-methods-for-element-replacement","link":"#with-vs-traditional-methods-for-element-replacement","children":[]}]},{"level":2,"title":"Combining New JavaScript Methods for Advanced Data Manipulation","slug":"combining-new-javascript-methods-for-advanced-data-manipulation","link":"#combining-new-javascript-methods-for-advanced-data-manipulation","children":[{"level":3,"title":"How to Chain Methods like findLast, toSorted, and with","slug":"how-to-chain-methods-like-findlast-tosorted-and-with","link":"#how-to-chain-methods-like-findlast-tosorted-and-with","children":[]},{"level":3,"title":"Creating Complex Data Transformations with Ease","slug":"creating-complex-data-transformations-with-ease","link":"#creating-complex-data-transformations-with-ease","children":[]},{"level":3,"title":"Best Practices for Writing Clean, Efficient Code with These Methods","slug":"best-practices-for-writing-clean-efficient-code-with-these-methods","link":"#best-practices-for-writing-clean-efficient-code-with-these-methods","children":[]}]},{"level":2,"title":"Backward Compatibility and Polyfills","slug":"backward-compatibility-and-polyfills","link":"#backward-compatibility-and-polyfills","children":[{"level":3,"title":"How to Ensure Backward Compatibility with Older Browsers","slug":"how-to-ensure-backward-compatibility-with-older-browsers","link":"#how-to-ensure-backward-compatibility-with-older-browsers","children":[]},{"level":3,"title":"Overview of Polyfills for New JavaScript Features","slug":"overview-of-polyfills-for-new-javascript-features","link":"#overview-of-polyfills-for-new-javascript-features","children":[]},{"level":3,"title":"Tools and Resources to Test Browser Support","slug":"tools-and-resources-to-test-browser-support","link":"#tools-and-resources-to-test-browser-support","children":[]}]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":1}]},"readingTime":{"minutes":16.37,"words":4912},"filePathRelative":"freecodecamp.org/new-javascript-array-methods-to-help-you-write-better-cleaner-code.md","localizedDate":"October 2, 2024","excerpt":"\\n","copyright":{"author":"Joan Ayebola"}}');export{H as comp,W as data};
