import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as n,t as m,e as s,n as t,g as i,w as p,d as a,f as l,r as c,o as h}from"./app-BgNevrm5.js";const v={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},b=n("hr",null,null,-1),y=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftUI is packed with powerful headline features, but there are also dozens of smaller tips and tricks that will help you write better apps.</p><p>I’ve tried to summarize all the tips I’ve come across so far below, and where applicable I’ve also provided links to my more in-depth SwiftUI tutorials to help give you extra context.</p><hr><h2 id="resume-the-live-preview" tabindex="-1"><a class="header-anchor" href="#resume-the-live-preview"><span>Resume the live preview</span></a></h2><p>Having a live preview of your layouts while you code is a great feature of Xcode, but often you’ll see it pause because you changed a lot and Xcode couldn’t keep up.</p><p>Rather than constantly reaching for your trackpad to press Resume, here’s the most important keyboard shortcut for SwiftUI developers: press <kbd>Option</kbd>+<kbd>CMd</kbd>+<kbd>P</kbd> to make the preview window reload immediately, and resume its live updates.</p><hr><h2 id="make-state-private" tabindex="-1"><a class="header-anchor" href="#make-state-private"><span>Make <code>@State</code> private</span></a></h2><p>Apple provides us with three ways to use state in our apps: <code>@State</code> is for simple local properties, <code>@ObservedObject</code> is for complex properties or properties that are shared between views, and <code>@EnvironmentObject</code> is for properties that are indirectly shared potentially by many views.</p><p>Because <code>@State</code> is specifically designed for use by the local view, Apple recommends marking <code>@State</code> properties as <code>private</code> to really re-enforce that they aren’t designed to be accessed elsewhere:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12),x={class:"hint-container info"},_=n("p",{class:"hint-container-title"},"Read more",-1),S=l(`<hr><h2 id="prototype-with-constant-bindings" tabindex="-1"><a class="header-anchor" href="#prototype-with-constant-bindings"><span>Prototype with constant bindings</span></a></h2><p>If you’re just trying out a design and don’t want to have to create bindings to use things like text fields and sliders, you can use a constant binding instead. This will allow you to use the object with a realistic value.</p><p>For example, this creates a text field with the constant string “Hello”:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Example placeholder&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>roundedBorder<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>If you’re using Xcode 12 you need to use <code>RoundedBorderTextFieldStyle()</code> rather than <code>.roundedBorder</code>.</p></div><p>And this creates a slider with a constant value of 0.5:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Constant bindings like this one are just for testing and illustration purposes – you can’t change them at runtime.</p></div><hr><h2 id="presenting-test-views" tabindex="-1"><a class="header-anchor" href="#presenting-test-views"><span>Presenting test views</span></a></h2><p>Another useful tip while you’re prototyping is that you can present any kind of view rather than a full detail view – even when working with a navigation stack.</p><p>For example, if you had a list of users and wanted to make sure that tapping one of them worked, you could use a navigation link that points to a text view rather than a fully fledged custom custom view, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span> number <span class="token keyword">in</span> <span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> user <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Detail for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a user&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows you to make one screen complete before going on to design the real detail view.</p>`,15),q={class:"hint-container info"},I=n("p",{class:"hint-container-title"},"Read more",-1),U=l(`<hr><h2 id="add-customizations-for-an-individual-platform" tabindex="-1"><a class="header-anchor" href="#add-customizations-for-an-individual-platform"><span>Add customizations for an individual platform</span></a></h2><p>Sometimes you have one SwiftUI view that works great on both iOS and macOS, but needs just a tiny modification – perhaps a little more padding on iOS, or slightly different styling.</p><p>For these times I recommend the following view extensions, which add <code>iOS()</code>, <code>macOS()</code>, <code>tvOS()</code>, and <code>watchOS()</code> methods for just this purpose:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">iOS</span><span class="token operator">&lt;</span><span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> modifier<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>iOS<span class="token punctuation">)</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">macOS</span><span class="token operator">&lt;</span><span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> modifier<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">tvOS</span><span class="token operator">&lt;</span><span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> modifier<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>tvOS<span class="token punctuation">)</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">watchOS</span><span class="token operator">&lt;</span><span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> modifier<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>watchOS<span class="token punctuation">)</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span></span>
<span class="line">        <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each of those follow the same pattern: they create a new method using the platform name, each of which accept a function that is able to transform the current view somehow. Inside the method there is a compiler check to see whether the current platform manages the one we expect – if so we apply the modifier function, otherwise we don’t.</p><p>Those platform checks – <code>#if os(iOS)</code>, etc – are done at <em>compile</em> time, which means they will be optimized away. In fact, it’s likely the compiler will be able to optimize these methods entirely because they are so simple.</p><p>Use them like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span>iOS <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="go-past-the-10-view-limit" tabindex="-1"><a class="header-anchor" href="#go-past-the-10-view-limit"><span>Go past the 10 view limit</span></a></h2><p>All containers in SwiftUI must return no more than ten children, which is usually fine for most purposes. However, if you need to have more than 10 views, if you need to return more than one view from your <code>body</code> property, or if you need to return several different kinds of view, you should use a group like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 3&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 4&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 5&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 6&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 7&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 8&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 9&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 10&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 11&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Groups are purely logical containers – they don’t affect your layouts.</p>`,14),V={class:"hint-container info"},T=n("p",{class:"hint-container-title"},"Read more",-1),j=l('<hr><h2 id="use-semantic-colors" tabindex="-1"><a class="header-anchor" href="#use-semantic-colors"><span>Use semantic colors</span></a></h2><p>SwiftUI is designed to work with themed user interfaces out of the box, which means it provides both semantic and adaptive colors by default. Although it might be tempting to use your own custom colors, you should at least check first whether you have something in the default SwiftUI set.</p><p>For example, <code>Color.red</code> isn’t the pure red of RGB(255, 0, 0), but instead slightly lighter or slightly darker based on the environment – it adapts automatically without us needing to think about it.</p><p>Similarly, <code>Color.primary</code>, <code>Color.secondary</code>, and <code>Color.accentColor</code> all refer to fixed values that are provided by the environment, allowing us to structure and highlight content in a standardized way.</p>',5),H={class:"hint-container info"},R=n("p",{class:"hint-container-title"},"Read more",-1),C=l(`<hr><h2 id="rely-on-adaptive-padding" tabindex="-1"><a class="header-anchor" href="#rely-on-adaptive-padding"><span>Rely on adaptive padding</span></a></h2><p>SwiftUI lets us control precisely how much padding to apply around views, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row 1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>While it’s tempting to always control padding like this to “get things just right”, if you use the <code>padding()</code> modifier without any parameters you get <em>adaptive</em> padding – padding that automatically adjusts itself to its content and its environment.</p><p>So, if your app is running on an iPad with a regular size class you’ll get more padding than if the user moves it down to a split view – all without having to write any code.</p>`,6),O={class:"hint-container info"},E=n("p",{class:"hint-container-title"},"Read more",-1),A=l(`<hr><h2 id="combine-text-views" tabindex="-1"><a class="header-anchor" href="#combine-text-views"><span>Combine text views</span></a></h2><p>You can create new text views out of several small ones using <code>+</code>, which is an easy way of creating more advanced formatting. For example, this creates three text views in different colors and combines them together:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Colored &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">+</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;SwifUI &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">+</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Text&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),P={class:"hint-container info"},W=n("p",{class:"hint-container-title"},"Read more",-1),z=l(`<hr><h2 id="how-to-make-print-work" tabindex="-1"><a class="header-anchor" href="#how-to-make-print-work"><span>How to make <code>print()</code> work</span></a></h2><p>If you press play in the SwiftUI preview to try out your designs, you’ll find that any calls to <code>print()</code> are ignored. If you’re using <code>print()</code> for testing purposes – e.g. as simple button tap actions – then this can be a real headache.</p><p>Fortunately, there’s a simple fix: right-click on the play button in the preview canvas and choose “Debug Preview”. With that small change made you’ll find your <code>print()</code> calls work as normal.</p><hr><h2 id="relying-on-the-implicit-hstack" tabindex="-1"><a class="header-anchor" href="#relying-on-the-implicit-hstack"><span>Relying on the implicit <code>HStack</code></span></a></h2><p>When you create a list of items, it’s common to want to get the iOS-standard look of having an image on the left then some text on the right.</p><p>Well, if you’re using a dynamic list of items – i.e., a list that’s attached to an array of data – then you actually get a <code>HStack</code> for free inside your list, so there’s no need to make one by hand.</p><p>So, this code will create a list based on picture names from an array, and relies on the implicit <code>HStack</code> to arrange the image and text side by side:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> imageNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;paul-hudson&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;swiftui&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token punctuation">(</span>imageNames<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> image <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),F={class:"hint-container info"},B=n("p",{class:"hint-container-title"},"Read more",-1),N=l(`<hr><h2 id="splitting-up-large-views" tabindex="-1"><a class="header-anchor" href="#splitting-up-large-views"><span>Splitting up large views</span></a></h2><p>If you find yourself with a large view you might find it easier to break it up into several smaller views and compose those together to get the same result. One of the great features of SwiftUI is that there’s no performance difference because it flattens its view hierarchy, but it certainly makes maintenance easier!</p><p>For example, here’s a list that shows an image, a title, and a subtitle for every users:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Paul Hudson&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> user <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Navigation</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Detail View&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;person.crop.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Occupation: Programmer&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Users&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even though it’s not really <em>that</em> complicated, you still need to read it carefully to understand what it’s going on.</p><p>Fortunately, we can take parts of the view out into a separate view to make it easier to understand and easier to re-use, and Xcode makes it a cinch: just Cmd-click on the navigation link and choose Extract Subview. This will pull the code out into a new SwiftUI view, and leave a reference where it was.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>If your subview relies on data from the parent you’ll need to pass that along yourself.</p></div>`,8),L={class:"hint-container info"},M=n("p",{class:"hint-container-title"},"Read more",-1),G=l(`<hr><h2 id="better-previewing" tabindex="-1"><a class="header-anchor" href="#better-previewing"><span>Better previewing</span></a></h2><p>One of the many benefits of SwiftUI is that we get instant previews of our layouts as we work. Even better, we can customize those previews so that we can see multiple designs side by side, see how things look with a navigation stack, try out dark mode, and more.</p><p>For example, this creates a preview for <code>ContentView</code> that shows three different designs side by side: extra large text, dark mode, and a navigation stack:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>sizeCategory<span class="token punctuation">,</span> <span class="token punctuation">.</span>accessibilityExtraExtraExtraLarge<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">preferredColorScheme</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dark<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Make sure you zoom out or scroll around in the preview window to see all the different previews.</p></div>`,6),K={class:"hint-container info"},D=n("p",{class:"hint-container-title"},"Read more",-1),X=l(`<hr><h2 id="create-custom-modifiers" tabindex="-1"><a class="header-anchor" href="#create-custom-modifiers"><span>Create custom modifiers</span></a></h2><p>If you find yourself regularly repeating the same set of view modifiers – for example, making a text view have padding, be of a specific size, have fixed background and foreground colors, etc – then you should consider moving those to a custom modifier rather than repeating your code.</p><p>For example, this creates a new <code>PrimaryLabel</code> modifier that adds padding, a black background, white text, a large font, and some corner rounding:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">PrimaryLabel</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        content</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can now attach that to any view using <code>.modifier(PrimaryLabel())</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">PrimaryLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),$={class:"hint-container info"},Y=n("p",{class:"hint-container-title"},"Read more",-1),J=l(`<hr><h2 id="animate-changes-easily" tabindex="-1"><a class="header-anchor" href="#animate-changes-easily"><span>Animate changes easily</span></a></h2><p>SwiftUI has two ways for us to animate changes to its view hierarchy: <code>animation()</code> and <code>withAnimation()</code>. They are used in different places, but both have the effect of smoothing out changes to the views in our app.</p><p>The <code>animation()</code> method is used on bindings, and it asks SwiftUI to animate any changes that result in the binding’s value being modified. For example, here’s a view that has a <code>Toggle</code> to show or hide a label:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingWelcome <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Toggle label&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $showingWelcome<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> showingWelcome <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the toggle is changed, the text view below it will appear or disappear immediately, which isn’t a great experience. However, if we used <code>animation()</code> we could make the view slide in and out smoothly when the toggle is changed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Toggle label&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $showingWelcome<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can even control the kind of animation you want, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Toggle label&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $showingWelcome<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When you’re working with regular state rather than bindings, you can animate changes by wrapping them in a <code>withAnimation()</code> call.</p><p>For example, here’s our same view except now it shows or hide the welcome label using a button press:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingWelcome <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Toggle label&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                showingWelcome<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> showingWelcome <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As with before that will cause the welcome label to appear and disappear immediately, but if we wrap our changes in <code>withAnimation()</code> they will be animated instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">withAnimation <span class="token punctuation">{</span></span>
<span class="line">    showingWelcome<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And it’s customizable in exactly the same way as <code>animation()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    showingWelcome<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),Q={class:"hint-container info"},Z=n("p",{class:"hint-container-title"},"Read more",-1),nn=n("hr",null,null,-1),sn=n("h2",{id:"showing-multiple-alerts-in-a-view",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#showing-multiple-alerts-in-a-view"},[n("span",null,"Showing multiple alerts in a view")])],-1),an=n("p",null,[a("If you try to attach multiple "),n("code",null,"alert()"),a(" modifiers to a single view, you’ll find your code doesn’t work as you expect – one alert will work but the other won’t.")],-1),en=n("p",null,"To fix this, you should attach your alerts to different parts of your view hierarchy, such as to the button or other view that triggers the alert to appear.",-1),tn={class:"hint-container info"},on=n("p",{class:"hint-container-title"},"Read more",-1),pn=l('<hr><h2 id="publishing-new-values-from-a-binding" tabindex="-1"><a class="header-anchor" href="#publishing-new-values-from-a-binding"><span>Publishing new values from a binding</span></a></h2><p>Last but not least, to avoid problems when sending update notifications from a publisher – e.g. calling <code>send()</code> on a <code>PassthroughSubject</code> or updating any <code>@Published</code> property – you should make sure you’re always on the main thread.</p><p>As with UIKit and most other UI frameworks, you can do all the background work you want in your SwiftUI apps, but you should only ever manipulate the user interface on the main thread. Because state changes automatically trigger a refresh of your <code>body</code>, it’s important that you make sure you perform those state changes on the main thread.</p>',4),ln={class:"hint-container info"},cn=n("p",{class:"hint-container-title"},"Read more",-1),rn=n("hr",null,null,-1),un=n("h2",{id:"what-are-your-tips",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-are-your-tips"},[n("span",null,[a("What are "),n("em",null,"your"),a(" tips?")])])],-1),dn=n("p",null,"The SwiftUI tips and tricks above are ones I’ve come across watching WWDC sessions, asking questions in the labs, and writing lots and lots of code while moving my own projects from UIKit.",-1),kn={href:"https://twitter.com/twostraws",target:"_blank",rel:"noopener noreferrer"},mn={class:"hint-container details"},hn=n("summary",null,"Similar solutions…",-1);function vn(r,wn){const e=c("VPCard"),o=c("router-link"),u=c("FontIcon");return h(),k("div",null,[n("h1",w,[n("a",g,[n("span",null,m(r.$frontmatter.title)+" 관련",1)])]),s(e,t(i({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[s(o,{to:"#resume-the-live-preview"},{default:p(()=>[a("Resume the live preview")]),_:1})]),n("li",null,[s(o,{to:"#make-state-private"},{default:p(()=>[a("Make @State private")]),_:1})]),n("li",null,[s(o,{to:"#prototype-with-constant-bindings"},{default:p(()=>[a("Prototype with constant bindings")]),_:1})]),n("li",null,[s(o,{to:"#presenting-test-views"},{default:p(()=>[a("Presenting test views")]),_:1})]),n("li",null,[s(o,{to:"#add-customizations-for-an-individual-platform"},{default:p(()=>[a("Add customizations for an individual platform")]),_:1})]),n("li",null,[s(o,{to:"#go-past-the-10-view-limit"},{default:p(()=>[a("Go past the 10 view limit")]),_:1})]),n("li",null,[s(o,{to:"#use-semantic-colors"},{default:p(()=>[a("Use semantic colors")]),_:1})]),n("li",null,[s(o,{to:"#rely-on-adaptive-padding"},{default:p(()=>[a("Rely on adaptive padding")]),_:1})]),n("li",null,[s(o,{to:"#combine-text-views"},{default:p(()=>[a("Combine text views")]),_:1})]),n("li",null,[s(o,{to:"#how-to-make-print-work"},{default:p(()=>[a("How to make print() work")]),_:1})]),n("li",null,[s(o,{to:"#relying-on-the-implicit-hstack"},{default:p(()=>[a("Relying on the implicit HStack")]),_:1})]),n("li",null,[s(o,{to:"#splitting-up-large-views"},{default:p(()=>[a("Splitting up large views")]),_:1})]),n("li",null,[s(o,{to:"#better-previewing"},{default:p(()=>[a("Better previewing")]),_:1})]),n("li",null,[s(o,{to:"#create-custom-modifiers"},{default:p(()=>[a("Create custom modifiers")]),_:1})]),n("li",null,[s(o,{to:"#animate-changes-easily"},{default:p(()=>[a("Animate changes easily")]),_:1})]),n("li",null,[s(o,{to:"#showing-multiple-alerts-in-a-view"},{default:p(()=>[a("Showing multiple alerts in a view")]),_:1})]),n("li",null,[s(o,{to:"#publishing-new-values-from-a-binding"},{default:p(()=>[a("Publishing new values from a binding")]),_:1})]),n("li",null,[s(o,{to:"#what-are-your-tips"},{default:p(()=>[a("What are your tips?")]),_:1})])])]),b,s(e,t(i({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"https://hackingwithswift.com/quick-start/swiftui/swiftui-tips-and-tricks",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("div",x,[_,s(e,t(i({title:"What's the difference between @ObservedObject, @State, and @EnvironmentObject? | SwiftUI by Example",desc:"What's the difference between @ObservedObject, @State, and @EnvironmentObject?",link:"/hackingwithswift.com/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),S,n("div",q,[I,s(e,t(i({title:"How to push a new view onto a NavigationStack | SwiftUI by Example",desc:"How to push a new view onto a NavigationStack",link:"/hackingwithswift.com/swiftui/how-to-push-a-new-view-onto-a-navigationstack.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),U,n("div",V,[T,s(e,t(i({title:"How to group views together | SwiftUI by Example",desc:"How to group views together",link:"/hackingwithswift.com/swiftui/how-to-group-views-together.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),j,n("div",H,[R,s(e,t(i({title:"How to style text views with fonts, colors, line spacing, and more | SwiftUI by Example",desc:"How to style text views with fonts, colors, line spacing, and more",link:"/hackingwithswift.com/swiftui/how-to-style-text-views-with-fonts-colors-line-spacing-and-more.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),C,n("div",O,[E,s(e,t(i({title:"How to control spacing around individual views using padding | SwiftUI by Example",desc:"How to control spacing around individual views using padding",link:"/hackingwithswift.com/swiftui/how-to-control-spacing-around-individual-views-using-padding.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),A,n("div",P,[W,s(e,t(i({title:"How to combine text views together | SwiftUI by Example",desc:"How to combine text views together",link:"/hackingwithswift.com/swiftui/how-to-combine-text-views-together.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),z,n("div",F,[B,s(e,t(i({title:"How to use implicit stacking | SwiftUI by Example",desc:"How to use implicit stacking",link:"/hackingwithswift.com/swiftui/how-to-use-implicit-stacking.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),N,n("div",L,[M,s(e,t(i({title:"How to create and compose custom views | SwiftUI by Example",desc:"How to create and compose custom views",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-and-compose-custom-views",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),G,n("div",K,[D,s(e,t(i({title:"How to preview your layout in different devices | SwiftUI by Example",desc:"How to preview your layout in different devices",link:"/hackingwithswift.com/swiftui/how-to-preview-your-layout-in-different-devices.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),X,n("div",$,[Y,s(e,t(i({title:"How to create custom modifiers | SwiftUI by Example",desc:"How to create custom modifiers",link:"/hackingwithswift.com/swiftui/how-to-create-custom-modifiers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),J,n("div",Q,[Z,s(e,t(i({title:"How to add and remove views with a transition | SwiftUI by Example",desc:"How to add and remove views with a transition",link:"/hackingwithswift.com/swiftui/how-to-add-and-remove-views-with-a-transition.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),nn,sn,an,en,n("div",tn,[on,s(e,t(i({title:"How to show multiple alerts in a single view | SwiftUI by Example",desc:"How to show multiple alerts in a single view",link:"/hackingwithswift.com/swiftui/how-to-show-multiple-alerts-in-a-single-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),pn,n("div",ln,[cn,s(e,t(i({title:"How to use @ObservedObject to manage state from external objects | SwiftUI by Example",desc:"How to use @ObservedObject to manage state from external objects",link:"/hackingwithswift.com/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),rn,un,dn,n("p",null,[a("I’d love to hear what tips you have – "),n("a",kn,[s(u,{icon:"fa-brands fa-x-twitter"}),a("send me a tweet @twostraws")]),a(" and let me know!")]),n("details",mn,[hn,s(e,t(i({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"How to use Instruments to profile your SwiftUI code and identify slow layouts | SwiftUI by Example",desc:"How to use Instruments to profile your SwiftUI code and identify slow layouts",link:"/hackingwithswift.com/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"Building a menu using List | SwiftUI by Example",desc:"Building a menu using List",link:"/hackingwithswift.com/swiftui/building-a-menu-using-list.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"Answering the big question: should you learn SwiftUI, UIKit, or both? | SwiftUI by Example",desc:"Answering the big question: should you learn SwiftUI, UIKit, or both?",link:"/hackingwithswift.com/swiftui/answering-the-big-question-should-you-learn-swiftui-uikit-or-both.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(e,t(i({title:"Frequently asked questions about SwiftUI | SwiftUI by Example",desc:"Frequently asked questions about SwiftUI",link:"/hackingwithswift.com/swiftui/frequently-asked-questions-about-swiftui.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const bn=d(v,[["render",vn],["__file","swiftui-tips-and-tricks.html.vue"]]),yn=JSON.parse('{"path":"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.html","title":"SwiftUI tips and tricks","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"SwiftUI tips and tricks","description":"Article(s) > SwiftUI tips and tricks","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > SwiftUI tips and tricks"},{"property":"og:description","content":"SwiftUI tips and tricks"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"SwiftUI tips and tricks"}],["meta",{"property":"og:description","content":"Article(s) > SwiftUI tips and tricks"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SwiftUI tips and tricks\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/hackingwithswift.com/swiftui/how-to-use-state-inside-swiftui-previews-using-previewable.md"},"headers":[{"level":2,"title":"Resume the live preview","slug":"resume-the-live-preview","link":"#resume-the-live-preview","children":[]},{"level":2,"title":"Make @State private","slug":"make-state-private","link":"#make-state-private","children":[]},{"level":2,"title":"Prototype with constant bindings","slug":"prototype-with-constant-bindings","link":"#prototype-with-constant-bindings","children":[]},{"level":2,"title":"Presenting test views","slug":"presenting-test-views","link":"#presenting-test-views","children":[]},{"level":2,"title":"Add customizations for an individual platform","slug":"add-customizations-for-an-individual-platform","link":"#add-customizations-for-an-individual-platform","children":[]},{"level":2,"title":"Go past the 10 view limit","slug":"go-past-the-10-view-limit","link":"#go-past-the-10-view-limit","children":[]},{"level":2,"title":"Use semantic colors","slug":"use-semantic-colors","link":"#use-semantic-colors","children":[]},{"level":2,"title":"Rely on adaptive padding","slug":"rely-on-adaptive-padding","link":"#rely-on-adaptive-padding","children":[]},{"level":2,"title":"Combine text views","slug":"combine-text-views","link":"#combine-text-views","children":[]},{"level":2,"title":"How to make print() work","slug":"how-to-make-print-work","link":"#how-to-make-print-work","children":[]},{"level":2,"title":"Relying on the implicit HStack","slug":"relying-on-the-implicit-hstack","link":"#relying-on-the-implicit-hstack","children":[]},{"level":2,"title":"Splitting up large views","slug":"splitting-up-large-views","link":"#splitting-up-large-views","children":[]},{"level":2,"title":"Better previewing","slug":"better-previewing","link":"#better-previewing","children":[]},{"level":2,"title":"Create custom modifiers","slug":"create-custom-modifiers","link":"#create-custom-modifiers","children":[]},{"level":2,"title":"Animate changes easily","slug":"animate-changes-easily","link":"#animate-changes-easily","children":[]},{"level":2,"title":"Showing multiple alerts in a view","slug":"showing-multiple-alerts-in-a-view","link":"#showing-multiple-alerts-in-a-view","children":[]},{"level":2,"title":"Publishing new values from a binding","slug":"publishing-new-values-from-a-binding","link":"#publishing-new-values-from-a-binding","children":[]},{"level":2,"title":"What are your tips?","slug":"what-are-your-tips","link":"#what-are-your-tips","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":10.72,"words":3217},"filePathRelative":"hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md","excerpt":"\\n"}');export{bn as comp,yn as data};
