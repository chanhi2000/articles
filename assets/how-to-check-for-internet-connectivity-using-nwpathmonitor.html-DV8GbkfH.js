import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,t as h,e as n,n as i,g as r,a as e,r as l,o as p}from"./app-BgNevrm5.js";const u={},m={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},d=t("nav",{class:"table-of-contents"},[t("ul")],-1),g=t("hr",null,null,-1),f=t("blockquote",null,[t("p",null,"Available from iOS 12.0")],-1),y=t("details",{class:"hint-container details"},[t("summary",null,"Similar solutions‚Ä¶"),e(`
/example-code/networking/how-to-create-a-peer-to-peer-network-using-the-multipeer-connectivity-framework">How to create a peer-to-peer network using the multipeer connectivity framework 
/example-code/networking/how-to-make-a-network-request-wait-for-an-internet-connection-using-waitsforconnectivity">How to make a network request wait for an internet connection using waitsForConnectivity 
/quick-start/concurrency/how-to-download-json-from-the-internet-and-decode-it-into-any-codable-type">How to download JSON from the internet and decode it into any Codable type 
/example-code/language/how-to-check-whether-a-module-is-available-using-canimport">How to check whether a module is available using canImport() 
/example-code/language/how-to-check-your-program-state-using-precondition">How to check your program state using precondition()</a>
`)],-1);function k(a,v){const o=l("VPCard");return p(),s("div",null,[t("h1",m,[t("a",w,[t("span",null,h(a.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n(o,i(r({title:"Networking - free Swift example code",desc:"Learn Swift coding for iOS with these free tutorials ‚Äì learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/example-code/networking/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),d,g,n(o,i(r({title:"How to check for internet connectivity using NWPathMonitor | Networking - free Swift example code",desc:"How to check for internet connectivity using NWPathMonitor",link:"https://hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,e(" TODO: ÏûëÏÑ± "),e(' \nApple‚Äôs Network framework provides a number of useful classes for working with network data, including one specifically designed to monitor network accessibility: `NWPathMonitor`. If you ever used Apple‚Äôs older Reachability system, `NWPathMonitor` replaces it fully.\n\nTo get started, first add an import for the `Network` framework:\n\n```swift\nimport Network\n```\n\nNext, create an instance of `NWPathMonitor` somewhere it won‚Äôt get freed immediately. For example, you might have it as a property on a view controller, for example:\n\n```swift\nlet monitor = NWPathMonitor()\n```\n\nNow assign a closure to that monitor that will be triggered whenever network accessibility changes. This needs to accept one parameter, which is an `NWPath` describing the network access that is currently possible.\n\n`NWPath` has a few properties, but there are two in particular you‚Äôre likely to care about: `status` describes whether the connection is currently available or not, and `isExpensive` is set to true when using cellular data or when using WiFi that is hotspot routed through an iPhone‚Äôs cellular connection.\n\nTo try this out, here‚Äôs some code that prints a message when the user‚Äôs connection status changes, and also prints whether the connection is considered expensive or not:\n\n```swift\nmonitor.pathUpdateHandler = { path in\n    if path.status == .satisfied {\n        print("We\'re connected!")\n    } else {\n        print("No connection.")\n    }\n\n    print(path.isExpensive)\n}\n```\n\nRemember, that closure gets called every time the connection status changes.\n\nOnce your path monitor is created and configured, the final step is to create a custom `DispatchQueue` instance for the monitor to run, then call its `start()` method:\n\n```swift\nlet queue = DispatchQueue(label: "Monitor")\nmonitor.start(queue: queue)\n```\n\nOnce that‚Äôs done, your closure will get called every time the connection status changes, so you can add code there to update the rest of your app with the current connection status.\n\nIf you want more fine-grained control over the network check, you can create your `NWPathMonitor` using a specific interface type. For example, if you specifically wanted to check for cellular data and only cellular data, you would write this:\n\n```swift\nlet cellMonitor = NWPathMonitor(requiredInterfaceType: .cellular)\n```\n\nYou can also use `.wifi` or even `wiredEthernet` if you want. Omitting the interface type causes them all to be watched at the same time, which is probably what you‚Äôll want most of the time.\n\n'),y])}const _=c(u,[["render",k],["__file","how-to-check-for-internet-connectivity-using-nwpathmonitor.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor.html","title":"How to check for internet connectivity using NWPathMonitor","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to check for internet connectivity using NWPathMonitor","description":"Article(s) > How to check for internet connectivity using NWPathMonitor","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swift-5.10","ios","ios-12.0","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to check for internet connectivity using NWPathMonitor"},{"property":"og:description","content":"How to check for internet connectivity using NWPathMonitor"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to check for internet connectivity using NWPathMonitor"}],["meta",{"property":"og:description","content":"Article(s) > How to check for internet connectivity using NWPathMonitor"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.10"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"ios-12.0"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2018-03-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to check for internet connectivity using NWPathMonitor\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2018-03-28T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.26,"words":678},"filePathRelative":"hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor.md","localizedDate":"2018ÎÖÑ 3Ïõî 28Ïùº","excerpt":"\\n"}');export{_ as comp,x as data};
