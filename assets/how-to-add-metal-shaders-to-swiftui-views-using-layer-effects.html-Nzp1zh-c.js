import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as s,n as o,g as p,d as a,f as i,r as c,o as k}from"./app-BgNevrm5.js";const f={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),g=n("blockquote",null,[n("p",null,"Updated for Xcode 16")],-1),b=n("p",null,[n("strong",null,"Improved in iOS 18")],-1),y=n("p",null,"SwiftUI provides extensive integration with Metal shaders, right at the very view level – we can manipulate colors, shapes, and more with remarkable performance.",-1),x=n("p",null,"Trying this out takes three steps:",-1),S=n("ol",null,[n("li",null,"Creating a Metal file with your shader. This must have an exact function signature, which varies depending on what kind of effect you’re trying to apply."),n("li",null,"Creating your SwiftUI views, and attaching one or more effect."),n("li",null,"Optionally adding a visual effect to your view, in order to read the view’s size without changing its layout.")],-1),_={href:"https://hackingwithswift.com/files/example-swiftui-shaders.metal",target:"_blank",rel:"noopener noreferrer"},I=i(`<div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span> stitchable <span class="token punctuation">]</span><span class="token punctuation">]</span> half4 <span class="token function">checkerboard</span><span class="token punctuation">(</span>float2 position<span class="token punctuation">,</span> half4 currentColor<span class="token punctuation">,</span> <span class="token keyword">float</span> size<span class="token punctuation">,</span> half4 newColor<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    uint2 posInChecks <span class="token operator">=</span> <span class="token function">uint2</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>x <span class="token operator">/</span> size<span class="token punctuation">,</span> position<span class="token punctuation">.</span>y <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">bool</span> isColor <span class="token operator">=</span> <span class="token punctuation">(</span>posInChecks<span class="token punctuation">.</span>x <span class="token operator">^</span> posInChecks<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> isColor <span class="token operator">?</span> newColor <span class="token operator">*</span> currentColor<span class="token punctuation">.</span>a <span class="token operator">:</span> <span class="token function">half4</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that shader, the first two parameters are required by SwiftUI: it will automatically pass in the position of the view, along with its current color. The second and remaining parameters are all created by us, and need to be sent in manually. In this case, I’m passing in the size I want the checkerboard squares to be.</p><p>When it comes to using the shader, the syntax is convenient but might be a little surprising at first: SwiftUI uses dynamic member lookup to let us simply call our shader function by name, passing in all the non-fixed parameters we want. In this case that means calling the <code>checkerboard()</code> function, passing a size and color like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;figure.run.circle.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">colorEffect</span><span class="token punctuation">(</span><span class="token class-name">ShaderLibrary</span><span class="token punctuation">.</span><span class="token function">checkerboard</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),z={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-1.zip",target:"_blank",rel:"noopener noreferrer"},q=i(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-1~dark@2x.png" alt="An SF Symbol icon recolored with a checkerboard." tabindex="0" loading="lazy"><figcaption>An SF Symbol icon recolored with a checkerboard.</figcaption></figure><p>Again, we <em>don’t</em> pass in values for position and current color, because SwiftUI takes care of those for us.</p><p>That’s the basic concept, but I want to walk through a handful of variations to give you a range of options.</p><p>First, you can make shaders that animate by placing them inside a <code>TimelineView</code> and sending in a date value. For example, we could create a start date and send the difference between that start date and the current date to power a noise shader.</p><p>Here’s the shader code:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span> stitchable <span class="token punctuation">]</span><span class="token punctuation">]</span> half4 <span class="token function">noise</span><span class="token punctuation">(</span>float2 position<span class="token punctuation">,</span> half4 currentColor<span class="token punctuation">,</span> <span class="token keyword">float</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">float</span> value <span class="token operator">=</span> <span class="token function">fract</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>position <span class="token operator">+</span> time<span class="token punctuation">,</span> <span class="token function">float2</span><span class="token punctuation">(</span><span class="token number">12.9898</span><span class="token punctuation">,</span> <span class="token number">78.233</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">43758.5453</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">half4</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> currentColor<span class="token punctuation">.</span>a<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here’s a SwiftUI view using it with a <code>TimelineView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> startDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>animation<span class="token punctuation">)</span> <span class="token punctuation">{</span> context <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;figure.run.circle.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">colorEffect</span><span class="token punctuation">(</span><span class="token class-name">ShaderLibrary</span><span class="token punctuation">.</span><span class="token function">noise</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span>timeIntervalSinceNow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),U={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-2.zip",target:"_blank",rel:"noopener noreferrer"},j=i(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-2~dark@2x.gif" alt="An SF Symbol icon with an animated static noise effect." tabindex="0" loading="lazy"><figcaption>An SF Symbol icon with an animated static noise effect.</figcaption></figure><p>To build shaders that need to sample a color from your view, adjust your Metal file to start with <code>#include &gt;SwiftUI/SwiftUI_Metal.h&gt;</code>, then make sure your shader signature accepts both a position and a <code>SwiftUI::Layer</code> instance.</p><p>For example, my Metal shader sample file includes this simple pixellation shader:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span> stitchable <span class="token punctuation">]</span><span class="token punctuation">]</span> half4 <span class="token function">pixellate</span><span class="token punctuation">(</span>float2 position<span class="token punctuation">,</span> SwiftUI<span class="token double-colon punctuation">::</span>Layer layer<span class="token punctuation">,</span> <span class="token keyword">float</span> strength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">float</span> min_strength <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>strength<span class="token punctuation">,</span> <span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">float</span> coord_x <span class="token operator">=</span> min_strength <span class="token operator">*</span> <span class="token function">round</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>x <span class="token operator">/</span> min_strength<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">float</span> coord_y <span class="token operator">=</span> min_strength <span class="token operator">*</span> <span class="token function">round</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>y <span class="token operator">/</span> min_strength<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> layer<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token function">float2</span><span class="token punctuation">(</span>coord_x<span class="token punctuation">,</span> coord_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That clamps the function’s strength input to a lower bound of 0.0001 to avoid division by zero, then divides each pixel’s position by the strength, rounds it, then multiplies it back up again, causing pixel data to be thrown away. The real work there is the call to <code>layer.sample()</code>, which reads one color from whichever view has this shader attached.</p><p>The shader needs to be called as a layer effect, which tells SwiftUI to pass in the whole layer as well as the position for the current pixel we’re working with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;figure.run.circle.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">layerEffect</span><span class="token punctuation">(</span><span class="token class-name">ShaderLibrary</span><span class="token punctuation">.</span><span class="token function">pixellate</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxSampleOffset<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),A={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-3.zip",target:"_blank",rel:"noopener noreferrer"},V=i(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-3~dark@2x.png" alt="An SF Symbol icon recolored with a pixellation effect applied." tabindex="0" loading="lazy"><figcaption>An SF Symbol icon recolored with a pixellation effect applied.</figcaption></figure><p>Another type of effect is activated with the <code>distortionEffect()</code> modifier, which allows you to move one pixel from one location to another, leaving it otherwise unchanged. This means your shader only needs to accept the pixel position at the minimum, so we could a simple wave example like this:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span> stitchable <span class="token punctuation">]</span><span class="token punctuation">]</span> float2 <span class="token function">wave</span><span class="token punctuation">(</span>float2 position<span class="token punctuation">,</span> <span class="token keyword">float</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> position <span class="token operator">+</span> <span class="token function">float2</span> <span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>time <span class="token operator">+</span> position<span class="token punctuation">.</span>y <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>time <span class="token operator">+</span> position<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This can be used with the <code>distortionEffect()</code> modifier, like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> startDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>animation<span class="token punctuation">)</span> <span class="token punctuation">{</span> context <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;figure.run.circle.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">distortionEffect</span><span class="token punctuation">(</span><span class="token class-name">ShaderLibrary</span><span class="token punctuation">.</span><span class="token function">simpleWave</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span>timeIntervalSinceNow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxSampleOffset<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),E={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-4.zip",target:"_blank",rel:"noopener noreferrer"},C=i(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-4~dark@2x.gif" alt="An SF Symbol icon waving as if it were a flag." tabindex="0" loading="lazy"><figcaption>An SF Symbol icon waving as if it were a flag.</figcaption></figure><p>If you wanted a complex wave shader that’s more like seeing the view underwater, we need to read the overall size of the image. This takes a little more thinking, because we need to wrap the distortion effect in a visual effect to provide the view’s dimensions.</p><p>First, here’s a more complex wave effect that needs the view’s size, but also has options for speed, strength, and wave frequency to make it more customizable:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span> stitchable <span class="token punctuation">]</span><span class="token punctuation">]</span> float2 <span class="token function">complexWave</span><span class="token punctuation">(</span>float2 position<span class="token punctuation">,</span> <span class="token keyword">float</span> time<span class="token punctuation">,</span> float2 size<span class="token punctuation">,</span> <span class="token keyword">float</span> speed<span class="token punctuation">,</span> <span class="token keyword">float</span> strength<span class="token punctuation">,</span> <span class="token keyword">float</span> frequency<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    float2 normalizedPosition <span class="token operator">=</span> position <span class="token operator">/</span> size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">float</span> moveAmount <span class="token operator">=</span> time <span class="token operator">*</span> speed<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    position<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>normalizedPosition<span class="token punctuation">.</span>x <span class="token operator">+</span> moveAmount<span class="token punctuation">)</span> <span class="token operator">*</span> frequency<span class="token punctuation">)</span> <span class="token operator">*</span> strength<span class="token punctuation">;</span></span>
<span class="line">    position<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>normalizedPosition<span class="token punctuation">.</span>y <span class="token operator">+</span> moveAmount<span class="token punctuation">)</span> <span class="token operator">*</span> frequency<span class="token punctuation">)</span> <span class="token operator">*</span> strength<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> position<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To use this we need to use both <code>visualEffect()</code> and <code>distortionEffect()</code> at the same time, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> startDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>animation<span class="token punctuation">)</span> <span class="token punctuation">{</span> context <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;figure.run.circle.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span>visualEffect <span class="token punctuation">{</span> content<span class="token punctuation">,</span> proxy <span class="token keyword">in</span></span>
<span class="line">                    content</span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">distortionEffect</span><span class="token punctuation">(</span><span class="token class-name">ShaderLibrary</span><span class="token punctuation">.</span><span class="token function">complexWave</span><span class="token punctuation">(</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span>timeIntervalSinceNow<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">float2</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span><span class="token punctuation">,</span> maxSampleOffset<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),F={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-5.zip",target:"_blank",rel:"noopener noreferrer"},H=i(`<p>Using the two together allows us to read the view’s size, and factor that into our shader calculations.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-5~dark@2x.gif" alt="An SF Symbol icon with a more complex distortion effect applied, as if we’re looking at it through water." tabindex="0" loading="lazy"><figcaption>An SF Symbol icon with a more complex distortion effect applied, as if we’re looking at it through water.</figcaption></figure><p>For our final shader example we’ll create a simple emboss filter, including a SwiftUI <code>Slider</code> to control the emboss strength.</p><p>First add the shader to your Metal file:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span> stitchable <span class="token punctuation">]</span><span class="token punctuation">]</span> half4 <span class="token function">emboss</span><span class="token punctuation">(</span>float2 position<span class="token punctuation">,</span> SwiftUI<span class="token double-colon punctuation">::</span>Layer layer<span class="token punctuation">,</span> <span class="token keyword">float</span> strength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    half4 current_color <span class="token operator">=</span> layer<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    half4 new_color <span class="token operator">=</span> current_color<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    new_color <span class="token operator">+=</span> layer<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> strength<span class="token punctuation">;</span></span>
<span class="line">    new_color <span class="token operator">-=</span> layer<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> strength<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">half4</span><span class="token punctuation">(</span>new_color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now we can put this to use with a <code>layerEffect()</code> modifier like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> strength <span class="token operator">=</span> <span class="token number">3.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;figure.run.circle.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>orange<span class="token punctuation">,</span> <span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">layerEffect</span><span class="token punctuation">(</span><span class="token class-name">ShaderLibrary</span><span class="token punctuation">.</span><span class="token function">emboss</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span>strength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxSampleOffset<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $strength<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),M={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-6.zip",target:"_blank",rel:"noopener noreferrer"},T=i(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-6~dark@2x.gif" alt="An SF Symbol icon recolored with an emboss effect, where the strength of the effect is controlled through a slider." tabindex="0" loading="lazy"><figcaption>An SF Symbol icon recolored with an emboss effect, where the strength of the effect is controlled through a slider.</figcaption></figure><p>As you can see, it’s now trivial to add Metal shaders to SwiftUI views, unlocking a wide range of special effects without a great deal of work.</p><p>New in iOS 18, you can now call <code>compile()</code> on a shader to have it prepared for the current device. This avoids a small performance hiccup the first time the shader is used, as long as a) you call it suitably far in advance, and b) you provide the same parameter types when compiling as you do when using, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> shader <span class="token operator">=</span> <span class="token class-name">ShaderLibrary</span><span class="token punctuation">.</span><span class="token function">checkerboard</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token keyword">await</span> shader<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>colorEffect<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),D={class:"hint-container details"},N=n("summary",null,"Similar solutions…",-1);function L(l,P){const t=c("VPCard"),e=c("FontIcon");return k(),r("div",null,[n("h1",m,[n("a",h,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s(t,o(p({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,v,s(t,o(p({title:"How to add Metal shaders to SwiftUI views using layer effects | SwiftUI by Example",desc:"How to add Metal shaders to SwiftUI views using layer effects",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g,b,y,x,S,n("p",null,[a("I’ve created a selection of Metal shaders for you to try out here: "),n("a",_,[s(e,{icon:"fas fa-download"}),a("sample SwiftUI Metal shaders")]),a(". Each one looks a bit like this:")]),I,n("blockquote",null,[n("p",null,[n("a",z,[s(e,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),q,n("blockquote",null,[n("p",null,[n("a",U,[s(e,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),j,n("blockquote",null,[n("p",null,[n("a",A,[s(e,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),V,n("blockquote",null,[n("p",null,[n("a",E,[s(e,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),C,n("blockquote",null,[n("p",null,[n("a",F,[s(e,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),H,n("blockquote",null,[n("p",null,[n("a",M,[s(e,{icon:"fas fa-file-zipper"}),a("Download this as an Xcode project")])])]),T,n("details",D,[N,s(t,o(p({title:"How to layer views on top of each other using ZStack | SwiftUI by Example",desc:"How to layer views on top of each other using ZStack",link:"/hackingwithswift.com/swiftui/how-to-layer-views-on-top-of-each-other-using-zstack.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,o(p({title:"How to add haptic effects using sensory feedback | SwiftUI by Example",desc:"How to add haptic effects using sensory feedback",link:"/hackingwithswift.com/swiftui/how-to-add-haptic-effects-using-sensory-feedback.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,o(p({title:"How to create custom text effects and animations | SwiftUI by Example",desc:"How to create custom text effects and animations",link:"/hackingwithswift.com/swiftui/how-to-create-custom-text-effects-and-animations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,o(p({title:"How to stack modifiers to create more advanced effects | SwiftUI by Example",desc:"How to stack modifiers to create more advanced effects",link:"/hackingwithswift.com/swiftui/how-to-stack-modifiers-to-create-more-advanced-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(t,o(p({title:"How to create 3D effects like Cover Flow using ScrollView and GeometryReader | SwiftUI by Example",desc:"How to create 3D effects like Cover Flow using ScrollView and GeometryReader",link:"/hackingwithswift.com/swiftui/how-to-create-3d-effects-like-cover-flow-using-scrollview-and-geometryreader.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const X=u(f,[["render",L],["__file","how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.html.vue"]]),B=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.html","title":"How to add Metal shaders to SwiftUI views using layer effects","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to add Metal shaders to SwiftUI views using layer effects","description":"Article(s) > How to add Metal shaders to SwiftUI views using layer effects","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to add Metal shaders to SwiftUI views using layer effects"},{"property":"og:description","content":"How to add Metal shaders to SwiftUI views using layer effects"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to add Metal shaders to SwiftUI views using layer effects"}],["meta",{"property":"og:description","content":"Article(s) > How to add Metal shaders to SwiftUI views using layer effects"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-1~dark@2x.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to add Metal shaders to SwiftUI views using layer effects\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-1~dark@2x.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-2~dark@2x.gif\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-3~dark@2x.png\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-4~dark@2x.gif\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-5~dark@2x.gif\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects-6~dark@2x.gif\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.31,"words":1892},"filePathRelative":"hackingwithswift.com/swiftui/how-to-add-metal-shaders-to-swiftui-views-using-layer-effects.md","excerpt":"\\n"}');export{X as comp,B as data};
