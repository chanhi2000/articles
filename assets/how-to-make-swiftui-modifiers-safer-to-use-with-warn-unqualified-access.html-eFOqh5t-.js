import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as s,t as l,e as n,n as t,g as e,f as p,r,o as u}from"./app-BgNevrm5.js";const d={},m={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w=s("nav",{class:"table-of-contents"},[s("ul")],-1),h=s("hr",null,null,-1),k=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Every SwiftUI makes the same mistake at some point, and sadly it’s something you’ll do more than once: rather than writing <code>.someModifier()</code> you write <code>someModifier()</code>, and it causes your app to completely freeze or crash with <code>EXC_BAD_ACCESS</code>.</p><p>First I’ll show you the how to solve the problem, then I’ll explain what the underlying problem is. The solution is to use Swift’s <code>@warn_unqualified_access</code> attribute, which means you can’t access properties or methods without using a variable name or similar.</p><p>For example, if we had a <code>titleStyle()</code> method that added a bunch of modifiers to a view to make it matching a custom theme, we’d use <code>@warn_unqualified_access</code> before the method signature, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@warn_unqualified_access</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">titleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we use that, we’d write the same SwiftUI code we always did:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">titleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works exactly as expected – the extra attribute hasn’t made the method behave differently at all in normal circumstances.</p><p>However, take a look at <em>this</em> code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">titleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s subtly different: I removed the dot before <code>titleStyle()</code>, which is an <em>unqualified access</em> – I haven’t said where I’m calling <code>titleStyle()</code>, so SwiftUI assumes I’m actually calling it on <code>ContentView</code>. This means it’s actually calling <code>self.padding()</code>, so we have an infinitely recursive view and ultimately a crash.</p><p>Sadly, SwiftUI doesn’t use <code>@warn_unqualified_access</code> with its own modifiers, but you can at least add it for the custom ones you build.</p>`,12),g={class:"hint-container details"},v=s("summary",null,"Similar solutions…",-1);function b(i,y){const a=r("VPCard");return u(),c("div",null,[s("h1",m,[s("a",f,[s("span",null,l(i.$frontmatter.title)+" 관련",1)])]),n(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,h,n(a,t(e({title:"How to make SwiftUI modifiers safer to use with @warn_unqualified_access | SwiftUI by Example",desc:"How to make SwiftUI modifiers safer to use with @warn_unqualified_access",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,s("details",g,[v,n(a,t(e({title:"How to create custom modifiers | SwiftUI by Example",desc:"How to create custom modifiers",link:"/hackingwithswift.com/swiftui/how-to-create-custom-modifiers.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to create modifiers for a UIViewRepresentable struct | SwiftUI by Example",desc:"How to create modifiers for a UIViewRepresentable struct",link:"/hackingwithswift.com/swiftui/how-to-create-modifiers-for-a-uiviewrepresentable-struct.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"How to stack modifiers to create more advanced effects | SwiftUI by Example",desc:"How to stack modifiers to create more advanced effects",link:"/hackingwithswift.com/swiftui/how-to-stack-modifiers-to-create-more-advanced-effects.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(a,t(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const I=o(d,[["render",b],["__file","how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access.html","title":"How to make SwiftUI modifiers safer to use with @warn_unqualified_access","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to make SwiftUI modifiers safer to use with @warn_unqualified_access","description":"Article(s) > How to make SwiftUI modifiers safer to use with @warn_unqualified_access","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to make SwiftUI modifiers safer to use with @warn_unqualified_access"},{"property":"og:description","content":"How to make SwiftUI modifiers safer to use with @warn_unqualified_access"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to make SwiftUI modifiers safer to use with @warn_unqualified_access"}],["meta",{"property":"og:description","content":"Article(s) > How to make SwiftUI modifiers safer to use with @warn_unqualified_access"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to make SwiftUI modifiers safer to use with @warn_unqualified_access\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"how-to-add-custom-activation-commands-for-voice-control.md"},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.14,"words":642},"filePathRelative":"hackingwithswift.com/swiftui/how-to-make-swiftui-modifiers-safer-to-use-with-warn-unqualified-access.md","excerpt":"\\n"}');export{I as comp,U as data};
