import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,t as l,e as a,n as t,g as e,f as c,r as u,o as r}from"./app-BgNevrm5.js";const d={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),v=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData’s <code>@Relationship</code> macro allows us to specify minimum and maximum number of objects that should exist in a one-to-many or many-to-many connection.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>If you step outside these limits SwiftData&#39;s autosave will silently fail and your data may be lost unless you correct it.</p></div><p>To give you a practical example, we could have one model for dog walkers and another for dogs, and use <code>@Relationship</code> to put a rule in place saying that each dog walker can handle no more than five dogs at a time.</p><p>Here&#39;s how that looks in code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">DogWalker</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token attribute atrule">@Relationship</span><span class="token punctuation">(</span>maximumModelCount<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">var</span> dogs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Dog</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> dogs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Dog</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>dogs <span class="token operator">=</span> dogs</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> walker<span class="token punctuation">:</span> <span class="token class-name">DogWalker</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> walker<span class="token punctuation">:</span> <span class="token class-name">DogWalker</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>walker <span class="token operator">=</span> walker</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All the validation work there is done by the <code>@Relationship(maximumModelCount: 5)</code> property, which makes it clear that the array must have no more than five items in it.</p><p>You can see this validation in action – and also the problems it can cause – with the following code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> bobby <span class="token operator">=</span> <span class="token class-name">DogWalker</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Bobby Beagle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> dog1 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Rover&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> dog2 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Fido&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> dog3 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Toto&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> dog4 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Beethoven&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> dog5 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Lady&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>dog1<span class="token punctuation">)</span></span>
<span class="line">    modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>dog2<span class="token punctuation">)</span></span>
<span class="line">    modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>dog3<span class="token punctuation">)</span></span>
<span class="line">    modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>dog4<span class="token punctuation">)</span></span>
<span class="line">    modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>dog5<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    bobby<span class="token punctuation">.</span>dogs <span class="token operator">=</span> <span class="token punctuation">[</span>dog1<span class="token punctuation">,</span> dog2<span class="token punctuation">,</span> dog3<span class="token punctuation">,</span> dog4<span class="token punctuation">,</span> dog5<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> dog6 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Pongo&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>dog6<span class="token punctuation">)</span></span>
<span class="line">    bobby<span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dog6<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>bobby<span class="token punctuation">.</span>dogs<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a dog walker and gives them five dogs to walk, but then it creates and adds a sixth dog. If you run that code you&#39;ll see it prints that Bobby has six dogs, which isn&#39;t allowed by our relationship rule – what gives?</p><p>Well, the problem with that code – and the danger of the relationship rules generally – is that if you break the rules SwiftData&#39;s autosave will just silently fail.</p><p>In this case we&#39;ve made a dog walker with six dogs. If we had create one with five dogs then later added a sixth, SwiftData would at least have been able to save the original, 5-dog walker. However, we&#39;re adding them all at once, so it can&#39;t save anything safely.</p><p>You can see the problem more clearly if you try running a save yourself – add this to the end of the method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you&#39;ll see the message <strong>Too many items in %{PROPERTY}@.</strong> printed, which means we&#39;ve broken a relationship rule.</p><p>So, use the minimum and maximum counts if you want, but do so carefully!</p>`,16);function w(o,b){const s=u("VPCard");return r(),i("div",null,[n("h1",m,[n("a",k,[n("span",null,l(o.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,g,a(s,t(e({title:"How to add minimum and maximum constraints to relationships | SwiftData by Example",desc:"How to add minimum and maximum constraints to relationships",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-add-minimum-and-maximum-constraints-to-relationships",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v])}const x=p(d,[["render",w],["__file","how-to-add-minimum-and-maximum-constraints-to-relationships.html.vue"]]),_=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-add-minimum-and-maximum-constraints-to-relationships.html","title":"How to add minimum and maximum constraints to relationships","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to add minimum and maximum constraints to relationships","description":"Article(s) > How to add minimum and maximum constraints to relationships","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to add minimum and maximum constraints to relationships"},{"property":"og:description","content":"How to add minimum and maximum constraints to relationships"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-add-minimum-and-maximum-constraints-to-relationships.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-add-minimum-and-maximum-constraints-to-relationships.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to add minimum and maximum constraints to relationships"}],["meta",{"property":"og:description","content":"Article(s) > How to add minimum and maximum constraints to relationships"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to add minimum and maximum constraints to relationships\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"next":"/hackingwithswift.com/swiftdata/how-to-find-a-swiftdata-object-by-its-identifier.md","date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.03,"words":610},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-add-minimum-and-maximum-constraints-to-relationships.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{x as comp,_ as data};
