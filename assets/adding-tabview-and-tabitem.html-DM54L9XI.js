import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as m,e as a,n as t,g as e,d as i,f as c,r as o,o as w}from"./app-BgNevrm5.js";const h={},b={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),v=n("blockquote",null,[n("p",null,"Updated for Xcode 16")],-1),y=c(`<p>When you want to show two separate views with SwiftUI, the easiest and most user-intuitive approach is with a tab bar across the bottom of our app. In our case, that means we&#39;ll put our menu view in one tab and the active order in another. SwiftUI gives us a <code>TabView</code> for just this purpose, and it works much like a <code>UITabBarController</code>.</p><p>Press <kbd>Cmd</kbd>+<kbd>N</kbd> to create a new SwiftUI View, calling it “MainView”. Creating tabs is as easy as putting different views inside an instance of <code>TabView</code>, but in order to add an image and text to the tab bar item of each view we need to use the <code>tabItem()</code> modifier.</p><p>Before we write the code <code>MainView</code>, it&#39;s important to remember to add an <code>Order</code> instance into the preview environment so the <code>OrderView</code> can work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">MainView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MainView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can go ahead and change <code>MainView</code> to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">MainView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TabView</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span>tabItem <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Menu&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;list.dash&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">OrderView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span>tabItem <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Order&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;square.and.pencil&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s take a closer look at one of our views:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">TabView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>tabItem <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Menu&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;list.dash&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates an instance of <code>ContentView</code>, but for its tab item we&#39;re using a new view type called <code>Label</code> that handles both showing text and showing an image at the same time. This is more or less the same as using a separate <code>Text</code> and <code>Image</code> pair, but <code>Label</code> adds some extra smarts – it ensures both stay aligned the same, even when they change size.</p><p>This label is the thing that represents its view in the tab bar. The image is created using the <code>systemImage</code> form of <code>Label</code>, which lets us load images from the built-in SF Symbols icon set – this is over 2400 icons that Apple designed specifically for apps to use.</p>`,10),I=n("code",null,"iDineApp.swift",-1),V=n("code",null,"MainView",-1),_=n("code",null,"ContentView",-1),T=c(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And replace it with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">MainView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now – at last! – you should be able to press <kbd>Cmd</kbd>+<kbd>R</kbd> to build and run your app, select some food, add it to your order, and see that information appear in the <code>Order</code> tab automatically.</p><p>What I love about this approach is that we&#39;re not doing the real heavy lifting of making different parts of our UI sync up – the <code>ObservableObject</code> protocol and <code>@EnvironmentObject</code> attribute are making sure all parts of our UI stay up to date. So, as soon as the <code>ItemDetail</code> screen announces that something has been added to the order, the <code>OrderView</code> screen will automatically refresh to show the changes.</p><p>In the background, any view that relies on an environment object will be refreshed when it announces changes. In practice that means SwiftUI will re-invoke the <code>body</code> property, which in turn means everything inside <code>body</code> will read the latest values from the environment.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/2-11~dark.png" alt="A close up of a SwiftUI tab bar, showing tabs for  and ." tabindex="0" loading="lazy"><figcaption>A close up of a SwiftUI tab bar, showing tabs for <code>Menu</code> and <code>Order</code>.</figcaption></figure>`,7),S={class:"hint-container details"},x=n("summary",null,"Further Reading…",-1),U={class:"hint-container details"},A=n("summary",null,"Similar solutions…",-1);function q(l,O){const s=o("VPCard"),p=o("VidStack"),d=o("FontIcon");return w(),u("div",null,[n("h1",b,[n("a",g,[n("span",null,m(l.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,f,a(s,t(e({title:"Adding TabView and tabItem() | SwiftUI by Example",desc:"Adding TabView and tabItem()",link:"https://hackingwithswift.com/quick-start/swiftui/adding-tabview-and-tabitem",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,a(p,{src:"youtube/UOZg8H3Ecf4"}),y,n("p",null,[i("To bring the tab bar to life, we need to change "),a(d,{icon:"fa-brands fa-swift"}),I,i(" so it creates an "),V,i(" rather than a "),_,i(". So, find this code:")]),T,n("details",S,[x,a(s,t(e({title:"How to embed views in a tab bar using TabView | SwiftUI by Example",desc:"How to embed views in a tab bar using TabView",link:"/hackingwithswift.com/swiftui/how-to-embed-views-in-a-tab-bar-using-tabview.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),n("details",U,[A,a(s,t(e({title:"How to embed views in a tab bar using TabView | SwiftUI by Example",desc:"How to embed views in a tab bar using TabView",link:"/hackingwithswift.com/swiftui/how-to-embed-views-in-a-tab-bar-using-tabview.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"All SwiftUI property wrappers explained and compared | SwiftUI by Example",desc:"All SwiftUI property wrappers explained and compared",link:"/hackingwithswift.com/swiftui/all-swiftui-property-wrappers-explained-and-compared.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to add a badge to TabView items and List rows | SwiftUI by Example",desc:"How to add a badge to TabView items and List rows",link:"/hackingwithswift.com/swiftui/how-to-add-a-badge-to-tabview-items-and-list-rows.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to use Instruments to profile your SwiftUI code and identify slow layouts | SwiftUI by Example",desc:"How to use Instruments to profile your SwiftUI code and identify slow layouts",link:"/hackingwithswift.com/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const M=r(h,[["render",q],["__file","adding-tabview-and-tabitem.html.vue"]]),C=JSON.parse('{"path":"/hackingwithswift.com/swiftui/adding-tabview-and-tabitem.html","title":"Adding TabView and tabItem()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Adding TabView and tabItem()","description":"Article(s) > Adding TabView and tabItem()","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Adding TabView and tabItem()"},{"property":"og:description","content":"Adding TabView and tabItem()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/adding-items-to-an-order-with-environmentobject.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/adding-tabview-and-tabitem.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Adding TabView and tabItem()"}],["meta",{"property":"og:description","content":"Article(s) > Adding TabView and tabItem()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/2-11~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2022-12-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Adding TabView and tabItem()\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/2-11~dark.png\\"],\\"datePublished\\":\\"2022-12-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2022-12-01T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.14,"words":941},"filePathRelative":"hackingwithswift.com/swiftui/adding-tabview-and-tabitem.md","localizedDate":"2022년 12월 1일","excerpt":"\\n"}');export{M as comp,C as data};
