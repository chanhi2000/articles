import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as n,t as r,e as s,n as t,g as e,d as o,f as k,r as p,o as d}from"./app-BgNevrm5.js";const m={},h={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),b=k(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 16</strong></p><p>SwiftUI lets us create wholly custom layouts for our views using the Layout protocol, and our custom layouts can be used just like HStack, VStack, or any other built-in layout types.</p><p>Adopting the <code>Layout</code> protocol has just two requirements:</p><ul><li>A method that returns how much space your layout wants for its subviews. This will be given a size proposal, which is how much space the parent view has available for it. This might be called multiple times so SwiftUI can see how flexible your container is.</li><li>Another method that actually places those subviews where you want them. This will be given the same size proposal as the first method, but will also be given a specific bounds to work with – this will be</li></ul><p>You can also optionally make these methods cache their calculations if you&#39;re doing something particularly slow, but I&#39;ve yet to encounter a situation where this is needed.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>When you&#39;re giving a size proposal, it might contain nil values for either or both of its width or height. As a result, it&#39;s common to call <code>replacingUnspecifiedDimensions()</code> on the proposal so that any nil values are replaced with a nominal, non-nil value.</p></div><p>For example, we could implement a radial layout – a layout that places it views around a circle:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">RadialLayout</span><span class="token punctuation">:</span> <span class="token class-name">Layout</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span> subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">CGSize</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// accept the full proposed space, replacing any nil values with a sensible default</span></span>
<span class="line">        proposal<span class="token punctuation">.</span><span class="token function">replacingUnspecifiedDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span><span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span> proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span> subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// calculate the radius of our bounds</span></span>
<span class="line">        <span class="token keyword">let</span> radius <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// figure out the angle between each subview on our circle</span></span>
<span class="line">        <span class="token keyword">let</span> angle <span class="token operator">=</span> <span class="token class-name">Angle</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token number">360</span> <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>subviews<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>radians</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> subview<span class="token punctuation">)</span> <span class="token keyword">in</span> subviews<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ask this view for its ideal size</span></span>
<span class="line">            <span class="token keyword">let</span> viewSize <span class="token operator">=</span> subview<span class="token punctuation">.</span><span class="token function">sizeThatFits</span><span class="token punctuation">(</span><span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// calculate the X and Y position so this view lies inside our circle&#39;s edge</span></span>
<span class="line">            <span class="token keyword">let</span> xPos <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>radius <span class="token operator">-</span> viewSize<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> yPos <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>radius <span class="token operator">-</span> viewSize<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// position this view relative to our centre, using its natural size (&quot;unspecified&quot;)</span></span>
<span class="line">            <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> bounds<span class="token punctuation">.</span>midX <span class="token operator">+</span> xPos<span class="token punctuation">,</span> y<span class="token punctuation">:</span> bounds<span class="token punctuation">.</span>midY <span class="token operator">+</span> yPos<span class="token punctuation">)</span></span>
<span class="line">            subview<span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> point<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">,</span> proposal<span class="token punctuation">:</span> <span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now use that just like any other layout type. For example, we could place an array of shapes around, using a stepper to control how many are shown:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">16</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RadialLayout</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>count<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">safeAreaInset</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Count: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $count<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">36</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),f={href:"https://hackingwithswift.com/store/pro-swiftui",target:"_blank",rel:"noopener noreferrer"},y={class:"hint-container details"},_=n("summary",null,"Similar solutions…",-1);function S(c,x){const a=p("VPCard"),i=p("FontIcon");return d(),u("div",null,[n("h1",h,[n("a",w,[n("span",null,r(c.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,g,s(a,t(e({title:"How to create a custom layout using the Layout protocol | SwiftUI by Example",desc:"How to create a custom layout using the Layout protocol",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-create-a-custom-layout-using-the-layout-protocol",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[o("My book Pro SwiftUI goes into a lot more detail on custom layouts, including SwiftUI code for masonry layouts, equal width stacks, relative stacks, layout caches, custom animations, and more. Find out more "),n("a",f,[s(i,{icon:"fas fa-globe"}),o("here")]),o(".")]),n("details",y,[_,s(a,t(e({title:"How to fix “Protocol 'View' can only be used as a generic constraint because it has Self or associated type requirements” | SwiftUI by Example",desc:"How to fix “Protocol 'View' can only be used as a generic constraint because it has Self or associated type requirements”",link:"/hackingwithswift.com/swiftui/how-to-fix-protocol-view-can-only-be-used-as-a-generic-constraint-because-it-has-self-or-associated-type-requirements.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create and compose custom views | SwiftUI by Example",desc:"How to create and compose custom views",link:"/hackingwithswift.com/swiftui/how-to-create-and-compose-custom-views.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create a custom transition | SwiftUI by Example",desc:"How to create a custom transition",link:"/hackingwithswift.com/swiftui/how-to-create-a-custom-transition.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create custom animated drawings with TimelineView and Canvas | SwiftUI by Example",desc:"How to create custom animated drawings with TimelineView and Canvas",link:"/hackingwithswift.com/swiftui/how-to-create-custom-animated-drawings-with-timelineview-and-canvas.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(a,t(e({title:"How to create custom bindings | SwiftUI by Example",desc:"How to create custom bindings",link:"/hackingwithswift.com/swiftui/how-to-create-custom-bindings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const I=l(m,[["render",S],["__file","how-to-create-a-custom-layout-using-the-layout-protocol.html.vue"]]),L=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-create-a-custom-layout-using-the-layout-protocol.html","title":"How to create a custom layout using the Layout protocol","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create a custom layout using the Layout protocol","description":"Article(s) > How to create a custom layout using the Layout protocol","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create a custom layout using the Layout protocol"},{"property":"og:description","content":"How to create a custom layout using the Layout protocol"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-a-custom-layout-using-the-layout-protocol.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-create-a-custom-layout-using-the-layout-protocol.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create a custom layout using the Layout protocol"}],["meta",{"property":"og:description","content":"Article(s) > How to create a custom layout using the Layout protocol"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create a custom layout using the Layout protocol\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.98,"words":893},"filePathRelative":"hackingwithswift.com/swiftui/how-to-create-a-custom-layout-using-the-layout-protocol.md","excerpt":"\\n"}');export{I as comp,L as data};
