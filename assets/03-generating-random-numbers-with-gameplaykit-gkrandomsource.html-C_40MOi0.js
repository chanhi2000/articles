import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as c,e as n,n as a,g as o,f as p,r as d,o as l}from"./app-BgNevrm5.js";const m={},u={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},g=e("nav",{class:"table-of-contents"},[e("ul")],-1),f=e("hr",null,null,-1),w=p(`<p>Let&#39;s look at the most basic way of generating random numbers using GameplayKit, which is the <code>GKRandomSource</code> class and its <code>sharedRandom()</code> method. Of course, this means adding an import for GameplayKit into the playground, so please do that now.</p><p>A random source is a provider of an unfiltered stream of random numbers as you need them. As you&#39;ll see soon, GameplayKit has various options for your stream, but for now we&#39;re going to look at the simplest one: <code>sharedRandom()</code>.</p><p>Using <code>sharedRandom()</code> for a random number source returns the systems built-in random source that&#39;s used for a variety of other tasks, which means you can be pretty sure it&#39;s in a truly random state by the time it gets to you. It does, however, mean that it&#39;s useless for synchronizing network games, because everyone&#39;s device is in a different state.</p><p>To produce a truly random number you&#39;d use the <code>nextInt()</code> method like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">GKRandomSource</span><span class="token punctuation">.</span><span class="token function">sharedRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That produces a number between -2,147,483,648 and 2,147,483,647 â€“ yes, that&#39;s a negative number, which means it&#39;s not a drop-in replacement for <code>arc4random()</code>. Plus, even with GameplayKit&#39;s great new logic, Apple includes a warning that it&#39;s not guaranteed to be random for very specific situations, so for both these reasons it&#39;s not likely you&#39;ll want to use <code>nextInt()</code> much.</p><p>As an alternative, try using the <code>nextInt(upperBound:)</code> method, which works identically to <code>arc4random()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">GKRandomSource</span><span class="token punctuation">.</span><span class="token function">sharedRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>upperBound<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will return a random number from 0 to 5 using the system&#39;s built-in random number generator.</p><p>As well as <code>nextInt()</code> and <code>nextInt(upperBound:)</code> are <code>nextBool()</code> for generating a random true/false value and <code>nextUniform()</code> for generating a random floating-point number between 0 and 1. Both of these are implemented using <code>nextInt(upperBound:)</code> so they output properly random numbers.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>If youâ€™re just generating simple random values, using Swiftâ€™s <code>Int.random(in:)</code>, <code>Float.random(in:)</code>, <code>Double.random(in:)</code>, and <code>Bool.random()</code> are much easier than using GameplayKit. However, GameplayKit does have the advantage that you can shape its random output, as weâ€™ll look at nextâ€¦</p></div>`,11);function y(s,k){const t=d("VPCard");return l(),r("div",null,[e("h1",u,[e("a",h,[e("span",null,c(s.$frontmatter.title)+" ê´€ë ¨",1)])]),n(t,a(o({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,f,n(t,a(o({title:"Generating random numbers with GameplayKit: GKRandomSource | Hacking with iOS",desc:"Generating random numbers with GameplayKit: GKRandomSource",link:"https://hackingwithswift.com/read/35/3/generating-random-numbers-with-gameplaykit-gkrandomsource",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w])}const v=i(m,[["render",y],["__file","03-generating-random-numbers-with-gameplaykit-gkrandomsource.html.vue"]]),K=JSON.parse('{"path":"/hackingwithswift.com/read/35/03-generating-random-numbers-with-gameplaykit-gkrandomsource.html","title":"Generating random numbers with GameplayKit: GKRandomSource","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Generating random numbers with GameplayKit: GKRandomSource","description":"Article(s) > Generating random numbers with GameplayKit: GKRandomSource","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Generating random numbers with GameplayKit: GKRandomSource"},{"property":"og:description","content":"Generating random numbers with GameplayKit: GKRandomSource"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/35/03-generating-random-numbers-with-gameplaykit-gkrandomsource.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/35/03-generating-random-numbers-with-gameplaykit-gkrandomsource.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Generating random numbers with GameplayKit: GKRandomSource"}],["meta",{"property":"og:description","content":"Article(s) > Generating random numbers with GameplayKit: GKRandomSource"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Generating random numbers with GameplayKit: GKRandomSource\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.72,"words":515},"filePathRelative":"hackingwithswift.com/read/35/03-generating-random-numbers-with-gameplaykit-gkrandomsource.md","excerpt":"\\n"}');export{v as comp,K as data};
