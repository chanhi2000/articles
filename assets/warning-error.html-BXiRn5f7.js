import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as d,e,n as t,g as a,d as i,a as g,f as u,r,o as h}from"./app-BgNevrm5.js";const m={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=n("blockquote",null,[n("p",null,"Available from Swift 4.2")],-1),y={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"apple/swift-evolution",-1),S=u(`<p>The two new directives are <code>#warning</code> and <code>#error</code>: the former will force Xcode to issue a warning when building your code, and the latter will issue a compile error so your code won’t build at all. Both of these are useful for different reasons:</p><ul><li><code>#warning</code> is mainly useful as a reminder to yourself or others that some work is incomplete. Xcode templates often use <code>#warning</code> to mark method stubs that you should replace with your own code.</li><li><code>#error</code> is mainly useful if you ship a library that requires other developers to provide some data. For example, an authentication key for a web API – you want users to include their own key, so using <code>#error</code> will force them to change that code before continuing.</li></ul><p>Both of these work in the same way: <code>#warning(&quot;Some message&quot;)</code> and <code>#error(&quot;Some message&quot;)</code>. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">encrypt</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> with password<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token other-directive property">#warning</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is terrible method of encryption&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> password <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> password</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> apiKey<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token other-directive property">#error</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Please enter your API key below then delete this line.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Enter your key here&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both <code>#warning</code> and <code>#error</code> work alongside the existing <code>#if</code> compiler directive, and will only be triggered if the condition being evaluated is true. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span></span>
<span class="line"><span class="token other-directive property">#error</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;MyLibrary is not supported on macOS.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),C={class:"hint-container details"},q=n("summary",null,"Other Changes in Swift 4.2",-1),W={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-4-1-to-4-2.playground.zip",target:"_blank",rel:"noopener noreferrer"};function x(c,A){const s=r("VPCard"),o=r("FontIcon");return h(),p("div",null,[n("h1",f,[n("a",w,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),e(s,t(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,v,e(s,t(a({title:"Warning and error diagnostic directives | Changes in Swift 4.2",desc:"Warning and error diagnostic directives",link:"https://hackingwithswift.com/swift/4.2/warning-error",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("p",null,[n("a",y,[i("SE-0196 ("),e(o,{icon:"iconfont icon-github"}),_,i(")")]),i(" introduced new compiler directives that help us mark issues in our code. These will be familiar to any developers who had used Objective-C previously, but as of Swift 4.2 we can enjoy them in Swift too.")]),S,n("details",C,[q,e(s,t(a({title:"Derived collections of enum cases | Changes in Swift 4.2",desc:"Derived collections of enum cases",link:"/hackingwithswift.com/swift/4.2/caseiterable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g(` 
\`\`\`component VPCard
{
  "title": "Warning and error diagnostic directives | Changes in Swift 4.2",
  "desc": "Warning and error diagnostic directives",
  "link": "/hackingwithswift.com/swift/4.2/warning-error.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),e(s,t(a({title:"Dynamic member look up | Changes in Swift 4.2",desc:"Dynamic member look up",link:"/hackingwithswift.com/swift/4.2/dynamic-member-lookup.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(s,t(a({title:"Enhanced conditional conformances | Changes in Swift 4.2",desc:"Enhanced conditional conformances",link:"/hackingwithswift.com/swift/4.2/conditional-conformance.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(s,t(a({title:"Random number generation and shuffling | Changes in Swift 4.2",desc:"Random number generation and shuffling",link:"/hackingwithswift.com/swift/4.2/random.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(s,t(a({title:"Simpler, more secure hashing | Changes in Swift 4.2",desc:"Simpler, more secure hashing",link:"/hackingwithswift.com/swift/4.2/hashable.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(s,t(a({title:"Checking sequence elements match a condition | Changes in Swift 4.2",desc:"Checking sequence elements match a condition",link:"/hackingwithswift.com/swift/4.2/allsatisfy.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(s,t(a({title:"In-place collection element removal | Changes in Swift 4.2",desc:"In-place collection element removal",link:"/hackingwithswift.com/swift/4.2/remove-where.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(s,t(a({title:"Boolean toggling | Changes in Swift 4.2",desc:"Boolean toggling",link:"/hackingwithswift.com/swift/4.2/toggle.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n("p",null,[n("a",W,[e(o,{icon:"fas fa-file-zipper"}),i("Download Swift 4.2 playground")])])])])}const P=l(m,[["render",x],["__file","warning-error.html.vue"]]),E=JSON.parse('{"path":"/hackingwithswift.com/swift/4.2/warning-error.html","title":"Warning and error diagnostic directives","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Warning and error diagnostic directives","description":"Article(s) > Warning and error diagnostic directives","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-4.2"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Warning and error diagnostic directives"},{"property":"og:description","content":"Warning and error diagnostic directives"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/warning-error.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/4.2/warning-error.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Warning and error diagnostic directives"}],["meta",{"property":"og:description","content":"Article(s) > Warning and error diagnostic directives"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-4.2"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Warning and error diagnostic directives\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.23,"words":670},"filePathRelative":"hackingwithswift.com/swift/4.2/warning-error.md","excerpt":"\\n"}');export{P as comp,E as data};
