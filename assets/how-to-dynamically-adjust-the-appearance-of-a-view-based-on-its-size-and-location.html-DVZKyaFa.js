import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,t as d,e as a,n as t,g as e,d as o,f as c,r as p,o as k}from"./app-BgNevrm5.js";const m={},h={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f=n("nav",{class:"table-of-contents"},[n("ul")],-1),v=n("hr",null,null,-1),b=c(`<blockquote><p>Updated for Xcode 15</p></blockquote><p><strong>New in iOS 17</strong></p><p>SwiftUI&#39;s <code>visualEffect()</code> modifier lets us read the geometry proxy for a view <em>without</em> using a <code>GeometryReader</code>, which means we can look at the size and location of a view without affecting its layout behavior.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>This modifier is specifically for applying visual effects such as adjusting colors or adding blur, and cannot adjust how the frame of your content is calculated for layout purposes. It <em>can</em> adjust frame-<em>like</em> things such as the offset and scale of your view, because they don&#39;t affect layout.</p></div><p>As an example, the following code blurs each view in a scroll view by some blur amount that&#39;s calculated by how far away the view is away from the center of its scroll view. That means views near the vertical center have little or no blur, whereas views on the outside are heavily blurred:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span>visualEffect <span class="token punctuation">{</span> content<span class="token punctuation">,</span> proxy <span class="token keyword">in</span></span>
<span class="line">                        content<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token function">blurAmount</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> proxy<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">blurAmount</span><span class="token punctuation">(</span><span class="token keyword">for</span> proxy<span class="token punctuation">:</span> <span class="token class-name">GeometryProxy</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> scrollViewHeight <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token punctuation">.</span>scrollView<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>height <span class="token operator">??</span> <span class="token number">100</span></span>
<span class="line">        <span class="token keyword">let</span> ourCenter <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>scrollView<span class="token punctuation">)</span><span class="token punctuation">.</span>midY</span>
<span class="line">        <span class="token keyword">let</span> distanceFromCenter <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>scrollViewHeight <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> ourCenter<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>distanceFromCenter<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),g={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location-1.zip",target:"_blank",rel:"noopener noreferrer"},y=c(`<figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location-1~dark.gif" alt="A scrolling list of rows, where rows near the center are sharp and rows near the edges are blurry." tabindex="0" loading="lazy"><figcaption>A scrolling list of rows, where rows near the center are sharp and rows near the edges are blurry.</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Calling <code>proxy.frame(in: .scrollView)</code> finds the size of this view in the innermost scroll view that contains it.</p></div><p>These visual effects work with any kind of position, including that generated through animation. For example, this makes a series of circles in a grid spin around, with each one dynamically recoloring based on a hue rotation:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> rotationAmount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Grid</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">GridRow</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">                        <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span>visualEffect <span class="token punctuation">{</span> content<span class="token punctuation">,</span> proxy <span class="token keyword">in</span></span>
<span class="line">                                content<span class="token punctuation">.</span><span class="token function">hueRotation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>midY <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>rotationAmount<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>onAppear <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                rotationAmount <span class="token operator">=</span> <span class="token number">360</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),j={href:"https://hackingwithswift.com/files/projects/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location-2.zip",target:"_blank",rel:"noopener noreferrer"},_=n("figure",null,[n("img",{src:"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location-2~dark.gif",alt:"A 3x3 grid of rotating circles, where each circle changes colors as it moves.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"A 3x3 grid of rotating circles, where each circle changes colors as it moves.")],-1),z=n("p",null,[o("The modifier's name, "),n("code",null,"visualEffect()"),o(", should make it clear that any adjustments you make are limited how the finished view looks – if you find yourself wanting to use it to adjust view "),n("em",null,"content"),o(", you're looking in the wrong place.")],-1),x={class:"hint-container details"},S=n("summary",null,"Similar solutions…",-1);function H(l,A){const s=p("VPCard"),i=p("FontIcon");return k(),r("div",null,[n("h1",h,[n("a",w,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,v,a(s,t(e({title:"How to dynamically adjust the appearance of a view based on its size and location | SwiftUI by Example",desc:"How to dynamically adjust the appearance of a view based on its size and location",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("blockquote",null,[n("p",null,[n("a",g,[a(i,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),y,n("blockquote",null,[n("p",null,[n("a",j,[a(i,{icon:"fas fa-file-zipper"}),o("Download this as an Xcode project")])])]),_,z,n("details",x,[S,a(s,t(e({title:"How to adjust the size of a view relative to its container | SwiftUI by Example",desc:"How to adjust the size of a view relative to its container",link:"/hackingwithswift.com/swiftui/how-to-adjust-the-size-of-a-view-relative-to-its-container.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to automatically switch between HStack and VStack based on size class | SwiftUI by Example",desc:"How to automatically switch between HStack and VStack based on size class",link:"/hackingwithswift.com/swiftui/how-to-automatically-switch-between-hstack-and-vstack-based-on-size-class.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to dynamically adjust the color of an SF Symbol | SwiftUI by Example",desc:"How to dynamically adjust the color of an SF Symbol",link:"/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-color-of-an-sf-symbol.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to adjust the position of a view using its offset | SwiftUI by Example",desc:"How to adjust the position of a view using its offset",link:"/hackingwithswift.com/swiftui/how-to-adjust-the-position-of-a-view-using-its-offset.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to create a document-based app using FileDocument and DocumentGroup | SwiftUI by Example",desc:"How to create a document-based app using FileDocument and DocumentGroup",link:"/hackingwithswift.com/swiftui/how-to-create-a-document-based-app-using-filedocument-and-documentgroup.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const I=u(m,[["render",H],["__file","how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.html.vue"]]),F=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.html","title":"How to dynamically adjust the appearance of a view based on its size and location","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to dynamically adjust the appearance of a view based on its size and location","description":"Article(s) > How to dynamically adjust the appearance of a view based on its size and location","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to dynamically adjust the appearance of a view based on its size and location"},{"property":"og:description","content":"How to dynamically adjust the appearance of a view based on its size and location"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to dynamically adjust the appearance of a view based on its size and location"}],["meta",{"property":"og:description","content":"Article(s) > How to dynamically adjust the appearance of a view based on its size and location"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location-1~dark.gif"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to dynamically adjust the appearance of a view based on its size and location\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location-1~dark.gif\\",\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location-2~dark.gif\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.17,"words":951},"filePathRelative":"hackingwithswift.com/swiftui/how-to-dynamically-adjust-the-appearance-of-a-view-based-on-its-size-and-location.md","excerpt":"\\n"}');export{I as comp,F as data};
