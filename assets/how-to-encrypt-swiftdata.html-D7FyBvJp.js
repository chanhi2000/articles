import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as t,t as c,e,n,g as s,f as r,r as l,o as d}from"./app-BgNevrm5.js";const u={},h={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},f=t("nav",{class:"table-of-contents"},[t("ul")],-1),w=t("hr",null,null,-1),y=r(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>If you‚Äôre storing information that‚Äôs particularly sensitive, you can take one or perhaps two steps to make sure it‚Äôs stored extra carefully.</p><p>The simplest, guaranteed to work option is to use the <code>.allowsCloudEncryption</code> attribute on any property that should be stored encrypted in iCloud, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Attribute</span><span class="token punctuation">(</span><span class="token punctuation">.</span>allowsCloudEncryption<span class="token punctuation">)</span> <span class="token keyword">var</span> cardNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As the name suggests, this encryption only works in iCloud; this property has no effect on locally stored data.</p><p>The second, much more complex option is to attempt to set custom data protection properties in your data. Apple‚Äôs documentation here is rather thin on the ground, and cunning it‚Äôs impossible to verify that any of these actually work because the process of unlocking your phone also decrypts the data, however <em>in theory</em> you‚Äôd need to write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> path <span class="token operator">=</span> modelContext<span class="token punctuation">.</span>container<span class="token punctuation">.</span>configurations<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span>percentEncoded<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> attrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">FileAttributeKey</span><span class="token punctuation">.</span>protectionKey<span class="token punctuation">:</span> <span class="token class-name">FileProtectionType</span><span class="token punctuation">.</span>completeUnlessOpen<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> ofItemAtPath<span class="token punctuation">:</span> path<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may also need to enable the Data Protection capability for your app in Xcode.</p><p>However, this approach is more complicated than it might appear:</p><ol><li>The underlying data store is likely to be split into multiple files in order to support write-ahead logging, and they shouldn‚Äôt necessarily have the same protection class.</li><li>SQLite can delete and recreate files at will as part of its self-healing mechanisms.</li><li>If you‚Äôre supporting Core Data at the same time, you should adjust the <code>NSPersistentStoreFileProtectionKey</code> option key to match whatever you enabled for SwiftData.</li></ol><p>Remember, it‚Äôs hard to verify that your files are encrypted because the very act of trusting your Mac to read the files makes them available unencrypted. So, I‚Äôd advise treading carefully!</p>`,11);function k(o,g){const a=l("VPCard");return d(),p("div",null,[t("h1",h,[t("a",m,[t("span",null,c(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e(a,n(s({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,w,e(a,n(s({title:"How to encrypt SwiftData | SwiftData by Example",desc:"How to encrypt SwiftData",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-encrypt-swiftdata",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y])}const _=i(u,[["render",k],["__file","how-to-encrypt-swiftdata.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-encrypt-swiftdata.html","title":"How to encrypt SwiftData","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to encrypt SwiftData","description":"Article(s) > How to encrypt SwiftData","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to encrypt SwiftData"},{"property":"og:description","content":"How to encrypt SwiftData"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-encrypt-swiftdata.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-encrypt-swiftdata.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"How to encrypt SwiftData"}],["meta",{"property":"og:description","content":"Article(s) > How to encrypt SwiftData"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to encrypt SwiftData\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-encrypt-swiftdata.md","localizedDate":"2023ÎÖÑ 9Ïõî 30Ïùº","excerpt":"\\n"}');export{_ as comp,S as data};
