import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as m,e as s,n as k,g as v,w as t,d as a,f as p,r as i,o as h}from"./app-BgNevrm5.js";const f={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},w=n("hr",null,null,-1),x=p('<p>Lifetimes are fundamental mechanisms in Rust. There&#39;s a very high chance you&#39;ll need to work with lifetimes in any Rust project that has any sort of complexity.</p><p>Even though they are important to Rust projects, lifetimes can be quite tricky to wrap your head around. So I created this guide to provide more clarity on what they are and when you should use them.</p><div class="hint-container note"><p class="hint-container-title">Prerequisites for this Tutorial</p><p>To get the most out of this tutorial, you&#39;ll need the following:</p><ul><li>At least beginner-level familiarity with Rust: This tutorial doesn&#39;t help with learning how to code in Rust. It only helps with understanding lifetimes in Rust and how they work</li><li>Familiarity with generics: Generics in Rust work identically to how they do in popular programming languages. Knowledge of how generics work in any language would be helpful.</li><li>Knowing how the borrow checker works isn&#39;t as much a requirement as the last two above, but it would be helpful. Knowledge of how lifetimes work also helps in understanding how the borrow checker works.</li></ul></div><hr><h2 id="so-what-are-lifetimes-in-rust" tabindex="-1"><a class="header-anchor" href="#so-what-are-lifetimes-in-rust"><span>So, What are Lifetimes in Rust?</span></a></h2>',5),_={href:"https://doc.rust-lang.org/rust-by-example/scope/borrow.html",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>Lifetimes in Rust are mechanisms for ensuring that all borrows that occur within your code are valid. A variable&#39;s lifetime is how long it lives within the program&#39;s execution, starting from when it&#39;s initialized and ending when it&#39;s destroyed in the program.</p><p>The borrow checker can detect the lifetimes of variables in many cases. But in cases where it can&#39;t, you have to assist it with explicit lifetime annotations.</p><p>The syntax for explicit lifetime annotations is a single quote followed by a set of characters for identification (for example, <code>&#39;static</code>, <code>&#39;a</code>) as in:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line">max<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The lifetime annotation indicates that <code>max</code> should live at most as long as <code>&#39;a</code>.</p><p>Using multiple lifetimes follows the same syntax:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line">max<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">&#39;b</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this case, the lifetime annotations indicate that <code>max</code> should live at most as long as <code>&#39;a</code> and <code>&#39;b</code>.</p><p>Explicit lifetime annotations are handled similarly to how generics are. Let&#39;s take a look at an example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// return the longest string out of the two</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example, the lifetime annotations indicate that <code>max</code> should live at most as long as the lifetimes of <code>s1</code> or <code>s2</code>. It also indicates that <code>max</code> returns a reference that lives as long as <code>s1</code>.</p><p>A Rust project has many cases that would require explicit lifetime annotations, and in the next few sections, we&#39;ll go over each of them.</p><hr><h2 id="lifetime-annotations-in-functions" tabindex="-1"><a class="header-anchor" href="#lifetime-annotations-in-functions"><span>Lifetime Annotations in Functions</span></a></h2><p>A function only needs an explicit lifetime annotation when it returns a reference from any of its arguments. Let&#39;s take an example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> s1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        s1</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        s2</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you remove the lifetime annotations, you&#39;ll get an LSP (Language Server Protocol) warning to include the lifetime annotations. If you ignore LSP&#39;s warning message and compile the code, you&#39;ll get the same message as a compiler error. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> s1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        s1</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        s2</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * Output -&gt;</span>
<span class="line"> *</span>
<span class="line">error[E0106]: missing lifetime specifier</span>
<span class="line">  --&gt; src/main.rs:44:31</span>
<span class="line">   |</span>
<span class="line">44 | fn max(s1: &amp;str, s2: &amp;str) -&gt; &amp;str {</span>
<span class="line">   |            ----      ----     ^ expected named lifetime parameter</span>
<span class="line">   |</span>
<span class="line">   = help: this function&#39;s return type contains a borrowed value, but the signature does not say whether it is borrowed from \`s1\` or \`s2\`</span>
<span class="line">help: consider introducing a named lifetime parameter</span>
<span class="line">   |</span>
<span class="line">44 | fn max&lt;&#39;a&gt;(s1: &amp;&#39;a str, s2: &amp;&#39;a str) -&gt; &amp;&#39;a str {</span>
<span class="line">   |       ++++      ++           ++          ++</span>
<span class="line"></span>
<span class="line">For more information about this error, try \`rustc --explain E0106\`.</span>
<span class="line">error: could not compile \`lifetime-test\` (bin &quot;lifetime-test&quot;) due to 1 previous error</span>
<span class="line"> ***********************</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the other hand, a function doesn&#39;t need explicit lifetimes if it isn&#39;t returning a reference in its arguments. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">print_longest</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> s1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s1} is longer than {s2}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s2} is longer than {s1}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A function returning a different value doesn&#39;t need explicit lifetime annotations either:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">join_strs</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> joint_string <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    joint_string<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> joint_string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You only need to specify lifetimes if a function returns a reference from one of its arguments that is a borrowed reference.</p><hr><h2 id="lifetime-annotations-in-structs" tabindex="-1"><a class="header-anchor" href="#lifetime-annotations-in-structs"><span>Lifetime Annotations in Structs</span></a></h2><p>Structs require explicit lifetime annotations when any of their fields are references. This allows the borrow checker to ensure that the references in the struct&#39;s fields live longer than the struct. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Strs</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">&#39;b</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;b</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Without the lifetime annotations, you&#39;ll get a similar LSP and compiler error message to the one in the previous section:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">OtherStruct</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line">* Output -&gt;</span>
<span class="line">**********************</span>
<span class="line">error[E0106]: missing lifetime specifier</span>
<span class="line"> --&gt; src/main.rs:7:8</span>
<span class="line">  |</span>
<span class="line">7 |     x: &amp;str,</span>
<span class="line">  |        ^ expected named lifetime parameter</span>
<span class="line">  |</span>
<span class="line">help: consider introducing a named lifetime parameter</span>
<span class="line">  |</span>
<span class="line">6 ~ struct OtherStruct&lt;&#39;a&gt; {</span>
<span class="line">7 ~     x: &amp;&#39;a str,</span>
<span class="line">  |</span>
<span class="line"></span>
<span class="line">error[E0106]: missing lifetime specifier</span>
<span class="line"> --&gt; src/main.rs:8:8</span>
<span class="line">  |</span>
<span class="line">8 |     y: &amp;str,</span>
<span class="line">  |        ^ expected named lifetime parameter</span>
<span class="line">  |</span>
<span class="line">help: consider introducing a named lifetime parameter</span>
<span class="line">  |</span>
<span class="line">6 ~ struct OtherStruct&lt;&#39;a&gt; {</span>
<span class="line">7 |     x: &amp;str,</span>
<span class="line">8 ~     y: &amp;&#39;a str,</span>
<span class="line">  |</span>
<span class="line"></span>
<span class="line">For more information about this error, try \`rustc --explain E0106\`.</span>
<span class="line">error: could not compile \`lifetime-test\` (bin &quot;lifetime-test&quot;) due to 2 previous errors</span>
<span class="line">**********************</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="lifetime-annotations-in-methods" tabindex="-1"><a class="header-anchor" href="#lifetime-annotations-in-methods"><span>Lifetime Annotations in Methods</span></a></h2><p>Lifetime annotations concerning methods can be done as annotations to standalone methods, <code>impl</code> blocks, or traits. Let&#39;s look at each of them:</p><h3 id="standalone-methods" tabindex="-1"><a class="header-anchor" href="#standalone-methods"><span>Standalone Methods:</span></a></h3><p>Annotating lifetimes on standalone methods is identical to annotating lifetimes in functions:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">impl</span> <span class="token class-name">Struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> s1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            s1</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            s2</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="impl-blocks" tabindex="-1"><a class="header-anchor" href="#impl-blocks"><span><code>impl</code> Blocks</span></a></h3><p>Writing explicit lifetime annotations for <code>impl</code> blocks is required if the struct it is associated with has lifetime annotations in its definition. This is the syntax for writing <code>impl</code> blocks with explicit lifetime annotations:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Struct</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token class-name">Struct</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows any method you write in the <code>impl</code> block to return a reference from <code>Struct</code>. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Strs</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token class-name">Strs</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>y</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>x</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="traits" tabindex="-1"><a class="header-anchor" href="#traits"><span>Traits</span></a></h3><p>Lifetime annotations in traits are dependent on the methods that the trait defines.</p><p>Let&#39;s look at one example. A method inside a trait definition can use explicit lifetime annotations as a standalone method, and the trait definition won&#39;t require explicit lifetime annotations. Like so:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">trait</span> <span class="token type-definition class-name">Max</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">longest_str</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token class-name">Max</span> <span class="token keyword">for</span> <span class="token class-name">Struct</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">longest_str</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> s1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            s1</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            s2</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a trait method requires references from the struct its associated with, the trait&#39;s definition would require explicit lifetime annotations. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">trait</span> <span class="token type-definition class-name">Max</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Which can be implemented this way:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Strs</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">trait</span> <span class="token type-definition class-name">Max</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token class-name">Max</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Strs</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>y</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>x</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="lifetime-annotations-in-enums" tabindex="-1"><a class="header-anchor" href="#lifetime-annotations-in-enums"><span>Lifetime Annotations in Enums</span></a></h2><p>Similar to structs, enums need explicit lifetime annotations if any of their fields are references. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Either</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Str</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="the-static-lifetime" tabindex="-1"><a class="header-anchor" href="#the-static-lifetime"><span>The <code>&#39;static</code> Lifetime</span></a></h2><p>In many Rust projects, you&#39;ll likely have encountered variables that are <code>&#39;static</code> in lifetimes. In this section, we&#39;ll go over a brief overview of what a <code>&#39;static</code> lifetime is, how it works, and where it is commonly used.</p><p><code>&#39;static</code> is a reserved lifetime name in Rust. It signifies that the data that a reference points to lives from where it is initialized to the end of the program. This differs slightly from static variables, which are stored directly in the program&#39;s binary file. However, all static variables have a <code>&#39;static</code> lifetime.</p><p>Variables with <code>&#39;static</code> lifetimes can be created at runtime. But they can&#39;t be dropped, only coerced into shorter lifetimes. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// The lifetime annotation &#39;a is the shorter lifetime of the</span></span>
<span class="line"><span class="token comment">// two arguments s1 and s2</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">max</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> s1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        s1</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        s2</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token string">&quot;First string&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Longer lifetime</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token string">&quot;Second string&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Shorter lifetime</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// In the max function, the lifetime of first is</span></span>
<span class="line">        <span class="token comment">// coerced into the lifetime of second</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The biggest of {} and {} is {}&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>String literals are examples of values with <code>&#39;static</code> lifetimes. They are also stored in the program&#39;s binary file and can be created at runtime.</p><p>Rust allows you to declare static variables with the <code>static</code> keyword, using this syntax:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token constant">IDENTIFIER</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Static variables can be declared in any scope, including the global scope. This means that you can use static variables as global variables. For example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token constant">FIRST_NAME</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">LAST_NAME</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;First name: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">FIRST_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Last name: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">LAST_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Static variables can also be mutable or immutable. But working with mutable static variables is only allowed in <code>unsafe</code> blocks because they&#39;re unsafe.</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">mut</span> <span class="token constant">FIRST_NAME</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">LAST_NAME</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;First name: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">FIRST_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Last name: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">LAST_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">FIRST_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;First name changed to: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">FIRST_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Lifetimes in Go help the borrow checker ensure that all borrowed references are valid. The borrow checker can detect the lifetimes of variables in many cases, but in cases where it can&#39;t you have to assist it with explicit lifetime annotations.</p><p>Explicit lifetime annotations are those <code>&#39;a</code>, <code>&#39;b</code>, and <code>&#39;static</code> things you see in many Rust projects. You only need to use them in structures (structs, enums, traits, and impls) that deal with references, and in functions or methods that receive and return references.</p><p>In this guide, you learned about explicit lifetime annotations and saw some examples of how to use them. I it gave you some clarity on the topic, and helped you understand lifetimes better.</p><p>Thanks for reading!</p>`,71);function E(o,L){const l=i("VPCard"),e=i("router-link"),c=i("SiteInfo"),r=i("FontIcon");return h(),d("div",null,[n("h1",b,[n("a",y,[n("span",null,m(o.$frontmatter.title)+" 관련",1)])]),s(l,k(v({title:"Rust > Article(s)",desc:"Article(s)",link:"/programming/rust/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",g,[n("ul",null,[n("li",null,[s(e,{to:"#so-what-are-lifetimes-in-rust"},{default:t(()=>[a("So, What are Lifetimes in Rust?")]),_:1})]),n("li",null,[s(e,{to:"#lifetime-annotations-in-functions"},{default:t(()=>[a("Lifetime Annotations in Functions")]),_:1})]),n("li",null,[s(e,{to:"#lifetime-annotations-in-structs"},{default:t(()=>[a("Lifetime Annotations in Structs")]),_:1})]),n("li",null,[s(e,{to:"#lifetime-annotations-in-methods"},{default:t(()=>[a("Lifetime Annotations in Methods")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#standalone-methods"},{default:t(()=>[a("Standalone Methods:")]),_:1})]),n("li",null,[s(e,{to:"#impl-blocks"},{default:t(()=>[a("impl Blocks")]),_:1})]),n("li",null,[s(e,{to:"#traits"},{default:t(()=>[a("Traits")]),_:1})])])]),n("li",null,[s(e,{to:"#lifetime-annotations-in-enums"},{default:t(()=>[a("Lifetime Annotations in Enums")]),_:1})]),n("li",null,[s(e,{to:"#the-static-lifetime"},{default:t(()=>[a("The 'static Lifetime")]),_:1})]),n("li",null,[s(e,{to:"#summary"},{default:t(()=>[a("Summary")]),_:1})])])]),w,s(c,{name:"What are Lifetimes in Rust? Explained with Code Examples",desc:"Lifetimes are fundamental mechanisms in Rust. There's a very high chance you'll need to work with lifetimes in any Rust project that has any sort of complexity. Even though they are important to Rust projects, lifetimes can be quite tricky to wrap yo...",url:"https://freecodecamp.org/news/what-are-lifetimes-in-rust-explained-with-code-examples/",logo:"https://cdn.freecodecamp.org/universal/favicons/favicon.ico",preview:"https://cdn.hashnode.com/res/hashnode/image/upload/v1725652969333/ba8a3fb6-3ac8-40e0-91e6-3e32e7f7b4b4.jpeg"}),x,n("p",null,[a("For Rust's "),n("a",_,[s(r,{icon:"fa-brands fa-rust"}),a("borrow checker")]),a(" to ensure safety throughout your code, it needs to know how long all the data in the program will live during its execution. This becomes difficult to do in certain situations, and those situations are where you need to use explicit lifetime annotations.")]),S])}const A=u(f,[["render",E],["__file","what-are-lifetimes-in-rust-explained-with-code-examples.html.vue"]]),T=JSON.parse(`{"path":"/freecodecamp.org/what-are-lifetimes-in-rust-explained-with-code-examples.html","title":"What are Lifetimes in Rust? Explained with Code Examples","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What are Lifetimes in Rust? Explained with Code Examples","description":"Article(s) > What are Lifetimes in Rust? Explained with Code Examples","icon":"fa-brands fa-rust","category":["Rust","Article(s)"],"tag":["blog","freecodecamp.org","rust","rs"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > What are Lifetimes in Rust? Explained with Code Examples"},{"property":"og:description","content":"What are Lifetimes in Rust? Explained with Code Examples"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/what-are-lifetimes-in-rust-explained-with-code-examples.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/freecodecamp.org/what-are-lifetimes-in-rust-explained-with-code-examples.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What are Lifetimes in Rust? Explained with Code Examples"}],["meta",{"property":"og:description","content":"Article(s) > What are Lifetimes in Rust? Explained with Code Examples"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725652969333/ba8a3fb6-3ac8-40e0-91e6-3e32e7f7b4b4.jpeg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725652969333/ba8a3fb6-3ac8-40e0-91e6-3e32e7f7b4b4.jpeg"}],["meta",{"name":"twitter:image:alt","content":"What are Lifetimes in Rust? Explained with Code Examples"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"rs"}],["meta",{"property":"article:published_time","content":"2024-09-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What are Lifetimes in Rust? Explained with Code Examples\\",\\"image\\":[\\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725652969333/ba8a3fb6-3ac8-40e0-91e6-3e32e7f7b4b4.jpeg\\"],\\"datePublished\\":\\"2024-09-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/programming/rust/articles/README.md","date":"2024-09-06T00:00:00.000Z","isOriginal":false,"cover":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725652969333/ba8a3fb6-3ac8-40e0-91e6-3e32e7f7b4b4.jpeg"},"headers":[{"level":2,"title":"So, What are Lifetimes in Rust?","slug":"so-what-are-lifetimes-in-rust","link":"#so-what-are-lifetimes-in-rust","children":[]},{"level":2,"title":"Lifetime Annotations in Functions","slug":"lifetime-annotations-in-functions","link":"#lifetime-annotations-in-functions","children":[]},{"level":2,"title":"Lifetime Annotations in Structs","slug":"lifetime-annotations-in-structs","link":"#lifetime-annotations-in-structs","children":[]},{"level":2,"title":"Lifetime Annotations in Methods","slug":"lifetime-annotations-in-methods","link":"#lifetime-annotations-in-methods","children":[{"level":3,"title":"Standalone Methods:","slug":"standalone-methods","link":"#standalone-methods","children":[]},{"level":3,"title":"impl Blocks","slug":"impl-blocks","link":"#impl-blocks","children":[]},{"level":3,"title":"Traits","slug":"traits","link":"#traits","children":[]}]},{"level":2,"title":"Lifetime Annotations in Enums","slug":"lifetime-annotations-in-enums","link":"#lifetime-annotations-in-enums","children":[]},{"level":2,"title":"The 'static Lifetime","slug":"the-static-lifetime","link":"#the-static-lifetime","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.53,"words":1959},"filePathRelative":"freecodecamp.org/what-are-lifetimes-in-rust-explained-with-code-examples.md","localizedDate":"2024년 9월 6일","excerpt":"\\n"}`);export{A as comp,T as data};
