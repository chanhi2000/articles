import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as a,t as l,e as t,n as s,g as e,f as p,r,o as d}from"./app-BgNevrm5.js";const u={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},k=a("nav",{class:"table-of-contents"},[a("ul")],-1),f=a("hr",null,null,-1),g=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>The best way to perform a bulk data import with SwiftData – i.e., to create a lot of model objects at the same time, perhaps as a result of a network call – is to use a background task through something like an actor.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you&#39;re inserting more than 5000 or so objects, or if your models are particularly large because they include binary data, I would strongly suggest you split your inserts into smaller batches and trigger a manual save at the end of each batch so that your memory usage doesn&#39;t skyrocket. You might also want to consider very slightly throttling your inserts if you anticipate extended periods of work.</p></div><p>To get you started, here&#39;s some sample code for a <code>BackgroundImporter</code> actor that inserts lots of sample data on a background actor:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">actor</span> <span class="token class-name">BackgroundImporter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> modelContainer<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>modelContainer<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>modelContainer <span class="token operator">=</span> modelContainer</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">backgroundInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> modelContext <span class="token operator">=</span> <span class="token class-name">ModelContext</span><span class="token punctuation">(</span>modelContainer<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> batchSize <span class="token operator">=</span> <span class="token number">1000</span></span>
<span class="line">        <span class="token keyword">let</span> totalObjects <span class="token operator">=</span> <span class="token number">100_000</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span><span class="token punctuation">(</span>totalObjects <span class="token operator">/</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>batchSize <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// try await Task.sleep(for: .milliseconds(1))</span></span>
<span class="line">                <span class="token keyword">let</span> issue <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Movie </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">I</span> <span class="token operator">*</span> batchSize <span class="token operator">+</span> j</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> cast<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>issue<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">try</span> modelContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That does a few important things you should take note of for maximum performance:</p><ol><li>It creates the model context inside the <code>backgroundInsert()</code> method, thus avoiding the significant cost of accessing an actor&#39;s property repeatedly.</li><li>It inserts 100,000 test objects in chunks of 1000.</li><li>After each batch it calls <code>save()</code> to write the data to disk, keeping the peak memory overhead lower.</li><li>It has a <em>commented-out</em> 1-millisecond pause between each object insertion – the code goes as fast as possible, but if you want to throttle your inserts you should uncomment that line.</li></ol><div class="hint-container important"><p class="hint-container-title">Important</p><p>It bears repeating that if you create the model context as a property of your actor rather than inside the method, your batch inserts will run an order of magnitude slower.</p></div><p>Each time you call <code>save()</code> your changes will automatically be reflected on your main context, so for example any <code>@Query</code> properties will update.</p><p>In your own projects, you would presumably either be calculating your data dynamically or fetching it from a remote server, but the concept is the same: push the work onto a model context running on a different actor, and it will automatically be synchronized when <code>save()</code> is called.</p>`,10);function y(o,b){const n=r("VPCard");return d(),c("div",null,[a("h1",m,[a("a",h,[a("span",null,l(o.$frontmatter.title)+" 관련",1)])]),t(n,s(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,f,t(n,s(e({title:"How to batch insert large amounts of data efficiently | SwiftData by Example",desc:"How to batch insert large amounts of data efficiently",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-batch-insert-large-amounts-of-data-efficiently",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),g])}const _=i(u,[["render",y],["__file","how-to-batch-insert-large-amounts-of-data-efficiently.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-batch-insert-large-amounts-of-data-efficiently.html","title":"How to batch insert large amounts of data efficiently","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to batch insert large amounts of data efficiently","description":"Article(s) > How to batch insert large amounts of data efficiently","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to batch insert large amounts of data efficiently"},{"property":"og:description","content":"How to batch insert large amounts of data efficiently"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-batch-insert-large-amounts-of-data-efficiently.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-batch-insert-large-amounts-of-data-efficiently.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to batch insert large amounts of data efficiently"}],["meta",{"property":"og:description","content":"Article(s) > How to batch insert large amounts of data efficiently"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to batch insert large amounts of data efficiently\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.85,"words":555},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-batch-insert-large-amounts-of-data-efficiently.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{_ as comp,x as data};
