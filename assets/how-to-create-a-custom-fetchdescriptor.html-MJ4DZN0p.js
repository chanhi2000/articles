import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as s,t as i,e as n,n as t,g as e,f as l,r,o as u}from"./app-BgNevrm5.js";const d={},h={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},k=s("nav",{class:"table-of-contents"},[s("ul")],-1),f=s("hr",null,null,-1),w=l(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>SwiftData’s <code>FetchDescriptor</code> struct is similar to Core Data’s <code>NSFetchRequest</code>, allowing us to fetch a particular set of objects by specifying a model type, predicate, and sort order. However, it also gives us precise control over what’s fetched: you can set a limit of objects to fetch, prefetch relationships, and more.</p><p>In its simplest case, you issue a custom fetch request like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> fetchDescriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> movies <span class="token operator">=</span> <span class="token keyword">try</span> modelContext<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>fetchDescriptor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> movie <span class="token keyword">in</span> movies <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">movie<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to load Movie model.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That loads all instances of a <code>Movie</code> model, with no filtering or sorting applied. It <em>won’t</em> load any relationships automatically, and will instead load those only when you request them.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>If you issue a custom fetch immediately after inserting some data, any data linked through relationships won’t be visible even if you’ve manually called <code>save()</code>, and even if you specifically set <code>includePendingChanges</code> to true. Yes, when you call <code>save()</code> the data is written to disk immediately, but SwiftData seems to wait until the next runloop before making that data available for querying.</p></div><p>You can customize your fetch descriptor in all sorts of ways, and I want to show some code samples for each.</p><p>First, you can specify a custom sort order using one or more <code>SortDescriptor</code> objects in an array:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> fetchDescriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, you can filter your results using the <code>#Predicate</code> macro, so we could look for unreleased movies like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now</span>
<span class="line"><span class="token keyword">let</span> unreleasedMovies <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>predicate<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span> movie <span class="token keyword">in</span></span>
<span class="line">    movie<span class="token punctuation">.</span>releaseDate <span class="token operator">&gt;</span> now</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>In that sample we need to copy <code>Date.now</code> into a local value so SwiftData can turn it into a filter.</p></div><p>Third, you can limit the number of objects you want to read by creating your fetch descriptor as a variable then setting its <code>fetchLimit</code> property. This accepts an optional integer, where either <code>nil</code> or 0 both mean “fetch all objects”.</p><p>For example, we could ask for the three newest movies like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> fetchDescriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">fetchDescriptor<span class="token punctuation">.</span>fetchLimit <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This works great in combination with the <code>offset</code> parameter of fetch descriptors, which allow us to do paging – we can tell SwiftData to skip the first <em>n</em> results. This is helpful when you know you have many results, so rather than fetching everything at once you can instead fetch in pages of 50 or 100 at a time.</p><p>For example, if we had a page size of 100 and we were currently on the third page (counting from 0), we’d write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> pageSize <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"><span class="token keyword">let</span> pageNumber <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> fetchDescriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">fetchDescriptor<span class="token punctuation">.</span>fetchOffset <span class="token operator">=</span> pageNumber <span class="token operator">*</span> pageSize</span>
<span class="line">fetchDescriptor<span class="token punctuation">.</span>fetchLimit <span class="token operator">=</span> pageSize</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will set <code>fetchOffset</code> to 200 and <code>fetchLimit</code> to 100, meaning that SwiftData will attempt to return objects 201 to 300 in the results.</p><p>A fourth way to customize your fetch descriptor is by listing the properties you want to fetch. This is helpful for times when your objects are large: rather than loading the entire object into memory at once, you can instead request just the properties you intend to use.</p><p>For example, if you knew you wanted to show just the release dates and names of the latest movies, you could use this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> fetchDescriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">fetchDescriptor<span class="token punctuation">.</span>propertiesToFetch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span>releaseDate<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>If you don’t include a property in <code>propertiesToFetch</code> then later use it, SwiftData will automatically fetch the data at the point of use. This uses the same system of <em>faulting</em> that Core Data used – the properties you don’t request are filled with placeholders that automatically get substituted with their real data on request.</p><p>Another great performance optimization you can make is to set the <code>relationshipKeyPathsForPrefetching</code> property to an array of relationship properties you want to prefetch. This is empty by default because SwiftData doesn’t fetch relationships until they are used, but if you know you’ll use that data then prefetching allows SwiftData to batch request it all for more efficiently.</p><p>Continuing our movie example, we might be building a screen that shows the directors behind the most recent movies. If the director name were baked right into the <code>Movie</code> model then it would be fetched automatically unless we specifically requested otherwise, but if it were a relationship then we could prefetch it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> fetchDescriptor <span class="token operator">=</span> <span class="token class-name">FetchDescriptor</span><span class="token operator">&lt;</span><span class="token class-name">Movie</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>sortBy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>releaseDate<span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token punctuation">.</span>forward<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">fetchDescriptor<span class="token punctuation">.</span>relationshipKeyPathsForPrefetching <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>director<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The last customization point is <code>includePendingChanges</code>, which controls whether the fetch should include changes you’ve made that have yet to be saved. This defaults to true, and while there were one or two places you would want otherwise with Core Data I genuinely can’t see this being useful in SwiftData – I’d leave it alone, if I were you.</p></div>`,23);function v(o,g){const a=r("VPCard");return u(),c("div",null,[s("h1",h,[s("a",m,[s("span",null,i(o.$frontmatter.title)+" 관련",1)])]),n(a,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,f,n(a,t(e({title:"How to create a custom FetchDescriptor | SwiftData by Example",desc:"How to create a custom FetchDescriptor",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-create-a-custom-fetchdescriptor",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w])}const D=p(d,[["render",v],["__file","how-to-create-a-custom-fetchdescriptor.html.vue"]]),F=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-create-a-custom-fetchdescriptor.html","title":"How to create a custom FetchDescriptor","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to create a custom FetchDescriptor","description":"Article(s) > How to create a custom FetchDescriptor","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to create a custom FetchDescriptor"},{"property":"og:description","content":"How to create a custom FetchDescriptor"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-a-custom-fetchdescriptor.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-create-a-custom-fetchdescriptor.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to create a custom FetchDescriptor"}],["meta",{"property":"og:description","content":"Article(s) > How to create a custom FetchDescriptor"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to create a custom FetchDescriptor\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.16,"words":947},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-create-a-custom-fetchdescriptor.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{D as comp,F as data};
