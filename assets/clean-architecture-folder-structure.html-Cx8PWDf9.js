import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as e,t as d,e as t,n as u,g as h,w as s,d as n,f as m,r as i,o as v}from"./app-BgNevrm5.js";const g={},y={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},f=e("p",null,[e("strong",null,"Clean Architecture"),n(" is a popular approach to structuring your application.")],-1),b=e("p",null,"It's a layered architecture that splits the project into four layers:",-1),w={class:"table-of-contents"},A=m(`<p>Each of the layers is typically one project in your solution.</p><p>Here&#39;s a visual representation of the <strong>Clean Architecture</strong>:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_004/clean_architecture.png?imwidth=3840" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>How do we create this in our .NET solutions?</p><hr><h2 id="domain-layer" tabindex="-1"><a class="header-anchor" href="#domain-layer"><span>Domain Layer</span></a></h2><p>The <strong>Domain layer</strong> sits at the core of the <strong>Clean Architecture</strong>. Here we define things like: entities, value objects, aggregates, domain events, exceptions, repository interfaces, etc.</p><p>Here is the folder structure I like to use:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">📁 Domain</span>
<span class="line">|__ 📁 DomainEvents</span>
<span class="line">|__ 📁 Entities</span>
<span class="line">|__ 📁 Exceptions</span>
<span class="line">|__ 📁 Repositories</span>
<span class="line">|__ 📁 Shared</span>
<span class="line">|__ 📁 ValueObjects</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can introduce more things here if you think it&#39;s required.</p><p>One thing to note is that the <strong>Domain layer</strong> is not allowed to reference other projects in your solution.</p><hr><h2 id="application-layer" tabindex="-1"><a class="header-anchor" href="#application-layer"><span>Application Layer</span></a></h2><p>The <strong>Application layer</strong> sits right above the <strong>Domain layer</strong>. It acts as an orchestrator for the <strong>Domain layer</strong>, containing the most important use cases in your application.</p><p>You can structure your use cases using services or using commands and queries.</p><p>I&#39;m a big fan of the <strong>CQRS</strong> pattern, so I like to use the command and query approach.</p><p>Here is the folder structure I like to use:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">📁 Application</span>
<span class="line">|__ 📁 Abstractions</span>
<span class="line">    |__ 📁 Data</span>
<span class="line">    |__ 📁 Email</span>
<span class="line">    |__ 📁 Messaging</span>
<span class="line">|__ 📁 Behaviors</span>
<span class="line">|__ 📁 Contracts</span>
<span class="line">|__ 📁 Entity1</span>
<span class="line">    |__ 📁 Commands</span>
<span class="line">    |__ 📁 Events</span>
<span class="line">    |__ 📁 Queries</span>
<span class="line">|__ 📁 Entity2</span>
<span class="line">    |__ 📁 Commands</span>
<span class="line">    |__ 📁 Events</span>
<span class="line">    |__ 📁 Queries</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the <code>Abstractions</code> folder, I define the interfaces required for the <strong>Application layer</strong>. The implementations for these interfaces are in one of the upper layers.</p><p>For every entity in the <strong>Domain layer</strong>, I create one folder with the commands, queries, and events definitions.</p><hr><h2 id="infrastructure-layer" tabindex="-1"><a class="header-anchor" href="#infrastructure-layer"><span>Infrastructure Layer</span></a></h2><p>The <strong>Infrastructure layer</strong> contains implementations for external-facing services.</p><p>What would fall into this category?</p><ul><li>Databases - PostgreSQL, MongoDB</li><li>Identity providers - Auth0, Keycloak</li><li>Emails providers</li><li>Storage services - AWS S3, Azure Blob Storage</li><li>Message queues - Rabbit MQ</li></ul><p>Here is the folder structure I like to use:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">📁 Infrastructure</span>
<span class="line">|__ 📁 BackgroundJobs</span>
<span class="line">|__ 📁 Services</span>
<span class="line">    |__ 📁 Email</span>
<span class="line">    |__ 📁 Messaging</span>
<span class="line">|__ 📁 Persistence</span>
<span class="line">    |__ 📁 EntityConfigurations</span>
<span class="line">    |__ 📁 Migrations</span>
<span class="line">    |__ 📁 Repositories</span>
<span class="line">    |__ #️⃣ ApplicationDbContext.cs</span>
<span class="line">|__ 📁 ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I place my <code>DbContext</code> implementation here if I&#39;m using <strong>EF Core</strong>.</p><p>It&#39;s not uncommon to make the Persistence folder its project. I frequently do this to have all database facing-code inside of one project.</p><hr><h2 id="presentation-layer" tabindex="-1"><a class="header-anchor" href="#presentation-layer"><span>Presentation Layer</span></a></h2><p>The <strong>Presentation layer</strong> is the entry point to our system. Typically, you would implement this as a Web API project.</p><p>The most important part of the <strong>Presentation layer</strong> is the <code>Controllers</code>, which define the API endpoints in our system.</p><p>Here is the folder structure I like to use:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">📁 Presentation</span>
<span class="line">|__ 📁 Controllers</span>
<span class="line">|__ 📁 Middlewares</span>
<span class="line">|__ 📁 ViewModels</span>
<span class="line">|__ 📁 ...</span>
<span class="line">|__ #️⃣ Program.cs</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sometimes, I will move the <strong>Presentation layer</strong> away from the actual Web API project. I do this to isolate the <code>Controllers</code> and enforce stricter constraints. You don&#39;t have to do this if it is too complicated for you.</p><hr><h2 id="is-this-the-only-way" tabindex="-1"><a class="header-anchor" href="#is-this-the-only-way"><span>Is This The Only Way?</span></a></h2><p>You don&#39;t have to follow the folder structure I proposed to the T. <strong>Clean Architecture</strong> is very flexible, and you can experiment with it and structure it the way you like.</p><p>Do you like more granularity? Create more specific projects.</p><p>Do you dislike a lot of projects? Separate concerns using folders.</p><p>I&#39;m here to give you options to explore. But it&#39;s up to you to decide what&#39;s best.</p>`,42);function x(r,I){const o=i("VPCard"),l=i("SiteInfo"),a=i("router-link");return v(),p("div",null,[e("h1",y,[e("a",_,[e("span",null,d(r.$frontmatter.title)+" 관련",1)])]),t(o,u(h({title:"System Design > Article(s)",desc:"Article(s)",link:"/academcis/system-design/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(l,{name:"How To Approach Clean Architecture Folder Structure",desc:"Clean Architecture is a popular approach to structuring your .NET application. It's a layered architecture and splits into four layers: Domain, Application, Infrastructure, and Presentation. Each of the layers is typically one project in your solution. How do we create this in our .NET solutions?",url:"https://milanjovanovic.tech/blog/clean-architecture-folder-structure/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://www.milanjovanovic.tech/blog-covers/mnw_004.png"}),f,b,e("nav",w,[e("ul",null,[e("li",null,[t(a,{to:"#domain-layer"},{default:s(()=>[n("Domain Layer")]),_:1})]),e("li",null,[t(a,{to:"#application-layer"},{default:s(()=>[n("Application Layer")]),_:1})]),e("li",null,[t(a,{to:"#infrastructure-layer"},{default:s(()=>[n("Infrastructure Layer")]),_:1})]),e("li",null,[t(a,{to:"#presentation-layer"},{default:s(()=>[n("Presentation Layer")]),_:1})]),e("li",null,[t(a,{to:"#is-this-the-only-way"},{default:s(()=>[n("Is This The Only Way?")]),_:1})])])]),A])}const j=c(g,[["render",x],["__file","clean-architecture-folder-structure.html.vue"]]),k=JSON.parse('{"path":"/milanjovanovic.tech/clean-architecture-folder-structure.html","title":"How To Approach Clean Architecture Folder Structure","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Approach Clean Architecture Folder Structure","description":"Article(s) > How To Approach Clean Architecture Folder Structure","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How To Approach Clean Architecture Folder Structure"},{"property":"og:description","content":"How To Approach Clean Architecture Folder Structure"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/clean-architecture-folder-structure.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/clean-architecture-folder-structure.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Approach Clean Architecture Folder Structure"}],["meta",{"property":"og:description","content":"Article(s) > How To Approach Clean Architecture Folder Structure"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.milanjovanovic.tech/blog-covers/mnw_004.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.milanjovanovic.tech/blog-covers/mnw_004.png"}],["meta",{"name":"twitter:image:alt","content":"How To Approach Clean Architecture Folder Structure"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2022-09-24T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Approach Clean Architecture Folder Structure\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_004/clean_architecture.png?imwidth=3840\\"],\\"datePublished\\":\\"2022-09-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/academcis/system-designarticles/README.md","date":"2022-09-24T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://www.milanjovanovic.tech/blog-covers/mnw_004.png"},"headers":[{"level":2,"title":"Domain Layer","slug":"domain-layer","link":"#domain-layer","children":[]},{"level":2,"title":"Application Layer","slug":"application-layer","link":"#application-layer","children":[]},{"level":2,"title":"Infrastructure Layer","slug":"infrastructure-layer","link":"#infrastructure-layer","children":[]},{"level":2,"title":"Presentation Layer","slug":"presentation-layer","link":"#presentation-layer","children":[]},{"level":2,"title":"Is This The Only Way?","slug":"is-this-the-only-way","link":"#is-this-the-only-way","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.48,"words":745},"filePathRelative":"milanjovanovic.tech/clean-architecture-folder-structure.md","localizedDate":"2022년 9월 24일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{j as comp,k as data};
