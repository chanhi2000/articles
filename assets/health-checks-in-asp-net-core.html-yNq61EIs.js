import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,t as d,e as a,n as k,g,w as o,d as s,f as i,r as p,o as m}from"./app-BgNevrm5.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},C=n("hr",null,null,-1),q=i(`<p>We all want to build <strong>robust</strong> and <strong>reliable</strong> applications that can scale indefinitely and handle any number of requests.</p><p>But with <strong>distributed systems</strong> and <strong>microservices architectures</strong> growing in complexity, it&#39;s becoming increasingly harder to <strong>monitor</strong> the <strong>health</strong> of our applications.</p><p>It&#39;s vital that you have a system in place to receive quick feedback of your application <strong>health.</strong></p><p>That&#39;s where <strong>health checks</strong> come in.</p><p><strong>Health checks</strong> provide a way to monitor and verify the health of various components of an application including:</p><ul><li>Databases</li><li>APIs</li><li>Caches</li><li>External services</li></ul><p>Let&#39;s see how to implement <strong>health checks</strong> in <strong>ASP.NET Core</strong>.</p><hr><h2 id="what-are-health-checks" tabindex="-1"><a class="header-anchor" href="#what-are-health-checks"><span>What Are Health Checks?</span></a></h2><p><strong>Health checks</strong> are a proactive mechanism for monitoring and verifying the <strong>health</strong> and <strong>availability</strong> of an application in <strong>ASP.NET Core.</strong></p><p>ASP.NET Core has <strong>built-in support</strong> for implementing <strong>health checks.</strong></p><p>Here&#39;s the basic configuration, which registers the health check services and adds the <code>HealthCheckMiddleware</code> to respond at the specified URL.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">app<span class="token punctuation">.</span><span class="token function">MapHealthChecks</span><span class="token punctuation">(</span><span class="token string">&quot;/health&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The health check returns a <code>HealthStatus</code> value indicating the health of the service.</p><p>There are three distinct <code>HealthStatus</code> values:</p><ul><li><code>HealthStatus.Healthy</code></li><li><code>HealthStatus.Degraded</code></li><li><code>HealthStatus.Unhealthy</code></li></ul><p>You can use the <code>HealthStatus</code> to indicate the different states of your application.</p><p>For example, if the application is functioning slower than expected you can return <code>HealthStatus.Degraded</code>.</p><hr><h2 id="adding-custom-health-checks" tabindex="-1"><a class="header-anchor" href="#adding-custom-health-checks"><span>Adding Custom Health Checks</span></a></h2><p>You can create <strong>custom health checks</strong> by implementing the <code>IHealthCheck</code> interface.</p><p>For example, you can implement a check to see if your <strong>SQL</strong> database is available.</p><p>It&#39;s important to use a query that can complete quickly in the database, like <code>SELECT 1</code>.</p><p>Here&#39;s a <strong>custom health check</strong> implementation example in the <code>SqlHealthCheck</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlHealthCheck</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHealthCheck</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> _connectionString<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">SqlHealthCheck</span><span class="token punctuation">(</span><span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _connectionString <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;Database&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HealthCheckResult<span class="token punctuation">&gt;</span></span> <span class="token function">CheckHealthAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HealthCheckContext</span> context<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> sqlConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>_connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> sqlConnection<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> sqlConnection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;SELECT 1&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> command<span class="token punctuation">.</span><span class="token function">ExecuteScalarAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> HealthCheckResult<span class="token punctuation">.</span><span class="token function">Healthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> HealthCheckResult<span class="token punctuation">.</span><span class="token function">Unhealthy</span><span class="token punctuation">(</span></span>
<span class="line">                context<span class="token punctuation">.</span>Registration<span class="token punctuation">.</span>FailureStatus<span class="token punctuation">,</span></span>
<span class="line">                <span class="token named-parameter punctuation">exception</span><span class="token punctuation">:</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After you implement the <strong>custom health check</strong>, you need to register it.</p><p>The previous call to <code>AddHealthChecks</code> now becomes:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddCheck</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SqlHealthCheck<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;custom-sql&quot;</span><span class="token punctuation">,</span> HealthStatus<span class="token punctuation">.</span>Unhealthy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re giving it a custom name and setting which status to use as the failure result in <code>HealthCheckContext.Registration.FailureStatus</code>.</p><p>But stop and think for a moment.</p><p>Do you want to implement a <strong>custom health check</strong> on your own for <strong>every external service</strong> that you have?</p><p>Of course not! There&#39;s a better solution.</p><hr><h2 id="using-existing-health-check-libraries" tabindex="-1"><a class="header-anchor" href="#using-existing-health-check-libraries"><span>Using Existing Health Check Libraries</span></a></h2><p>Before you start implementing a custom <strong>health check</strong> for everything, you should first see if there&#39;s already an <strong>existing library.</strong></p>`,35),w={href:"https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"Xabaril/AspNetCore.Diagnostics.HealthChecks",-1),_=n("strong",null,"health check",-1),A=n("p",null,"Here are just a few examples:",-1),S=n("code",null,"AspNetCore.HealthChecks.SqlServer",-1),x=n("code",null,"AspNetCore.HealthChecks.Npgsql",-1),T=n("code",null,"AspNetCore.HealthChecks.Redis",-1),N=n("code",null,"AspNetCore.HealthChecks.RabbitMQ",-1),I=n("code",null,"AspNetCore.HealthChecks.Aws.S3",-1),E=n("li",null,[s("SignalR: "),n("code",null,"AspNetCore.HealthChecks.SignalR")],-1),R=i(`<p>Here&#39;s how to add health checks for <strong>PostgreSQL</strong> and <strong>RabbitMQ</strong>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddCheck</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SqlHealthCheck<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;custom-sql&quot;</span><span class="token punctuation">,</span> HealthStatus<span class="token punctuation">.</span>Unhealthy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token punctuation">.</span><span class="token function">AddNpgSql</span><span class="token punctuation">(</span>pgConnectionString<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">.</span><span class="token function">AddRabbitMQ</span><span class="token punctuation">(</span>rabbitConnectionString<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="formatting-health-checks-response" tabindex="-1"><a class="header-anchor" href="#formatting-health-checks-response"><span>Formatting Health Checks Response</span></a></h2><p>By default, the endpoint returning you <strong>health check</strong> status will return a string value representing a <code>HealthStatus</code>.</p><p>This isn&#39;t practical if you have <strong>multiple health checks</strong> configured, as you&#39;d want to view the health status individually per service.</p><p>To make matters worse, if one of the services is failing the entire response will return <code>Unhealthy</code> and you don&#39;t know what&#39;s causing the issue.</p><p>You can solve this by providing a <code>ResponsWriter</code>, and there&#39;s an existing one in the <code>AspNetCore.HealthChecks.UI.Client</code> library.</p><p>Let&#39;s install the <strong>NuGet</strong> package:</p><div class="language-pwsh line-numbers-mode" data-highlighter="prismjs" data-ext="pwsh" data-title="pwsh"><pre><code><span class="line">Install-Package AspNetCore.HealthChecks.UI.Client</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And you need to slightly update the call to <code>MapHealthChecks</code> to use the <code>ResponseWriter</code> coming from this library:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">MapHealthChecks</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;/health&quot;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HealthCheckOptions</span></span>
<span class="line highlighted">    <span class="token punctuation">{</span></span>
<span class="line highlighted">        ResponseWriter <span class="token operator">=</span> UIResponseWriter<span class="token punctuation">.</span>WriteHealthCheckUIResponse</span>
<span class="line highlighted">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After making these changes, here&#39;s what the response from the health check endpoint looks like:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unhealthy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;totalDuration&quot;</span><span class="token operator">:</span> <span class="token string">&quot;00:00:00.3285211&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;entries&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;npgsql&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;duration&quot;</span><span class="token operator">:</span> <span class="token string">&quot;00:00:00.1183517&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Healthy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;rabbitmq&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;duration&quot;</span><span class="token operator">:</span> <span class="token string">&quot;00:00:00.1189561&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Healthy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;custom-sql&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unable to connect to the database.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;duration&quot;</span><span class="token operator">:</span> <span class="token string">&quot;00:00:00.2431813&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;exception&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unable to connect to the database.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unhealthy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Application monitoring is important to track availability, resource usage, and changes to performance in your application.</p><p>I&#39;ve used <strong>health checks</strong> before to implement <strong>failover scenarios</strong> in a <strong>cloud deployment</strong>. When one application instance stops responding with a healthy result, a new one is created to continue serving requests.</p><p>It&#39;s easy to monitor the health of your ASP.NET Core applications by <strong>exposing health checks</strong> for your services.</p><p>You can decide to implement <strong>custom health checks</strong>, but first consider if there are <strong>existing solutions</strong>.</p><p>Thank you for reading, and have an awesome Saturday.</p>`,21);function P(c,j){const l=p("VPCard"),t=p("router-link"),r=p("SiteInfo"),e=p("FontIcon");return m(),h("div",null,[n("h1",b,[n("a",y,[n("span",null,d(c.$frontmatter.title)+" 관련",1)])]),a(l,k(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",f,[n("ul",null,[n("li",null,[a(t,{to:"#what-are-health-checks"},{default:o(()=>[s("What Are Health Checks?")]),_:1})]),n("li",null,[a(t,{to:"#adding-custom-health-checks"},{default:o(()=>[s("Adding Custom Health Checks")]),_:1})]),n("li",null,[a(t,{to:"#using-existing-health-check-libraries"},{default:o(()=>[s("Using Existing Health Check Libraries")]),_:1})]),n("li",null,[a(t,{to:"#formatting-health-checks-response"},{default:o(()=>[s("Formatting Health Checks Response")]),_:1})]),n("li",null,[a(t,{to:"#takeaway"},{default:o(()=>[s("Takeaway")]),_:1})])])]),C,a(r,{name:"Health Checks In ASP.NET Core For Monitoring Your Applications",desc:"We all want to build robust and reliable applications that can scale indefinitely and handle any number of requests. But with distributed systems and microservices architectures growing in complexity, it's becoming increasingly harder to monitor the health of our applications. It's vital that you have a system in place to receive quick feedback of your application health. That's where health checks come in. Health checks provide a way to monitor and verify the health of various components of an application including: - Databases - APIs - Caches - External services",url:"https://milanjovanovic.tech/blog/health-checks-in-asp-net-core/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_035.png"}),q,n("p",null,[s("In the "),n("a",w,[a(e,{icon:"iconfont icon-github"}),H]),s(" repository you can find a wide collection "),_,s(" packages for frequently used services and libraries.")]),A,n("ul",null,[n("li",null,[a(e,{icon:"iconfont icon-sqlserver"}),s("SQL Server: "),S]),n("li",null,[a(e,{icon:"iconfont icon-postgresql"}),s("Postgres: "),x]),n("li",null,[a(e,{icon:"iconfont icon-redis"}),s("Redis: "),T]),n("li",null,[a(e,{icon:"iconfont icon-rabbitmq"}),s("RabbitMQ: "),N]),n("li",null,[a(e,{icon:"fa-brands fa-aws"}),s("AWS S3: "),I]),E]),R])}const U=u(v,[["render",P],["__file","health-checks-in-asp-net-core.html.vue"]]),D=JSON.parse('{"path":"/milanjovanovic.tech/health-checks-in-asp-net-core.html","title":"Health Checks In ASP.NET Core For Monitoring Your Applications","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Health Checks In ASP.NET Core For Monitoring Your Applications","description":"Article(s) > Health Checks In ASP.NET Core For Monitoring Your Applications","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Health Checks In ASP.NET Core For Monitoring Your Applications"},{"property":"og:description","content":"Health Checks In ASP.NET Core For Monitoring Your Applications"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/health-checks-in-asp-net-core.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/health-checks-in-asp-net-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Health Checks In ASP.NET Core For Monitoring Your Applications"}],["meta",{"property":"og:description","content":"Article(s) > Health Checks In ASP.NET Core For Monitoring Your Applications"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_035.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_035.png"}],["meta",{"name":"twitter:image:alt","content":"Health Checks In ASP.NET Core For Monitoring Your Applications"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2023-04-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Health Checks In ASP.NET Core For Monitoring Your Applications\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_035.png\\"],\\"datePublished\\":\\"2023-04-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2023-04-29T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_035.png"},"headers":[{"level":2,"title":"What Are Health Checks?","slug":"what-are-health-checks","link":"#what-are-health-checks","children":[]},{"level":2,"title":"Adding Custom Health Checks","slug":"adding-custom-health-checks","link":"#adding-custom-health-checks","children":[]},{"level":2,"title":"Using Existing Health Check Libraries","slug":"using-existing-health-check-libraries","link":"#using-existing-health-check-libraries","children":[]},{"level":2,"title":"Formatting Health Checks Response","slug":"formatting-health-checks-response","link":"#formatting-health-checks-response","children":[]},{"level":2,"title":"Takeaway","slug":"takeaway","link":"#takeaway","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":3.57,"words":1070},"filePathRelative":"milanjovanovic.tech/health-checks-in-asp-net-core.md","localizedDate":"2023년 4월 29일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{U as comp,D as data};
