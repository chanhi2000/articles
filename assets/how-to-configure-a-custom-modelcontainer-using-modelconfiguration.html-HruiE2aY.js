import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as n,t as p,e as s,n as t,g as e,f as l,r,o as u}from"./app-BgNevrm5.js";const d={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),h=n("hr",null,null,-1),f=l(`<blockquote><p>Updated for Xcode 16</p></blockquote><p>When you use <code>modelContainer(for:)</code> you get a default configuration, which means SwiftData decides where your database is stored, enables autosave, disables undo, and more. You can override some of these by using overloads of the <code>modelContainer()</code> modifier, but for complete control you need to create a <code>ModelConfiguration</code> instance by hand, then use that to create your container.</p><p>For example, if you wanted to write to an exact file in your documents directory rather than the default location, you would use code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@main</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">RecipeBookApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> container<span class="token punctuation">:</span> <span class="token class-name">ModelContainer</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> storeURL <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span>documentsDirectory<span class="token punctuation">.</span><span class="token function">appending</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;database.sqlite&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> storeURL<span class="token punctuation">)</span></span>
<span class="line">            container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Recipe</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to configure SwiftData container.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">modelContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One big advantage to creating your configuration by hand is that it allows us to disable saving entirely – if you have particularly sensitive data, or perhaps you’ve shipped some template data that shouldn’t be changed under any circumstances.</p><p>You can disable saving like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>allowsSave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>ModelConfiguration</code> initializers expose most of the options you can use with <code>ModelContext</code>, including schema, CloudKit containers, and more. For example, you could create a configuration that loads specific model types, writes to a custom database file, and connects to a particular CloudKit database name, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> storeURL <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span>documentsDirectory<span class="token punctuation">.</span><span class="token function">appending</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;database.sqlite&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> schema <span class="token operator">=</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Recipe</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ModelConfiguration</span><span class="token punctuation">(</span>schema<span class="token punctuation">:</span> schema<span class="token punctuation">,</span> url<span class="token punctuation">:</span> storeURL<span class="token punctuation">,</span> cloudKitDatabase<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;pastalavista&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">container <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ModelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> schema<span class="token punctuation">,</span> configurations<span class="token punctuation">:</span> config<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The power of this approach is that you can use multiple <code>ModelConfiguration</code> objects to configure a single model container – perhaps you want recipe data to be stored in one file and user data to be stored in another, or perhaps one should back up to CloudKit whereas the other shouldn’t.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Irrespective of which set of configurations you use, you must still make sure you send the full list of model types to your <code>ModelContainer</code> initializer, either explicitly by listing them all or implicitly through relationships.</p></div>`,11);function w(o,v){const a=r("VPCard");return u(),c("div",null,[n("h1",m,[n("a",k,[n("span",null,p(o.$frontmatter.title)+" 관련",1)])]),s(a,t(e({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),g,h,s(a,t(e({title:"How to configure a custom ModelContainer using ModelConfiguration | SwiftData by Example",desc:"How to configure a custom ModelContainer using ModelConfiguration",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-configure-a-custom-modelcontainer-using-modelconfiguration",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f])}const C=i(d,[["render",w],["__file","how-to-configure-a-custom-modelcontainer-using-modelconfiguration.html.vue"]]),M=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-configure-a-custom-modelcontainer-using-modelconfiguration.html","title":"How to configure a custom ModelContainer using ModelConfiguration","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to configure a custom ModelContainer using ModelConfiguration","description":"Article(s) > How to configure a custom ModelContainer using ModelConfiguration","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to configure a custom ModelContainer using ModelConfiguration"},{"property":"og:description","content":"How to configure a custom ModelContainer using ModelConfiguration"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-configure-a-custom-modelcontainer-using-modelconfiguration.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-configure-a-custom-modelcontainer-using-modelconfiguration.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to configure a custom ModelContainer using ModelConfiguration"}],["meta",{"property":"og:description","content":"Article(s) > How to configure a custom ModelContainer using ModelConfiguration"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to configure a custom ModelContainer using ModelConfiguration\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.64,"words":492},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-configure-a-custom-modelcontainer-using-modelconfiguration.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{C as comp,M as data};
