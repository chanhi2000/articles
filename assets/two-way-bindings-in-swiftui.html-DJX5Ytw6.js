import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,b as t,t as h,e as n,n as e,g as a,d as i,f as l,r as o,o as w}from"./app-BgNevrm5.js";const g={},m={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},f=t("nav",{class:"table-of-contents"},[t("ul")],-1),b=t("hr",null,null,-1),y=t("blockquote",null,[t("p",null,"Updated for Xcode 15")],-1),v=l("<p>If you look in the SwiftUI preview window you&#39;ll see the standard iOS picker interface – a pop up menu of options. By default it will show the first option, because it reads the value of <code>paymentType</code>, which we set to “Cash”. However, when the user brings up the menu their selection changes – they might select “Credit Card” or “iDine Points” instead of cash.</p><p>So, this picker doesn&#39;t just <em>read</em> the value of <code>paymentType</code>, it also <em>writes</em> the value. This is what&#39;s called a two-way binding, because any changes to the value of <code>paymentType</code> will update the picker, and any changes to the picker will update <code>paymentType</code>.</p><p>This is where the dollar sign comes in: Swift property wrappers use that to provide two-way bindings to their data, so when we say <code>$paymentType</code> SwiftUI will write the value using the property wrapper, which will in turn stash it away and cause the UI to refresh automatically.</p><p>At first glance all these @ and $s might seem a bit un-Swifty, and it&#39;s true that if you&#39;re coming from UIKit you might not used to working in this way. However, they allow us to get features that would otherwise require a lot of hassle:</p><ul><li>Without <code>@State</code> we wouldn&#39;t be able to change properties in our structs, because structs are fixed values.</li><li>Without <code>StateObject</code> we wouldn&#39;t be able to create classes that stay alive for the duration of our app.</li><li>Without <code>@EnvironmentObject</code> we wouldn&#39;t be able to receive shared data from elsewhere in our app.</li><li>Without <code>ObservableObject</code> we wouldn&#39;t be notified when an external value changes.</li><li>Without <code>$property</code> two-way bindings we would need to update values by hand.</li></ul>",5),x=t("code",null,"OrderView.swift",-1),S=t("code",null,"CheckoutView",-1),I=l(`<p>Find this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Place Order&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Check out&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And replace it with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Place Order&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">CheckoutView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Try running the app now, then go to the Order tab and press Place Order. The result is… well, less than perfect, let&#39;s put it that way. And that&#39;s despite putting in quite a lot of work just to get <em>this</em> far.</p>`,5),T=t("code",null,"CheckoutView.swift",-1),_=l(`<p>Inside <code>CheckoutView</code>, I&#39;d like you to change <code>VStack</code> to <code>Form</code>, then press <kbd>Cmd</kbd>+<kbd>R</kbd> to try the app again. Can you spot the difference?</p><p>Previously we had a plain pop up menu with no title, but now that we&#39;re in a form we get a single table row that shows our picker&#39;s title alongside its currently selected value.</p><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/2-13~dark.png" alt="SwiftUI has adapted our form to show the picture as a single row in a form." tabindex="0" loading="lazy"><figcaption>SwiftUI has adapted our form to show the picture as a single row in a form.</figcaption></figure><p>This is the power of SwiftUI&#39;s declarative approach to user interfaces: we say what behavior we want rather than the precise styling of it, and SwiftUI will automatically adapt it according to the context where it&#39;s used.</p><p>Let&#39;s continue on with our form by adding two more components: one that lets users select whether they have an iDine loyalty card, and another that lets them enter their card number. Both of these need two-way bindings just like our picker, so let&#39;s start with two new <code>@State</code> properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> addLoyaltyDetails <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> loyaltyNumber <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can add controls to our form to represent those – <code>Toggle</code> is the equivalent of a <code>UISwitch</code>, and <code>TextField</code> is the equivalent of <code>UITextField</code>. Add these two inside our existing form section:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add iDine loyalty card&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $addLoyaltyDetails<span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enter your iDine ID&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $loyaltyNumber<span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>There&#39;s not a lot of code there, but it&#39;s worth mentioning some details:</p><ol><li>Both controls are bound to those <code>@State</code> properties we just made.</li><li>The <code>Toggle</code> switch has some text inside that will automatically appear to the left as a description.</li><li>The <code>TextField</code> has some placeholder text so users know what to type in there.</li></ol><p>Before you run the app, there&#39;s another change I&#39;d like to talk about first. That text field we just added – should it <em>always</em> be there, or only when the toggle switch is enabled?</p><p>We bound <code>Toggle</code> to the value of <code>addLoyaltyDetails</code>, which means when the user flicks it on or off that Boolean gets set to true or false. Wouldn&#39;t it be great if the text field was visible only when the toggle was on?</p><p>Well, it turns out that&#39;s pretty easy to do. Try wrapping the text field in a condition:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add iDine loyalty card&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $addLoyaltyDetails<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> addLoyaltyDetails <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enter your iDine ID&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $loyaltyNumber<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you run the program now you&#39;ll see that changing the state of the toggle shows or hides the text field. If you think it through this should all make sense:</p><ul><li>The toggle has a two-way binding to the <code>addLoyaltyDetails</code> property.</li><li>That means when the toggle is changed, the property updates.</li><li>That property is marked with <code>@State</code>.</li><li>When any <code>@State</code> or <code>@EnvironmentObject</code> changes its value, SwiftUI will re-invoke the <code>body</code> property.</li><li>That <code>body</code> property directly reads the value of <code>addLoyaltyDetails</code> to decide whether the text field is created or not.</li></ul><p>For an improved effect, modify the binding on the <code>Toggle</code> so that it animates any changes it causes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add iDine loyalty card&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $addLoyaltyDetails<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will cause the loyalty card row to slide in and out smoothly.</p><p>Let&#39;s try another common control: segmented controls. In SwiftUI this is actually just a <code>Picker</code> with a modifier, so it works in exactly the same way – we give it a two-way binding that stores its selection, then use a <code>ForEach</code> to loop over an array to create some options to choose from.</p><p>For this screen, we can use a segmented control to represent various tip percentages that the user can select from. So, first add this property to store the options we want to show:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tipAmounts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now add this property to store the selected tip amount:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> tipAmount <span class="token operator">=</span> <span class="token number">15</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can now put all that into a segmented control in our form. I&#39;m going to put this into a new section in our form, because it lets us add a title that makes the UI clearer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add a tip?&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Percentage:&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $tipAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tipAmounts<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">%&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>segmented<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to add one more component to our form, which is a button to actually confirm the order. We&#39;ll come back to its exact functionality in just a moment, because there are other things we need to look at first.</p><p>Here&#39;s the final section for the table:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Total: $100&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Confirm order&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// place the order</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, I know the total order value is wrong, but just run the app for now.</p><p>We added a button inside <code>ItemDetail</code> and it was blue text on a clear background, centered on the screen. Now we have a button in our form, and it&#39;s different: it&#39;s blue text, left aligned, and if you tap it the whole row flashes gray. This is another example of the way SwiftUI&#39;s forms system changes the design and behavior of components inside it.</p>`,31),U={class:"hint-container details"},q=t("summary",null,"Further reading",-1),j={class:"hint-container details"},A=t("summary",null,"Similar solutions…",-1);function E(p,D){const s=o("VPCard"),r=o("VidStack"),c=o("FontIcon");return w(),u("div",null,[t("h1",m,[t("a",k,[t("span",null,h(p.$frontmatter.title)+" 관련",1)])]),n(s,e(a({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),f,b,n(s,e(a({title:"Two-way bindings in SwiftUI | SwiftUI by Example",desc:"Two-way bindings in SwiftUI",link:"https://hackingwithswift.com/quick-start/swiftui/two-way-bindings-in-swiftui",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n(r,{src:"youtube/7AY3v2woKio"}),v,t("p",null,[i("Anyway, that's our basic picker complete, so if we return to "),n(c,{icon:"fa-brands fa-swift"}),x,i(" we can update our code so that it shows our new "),S,i(" struct rather than some text saying “Checkout”.")]),I,t("p",null,[i("Well, we're going to change just one word in "),n(c,{icon:"fa-brands fa-swift"}),T,i(", and it should make all that work feel justified.")]),_,t("details",U,[q,n(s,e(a({title:"Working with forms | SwiftUI by Example",desc:"Working with forms",link:"/hackingwithswift.com/swiftui/working-with-forms.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Basic form design | SwiftUI by Example",desc:"Basic form design",link:"/hackingwithswift.com/swiftui/basic-form-design.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"How to create a toggle switch | SwiftUI by Example",desc:"How to create a toggle switch",link:"/hackingwithswift.com/swiftui/how-to-create-a-toggle-switch.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"How to read text from a TextField | SwiftUI by Example",desc:"How to read text from a TextField",link:"/hackingwithswift.com/swiftui/how-to-read-text-from-a-textfield.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"How to animate changes in binding values | SwiftUI by Example",desc:"How to animate changes in binding values",link:"/hackingwithswift.com/swiftui/how-to-animate-changes-in-binding-values.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"How to create a segmented control and read values from it | SwiftUI by Example",desc:"How to create a segmented control and read values from it",link:"/hackingwithswift.com/swiftui/how-to-create-a-segmented-control-and-read-values-from-it.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)]),t("details",j,[A,n(s,e(a({title:"How to create constant bindings | SwiftUI by Example",desc:"How to create constant bindings",link:"/hackingwithswift.com/swiftui/how-to-create-constant-bindings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"How to create custom bindings | SwiftUI by Example",desc:"How to create custom bindings",link:"/hackingwithswift.com/swiftui/how-to-create-custom-bindings.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Bindings and forms | SwiftUI by Example",desc:"Bindings and forms",link:"/hackingwithswift.com/swiftui/bindings-and-forms.html",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"SwiftUI tips and tricks | SwiftUI by Example",desc:"SwiftUI tips and tricks",link:"/hackingwithswift.com/swiftui/swiftui-tips-and-tricks.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(s,e(a({title:"Answering the big question: should you learn SwiftUI, UIKit, or both? | SwiftUI by Example",desc:"Answering the big question: should you learn SwiftUI, UIKit, or both?",link:"/hackingwithswift.com/swiftui/answering-the-big-question-should-you-learn-swiftui-uikit-or-both.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const F=d(g,[["render",E],["__file","two-way-bindings-in-swiftui.html.vue"]]),H=JSON.parse('{"path":"/hackingwithswift.com/swiftui/two-way-bindings-in-swiftui.html","title":"Two-way bindings in SwiftUI","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Two-way bindings in SwiftUI","description":"Article(s) > Two-way bindings in SwiftUI","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Two-way bindings in SwiftUI"},{"property":"og:description","content":"Two-way bindings in SwiftUI"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/two-way-bindings-in-swiftui.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/two-way-bindings-in-swiftui.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Two-way bindings in SwiftUI"}],["meta",{"property":"og:description","content":"Article(s) > Two-way bindings in SwiftUI"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/2-13~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Two-way bindings in SwiftUI\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/2-13~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.96,"words":1788},"filePathRelative":"hackingwithswift.com/swiftui/two-way-bindings-in-swiftui.md","excerpt":"\\n"}');export{F as comp,H as data};
