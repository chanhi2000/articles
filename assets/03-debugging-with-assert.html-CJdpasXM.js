import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as e,t as p,e as t,n as s,g as n,f as h,r as o,o as u}from"./app-BgNevrm5.js";const d={},g={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},w=e("nav",{class:"table-of-contents"},[e("ul")],-1),f=e("hr",null,null,-1),y=h(`<p>One level up from <code>print()</code> are assertions, which are debug-only checks that will force your app to crash if a specific condition isn&#39;t true.</p><p>On the surface, that sounds terrible: why would you want your app to crash? There are two reasons. First, sometimes making your app crash is the Least Bad Option: if something has gone catastrophically wrong â€“ if some fundamentally important file is not where it should be â€“ then it may be the case that continuing your app will cause irreparable harm to user data, in which case crashing, while a bad result, is better than losing data.</p><p>Second, these assertion crashes only happen while youâ€™re debugging. When you build a release version of your app â€“ i.e., when you ship your app to the App Store â€“ Xcode automatically disables your assertions so they wonâ€™t reach your users. This means you can set up an extremely strict environment while youâ€™re developing, ensuring that all values are present and correct, without causing problems for real users.</p><p>Here&#39;s a very basic example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Maths failure!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Maths failure!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see <code>assert()</code> takes two parameters: something to check, and a message to print out of the check fails. If the check evaluates to false, your app will be forced to crash because you know it&#39;s not in a safe state, and you&#39;ll see the error message in the debug console. You can â€“ and should! â€“ add these assertions liberally to your code, because they help guarantee that your codeâ€™s state is what you think it is.</p><p>The advantage to assertions is that their check code is never executed in a live app, so your users are never aware of their presence. This is different from <code>print()</code>, which would remain in your code if you shipped it, albeit mostly invisible. In fact, because calls to <code>assert()</code> are ignored in release builds of your app, you can do complex checks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">myReallySlowMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;The slow method returned false, which is a bad thing!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That <code>myReallySlowMethod()</code> call will execute only while youâ€™re running test builds â€“ that code will be removed entirely when you build for the App Store.</p><p>So: assertions are like running your code in strict mode. If your app works great with assertions on â€“ things that literally make your app crash if things are wrong â€“ then it will work even better in release mode.</p>`,10);function b(i,k){const a=o("VPCard"),r=o("VidStack");return u(),l("div",null,[e("h1",g,[e("a",m,[e("span",null,p(i.$frontmatter.title)+" ê´€ë ¨",1)])]),t(a,s(n({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),w,f,t(a,s(n({title:"Debugging with assert() | Hacking with iOS",desc:"Debugging with assert()",link:"https://hackingwithswift.com/read/18/3/debugging-with-assert",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(r,{src:"youtube/2GkNf9XZN5I"}),y])}const S=c(d,[["render",b],["__file","03-debugging-with-assert.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/read/18/03-debugging-with-assert.html","title":"Debugging with assert()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Debugging with assert()","description":"Article(s) > Debugging with assert()","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Debugging with assert()"},{"property":"og:description","content":"Debugging with assert()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/18/03-debugging-with-assert.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/18/03-debugging-with-assert.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Debugging with assert()"}],["meta",{"property":"og:description","content":"Article(s) > Debugging with assert()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Debugging with assert()\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.8,"words":539},"filePathRelative":"hackingwithswift.com/read/18/03-debugging-with-assert.md","excerpt":"\\n"}');export{S as comp,x as data};
