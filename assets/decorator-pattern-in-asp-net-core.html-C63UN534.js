import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as n,t as m,e as a,n as h,g as k,w as o,d as s,f as p,r as e,o as v}from"./app-BgNevrm5.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},f=n("hr",null,null,-1),_=p(`<p>Let&#39;s imagine we have an existing <code>Repository</code> implementation, and we want to introduce caching to reduce the load on the database.</p><p>How can we achieve this without changing the original <code>Repository</code> implementation?</p><p><strong>Decorator pattern</strong> is a structural design pattern that allows you to introduce new behavior to an existing class, without modifying the original class in any way.</p><p>I&#39;ll show you how you can implement this with the <strong>ASP.NET Core DI</strong> container.</p><hr><h2 id="how-to-implement-the-decorator-pattern" tabindex="-1"><a class="header-anchor" href="#how-to-implement-the-decorator-pattern"><span>How To Implement The Decorator Pattern</span></a></h2><p>We&#39;ll start with an existing <code>MemberRepository</code> implementation that implements the <code>IMemberRepository</code> interface.</p><p>It has only one method, which loads the <code>Member</code> from the database.</p><p>Here&#39;s what the implementation looks like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMemberRepository</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Member</span> <span class="token function">GetById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMemberRepository</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">DatabaseContext</span> _dbContext<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">MemberRepository</span><span class="token punctuation">(</span><span class="token class-name">DatabaseContext</span> dbContext<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _dbContext <span class="token operator">=</span> dbContext<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Member</span> <span class="token function">GetById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _dbContext</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Member<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>member <span class="token operator">=&gt;</span> member<span class="token punctuation">.</span>Id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We want to introduce caching to the <code>MemberRepository</code> implementation without modifying the existing class.</p><p>To achieve this, we can use the <strong>Decorator pattern</strong> and create a wrapper around our <code>MemberRepository</code> implementation.</p><p>We can create a <code>CachingMemberRepository</code> that will have a dependency on <code>IMemberRepository</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingMemberRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMemberRepository</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMemberRepository</span> _repository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMemoryCache</span> _cache<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">CachingMemberRepository</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IMemberRepository</span> repository<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IMemoryCache</span> cache<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _repository <span class="token operator">=</span> repository<span class="token punctuation">;</span></span>
<span class="line">        _cache <span class="token operator">=</span> cache<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Member</span> <span class="token function">GetById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> key <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;members-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> _cache<span class="token punctuation">.</span><span class="token function">GetOrCreate</span><span class="token punctuation">(</span></span>
<span class="line">            key<span class="token punctuation">,</span></span>
<span class="line">            entry <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                entry<span class="token punctuation">.</span><span class="token function">SetAbsouluteExpiration</span><span class="token punctuation">(</span></span>
<span class="line">                    TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">return</span> _repository<span class="token punctuation">.</span><span class="token function">GetById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now I&#39;m going to show you the power of <strong>ASP.NET Core DI</strong>.</p><p>We will configure the <code>IMemberRepository</code> to resolve an instance of <code>CachingMemberRepository</code>, while it will receive the <code>MemberRepository</code> instance as its dependency.</p><hr><h2 id="configuring-the-decorator-in-asp-net-core-di" tabindex="-1"><a class="header-anchor" href="#configuring-the-decorator-in-asp-net-core-di"><span>Configuring The Decorator In ASP .NET Core DI</span></a></h2><p>For the DI container to be able to resolve <code>IMemberRepository</code> as <code>CachingMemberRepository</code>, we need to manually configure the service.</p><p>We can use the overload that exposes a service provider, that we will use to resolve the services required to construct a <code>MemberRepository</code>.</p><p>Here&#39;s what the configuration would look like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMemberRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>provider <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DatabaseContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> cache <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMemoryCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CachingRepository</span><span class="token punctuation">(</span></span>
<span class="line">         <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemberRepository</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">         cache<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can inject the <code>IMemberRepository</code>, and the DI will be able to resolve an instance of <code>CachingMemberRepository</code>.</p><hr><h2 id="configuring-the-decorator-with-scrutor" tabindex="-1"><a class="header-anchor" href="#configuring-the-decorator-with-scrutor"><span>Configuring The Decorator With Scrutor</span></a></h2><p>If the previous approach seems <em>cumbersome</em> to you and like a lot of manual work - that&#39;s because it is.</p><p>However, there is a simpler way to achieve the same behavior.</p>`,27),I={href:"https://github.com/khellang/Scrutor",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"khellang/Scrutor",-1),M=p(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMemberRepository<span class="token punctuation">,</span> MemberRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Decorate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMemberRepository<span class="token punctuation">,</span> CachingMemberRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),R={href:"https://github.com/khellang/Scrutor",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"khellang/Scrutor",-1),P=n("code",null,"Decorate",-1),S=n("code",null,"Decorate",-1),T=n("code",null,"CachingMemberRepository",-1),x=n("code",null,"MemberRepository",-1),A=n("p",null,"I think this approach is much simpler, and it's what I use in my projects.",-1);function N(i,E){const l=e("VPCard"),t=e("router-link"),r=e("SiteInfo"),c=e("FontIcon");return v(),d("div",null,[n("h1",b,[n("a",y,[n("span",null,m(i.$frontmatter.title)+" 관련",1)])]),a(l,h(k({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[a(t,{to:"#how-to-implement-the-decorator-pattern"},{default:o(()=>[s("How To Implement The Decorator Pattern")]),_:1})]),n("li",null,[a(t,{to:"#configuring-the-decorator-in-asp-net-core-di"},{default:o(()=>[s("Configuring The Decorator In ASP .NET Core DI")]),_:1})]),n("li",null,[a(t,{to:"#configuring-the-decorator-with-scrutor"},{default:o(()=>[s("Configuring The Decorator With Scrutor")]),_:1})])])]),f,a(r,{name:"Decorator Pattern In ASP.NET Core",desc:"Let's imagine we have an existing Repository implementation, and we want to introduce caching to reduce the load on the database. How can we achieve this without changing anything about the Repository implementation? Decorator pattern is a structural design pattern that allows you to introduce new behavior to an existing class, without modifying the original class in any way. I'll show you how you can implement this with the ASP.NET Core DI container.",url:"https://milanjovanovic.tech/blog/decorator-pattern-in-asp-net-core/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://www.milanjovanovic.tech/blog-covers/mnw_006.png"}),_,n("p",null,[s("We can use the "),n("a",I,[s("Scrutor ("),a(c,{icon:"iconfont icon-github"}),C,s(")")]),s(" library to register the decorator:")]),M,n("p",null,[n("a",R,[s("Scrutor ("),a(c,{icon:"iconfont icon-github"}),D,s(")")]),s(" exposes the "),P,s(" method. The call to "),S,s(" will register the "),T,s(" while ensuring that it receives the expected "),x,s(" instance as its dependency.")]),A])}const B=u(g,[["render",N],["__file","decorator-pattern-in-asp-net-core.html.vue"]]),H=JSON.parse('{"path":"/milanjovanovic.tech/decorator-pattern-in-asp-net-core.html","title":"Decorator Pattern In ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Decorator Pattern In ASP.NET Core","description":"Article(s) > Decorator Pattern In ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Decorator Pattern In ASP.NET Core"},{"property":"og:description","content":"Decorator Pattern In ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/decorator-pattern-in-asp-net-core.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/decorator-pattern-in-asp-net-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Decorator Pattern In ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Decorator Pattern In ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.milanjovanovic.tech/blog-covers/mnw_006.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.milanjovanovic.tech/blog-covers/mnw_006.png"}],["meta",{"name":"twitter:image:alt","content":"Decorator Pattern In ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2022-10-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Decorator Pattern In ASP.NET Core\\",\\"image\\":[\\"https://www.milanjovanovic.tech/blog-covers/mnw_006.png\\"],\\"datePublished\\":\\"2022-10-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"]],"prev":"/programming/cs/articles/README.md","date":"2022-10-08T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://www.milanjovanovic.tech/blog-covers/mnw_006.png"},"headers":[{"level":2,"title":"How To Implement The Decorator Pattern","slug":"how-to-implement-the-decorator-pattern","link":"#how-to-implement-the-decorator-pattern","children":[]},{"level":2,"title":"Configuring The Decorator In ASP .NET Core DI","slug":"configuring-the-decorator-in-asp-net-core-di","link":"#configuring-the-decorator-in-asp-net-core-di","children":[]},{"level":2,"title":"Configuring The Decorator With Scrutor","slug":"configuring-the-decorator-with-scrutor","link":"#configuring-the-decorator-with-scrutor","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.26,"words":679},"filePathRelative":"milanjovanovic.tech/decorator-pattern-in-asp-net-core.md","localizedDate":"2022년 10월 8일","excerpt":"\\n","copyright":{"author":"Milan Jovanović"}}');export{B as comp,H as data};
