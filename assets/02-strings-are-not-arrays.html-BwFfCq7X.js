import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,t as l,e as t,n as s,g as e,f as u,r as i,o as d}from"./app-BgNevrm5.js";const h={},m={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},k=n("nav",{class:"table-of-contents"},[n("ul")],-1),f=n("hr",null,null,-1),y=u(`<p>One of the things that confuses learners is that Swiftâ€™s strings look like arrays of letters, but thatâ€™s not really true.</p><p>Sure, we can loop over them like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> letter <span class="token keyword">in</span> name <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Give me a </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">letter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, we <em>canâ€™t</em> read individual letters from the string. So, this kind of code wonâ€™t work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The reason for this is that letters in a string arenâ€™t just a series of alphabetical characters â€“ they can contain accents such as Ã¡, Ã©, Ã­, Ã³, or Ãº, they can contain combining marks that generate wholly new characters by building up symbols, or they can even be emoji.</p><p>Because of this, if you want to read the fourth character of <code>name</code> you need to start at the beginning and count through each letter until you come to the one youâ€™re looking for:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> letter <span class="token operator">=</span> name<span class="token punctuation">[</span>name<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>startIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Apple could change this easily enough by adding a rather complex extension like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">subscript</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">[</span><span class="token function">index</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, we can now read <code>name[3]</code> just fine. However, it creates the possibility that someone might write code that loops over a string reading individual letters, which they might not realize creates a loop within a loop and has the potential to be slow.</p><p>Similarly, reading <code>name.count</code> isnâ€™t a quick operation: Swift literally needs to go over every letter counting up however many there are, before returning that. As a result, itâ€™s always better to use <code>someString.isEmpty</code> rather than <code>someString.count == 0</code> if youâ€™re looking for an empty string.</p>`,12);function w(o,v){const a=i("VPCard"),r=i("VidStack");return d(),p("div",null,[n("h1",m,[n("a",g,[n("span",null,l(o.$frontmatter.title)+" ê´€ë ¨",1)])]),t(a,s(e({title:"Hacking with iOS â€“ learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials â€“ learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),k,f,t(a,s(e({title:"Strings are not arrays | Hacking with iOS",desc:"Strings are not arrays",link:"https://hackingwithswift.com/read/24/2/strings-are-not-arrays",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),t(r,{src:"youtube/oeKUmAgyOdw"}),y])}const _=c(h,[["render",w],["__file","02-strings-are-not-arrays.html.vue"]]),x=JSON.parse('{"path":"/hackingwithswift.com/read/24/02-strings-are-not-arrays.html","title":"Strings are not arrays","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Strings are not arrays","description":"Article(s) > Strings are not arrays","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Strings are not arrays"},{"property":"og:description","content":"Strings are not arrays"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/24/02-strings-are-not-arrays.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/24/02-strings-are-not-arrays.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Strings are not arrays"}],["meta",{"property":"og:description","content":"Article(s) > Strings are not arrays"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Strings are not arrays\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.4,"words":421},"filePathRelative":"hackingwithswift.com/read/24/02-strings-are-not-arrays.md","excerpt":"\\n"}');export{_ as comp,x as data};
