import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,b as n,t as _,e as t,n as u,g as m,w as s,f as p,r as c,o as f,d as e}from"./app-BgNevrm5.js";const y={},b={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},I=n("hr",null,null,-1),x=p('<p>우리가 어떤 사람을 만났을 때, 첫인상이 그 사람의 이미지를 결정할 때가 많습니다. 코드 또한 마찬가지입니다. 프로그래밍에서 &#39;코드 스타일&#39;은 그 코드의 첫인상이 됩니다. 통일된 스타일로 작성된 코드는 깔끔하고 전문적이라는 이미지를 주고, 코드를 읽는 사람에게 좋은 인상을 남길 수 있죠. 그러나 현업에서 일하다 보면 코드 스타일보다 코드 내용에 집중하게 될 때가 더 많은데요, 자연스럽게 코드 스타일에는 소홀해지기 마련입니다.</p><figure><img src="https://yozm.wishket.com/media/news/2499/code-style.jpg" alt="Google Gemini" tabindex="0" loading="lazy"><figcaption>Google Gemini</figcaption></figure><p>그러나 좋은 코드를 작성하기 위해서는 코드 스타일도 신경 써야 합니다. 통일된 스타일로 작성된 코드는 그렇지 않은 코드보다 가독성이 높습니다. 이름, 인덴트 등 대략적인 부분만 보더라도, 해당 부분이 어떤 역할을 하는지 판단할 수 있기 때문입니다. 일관된 코드 스타일은 코드를 읽는 사람으로 하여금, 코드의 의도를 빠르게 파악하고 원하는 정보를 쉽게 찾을 수 있도록 도와줍니다.</p><p>이 글에서는 개발자에게 코드 스타일이 왜 중요한지, 그리고 어떻게 코드 스타일을 고려할 수 있을지 함께 살펴보겠습니다.</p><hr><h2 id="코드-스타일-가이드-살펴보기" tabindex="-1"><a class="header-anchor" href="#코드-스타일-가이드-살펴보기"><span>&#39;코드 스타일 가이드&#39; 살펴보기</span></a></h2><p>사람의 첫인상은 많은 요소들에 의해 결정됩니다. 헤어, 메이크업 등 외모부터 시작해서 목소리, 걸음걸이 등 여러 요소가 복합적으로 작용합니다. 그렇다면 코드의 첫인상을 결정짓는 코드 스타일은 대체 무엇이고, 어떤 요소들이 있을까요?</p><hr><h2 id="코드-스타일에-포함되는-내용" tabindex="-1"><a class="header-anchor" href="#코드-스타일에-포함되는-내용"><span>코드 스타일에 포함되는 내용</span></a></h2><p>코드 스타일은 단순히 포맷팅만을 다루지 않습니다. 주석, 네이밍, 스코프, 예외 처리 등 코드의 전반에 걸쳐, Best Practice를 다루는 내용이라고 할 수 있습니다. Java 스타일 가이드에는 어떤 내용들이 포함되는지 한 번 살펴볼게요.</p><h3 id="_1-포맷팅-인덴트" tabindex="-1"><a class="header-anchor" href="#_1-포맷팅-인덴트"><span>1. 포맷팅: <a href="https://google.github.io/styleguide/javaguide.html#s4.2-block-" target="_blank" rel="noopener noreferrer">인덴트</a></span></a></h3><p>많은 언어에서 인덴트의 칸수는 문법에 영향을 주지 않습니다. 예를 들어, Java로 작성된 다음의 두 코드를 살펴보겠습니다.</p>',12),z=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Main"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"static"),e(),n("span",{class:"token keyword"},"void"),e(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(" args"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("    "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),e("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello World"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),e(`
`),n("span",{class:"line"},[e("  "),n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Main"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("    "),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"static"),e(),n("span",{class:"token keyword"},"void"),e(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(" args"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line"},[e("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),e("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello World"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),e(`
`),n("span",{class:"line"},[e("    "),n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,"두 코드는 “Hello World”를 출력하는 같은 작업을 하지만, 인덴트의 칸수가 다릅니다. 위 코드를 보면 어떤 인덴트가 더 나은 인덴트인지 알 수 없습니다. 사실 어느 한 쪽이 더 낫다고 볼 수 없습니다. 두 코드 모두 일관성 있게 작성된 코드이기 때문입니다. 반면 인덴트가 일정하지 않은 다음 코드를 살펴볼게요.",-1),E=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Main"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line highlighted"},[e("    "),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"static"),e(),n("span",{class:"token keyword"},"void"),e(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(" args"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{")]),e(`
`),n("span",{class:"line highlighted"},[e("      "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),e("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello World"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),e(`
`),n("span",{class:"line highlighted"},[e("    "),n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("p",null,"위 코드의 경우 4칸 인덴트와 2칸 인덴트를 혼용하여 사용하고 있습니다. 이는 코드의 가독성을 해칠 수 있으므로, 지양해야 하는 스타일입니다.",-1),G=p(`<h3 id="_2-네이밍-언더스코어-사용하지-않기-참고" tabindex="-1"><a class="header-anchor" href="#_2-네이밍-언더스코어-사용하지-않기-참고"><span>2. 네이밍: 언더스코어 사용하지 않기 <a href="https://google.github.io/styleguide/javaguide.html#s5.1-identifier-names" target="_blank" rel="noopener noreferrer">참고</a></span></a></h3><p>Google Java 스타일 가이드에는 언더스코어를 사용하지 말라는 항목이 있습니다. <code>coin_num</code>과 같이 변수나 함수, 클래스 등의 이름을 작성할 때 언더스코어를 쓰지 말라는 것입니다.</p><p>언더스코어를 사용하지 않으면, 변수 이름은 <code>coinNum</code>과 같이 카멜 케이스(Camel Case), 메서드나 클래스 등의 이름은 <code>CoinManager</code>와 같은 파스칼 케이스(Pascal Case)가 됩니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoinManager</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">int</span> coinNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> coinNum<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeCoin</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    coinNum <span class="token operator">+=</span> delta<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>coinNum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      coinNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>개인적으로도 자바에서 언더 스코어를 사용하지 않는 스타일을 더 좋아하는데요. 이렇게 작성된 코드는 자바의 &#39;블럭스러운&#39; 느낌을 줍니다. 만약 자바 코드가 위와 같은 네이밍 컨벤션을 따르지 않는다면 자바 코드임이 잘 느껴지지 않고, 익숙한 네이밍 컨벤션을 벗어났기 때문에 변수와 메서드, 클래스 등의 구분이 상대적으로 어려워질 것입니다.</p><h3 id="각-언어의-스타일-가이드" tabindex="-1"><a class="header-anchor" href="#각-언어의-스타일-가이드"><span>각 언어의 스타일 가이드</span></a></h3><p>그렇다면 스타일 컨벤션은 누가 정하는 걸까요? 사실 프로젝트 내에서 통일했고 팀원들이 모두 동의했다면, 어떤 스타일로 코드를 작성해도 크게 상관은 없습니다. 그러나 늘 하나의 프로젝트만 맡거나, 매번 같은 팀원들과 업무를 진행한다는 보장이 없기 때문인데요.</p><p>팀이 바뀌거나 새로운 팀원이 들어올 때, 다른 회사로 이직할 때도 해당 환경에서 통일된 코드 스타일을 유지해야 합니다. 이때 각 환경에서의 코드 스타일이 모두 다르다면, 코드 스타일은 가독성을 높이는 데 큰 역할을 하지 못할 것입니다. 어떤 팀에서는 변수 이름에 해당되는 네이밍이었는데, 다른 팀을 갔더니 메서드 이름을 해당 네이밍을 통해 짓고 있다면, 팀을 옮겼을 때 큰 혼란이 올 수 있습니다.</p><p>따라서 코드 스타일은 일반적으로 많이 사용하는 가이드가 마련되어 있습니다. 그 대표적인 스타일 가이드가 구글에서 발행한 &#39;구글 코드 스타일 가이드&#39;입니다.</p><ul><li><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener noreferrer">Google C++ Style Guide</a></li><li><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="noopener noreferrer">Google Java Style Guide</a></li><li><a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="noopener noreferrer">Google Python Style Guide</a></li><li><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener noreferrer">Google JavaScript Style Guide</a></li><li><a href="https://google.github.io/styleguide/tsguide.html" target="_blank" rel="noopener noreferrer">Google TypeScript Style Guide</a></li></ul><p><a href="https://google.github.io/styleguide/" target="_blank" rel="noopener noreferrer">구글 코드 스타일 가이드</a>는 이외에도 많은 언어들을 다루고 있는데요. 널리 사용되는 스타일 가이드인 만큼, 구글 스타일 가이드에 따른다면 훨씬 더 깔끔하고 전문적인 코드를 작성할 수 있게 될 것입니다.</p><hr><h2 id="코드-스타일에-신경-써야-하는-이유" tabindex="-1"><a class="header-anchor" href="#코드-스타일에-신경-써야-하는-이유"><span>코드 스타일에 신경 써야 하는 이유</span></a></h2><p>코드 스타일은 나 자신을 알리는 것, 그리고 팀과 협업하는 데에도 큰 영향을 미칩니다. 그렇기에 코드를 작성할 때 코드 스타일을 더욱 신경 쓰는 습관을 길러야 합니다. 아무리 열심히 작성한 코드라도, 코드 스타일이 일관되지 않으면 그 코드를 읽는 사람은 좋은 인상을 받기 어렵습니다.</p><h3 id="나를-알리는-코드" tabindex="-1"><a class="header-anchor" href="#나를-알리는-코드"><span>나를 알리는 코드</span></a></h3><p>요즘 많은 개발자들이 자신을 알리기 위해 포트폴리오를 준비합니다. 어떤 기업은 지원서에 깃헙 주소를 필수로 기재해야 하고, 블로그 포스트 등으로 본인의 코드를 공유하기도 합니다. 저 또한 네이버 지식인 등에서 활동하며 코드를 공유하기도 했고요.</p><p>이처럼 여러분의 코드를 보는 사람은 다양할 수 있습니다. 그리고 그중에서도 정말 신경 써야 할 사람들은 다른 전문가들이고요. 코드 스타일에 익숙해진 전문가들은 코드를 보고 어떤 생각을 할까요? 여러분이 코드를 작성할 때 고민한 내용, 이를 통해서 해결할 수 있었던 문제를 전문가들에게 잘 보여주기 위해서는 다음을 고려해야 합니다.</p><ul><li>코드 스타일이 제대로 잡혀 있지 않으면 <strong>코드 내용을 보려고 하지 않는다</strong>.</li><li>코드를 읽었다고 해도 이미 <strong>좋지 않은 인상을 받은 후</strong> 이다.</li></ul><p>코드 스타일은 그 사람의 코드를 가장 먼저 판단할 수 있는 요소입니다. 코드 스타일을 유지하지 않으면서 내가 코드를 얼마나 잘 짰는지, 얼마나 고심해서 작성했는지, 알아주길 바라는 건 욕심입니다. 누군가 내 코드를 알아주기를 원한다면, 최소한 읽기 쉽게 작성해야 합니다.</p><h3 id="팀의-능률을-올리는-코드" tabindex="-1"><a class="header-anchor" href="#팀의-능률을-올리는-코드"><span>팀의 능률을 올리는 코드</span></a></h3><p>팀 프로젝트에서는 다른 사람의 코드를 읽어야 하는 일이 많습니다. 이전에 비슷한 작업을 다른 사람이 어떻게 수행했는지 참고하는 일도 많고, 이슈가 생겼을 때 다른 사람의 코드를 디버깅해야 하는 일도 있습니다. 이때 팀 내에서 모두 같은 코드 스타일을 사용하고 있다면, 코드를 읽기 훨씬 수월해집니다. 이외에도 여러 이점이 있죠.</p><p>첫 번째로 코드의 <strong>유지보수성과 확장성이 좋아집니다.</strong> 코드 스타일이 일관되지 않은 프로젝트라면 새로운 기능을 추가하거나, 버그를 수정할 때 새로 작성하는 코드와 기존에 작성된 코드가 섞이면서 그 스타일도 뒤죽박죽이 됩니다. 저는 “좋은 코드가 좋은 제품을 만든다”고 보는데요. 새로운 코드를 작성할 때마다 점점 복잡해지고 읽기 힘들어진다면, 그 코드는 결코 좋은 제품을 만들어낼 수 없을 거라 생각합니다.</p><p>두 번째로 통일된 스타일을 사용하면 <strong>팀원들 간 지식의 공유가 용이</strong> 해지며, 이는 곧 <strong>성공적인 코드 리뷰 문화 정착</strong> 을 위한 발판이 될 수 있습니다. 많은 기업이 코드 리뷰의 중요성을 강조하고 도입하려 하지만, 실제로 이러한 프로세스가 정착되기는 쉽지 않습니다.</p><p>그 이유 중 하나는 서로 어떤 일을 하는지 잘 모르기 때문이죠. 즉, 팀 내 지식의 공유가 원활히 이루어지지 않기 때문입니다. 이러한 상황에서는 코드 리뷰를 요청받았을 때, 그 코드가 어떤 역할을 하는 코드인지부터, 전체적인 맥락을 우선 파악해야 하기 때문에 시간이 오래 걸립니다. 그러나 시간에 쫓기다 보면 리뷰를 빠르게 해주어야 하는데, 이렇게 되면 코드에서 눈으로 보이는 것만 대충 리뷰가 넘어가며, 코드 리뷰의 의미가 퇴색되죠.</p><p>물론 통일된 스타일을 사용하는 것만으로, 코드 리뷰 문화를 정착시킬 수는 없습니다. 각자 어떤 일을 어떻게 하는지 지식 공유를 정기적으로 해야 하고, 코드 리뷰에서 어떤 것들을 중점적으로 리뷰해야하는지와 그에 대한 책임감을 갖는 등 전제되어야 할 것이 많기 때문입니다. 하지만 코드 스타일을 통일시키지 않은 상태에서는 이 중 어떤 것도 하기 힘들다고 생각합니다. 다른 사람의 코드라도 내가 짠 것처럼 익숙하게 읽을 수 있고, 그 사람이 어떤 생각으로 코드를 짰는지 파악할 수 있게 하는 첫 단계가 바로 &#39;통일된 코드 스타일&#39;이기 때문입니다.</p><hr><h2 id="ide에-코드-스타일-적용하기" tabindex="-1"><a class="header-anchor" href="#ide에-코드-스타일-적용하기"><span>IDE에 코드 스타일 적용하기</span></a></h2><p>다음은 IDE에 코드 스타일을 적용하는 방법을 알아보겠습니다. 개발자들이 많이 사용하는 IDE는 자동 포맷팅 기능을 지원하는데, 이 기능을 사용하면 적어도 코드 스타일에서 포맷팅에 관한 내용은 크게 신경 쓰지 않아도 됩니다.</p><p>그러나 팀원마다 서로 다른 IDE를 사용한다면 코드 스타일이 섞이기 쉽습니다. IDE는 기본적으로 내장되어 있는 자신만의 스타일로 코드를 포맷팅하기 때문에, 팀 내에서 합의된 코드 스타일로 IDE의 포맷팅 설정을 변경해 주어야 합니다. 가장 많이 사용되는 Intellij와 VsCode에서 Google Java Style Guide를 적용해 봤습니다.</p>`,29),N=n("img",{src:"https://yozm.wishket.com/media/news/2499/intellij-settings.png",alt:'먼저 Intellij에서 Google Java Style Guide를 적용해 봅시다. Intellij IDEA에서 <FontIcon icon="iconfont icon-select"/> > 를 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),F=n("code",null,"[File]",-1),C=n("code",null,"[Settings]",-1),J=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2499/intellij-plugin.png",alt:"팝업된 Settings 창에서 Plugins을 선택한 후 을 검색합니다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,[e("팝업된 Settings 창에서 Plugins을 선택한 후 "),n("code",null,"google-java-format"),e("을 검색합니다.")])],-1),M=n("code",null,"[Restart IDE]",-1),P=n("img",{src:"https://yozm.wishket.com/media/news/2499/intellij-enable.png",alt:'다시 <FontIcon icon="iconfont icon-select"/> > 를 들어가 보면 좌측에 <FontIcon icon="iconfont icon-select"/> 항목이 추가된 것을 확인할 수 있습니다. 이를 클릭하고 <FontIcon icon="iconfont icon-select"/> 항목을 체크해 줍니다.',tabindex:"0",loading:"lazy"},null,-1),V=n("code",null,"[File]",-1),L=n("code",null,"[Settings]",-1),R=n("code",null,"[google-java-format Settings]",-1),T=n("code",null,"[Enable google-java-format]",-1),O=n("img",{src:"https://yozm.wishket.com/media/news/2499/intellij-new-projects.png",alt:'.<FontIcon icon="iconfont icon-select"/>를 눌러 변경 사항을 저장해주고, <FontIcon icon="iconfont icon-select"/> >  > 를 선택합니다.',tabindex:"0",loading:"lazy"},null,-1),U=n("code",null,"[OK]",-1),B=n("code",null,"[File]",-1),H=n("code",null,"[New Projects Setup]",-1),K=n("code",null,"[Settings for New Projects…]",-1),W=n("img",{src:"https://yozm.wishket.com/media/news/2499/intellij-enable-default.png",alt:'좌측에서 <FontIcon icon="iconfont icon-select"/> > 를 선택하고, <FontIcon icon="iconfont icon-select"/> 항목에 체크해 줍니다.',tabindex:"0",loading:"lazy"},null,-1),Z=n("code",null,"[Other Settings]",-1),$=n("code",null,"[google-java-format Settings]",-1),q=n("code",null,"Enable google-java-format",-1),Q=n("img",{src:"https://yozm.wishket.com/media/news/2499/intellij-vm_options.png",alt:'.<FontIcon icon="iconfont icon-select"/> > 를 클릭하여 다음을 붙여 넣어 줍니다.',tabindex:"0",loading:"lazy"},null,-1),X=n("code",null,"[Help]",-1),Y=n("code",null,"[Edit Custom VM Options…]",-1),nn=n("div",{class:"language-text line-numbers-mode","data-highlighter":"prismjs","data-ext":"text","data-title":"text"},[n("pre",null,[n("code",null,[n("span",{class:"line"},"--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED"),e(`
`),n("span",{class:"line"},"--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED"),e(`
`),n("span",{class:"line"},"--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED"),e(`
`),n("span",{class:"line"},"--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"),e(`
`),n("span",{class:"line"},"--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED"),e(`
`),n("span",{class:"line"},"--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),en=n("img",{src:"https://yozm.wishket.com/media/news/2499/intellij-reformat.png",alt:'이제 Intellij IDEA를 재시작하면 Google의 Java Style 포맷팅이 적용됩니다. 이를 파일을 저장할 때마다 실행하기 위해 <FontIcon icon="iconfont icon-select"/> > 에 들어가 <FontIcon icon="iconfont icon-select"/> > 에서 <FontIcon icon="iconfont icon-select"/>를 활성화해 줍니다.',tabindex:"0",loading:"lazy"},null,-1),tn=n("code",null,"[File]",-1),sn=n("code",null,"[Settings]",-1),an=n("code",null,"[Tools]",-1),on=n("code",null,"[Actions on Save]",-1),ln=n("code",null,"[Reformat code]",-1),cn=n("code",null,"[OK]",-1),pn=n("p",null,"Visual Studio Code에서는 다음의 단계를 따라 Google Java Style을 적용합니다.",-1),rn=n("img",{src:"https://yozm.wishket.com/media/news/2499/vscode-extension.png",alt:'.<FontIcon icon="iconfont icon-select"/> 탭에서 를 검색하여 설치해 줍니다.',tabindex:"0",loading:"lazy"},null,-1),dn=n("code",null,"[Extensions]",-1),un=n("code",null,"Google Java Format for VS Code",-1),mn=n("img",{src:"https://yozm.wishket.com/media/news/2499/vscode-default_formatter.png",alt:'.<FontIcon icon="iconfont icon-select"/>에서 를 검색하여 방금 설치한 extension을 지정해 줍니다.',tabindex:"0",loading:"lazy"},null,-1),gn=n("code",null,"[Settings]",-1),hn=n("code",null,"default formatter",-1),kn=n("figure",null,[n("img",{src:"https://yozm.wishket.com/media/news/2499/vscode-format_on_save.png",alt:"마지막으로 를 검색하여 활성화해 줍니다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,[e("마지막으로 "),n("code",null,"format on save"),e("를 검색하여 활성화해 줍니다.")])],-1),vn=n("p",null,"이제 java 파일의 내용을 수정하고 저장할 때마다 Google Java Style로 포맷팅되는 것을 확인할 수 있습니다.",-1),_n=p('<hr><h2 id="신경-써야-할-코드-스타일" tabindex="-1"><a class="header-anchor" href="#신경-써야-할-코드-스타일"><span>신경 써야 할 코드 스타일</span></a></h2><p>이처럼 IDE에 코드 스타일을 적용하여, 기본적인 포맷팅은 IDE가 알아서 해주게 되었습니다. 이제 단순 포맷팅을 넘어, 코드의 퀄리티를 높여주는 코드 스타일에 신경 쓰면서 작성해야 하는데요. 이를 위해 어떤 점을 신경 써야 할까요?</p><h3 id="가독성" tabindex="-1"><a class="header-anchor" href="#가독성"><span>가독성</span></a></h3><p>코드를 작성할 때는 코드를 처음 읽는 사람도 쉽게 이해할 수 있도록 작성해야 합니다. 가독성을 높이는 여러 방법 중 우선 다음을 신경 쓰며 코드를 작성해 보세요.</p><p>가장 먼저 변수와 함수 등의 이름입니다. 변수와 함수의 이름은 코드의 역할을 명확하게 반영해야 하며, 약어의 사용은 지양하는 것이 좋습니다. IDE가 웬만한 자동 완성을 해주기 때문에 이름이 조금 길어지더라도 확실한 의미를 알 수 있도록 작성하는 것이 좋습니다. 예를 들어, <code>gc</code>보다 <code>gameContext</code>를, <code>aoas</code>보다는 <code>averageOfAllStudents</code>를 사용하도록 해봅시다. 또한 프로젝트 전체에 일관된 명명 규칙을 적용하여 동일한 패턴을 유지하는 것이 좋습니다.</p><p>코드의 논리적 구조 또한 역할에 따라 작고 명확하게 구분되어야 합니다. 함수들과 클래스는 각각의 확실한 역할을 가지고 있어야 하며, 너무 길거나 복잡해지지 않게 잘 관리해야 합니다. 코드가 길어지게 되면 역할에 따라 별도의 클래스나 함수로 분리해 내는 작업을 해주어야 합니다. 즉, 가독성을 신경 쓰며 코드를 작성하기 위해서는 빈번한 리팩토링이 필연적으로 발생하게 됩니다.</p><p>대부분의 코드는 코드 자체만으로 이해하기 쉬워야 합니다. 하지만 복잡한 알고리즘이나 구현체의 크기가 커질 경우, 코드를 보는 것만으로는 이해가 어려울 수 있습니다. 이럴 때 주석을 활용해야 합니다. 한 가지 주의할 점은 주석은 최소한으로 사용하며, 정말 필요한 정보만 나타내야 한다는 것입니다.</p><p>코드를 설명하기 위해 주석을 남발하게 되면, 주석과 코드를 읽는 사람은 같은 내용을 주석에서 한 번, 또 코드에서 한 번 중복으로 읽게 됩니다. 이는 코드의 가독성을 떨어뜨릴 수 있으니, 주석은 짧고 명확할수록 좋습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 개발자에게 코드 스타일이 중요한 이유와 방법 등을 살펴봤는데요. 아무리 열심히 고민하며 작성한 코드라도, 코드 스타일이 잡혀있지 않으면 읽기 어려운 코드가 됩니다. 개발자라는 직업을 선택한 이상, 자신이 작성한 코드를 공개할 수밖에 없는데요. 이럴 때 전문적인 코드를 선보이고 싶은 마음은 누구나 비슷할 것 같습니다.</p><p>코드 스타일은 프로그래밍 공부처럼 어렵고 복잡한 것이 아닙니다. 조금만 신경 쓰면 누구나 깔끔하고 일관된 코드를 쓸 수 있습니다. 이러한 작은 노력을 통해, 앞으로 여러분이 작성하는 코드가 좋은 첫인상을 남길 수 있길 바랍니다.</p>',13);function fn(g,yn){const r=c("VPCard"),o=c("router-link"),h=c("SiteInfo"),a=c("FontIcon"),d=c("Tabs");return f(),v("div",null,[n("h1",b,[n("a",w,[n("span",null,_(g.$frontmatter.title)+" 관련",1)])]),t(r,u(m({title:"Intellij Idea > Article(s)",desc:"Article(s)",link:"/tool/jetbrains-idea/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(r,u(m({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",j,[n("ul",null,[n("li",null,[t(o,{to:"#코드-스타일-가이드-살펴보기"},{default:s(()=>[e("'코드 스타일 가이드' 살펴보기")]),_:1})]),n("li",null,[t(o,{to:"#코드-스타일에-포함되는-내용"},{default:s(()=>[e("코드 스타일에 포함되는 내용")]),_:1}),n("ul",null,[n("li",null,[t(o,{to:"#_1-포맷팅-인덴트"},{default:s(()=>[e("1. 포맷팅: 인덴트")]),_:1})]),n("li",null,[t(o,{to:"#_2-네이밍-언더스코어-사용하지-않기-참고"},{default:s(()=>[e("2. 네이밍: 언더스코어 사용하지 않기 참고")]),_:1})]),n("li",null,[t(o,{to:"#각-언어의-스타일-가이드"},{default:s(()=>[e("각 언어의 스타일 가이드")]),_:1})])])]),n("li",null,[t(o,{to:"#코드-스타일에-신경-써야-하는-이유"},{default:s(()=>[e("코드 스타일에 신경 써야 하는 이유")]),_:1}),n("ul",null,[n("li",null,[t(o,{to:"#나를-알리는-코드"},{default:s(()=>[e("나를 알리는 코드")]),_:1})]),n("li",null,[t(o,{to:"#팀의-능률을-올리는-코드"},{default:s(()=>[e("팀의 능률을 올리는 코드")]),_:1})])])]),n("li",null,[t(o,{to:"#ide에-코드-스타일-적용하기"},{default:s(()=>[e("IDE에 코드 스타일 적용하기")]),_:1})]),n("li",null,[t(o,{to:"#신경-써야-할-코드-스타일"},{default:s(()=>[e("신경 써야 할 코드 스타일")]),_:1}),n("ul",null,[n("li",null,[t(o,{to:"#가독성"},{default:s(()=>[e("가독성")]),_:1})])])]),n("li",null,[t(o,{to:"#마치며"},{default:s(()=>[e("마치며")]),_:1})])])]),I,t(h,{name:"개발자에게 '코드 스타일' 왜 중요할까? | 요즘IT",desc:"우리가 어떤 사람을 만났을 때, 첫인상이 그 사람의 이미지를 결정할 때가 많습니다. 코드 또한 마찬가지입니다. 프로그래밍에서 '코드 스타일'은 그 코드의 첫인상이 됩니다. 통일된 스타일로 작성된 코드는 깔끔하고 전문적이라는 이미지를 주고, 코드를 읽는 사람에게 좋은 인상을 남길 수 있죠. 그러나 현업에서 일하다 보면 코드 스타일보다 코드 내용에 집중하게 될 때가 더 많은데요, 자연스럽게 코드 스타일에는 소홀해지기 마련입니다.",url:"https://yozm.wishket.com/magazine/detail/2499/",logo:"https://yozm.wishket.com/static/renewal/img/global/gnb_yozmit.svg",preview:"https://yozm.wishket.com/media/news/2499/code-style.jpg"}),x,t(d,{id:"42",data:[{id:"인덴트가 2칸인 코드"},{id:"인덴트가 4칸인 코드"},{id:'<FontIcon icon="iconfont icon-warn"/>인덴트가 일정하지 않은 코드'}],active:0},{title0:s(({value:l,isActive:i})=>[e("인덴트가 2칸인 코드")]),title1:s(({value:l,isActive:i})=>[e("인덴트가 4칸인 코드")]),title2:s(({value:l,isActive:i})=>[t(a,{icon:"iconfont icon-warn"}),e("인덴트가 일정하지 않은 코드")]),tab0:s(({value:l,isActive:i})=>[z]),tab1:s(({value:l,isActive:i})=>[S]),tab2:s(({value:l,isActive:i})=>[A,E,D]),_:1}),G,t(d,{id:"173",data:[{id:"Intellij IDEA"},{id:"Visual Studio Code"}]},{title0:s(({value:l,isActive:i})=>[e("Intellij IDEA")]),title1:s(({value:l,isActive:i})=>[e("Visual Studio Code")]),tab0:s(({value:l,isActive:i})=>[n("figure",null,[N,n("figcaption",null,[e("먼저 Intellij에서 Google Java Style Guide를 적용해 봅시다. Intellij IDEA에서 "),t(a,{icon:"iconfont icon-select"}),F,e(" > "),C,e("를 클릭합니다.")])]),J,n("p",null,[e("Install 버튼을 클릭하면 플러그인이 설치되고 "),t(a,{icon:"iconfont icon-select"}),M,e(" 버튼이 생깁니다. 버튼을 눌러 Intellij IDEA를 재시작해 줍니다.")]),n("figure",null,[P,n("figcaption",null,[e("다시 "),t(a,{icon:"iconfont icon-select"}),V,e(" > "),L,e("를 들어가 보면 좌측에 "),t(a,{icon:"iconfont icon-select"}),R,e(" 항목이 추가된 것을 확인할 수 있습니다. 이를 클릭하고 "),t(a,{icon:"iconfont icon-select"}),T,e(" 항목을 체크해 줍니다.")])]),n("figure",null,[O,n("figcaption",null,[e("."),t(a,{icon:"iconfont icon-select"}),U,e("를 눌러 변경 사항을 저장해주고, "),t(a,{icon:"iconfont icon-select"}),B,e(" > "),H,e(" > "),K,e("를 선택합니다.")])]),n("figure",null,[W,n("figcaption",null,[e("좌측에서 "),t(a,{icon:"iconfont icon-select"}),Z,e(" > "),$,e("를 선택하고, "),t(a,{icon:"iconfont icon-select"}),q,e(" 항목에 체크해 줍니다.")])]),n("figure",null,[Q,n("figcaption",null,[e("."),t(a,{icon:"iconfont icon-select"}),X,e(" > "),Y,e("를 클릭하여 다음을 붙여 넣어 줍니다.")])]),nn,n("figure",null,[en,n("figcaption",null,[e("이제 Intellij IDEA를 재시작하면 Google의 Java Style 포맷팅이 적용됩니다. 이를 파일을 저장할 때마다 실행하기 위해 "),t(a,{icon:"iconfont icon-select"}),tn,e(" > "),sn,e("에 들어가 "),t(a,{icon:"iconfont icon-select"}),an,e(" > "),on,e("에서 "),t(a,{icon:"iconfont icon-select"}),ln,e("를 활성화해 줍니다.")])]),n("p",null,[e("."),t(a,{icon:"iconfont icon-select"}),cn,e("를 눌러 수정 사항을 적용해 주면, 이제 파일을 저장할 때마다 코드가 Google Java Style로 포맷팅되는 것을 확인할 수 있습니다.")])]),tab1:s(({value:l,isActive:i})=>[pn,n("figure",null,[rn,n("figcaption",null,[e("."),t(a,{icon:"iconfont icon-select"}),dn,e(" 탭에서 "),un,e("를 검색하여 설치해 줍니다.")])]),n("figure",null,[mn,n("figcaption",null,[e("."),t(a,{icon:"iconfont icon-select"}),gn,e("에서 "),hn,e("를 검색하여 방금 설치한 extension을 지정해 줍니다.")])]),kn,vn]),_:1}),_n])}const jn=k(y,[["render",fn],["__file","2499.html.vue"]]),In=JSON.parse(`{"path":"/yozm.wishket.com/2499.html","title":"개발자에게 '코드 스타일' 왜 중요할까?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"개발자에게 '코드 스타일' 왜 중요할까?","description":"Article(s) > 개발자에게 '코드 스타일' 왜 중요할까?","icon":"iconfont icon-intellijidea","category":["Java","IDE","Code Style","Intellij Idea","Visual Studio Code"],"tag":["blog","yozm.wishket.com","java","jdk","jdk8","google","google-code-style","jetbrains","intellij-idea","windows","vscode","visual-studio-code"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > 개발자에게 '코드 스타일' 왜 중요할까?"},{"property":"og:description","content":"개발자에게 '코드 스타일' 왜 중요할까?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2499.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2499.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"개발자에게 '코드 스타일' 왜 중요할까?"}],["meta",{"property":"og:description","content":"Article(s) > 개발자에게 '코드 스타일' 왜 중요할까?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2499/code-style.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2499/code-style.jpg"}],["meta",{"name":"twitter:image:alt","content":"개발자에게 '코드 스타일' 왜 중요할까?"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"google"}],["meta",{"property":"article:tag","content":"google-code-style"}],["meta",{"property":"article:tag","content":"jetbrains"}],["meta",{"property":"article:tag","content":"intellij-idea"}],["meta",{"property":"article:tag","content":"windows"}],["meta",{"property":"article:tag","content":"vscode"}],["meta",{"property":"article:tag","content":"visual-studio-code"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"개발자에게 '코드 스타일' 왜 중요할까?\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2499/code-style.jpg\\",\\"https://yozm.wishket.com/media/news/2499/intellij-settings.png\\",\\"https://yozm.wishket.com/media/news/2499/intellij-plugin.png\\",\\"https://yozm.wishket.com/media/news/2499/intellij-enable.png\\",\\"https://yozm.wishket.com/media/news/2499/intellij-new-projects.png\\",\\"https://yozm.wishket.com/media/news/2499/intellij-enable-default.png\\",\\"https://yozm.wishket.com/media/news/2499/intellij-vm_options.png\\",\\"https://yozm.wishket.com/media/news/2499/intellij-reformat.png\\",\\"https://yozm.wishket.com/media/news/2499/vscode-extension.png\\",\\"https://yozm.wishket.com/media/news/2499/vscode-default_formatter.png\\",\\"https://yozm.wishket.com/media/news/2499/vscode-format_on_save.png\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"prev":"/tool/jetbrains-idea/articles/README.md","date":"2024-03-18T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2499/code-style.jpg"},"headers":[{"level":2,"title":"'코드 스타일 가이드' 살펴보기","slug":"코드-스타일-가이드-살펴보기","link":"#코드-스타일-가이드-살펴보기","children":[]},{"level":2,"title":"코드 스타일에 포함되는 내용","slug":"코드-스타일에-포함되는-내용","link":"#코드-스타일에-포함되는-내용","children":[{"level":3,"title":"1. 포맷팅: 인덴트","slug":"_1-포맷팅-인덴트","link":"#_1-포맷팅-인덴트","children":[]},{"level":3,"title":"2. 네이밍: 언더스코어 사용하지 않기 참고","slug":"_2-네이밍-언더스코어-사용하지-않기-참고","link":"#_2-네이밍-언더스코어-사용하지-않기-참고","children":[]},{"level":3,"title":"각 언어의 스타일 가이드","slug":"각-언어의-스타일-가이드","link":"#각-언어의-스타일-가이드","children":[]}]},{"level":2,"title":"코드 스타일에 신경 써야 하는 이유","slug":"코드-스타일에-신경-써야-하는-이유","link":"#코드-스타일에-신경-써야-하는-이유","children":[{"level":3,"title":"나를 알리는 코드","slug":"나를-알리는-코드","link":"#나를-알리는-코드","children":[]},{"level":3,"title":"팀의 능률을 올리는 코드","slug":"팀의-능률을-올리는-코드","link":"#팀의-능률을-올리는-코드","children":[]}]},{"level":2,"title":"IDE에 코드 스타일 적용하기","slug":"ide에-코드-스타일-적용하기","link":"#ide에-코드-스타일-적용하기","children":[]},{"level":2,"title":"신경 써야 할 코드 스타일","slug":"신경-써야-할-코드-스타일","link":"#신경-써야-할-코드-스타일","children":[{"level":3,"title":"가독성","slug":"가독성","link":"#가독성","children":[]}]},{"level":2,"title":"마치며","slug":"마치며","link":"#마치며","children":[]}],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.3,"words":690},"filePathRelative":"yozm.wishket.com/2499.md","localizedDate":"2024년 3월 18일","excerpt":"\\n"}`);export{jn as comp,In as data};
