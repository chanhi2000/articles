import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as n,t as r,e as s,n as e,g as t,f as u,r as o,o as d}from"./app-BgNevrm5.js";const k={},m={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),b=u(`<p>All the game is missing now is some challenge, and that&#39;s where our star and vortex level elements come in. Players will get one point for every star they collect, and lose one point every time they fall into a vortex. To track scores, we need a property to hold the score and a label to show it, so add these now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> scoreLabel<span class="token punctuation">:</span> <span class="token class-name">SKLabelNode</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        scoreLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to show the label in the top-left corner of the screen, so add this to <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">scoreLabel <span class="token operator">=</span> <span class="token class-name">SKLabelNode</span><span class="token punctuation">(</span>fontNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chalkduster&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: 0&quot;</span></span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>horizontalAlignmentMode <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">left</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>scoreLabel<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When a collision happens, we need to figure out whether it was the player colliding with a star, or the star colliding with a player – the same semi-philosophical problem we had in project 11. And our solution is identical too: figure out which is which, then call another method.</p><p>First, we need to make ourselves the contact delegate for the physics world, so make your class conform to <code>SKPhysicsContactDelegate</code> then add this line in <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">physicsWorld<span class="token punctuation">.</span>contactDelegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We already know which node is our player, which means we know which node <em>isn&#39;t</em> our player. This means our <code>didBegin()</code> method is easy:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">didBegin</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> contact<span class="token punctuation">:</span> <span class="token class-name">SKPhysicsContact</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> nodeA <span class="token operator">=</span> contact<span class="token punctuation">.</span>bodyA<span class="token punctuation">.</span>node <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> nodeB <span class="token operator">=</span> contact<span class="token punctuation">.</span>bodyB<span class="token punctuation">.</span>node <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> nodeA <span class="token operator">==</span> player <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">playerCollided</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> nodeB<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nodeB <span class="token operator">==</span> player <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">playerCollided</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> nodeA<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are three types of collision we care about: when the player hits a vortex they should be penalized, when the player hits a star they should score a point, and when the player hits the finish flag the next level should be loaded. I&#39;ll deal with the first two here, and you can think about the third one yourself!</p><p>When a player hits a vortex, a few things need to happen. Chief among them is that we need to stop the player controlling the ball, which will be done using a single boolean property called <code>isGameOver</code>. Add this property now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> isGameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You&#39;ll need to modify your <code>update()</code> method so that it works only when <code>isGameOver</code> is false, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> currentTime<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> isGameOver <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token directive property"><span class="token directive-name">#if</span> targetEnvironment<span class="token punctuation">(</span>simulator<span class="token punctuation">)</span></span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> currentTouch <span class="token operator">=</span> lastTouchPosition <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>x <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>y <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">            physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>y <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> accelerometerData <span class="token operator">=</span> motionManager<span class="token punctuation">.</span>accelerometerData <span class="token punctuation">{</span></span>
<span class="line">            physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, a number of other things need to be done when a player collides with a vortex:</p><ul><li>We need to stop the ball from being a dynamic physics body so that it stops moving once it&#39;s sucked in.</li><li>We need to move the ball over the vortex, to simulate it being sucked in. It will also be scaled down at the same time.</li><li>Once the move and scale has completed, we need to remove the ball from the game.</li><li>After all the actions complete, we need to create the player ball again and re-enable control.</li></ul><p>We&#39;ll put that together using an <code>SKAction</code> sequence, followed by a trailing closure that will execute when the actions finish. When colliding with a star, we just remove the star node from the scene and add one to the score.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">playerCollided</span><span class="token punctuation">(</span>with node<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;vortex&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        player<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        isGameOver <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        score <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> move <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> node<span class="token punctuation">.</span>position<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> scale <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">0.0001</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> remove <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">[</span>move<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> remove<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        player<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>isGameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;star&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;finish&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// next level?</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That method finishes the game, so it&#39;s down to you now to try and play the whole level without falling into a vortex. What happens when you hit the finish flag? Nothing… <em>yet</em>.</p>`,19);function w(p,y){const a=o("VPCard"),l=o("VidStack");return d(),c("div",null,[n("h1",m,[n("a",h,[n("span",null,r(p.$frontmatter.title)+" 관련",1)])]),s(a,e(t({title:"Hacking with iOS – learn to code iPhone and iPad apps with free Swift tutorials",desc:"Learn Swift coding for iOS with these free tutorials – learn Swift, iOS, and Xcode",link:"/hackingwithswift.com/read/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),v,g,s(a,e(t({title:"Contacting but not colliding | Hacking with iOS",desc:"Contacting but not colliding",link:"https://hackingwithswift.com/read/26/4/contacting-but-not-colliding",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),s(l,{src:"youtube/9T0sJKNM2Tc"}),b])}const _=i(k,[["render",w],["__file","04-contacting-but-not-colliding.html.vue"]]),C=JSON.parse('{"path":"/hackingwithswift.com/read/26/04-contacting-but-not-colliding.html","title":"Contacting but not colliding","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Contacting but not colliding","description":"Article(s) > Contacting but not colliding","category":["Swift","iOS","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","xcode","appstore","ios"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Contacting but not colliding"},{"property":"og:description","content":"Contacting but not colliding"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/26/04-contacting-but-not-colliding.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/read/26/04-contacting-but-not-colliding.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Contacting but not colliding"}],["meta",{"property":"og:description","content":"Article(s) > Contacting but not colliding"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:tag","content":"ios"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Contacting but not colliding\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.68,"words":805},"filePathRelative":"hackingwithswift.com/read/26/04-contacting-but-not-colliding.md","excerpt":"\\n"}');export{_ as comp,C as data};
