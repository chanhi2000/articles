import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,t as d,e as n,n as s,g as a,d as i,a as u,f as h,r as l,o as m}from"./app-BgNevrm5.js";const f={},g={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},w=e("nav",{class:"table-of-contents"},[e("ul")],-1),b=e("hr",null,null,-1),v=e("blockquote",null,[e("p",null,"Available from Swift 5.7")],-1),y={href:"https://github.com/apple/swift-evolution/blob/main/proposals/0352-implicit-open-existentials.md",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"apple/swift-evolution",-1),_=h(`<p>As an example, here’s a simple generic function that is able to work with any kind of <code>Numeric</code> value:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">double</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Numeric</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> number<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">    number <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we call that directly, e.g. <code>double(5)</code>, then the Swift compiler can choose to <em>specialize</em> the function – to effectively create a version that accepts an <code>Int</code> directly, for performance reasons.</p><p>However, what SE-0352 does is allow that function to be callable when all we know is that our data conforms to a protocol, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token number">2.0</span></span>
<span class="line"><span class="token keyword">let</span> third<span class="token punctuation">:</span> <span class="token class-name">Float</span> <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> numbers<span class="token punctuation">:</span> <span class="token punctuation">[</span>any <span class="token class-name">Numeric</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift calls these <em>existential types</em>: the actual data type you’re using sits inside a box, and when we call methods on that box Swift understands it should implicitly call the method on the data <em>inside</em> the box. SE-0352 extends this same power to function calls too: the <code>number</code> value in our loop is an existential type (a box containing either an <code>Int</code>, <code>Double</code>, or <code>Float</code>), but Swift is able to pass it in to the generic <code>double()</code> function by sending in the value inside the box.</p><p>There are limits to what this capable of, and I think they are fairly self explanatory. For example, this kind of code won’t work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">areEqual</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Numeric</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">==</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">areEqual</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift isn’t able to statically verify (i.e., at compile time) that both values are things that can be compared using <code>==</code>, so the code simply won’t build.</p>`,9),S={class:"hint-container details"},C=e("summary",null,"Other Changes in Swift 5.7",-1),I={href:"https://hackingwithswift.com/files/playgrounds/swift/playground-5-6-to-5-7.playground.zip",target:"_blank",rel:"noopener noreferrer"};function T(c,q){const t=l("VPCard"),o=l("FontIcon");return m(),r("div",null,[e("h1",g,[e("a",k,[e("span",null,d(c.$frontmatter.title)+" 관련",1)])]),n(t,s(a({title:"HACKING WITH SWIFT",desc:"What's new in Swift?",link:"/hackingwithswift.com/swift/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),w,b,n(t,s(a({title:"Implicitly opened existentials | Changes in Swift 5.7",desc:"Implicitly opened existentials",link:"https://hackingwithswift.com/swift/5.7/implicitly-opened-existentials",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,e("p",null,[e("a",y,[i("SE-0352 ("),n(o,{icon:"iconfont icon-github"}),x,i(")")]),i(" allows Swift to call generic functions using a protocol in many situations, which removes a somewhat odd barrier that existed previously.")]),_,e("details",S,[C,n(t,s(a({title:"if let shorthand for unwrapping optionals | Changes in Swift 5.7",desc:"if let shorthand for unwrapping optionals",link:"/hackingwithswift.com/swift/5.7/if-let-shorthand.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Multi-statement closure type inference | Changes in Swift 5.7",desc:"Multi-statement closure type inference",link:"/hackingwithswift.com/swift/5.7/multi-statement-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Clock, Instant, and Duration | Changes in Swift 5.7",desc:"Clock, Instant, and Duration",link:"/hackingwithswift.com/swift/5.7/clock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Regular expressions | Changes in Swift 5.7",desc:"Regular expressions",link:"/hackingwithswift.com/swift/5.7/regexes.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Type inference from default expressions | Changes in Swift 5.7",desc:"Type inference from default expressions",link:"/hackingwithswift.com/swift/5.7/default-type-inference.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Concurrency in top-level code | Changes in Swift 5.7",desc:"Concurrency in top-level code",link:"/hackingwithswift.com/swift/5.7/top-level-concurrency.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Opaque parameter declarations | Changes in Swift 5.7",desc:"Opaque parameter declarations",link:"/hackingwithswift.com/swift/5.7/opaque-parameter-declarations.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Structural opaque result types | Changes in Swift 5.7",desc:"Structural opaque result types",link:"/hackingwithswift.com/swift/5.7/structural-opaque-result-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Unlock existentials for all protocols | Changes in Swift 5.7",desc:"Unlock existentials for all protocols",link:"/hackingwithswift.com/swift/5.7/unlock-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Lightweight same-type requirements for primary associated types | Changes in Swift 5.7",desc:"Lightweight same-type requirements for primary associated types",link:"/hackingwithswift.com/swift/5.7/primary-associated-types.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Constrained existential types | Changes in Swift 5.7",desc:"Constrained existential types",link:"/hackingwithswift.com/swift/5.7/constrained-existentials.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"Distributed actor isolation | Changes in Swift 5.7",desc:"Distributed actor isolation",link:"/hackingwithswift.com/swift/5.7/distributed-actors.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(t,s(a({title:"buildPartialBlock for result builders | Changes in Swift 5.7",desc:"buildPartialBlock for result builders",link:"/hackingwithswift.com/swift/5.7/buildpartialblock.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),u(` 
\`\`\`component VPCard
{
  "title": "Implicitly opened existentials | Changes in Swift 5.7",
  "desc": "Implicitly opened existentials",
  "link": "/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.md",
  "logo": "https://hackingwithswift.com/favicon.svg",
  "background": "rgba(54,94,226,0.2)"
}
\`\`\`
`),n(t,s(a({title:"Unavailable from async attribute | Changes in Swift 5.7",desc:"Unavailable from async attribute",link:"/hackingwithswift.com/swift/5.7/noasync.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e("p",null,[e("a",I,[n(o,{icon:"fas fa-file-zipper"}),i("Download Swift 5.7 playground")])])])])}const E=p(f,[["render",T],["__file","implicitly-opened-existentials.html.vue"]]),D=JSON.parse('{"path":"/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.html","title":"Implicitly opened existentials","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Implicitly opened existentials","description":"Article(s) > Implicitly opened existentials","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","swift","swift-5.7"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > Implicitly opened existentials"},{"property":"og:description","content":"Implicitly opened existentials"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swift/5.7/implicitly-opened-existentials.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Implicitly opened existentials"}],["meta",{"property":"og:description","content":"Article(s) > Implicitly opened existentials"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swift-5.7"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Implicitly opened existentials\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]],"isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.92,"words":876},"filePathRelative":"hackingwithswift.com/swift/5.7/implicitly-opened-existentials.md","excerpt":"\\n"}');export{E as comp,D as data};
