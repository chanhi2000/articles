import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,t as c,e as n,n as e,g as s,f as p,r as d,o as r}from"./app-BgNevrm5.js";const u={},h={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},m=t("nav",{class:"table-of-contents"},[t("ul")],-1),w=t("hr",null,null,-1),f=p(`<blockquote><p>Updated for Xcode 15</p></blockquote><p>Deleting a SwiftData object takes two steps: calling <code>delete()</code> on your model context, passing in the object you want to delete, then saving the changes, either with an explicit call to <code>save()</code> or waiting for the autosave to trigger if you have it enabled.</p><p>So, for single objects you’d write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span> <span class="token punctuation">{</span> student <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>swipeActions <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Delete&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;trash&quot;</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                modelContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you were working with a collection of objects, you’d need a <code>for</code> loop like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> indexSet<span class="token punctuation">:</span> <span class="token class-name">IndexSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> indexSet <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> student <span class="token operator">=</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        modelContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to delete <em>all</em> objects of a particular model type, you should use the <code>delete(model:)</code> overload, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> modelContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token class-name">School</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to delete all schools.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And if you want to delete only a subset of objects, you should use <code>delete(model:)</code> with a predicate, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span> modelContext<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token class-name">School</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span> school <span class="token keyword">in</span></span>
<span class="line">    school<span class="token punctuation">.</span>students<span class="token punctuation">.</span>isEmpty</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Calling <code>delete()</code> marks your object for deletion, but doesn’t actually complete the deletion until a save happens. Between those two states your object is stored in the <code>deletedModelsArray</code> of your property, and if the deletion is rolled back the object will be moved back from <code>deletedModelsArray</code> to your live data. Alternatively, if you have autosave disabled and don’t call <code>save()</code> manually, your deletions will automatically be rolled back.</p></div><p>If you’re deleting an object that has relationships, SwiftData will act on those relationships as part of the deletion – that’s the <code>.nullify</code> delete rule by default, but you might also have requested <code>.cascade</code> or one of the others. If you have a cascade delete in place, SwiftData will automatically continue the cascade down through all objects in a chain: deleting a <code>School</code> might delete all its students, and deleting students might delete all their exam results, for example.</p>`,12);function b(o,g){const a=d("VPCard");return r(),l("div",null,[t("h1",h,[t("a",k,[t("span",null,c(o.$frontmatter.title)+" 관련",1)])]),n(a,e(s({title:"SwiftData by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftdata/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),m,w,n(a,e(s({title:"How to delete a SwiftData object | SwiftData by Example",desc:"How to delete a SwiftData object",link:"https://hackingwithswift.com/quick-start/swiftdata/how-to-delete-a-swiftdata-object",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f])}const j=i(u,[["render",b],["__file","how-to-delete-a-swiftdata-object.html.vue"]]),S=JSON.parse('{"path":"/hackingwithswift.com/swiftdata/how-to-delete-a-swiftdata-object.html","title":"How to delete a SwiftData object","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to delete a SwiftData object","description":"Article(s) > How to delete a SwiftData object","category":["Swift","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftdata","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to delete a SwiftData object"},{"property":"og:description","content":"How to delete a SwiftData object"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-delete-a-swiftdata-object.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftdata/how-to-delete-a-swiftdata-object.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to delete a SwiftData object"}],["meta",{"property":"og:description","content":"Article(s) > How to delete a SwiftData object"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftdata"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to delete a SwiftData object\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]],"date":"2023-09-30T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"hackingwithswift.com/swiftdata/how-to-delete-a-swiftdata-object.md","localizedDate":"2023년 9월 30일","excerpt":"\\n"}');export{j as comp,S as data};
