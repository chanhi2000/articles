import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as n,t as p,e as a,n as t,g as e,f as l,r,o as u}from"./app-BgNevrm5.js";const d={},k={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},h=n("nav",{class:"table-of-contents"},[n("ul")],-1),w=n("hr",null,null,-1),v=l(`<p>Updated for Xcode 15</p><p>SwiftUI doesn&#39;t have a built-in way to detect the user rotating their device between portrait and landscape orientation, but we can make one using a custom modifier by responding to the <code>UIDevice.orientationDidChangeNotification</code> notification.</p><p>This takes three steps:</p><ol><li>Creating a custom view modifier that watches for orientation changes and runs a callback function when it happens. It&#39;s not required, but we&#39;re going to make the callback accept a <code>UIDeviceOrientation</code> as its only parameter, just in case you need to know the current orientation.</li><li>Wrapping that view modifier up in a <code>View</code> extension so that it&#39;s easier to call.</li><li>Using your custom modifier in a view of your choosing.</li></ol><div class="hint-container important"><p class="hint-container-title">Important</p><p>At the time of writing view modifiers do <em>not</em> work with <code>onReceive()</code> unless you first add <code>onAppear()</code>, which is why it appears above. Yes, it&#39;s empty, but it acts as a workaround for the problem.</p></div><p>Here&#39;s a complete code sample:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Our custom view modifier to track rotation and</span></span>
<span class="line"><span class="token comment">// call our action</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">DeviceRotationViewModifier</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">UIDeviceOrientation</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        content</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onAppear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">publisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">UIDevice</span><span class="token punctuation">.</span>orientationDidChangeNotification<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line">                <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">UIDevice</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>orientation<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A View wrapper to make the modifier easier to use</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">onRotate</span><span class="token punctuation">(</span>perform action<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">UIDeviceOrientation</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">DeviceRotationViewModifier</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// An example view to demonstrate the solution</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> orientation <span class="token operator">=</span> <span class="token class-name">UIDeviceOrientation</span><span class="token punctuation">.</span>unknown</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> orientation<span class="token punctuation">.</span>isPortrait <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Portrait&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> orientation<span class="token punctuation">.</span>isLandscape <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Landscape&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> orientation<span class="token punctuation">.</span>isFlat <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Flat&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span>onRotate <span class="token punctuation">{</span> newOrientation <span class="token keyword">in</span></span>
<span class="line">            orientation <span class="token operator">=</span> newOrientation</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-detect-device-rotation-1~dark.png" alt="An iPhone in portait orientation showing the word “Portrait” beside another iPhone in landscape orientation showing the word “Landscape”." tabindex="0" loading="lazy"><figcaption>An iPhone in portait orientation showing the word “Portrait” beside another iPhone in landscape orientation showing the word “Landscape”.</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This may not work while your app is connected to Xcode&#39;s debugger – try pushing your app to a real device, then running it manually rather than via Xcode.</p></div><p>Please remember that device orientation isn&#39;t quite as useful as you might expect. Yes, on iPhone a landscape orientation means you have more horizontal space than vertical, but on iPad it&#39;s possible for your app to be running in landscape while in split-screen mode – technically the whole screen still has a larger width than height, but the actual space allocated to our app is only a small slice of that width.</p>`,10),g={class:"hint-container details"},f=n("summary",null,"Similar solutions…",-1);function b(o,y){const s=r("VPCard");return u(),c("div",null,[n("h1",k,[n("a",m,[n("span",null,p(o.$frontmatter.title)+" 관련",1)])]),a(s,t(e({title:"SwiftUI by Example",desc:"Back to Home",link:"/hackingwithswift.com/swiftui/README.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(174,10,10,0.2)"})),null,16),h,w,a(s,t(e({title:"How to detect device rotation | SwiftUI by Example",desc:"How to detect device rotation",link:"https://hackingwithswift.com/quick-start/swiftui/how-to-detect-device-rotation",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,n("details",g,[f,a(s,t(e({title:"How to detect the location of a tap inside a view | SwiftUI by Example",desc:"How to detect the location of a tap inside a view",link:"/hackingwithswift.com/swiftui/how-to-detect-the-location-of-a-tap-inside-a-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to detect shake gestures | SwiftUI by Example",desc:"How to detect shake gestures",link:"/hackingwithswift.com/swiftui/how-to-detect-shake-gestures.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to detect the user hovering over a view | SwiftUI by Example",desc:"How to detect the user hovering over a view",link:"/hackingwithswift.com/swiftui/how-to-detect-the-user-hovering-over-a-view.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to detect dark mode | SwiftUI by Example",desc:"How to detect dark mode",link:"/hackingwithswift.com/swiftui/how-to-detect-dark-mode.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(s,t(e({title:"How to detect and respond to key press events | SwiftUI by Example",desc:"How to detect and respond to key press events",link:"/hackingwithswift.com/swiftui/how-to-detect-and-respond-to-key-press-events.md",logo:"https://hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16)])])}const H=i(d,[["render",b],["__file","how-to-detect-device-rotation.html.vue"]]),U=JSON.parse('{"path":"/hackingwithswift.com/swiftui/how-to-detect-device-rotation.html","title":"How to detect device rotation","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to detect device rotation","description":"Article(s) > How to detect device rotation","category":["Swift","SwiftUI","Article(s)"],"tag":["blog","hackingwithswift.com","crashcourse","swift","swiftui","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"Article(s) > How to detect device rotation"},{"property":"og:description","content":"How to detect device rotation"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-device-rotation.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/hackingwithswift.com/swiftui/how-to-detect-device-rotation.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to detect device rotation"}],["meta",{"property":"og:description","content":"Article(s) > How to detect device rotation"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-detect-device-rotation-1~dark.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"hackingwithswift.com"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to detect device rotation\\",\\"image\\":[\\"https://hackingwithswift.com/img/books/quick-start/swiftui/how-to-detect-device-rotation-1~dark.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"hackingwithswift.com/swiftui/how-to-detect-device-rotation.md","excerpt":"\\n"}');export{H as comp,U as data};
